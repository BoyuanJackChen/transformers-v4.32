[
    {
        "task_id": 1501,
        "prompt": "Complete the Python function given the prompt below:Tavas is a strange creature. Usually \"zzz\" comes out of people's mouth while sleeping, but string s of length n comes out from Tavas' mouth instead. [Image] \nToday Tavas fell asleep in Malekas' place. While he was sleeping, Malekas did a little process on s. Malekas has a favorite string p. He determined all positions x_1 < x_2 <... < x_{k} where p matches s. More formally, for each x_{i} (1 \u2264 i \u2264 k) he condition s_{x}_{i}s_{x}_{i} + 1... s_{x}_{i} + |p| - 1 = p is fullfilled.\nThen Malekas wrote down one of subsequences of x_1, x_2,... x_{k} (possibly, he didn't write anything) on a piece of paper. Here a sequence b is a subsequence of sequence a if and only if we can turn a into b by removing some of its elements (maybe no one of them or all).\nAfter Tavas woke up, Malekas told him everything. He couldn't remember string s, but he knew that both p and s only contains lowercase English letters and also he had the subsequence he had written on that piece of paper.\nTavas wonders, what is the number of possible values of s? He asked SaDDas, but he wasn't smart enough to solve this. So, Tavas asked you to calculate this number for him.\nAnswer can be very large, so Tavas wants you to print the answer modulo 10^9 + 7.\n-----Input-----\nThe first line contains two integers n and m, the length of s and the length of the subsequence Malekas wrote down (1 \u2264 n \u2264 10^6 and 0 \u2264 m \u2264 n - |p| + 1).\nThe second line contains string p (1 \u2264 |p| \u2264 n).\nThe next line contains m space separated integers y_1, y_2,..., y_{m}, Malekas' subsequence (1 \u2264 y_1 < y_2 <... < y_{m} \u2264 n - |p| + 1).\n-----Output-----\nIn a single line print the answer modulo 1000 000 007.\n-----Examples-----\nInput\n6 2\nioi\n1 3\nOutput\n26\nInput\n5 2\nioi\n1 2\nOutput\n0\n-----Note-----\nIn the first sample test all strings of form \"ioioi?\" where the question mark replaces arbitrary English letter satisfy.\nHere |x| denotes the length of string x.\nPlease note that it's possible that there is no such string (answer is 0).\n\ndef",
        "answer": "def solution(n, m, p, s):\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 1502,
        "prompt": "Complete the Python function given the prompt below:[Image] \n-----Input-----\nThe input contains a single integer $a$ ($0 \\le a \\le 15$).\n-----Output-----\nOutput a single integer.\n-----Example-----\nInput\n3\nOutput\n13\n\ndef",
        "answer": "def f(a):\n    if a == 0:\n        return 0\n    elif a == 1:\n        return 1\n    else:\n        return f(a-1) + f(a-2)",
        "difficulty": "interview"
    },
    {
        "task_id": 1503,
        "prompt": "Complete the Python function given the prompt below:Acingel is a small town. There was only one doctor here\u00a0\u2014 Miss Ada. She was very friendly and nobody has ever said something bad about her, so who could've expected that Ada will be found dead in her house? Mr Gawry, world-famous detective, is appointed to find the criminal. He asked $m$ neighbours of Ada about clients who have visited her in that unlucky day. Let's number the clients from $1$ to $n$. Each neighbour's testimony is a permutation of these numbers, which describes the order in which clients have been seen by the asked neighbour.\nHowever, some facts are very suspicious\u00a0\u2013 how it is that, according to some of given permutations, some client has been seen in the morning, while in others he has been seen in the evening? \"In the morning some of neighbours must have been sleeping!\"\u00a0\u2014 thinks Gawry\u00a0\u2014 \"and in the evening there's been too dark to see somebody's face...\". Now he wants to delete some prefix and some suffix (both prefix and suffix can be empty) in each permutation, so that they'll be non-empty and equal to each other after that\u00a0\u2014 some of the potential criminals may disappear, but the testimony won't stand in contradiction to each other.\nIn how many ways he can do it? Two ways are called different if the remaining common part is different.\n-----Input-----\nThe first line contains two integers $n$ and $m$ ($1 \\le n \\le 100\\,000$, $1 \\le m \\le 10$)\u00a0\u2014 the number of suspects and the number of asked neighbors.\nEach of the next $m$ lines contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le n$). It is guaranteed that these integers form a correct permutation (that is, each number from $1$ to $n$ appears exactly once).\n-----Output-----\nOutput a single integer denoting the number of ways to delete some prefix and some suffix of each permutation (possibly empty), such that the remaining parts will be equal and non-empty.\n-----Examples-----\nInput\n3 2\n1 2 3\n2 3 1\nOutput\n4\nInput\n5 6\n1 2 3 4 5\n2 3 1 4 5\n3 4 5 1 2\n3 5 4 2 1\n2 3 5 4 1\n1 2 3 4 5\nOutput\n5\nInput\n2 2\n1 2\n2 1\nOutput\n2\n-----Note-----\nIn the first example, all possible common parts are $[1]$, $[2]$, $[3]$ and $[2, 3]$.\nIn the second and third examples, you can only leave common parts of length $1$.\n\ndef",
        "answer": "def solve(n, m, a):\n    a.sort()\n    res = 0\n    for i in range(m):\n        for j in range(i + 1, m):\n            if a[j] - a[i] > 1:\n                break\n            res += 1\n    return res",
        "difficulty": "interview"
    },
    {
        "task_id": 1504,
        "prompt": "Complete the Python function given the prompt below:You are given two lists of segments $[al_1, ar_1], [al_2, ar_2], \\dots, [al_n, ar_n]$ and $[bl_1, br_1], [bl_2, br_2], \\dots, [bl_n, br_n]$.\nInitially, all segments $[al_i, ar_i]$ are equal to $[l_1, r_1]$ and all segments $[bl_i, br_i]$ are equal to $[l_2, r_2]$.\nIn one step, you can choose one segment (either from the first or from the second list) and extend it by $1$. In other words, suppose you've chosen segment $[x, y]$ then you can transform it either into $[x - 1, y]$ or into $[x, y + 1]$.\nLet's define a total intersection $I$ as the sum of lengths of intersections of the corresponding pairs of segments, i.e. $\\sum\\limits_{i=1}^{n}{\\text{intersection_length}([al_i, ar_i], [bl_i, br_i])}$. Empty intersection has length $0$ and length of a segment $[x, y]$ is equal to $y - x$.\nWhat is the minimum number of steps you need to make $I$ greater or equal to $k$?\n-----Input-----\nThe first line contains the single integer $t$ ($1 \\le t \\le 1000$)\u00a0\u2014 the number of test cases.\nThe first line of each test case contains two integers $n$ and $k$ ($1 \\le n \\le 2 \\cdot 10^5$; $1 \\le k \\le 10^9$)\u00a0\u2014 the length of lists and the minimum required total intersection.\nThe second line of each test case contains two integers $l_1$ and $r_1$ ($1 \\le l_1 \\le r_1 \\le 10^9$)\u00a0\u2014 the segment all $[al_i, ar_i]$ are equal to initially.\nThe third line of each test case contains two integers $l_2$ and $r_2$ ($1 \\le l_2 \\le r_2 \\le 10^9$)\u00a0\u2014 the segment all $[bl_i, br_i]$ are equal to initially.\nIt's guaranteed that the sum of $n$ doesn't exceed $2 \\cdot 10^5$.\n-----Output-----\nPrint $t$ integers\u00a0\u2014 one per test case. For each test case, print the minimum number of step you need to make $I$ greater or equal to $k$.\n-----Example-----\nInput\n3\n3 5\n1 2\n3 4\n2 1000000000\n1 1\n999999999 999999999\n10 3\n5 10\n7 8\nOutput\n7\n2000000000\n0\n-----Note-----\nIn the first test case, we can achieve total intersection $5$, for example, using next strategy:   make $[al_1, ar_1]$ from $[1, 2]$ to $[1, 4]$ in $2$ steps;  make $[al_2, ar_2]$ from $[1, 2]$ to $[1, 3]$ in $1$ step;  make $[bl_1, br_1]$ from $[3, 4]$ to $[1, 4]$ in $2$ steps;  make $[bl_2, br_2]$ from $[3, 4]$ to $[1, 4]$ in $2$ steps.  In result, $I = \\text{intersection_length}([al_1, ar_1], [bl_1, br_1]) + \\text{intersection_length}([al_2, ar_2], [bl_2, br_2]) + \\\\ + \\text{intersection_length}([al_3, ar_3], [bl_3, br_3]) = 3 + 2 + 0 = 5$\nIn the second test case, we can make $[al_1, ar_1] = [0, 1000000000]$ in $1000000000$ steps and $[bl_1, br_1] = [0, 1000000000]$ in $1000000000$ steps.\nIn the third test case, the total intersection $I$ is already equal to $10 > 3$, so we don't need to do any steps.\n\ndef",
        "answer": "def intersection_length(l1, r1, l2, r2):\n    return min(r1, r2) - max(l1, l2)",
        "difficulty": "interview"
    },
    {
        "task_id": 1505,
        "prompt": "Complete the Python function given the prompt below:Petya has recently started working as a programmer in the IT city company that develops computer games.\nBesides game mechanics implementation to create a game it is necessary to create tool programs that can be used by game designers to create game levels. Petya's first assignment is to create a tool that allows to paint different arrows on the screen.\nA user of this tool will choose a point on the screen, specify a vector (the arrow direction) and vary several parameters to get the required graphical effect. In the first version of the program Petya decided to limit parameters of the arrow by the following: a point with coordinates (px, py), a nonzero vector with coordinates (vx, vy), positive scalars a, b, c, d, a > c.\nThe produced arrow should have the following properties. The arrow consists of a triangle and a rectangle. The triangle is isosceles with base of length a and altitude of length b perpendicular to the base. The rectangle sides lengths are c and d. Point (px, py) is situated in the middle of the triangle base and in the middle of side of rectangle that has length c. Area of intersection of the triangle and the rectangle is zero. The direction from (px, py) point to the triangle vertex opposite to base containing the point coincides with direction of (vx, vy) vector.\nEnumerate the arrow points coordinates in counter-clockwise order starting from the tip.\n [Image] \n-----Input-----\nThe only line of the input contains eight integers px, py, vx, vy ( - 1000 \u2264 px, py, vx, vy \u2264 1000, vx^2 + vy^2 > 0), a, b, c, d (1 \u2264 a, b, c, d \u2264 1000, a > c).\n-----Output-----\nOutput coordinates of the arrow points in counter-clockwise order. Each line should contain two coordinates, first x, then y. Relative or absolute error should not be greater than 10^{ - 9}.\n-----Examples-----\nInput\n8 8 0 2 8 3 4 5\nOutput\n8.000000000000 11.000000000000\n4.000000000000 8.000000000000\n6.000000000000 8.000000000000\n6.000000000000 3.000000000000\n10.000000000000 3.000000000000\n10.000000000000 8.000000000000\n12.000000000000 8.000000000000\n\ndef",
        "answer": "def paint_arrow(px, py, vx, vy, a, b, c, d):\n    # your code here\n    return []",
        "difficulty": "interview"
    },
    {
        "task_id": 1506,
        "prompt": "Complete the Python function given the prompt below:You are given an array a of length n. We define f_{a} the following way:\n  Initially f_{a} = 0, M = 1;  for every 2 \u2264 i \u2264 n if a_{M} < a_{i} then we set f_{a} = f_{a} + a_{M} and then set M = i. \nCalculate the sum of f_{a} over all n! permutations of the array a modulo 10^9 + 7.\nNote: two elements are considered different if their indices differ, so for every array a there are exactly n! permutations.\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264  1 000 000) \u2014 the size of array a.\nSecond line contains n integers a_1, a_2,..., a_{n} (1 \u2264  a_{i} \u2264  10^9).\n-----Output-----\nPrint the only integer, the sum of f_{a} over all n! permutations of the array a modulo 10^9 + 7.\n-----Examples-----\nInput\n2\n1 3\nOutput\n1\nInput\n3\n1 1 2\nOutput\n4\n-----Note-----\nFor the second example all the permutations are:\n  p = [1, 2, 3] : f_{a} is equal to 1;  p = [1, 3, 2] : f_{a} is equal to 1;  p = [2, 1, 3] : f_{a} is equal to 1;  p = [2, 3, 1] : f_{a} is equal to 1;  p = [3, 1, 2] : f_{a} is equal to 0;  p = [3, 2, 1] : f_{a} is equal to 0. \nWhere p is the array of the indices of initial array a. The sum of f_{a} is equal to 4.\n\ndef",
        "answer": "def f(n, a):\n    f = 0\n    M = 1\n    for i in range(2, n+1):\n        if a[M] < a[i]:\n            f += a[M]\n            M = i\n    return f",
        "difficulty": "interview"
    },
    {
        "task_id": 1507,
        "prompt": "Complete the Python function given the prompt below:[Image] \nIt's the end of July\u00a0\u2013 the time when a festive evening is held at Jelly Castle! Guests from all over the kingdom gather here to discuss new trends in the world of confectionery. Yet some of the things discussed here are not supposed to be disclosed to the general public: the information can cause discord in the kingdom of Sweetland in case it turns out to reach the wrong hands. So it's a necessity to not let any uninvited guests in.\nThere are 26 entrances in Jelly Castle, enumerated with uppercase English letters from A to Z. Because of security measures, each guest is known to be assigned an entrance he should enter the castle through. The door of each entrance is opened right before the first guest's arrival and closed right after the arrival of the last guest that should enter the castle through this entrance. No two guests can enter the castle simultaneously.\nFor an entrance to be protected from possible intrusion, a candy guard should be assigned to it. There are k such guards in the castle, so if there are more than k opened doors, one of them is going to be left unguarded! Notice that a guard can't leave his post until the door he is assigned to is closed.\nSlastyona had a suspicion that there could be uninvited guests at the evening. She knows the order in which the invited guests entered the castle, and wants you to help her check whether there was a moment when more than k doors were opened.\n-----Input-----\nTwo integers are given in the first string: the number of guests n and the number of guards k (1 \u2264 n \u2264 10^6, 1 \u2264 k \u2264 26).\nIn the second string, n uppercase English letters s_1s_2... s_{n} are given, where s_{i} is the entrance used by the i-th guest.\n-----Output-----\nOutput \u00abYES\u00bb if at least one door was unguarded during some time, and \u00abNO\u00bb otherwise.\nYou can output each letter in arbitrary case (upper or lower).\n-----Examples-----\nInput\n5 1\nAABBB\nOutput\nNO\nInput\n5 1\nABABB\nOutput\nYES\n-----Note-----\nIn the first sample case, the door A is opened right before the first guest's arrival and closed when the second guest enters the castle. The door B is opened right before the arrival of the third guest, and closed after the fifth one arrives. One guard can handle both doors, as the first one is closed before the second one is opened.\nIn the second sample case, the door B is opened before the second guest's arrival, but the only guard can't leave the door A unattended, as there is still one more guest that should enter the castle through this door.\n\ndef",
        "answer": "def unguarded(entrances, guards):\n    guards_dict = {}\n    for i in range(len(guards)):\n        guards_dict[guards[i]] = i\n    for i in range(len(entrances)):\n        if guards_dict[entrances[i]] > i:\n            return \"YES\"\n    return \"NO\"\n",
        "difficulty": "interview"
    },
    {
        "task_id": 1508,
        "prompt": "Complete the Python function given the prompt below:You want to arrange n integers a_1, a_2,..., a_{n} in some order in a row. Let's define the value of an arrangement as the sum of differences between all pairs of adjacent integers.\nMore formally, let's denote some arrangement as a sequence of integers x_1, x_2,..., x_{n}, where sequence x is a permutation of sequence a. The value of such an arrangement is (x_1 - x_2) + (x_2 - x_3) +... + (x_{n} - 1 - x_{n}).\nFind the largest possible value of an arrangement. Then, output the lexicographically smallest sequence x that corresponds to an arrangement of the largest possible value.\n-----Input-----\nThe first line of the input contains integer n (2 \u2264 n \u2264 100). The second line contains n space-separated integers a_1, a_2,..., a_{n} (|a_{i}| \u2264 1000).\n-----Output-----\nPrint the required sequence x_1, x_2,..., x_{n}. Sequence x should be the lexicographically smallest permutation of a that corresponds to an arrangement of the largest possible value.\n-----Examples-----\nInput\n5\n100 -100 50 0 -50\nOutput\n100 -50 0 50 -100 \n-----Note-----\nIn the sample test case, the value of the output arrangement is (100 - ( - 50)) + (( - 50) - 0) + (0 - 50) + (50 - ( - 100)) = 200. No other arrangement has a larger value, and among all arrangements with the value of 200, the output arrangement is the lexicographically smallest one.\nSequence x_1, x_2,..., x_{p} is lexicographically smaller than sequence y_1, y_2,..., y_{p} if there exists an integer r (0 \u2264 r < p) such that x_1 = y_1, x_2 = y_2,..., x_{r} = y_{r} and x_{r} + 1 < y_{r} + 1.\n\ndef",
        "answer": "def arrange(a):\n    n = len(a)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = a[i]\n    for i in range(n):\n        for j in range(i+1, n):\n            dp[i][j] = abs(a[i] - a[j]) + dp[i][j-1]\n    for i in range(n):\n        for j in range(i+1, n):\n            dp[i][j] = abs(a[i] - a[j]) + dp[i][j-1]\n    for i in range(n):\n        for j in range(i+1, n):\n            dp[i][j] = abs(a[i] - a[j]) + dp[i][j-1]\n    for i in range(n):\n        for j in range(i+1, n):\n            dp[i][j] = abs(a[i] - a[j]) + dp[i][j-1]\n    for i in range(n):\n        for j in range(i+1, n):\n            dp[i][j] = abs(a[i] - a[j]) + dp[i][j-1]\n    for i in range(n):\n        for j in range(i+1, n):\n            dp[i][j] = abs(a[i] - a[j]) + dp[i][j-1]\n    for i in range(n):\n        for j in range(i+1, n):\n            dp[i][j] = abs(a",
        "difficulty": "interview"
    },
    {
        "task_id": 1509,
        "prompt": "Complete the Python function given the prompt below:The Kingdom of Kremland is a tree (a connected undirected graph without cycles) consisting of $n$ vertices. Each vertex $i$ has its own value $a_i$. All vertices are connected in series by edges. Formally, for every $1 \\leq i < n$ there is an edge between the vertices of $i$ and $i+1$.\nDenote the function $f(l, r)$, which takes two integers $l$ and $r$ ($l \\leq r$):\n \u00a0\u00a0 We leave in the tree only vertices whose values \u200b\u200brange from $l$ to $r$. \u00a0\u00a0 The value of the function will be the number of connected components in the new graph. \nYour task is to calculate the following sum: $$\\sum_{l=1}^{n} \\sum_{r=l}^{n} f(l, r) $$\n-----Input-----\nThe first line contains a single integer $n$ ($1 \\leq n \\leq 10^5$)\u00a0\u2014 the number of vertices in the tree.\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq n$)\u00a0\u2014 the values of the vertices.\n-----Output-----\nPrint one number\u00a0\u2014 the answer to the problem.\n-----Examples-----\nInput\n3\n2 1 3\nOutput\n7\nInput\n4\n2 1 1 3\nOutput\n11\nInput\n10\n1 5 2 5 5 3 10 6 5 1\nOutput\n104\n-----Note-----\nIn the first example, the function values \u200b\u200bwill be as follows:   $f(1, 1)=1$ (there is only a vertex with the number $2$, which forms one component)  $f(1, 2)=1$ (there are vertices $1$ and $2$ that form one component)  $f(1, 3)=1$ (all vertices remain, one component is obtained)  $f(2, 2)=1$ (only vertex number $1$)  $f(2, 3)=2$ (there are vertices $1$ and $3$ that form two components)  $f(3, 3)=1$ (only vertex $3$)  Totally out $7$.\nIn the second example, the function values \u200b\u200bwill be as follows:   $f(1, 1)=1$  $f(1, 2)=1$  $f(1, 3)=1$  $f(1, 4)=1$  $f(2, 2)=1$  $f(2, 3)=2$  $f(2, 4)=2$  $f(3, 3)=1$  $f(3, 4)=1$  $f(4, 4)=0$ (there is no vertex left, so the number of components is $0$)  Totally out $11$.\n\ndef",
        "answer": "def f(l, r):\n    return len(list(filter(lambda x: l <= x <= r, a)))",
        "difficulty": "interview"
    },
    {
        "task_id": 1510,
        "prompt": "Complete the Python function given the prompt below:Devu and his brother love each other a lot. As they are super geeks, they only like to play with arrays. They are given two arrays a and b by their father. The array a is given to Devu and b to his brother. \nAs Devu is really a naughty kid, he wants the minimum value of his array a should be at least as much as the maximum value of his brother's array b. \nNow you have to help Devu in achieving this condition. You can perform multiple operations on the arrays. In a single operation, you are allowed to decrease or increase any element of any of the arrays by 1. Note that you are allowed to apply the operation on any index of the array multiple times.\nYou need to find minimum number of operations required to satisfy Devu's condition so that the brothers can play peacefully without fighting. \n-----Input-----\nThe first line contains two space-separated integers n, m (1 \u2264 n, m \u2264 10^5). The second line will contain n space-separated integers representing content of the array a (1 \u2264 a_{i} \u2264 10^9). The third line will contain m space-separated integers representing content of the array b (1 \u2264 b_{i} \u2264 10^9).\n-----Output-----\nYou need to output a single integer representing the minimum number of operations needed to satisfy Devu's condition.\n-----Examples-----\nInput\n2 2\n2 3\n3 5\nOutput\n3\nInput\n3 2\n1 2 3\n3 4\nOutput\n4\nInput\n3 2\n4 5 6\n1 2\nOutput\n0\n-----Note-----\nIn example 1, you can increase a_1 by 1 and decrease b_2 by 1 and then again decrease b_2 by 1. Now array a will be [3; 3] and array b will also be [3; 3]. Here minimum element of a is at least as large as maximum element of b. So minimum number of operations needed to satisfy Devu's condition are 3.\nIn example 3, you don't need to do any operation, Devu's condition is already satisfied.\n\ndef",
        "answer": "def devu(a,b):\n    a.sort()\n    b.sort()\n    count=0\n    for i in range(len(a)):\n        if a[i]<b[i]:\n            count+=1\n    return count\nn,m=map(int,input().split())\na=list(map(int,input().split()))\nb=list(map(int,input().split()))\nprint(devu(a,b))\n",
        "difficulty": "interview"
    },
    {
        "task_id": 1511,
        "prompt": "Complete the Python function given the prompt below:The research center Q has developed a new multi-core processor. The processor consists of n cores and has k cells of cache memory. Consider the work of this processor.\nAt each cycle each core of the processor gets one instruction: either do nothing, or the number of the memory cell (the core will write an information to the cell). After receiving the command, the core executes it immediately. Sometimes it happens that at one cycle, multiple cores try to write the information into a single cell. Unfortunately, the developers did not foresee the possibility of resolving conflicts between cores, so in this case there is a deadlock: all these cores and the corresponding memory cell are locked forever. Each of the locked cores ignores all further commands, and no core in the future will be able to record an information into the locked cell. If any of the cores tries to write an information into some locked cell, it is immediately locked.\nThe development team wants to explore the deadlock situation. Therefore, they need a program that will simulate the processor for a given set of instructions for each core within m cycles. You're lucky, this interesting work is entrusted to you. According to the instructions, during the m cycles define for each core the number of the cycle, during which it will become locked. It is believed that initially all cores and all memory cells are not locked.\n-----Input-----\nThe first line contains three integers n, m, k (1 \u2264 n, m, k \u2264 100). Then follow n lines describing instructions. The i-th line contains m integers: x_{i}1, x_{i}2,..., x_{im} (0 \u2264 x_{ij} \u2264 k), where x_{ij} is the instruction that must be executed by the i-th core at the j-th cycle. If x_{ij} equals 0, then the corresponding instruction is \u00abdo nothing\u00bb. But if x_{ij} is a number from 1 to k, then the corresponding instruction is \u00abwrite information to the memory cell number x_{ij}\u00bb.\nWe assume that the cores are numbered from 1 to n, the work cycles are numbered from 1 to m and the memory cells are numbered from 1 to k.\n-----Output-----\nPrint n lines. In the i-th line print integer t_{i}. This number should be equal to 0 if the i-th core won't be locked, or it should be equal to the number of the cycle when this core will be locked.\n-----Examples-----\nInput\n4 3 5\n1 0 0\n1 0 2\n2 3 1\n3 2 0\nOutput\n1\n1\n3\n0\nInput\n3 2 2\n1 2\n1 2\n2 2\nOutput\n1\n1\n0\nInput\n1 1 1\n0\nOutput\n0\n\ndef",
        "answer": "def deadlock(n, m, k, x):\n    c = [0] * n\n    for i in range(m):\n        for j in range(n):\n            if x[i][j]!= 0:\n                c[j] = max(c[j], x[i][j])\n    for i in range(n):\n        if c[i]!= 0:\n            return i + 1\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 1512,
        "prompt": "Complete the Python function given the prompt below:You are given a permutation p of length n. Remove one element from permutation to make the number of records the maximum possible.\nWe remind that in a sequence of numbers a_1, a_2,..., a_{k} the element a_{i} is a record if for every integer j (1 \u2264 j < i) the following holds: a_{j} < a_{i}. \n-----Input-----\nThe first line contains the only integer n (1 \u2264 n \u2264 10^5)\u00a0\u2014 the length of the permutation.\nThe second line contains n integers p_1, p_2,..., p_{n} (1 \u2264 p_{i} \u2264 n)\u00a0\u2014 the permutation. All the integers are distinct.\n-----Output-----\nPrint the only integer\u00a0\u2014 the element that should be removed to make the number of records the maximum possible. If there are multiple such elements, print the smallest one.\n-----Examples-----\nInput\n1\n1\nOutput\n1\nInput\n5\n5 1 2 3 4\nOutput\n5\n-----Note-----\nIn the first example the only element can be removed.\n\ndef",
        "answer": "def solution(n, p):\n    p.sort()\n    for i in range(n):\n        if p[i] < i+1:\n            return i+1\n    return n+1\n",
        "difficulty": "interview"
    },
    {
        "task_id": 1513,
        "prompt": "Complete the Python function given the prompt below:You have a long stick, consisting of $m$ segments enumerated from $1$ to $m$. Each segment is $1$ centimeter long. Sadly, some segments are broken and need to be repaired.\nYou have an infinitely long repair tape. You want to cut some pieces from the tape and use them to cover all of the broken segments. To be precise, a piece of tape of integer length $t$ placed at some position $s$ will cover segments $s, s+1, \\ldots, s+t-1$.\nYou are allowed to cover non-broken segments; it is also possible that some pieces of tape will overlap.\nTime is money, so you want to cut at most $k$ continuous pieces of tape to cover all the broken segments. What is the minimum total length of these pieces?\n-----Input-----\nThe first line contains three integers $n$, $m$ and $k$ ($1 \\le n \\le 10^5$, $n \\le m \\le 10^9$, $1 \\le k \\le n$)\u00a0\u2014 the number of broken segments, the length of the stick and the maximum number of pieces you can use.\nThe second line contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($1 \\le b_i \\le m$)\u00a0\u2014 the positions of the broken segments. These integers are given in increasing order, that is, $b_1 < b_2 < \\ldots < b_n$.\n-----Output-----\nPrint the minimum total length of the pieces.\n-----Examples-----\nInput\n4 100 2\n20 30 75 80\nOutput\n17\nInput\n5 100 3\n1 2 4 60 87\nOutput\n6\n-----Note-----\nIn the first example, you can use a piece of length $11$ to cover the broken segments $20$ and $30$, and another piece of length $6$ to cover $75$ and $80$, for a total length of $17$.\nIn the second example, you can use a piece of length $4$ to cover broken segments $1$, $2$ and $4$, and two pieces of length $1$ to cover broken segments $60$ and $87$.\n\ndef",
        "answer": "def repair_stick(broken_segments, stick_length, max_pieces):\n    broken_segments.sort()\n    i = 0\n    j = len(broken_segments) - 1\n    min_length = 0\n    while i <= j:\n        min_length += broken_segments[j] - broken_segments[i] + 1\n        i += 1\n        j -= 1\n    return min_length",
        "difficulty": "interview"
    },
    {
        "task_id": 1514,
        "prompt": "Complete the Python function given the prompt below:A permutation of length $k$ is a sequence of $k$ integers from $1$ to $k$ containing each integer exactly once. For example, the sequence $[3, 1, 2]$ is a permutation of length $3$.\nWhen Neko was five, he thought of an array $a$ of $n$ positive integers and a permutation $p$ of length $n - 1$. Then, he performed the following:\n  Constructed an array $b$ of length $n-1$, where $b_i = \\min(a_i, a_{i+1})$.  Constructed an array $c$ of length $n-1$, where $c_i = \\max(a_i, a_{i+1})$.  Constructed an array $b'$ of length $n-1$, where $b'_i = b_{p_i}$.  Constructed an array $c'$ of length $n-1$, where $c'_i = c_{p_i}$. \nFor example, if the array $a$ was $[3, 4, 6, 5, 7]$ and permutation $p$ was $[2, 4, 1, 3]$, then Neko would have constructed the following arrays:\n  $b = [3, 4, 5, 5]$  $c = [4, 6, 6, 7]$  $b' = [4, 5, 3, 5]$  $c' = [6, 7, 4, 6]$ \nThen, he wrote two arrays $b'$ and $c'$ on a piece of paper and forgot about it. 14 years later, when he was cleaning up his room, he discovered this old piece of paper with two arrays $b'$ and $c'$ written on it. However he can't remember the array $a$ and permutation $p$ he used.\nIn case Neko made a mistake and there is no array $a$ and permutation $p$ resulting in such $b'$ and $c'$, print -1. Otherwise, help him recover any possible array $a$. \n-----Input-----\nThe first line contains an integer $n$ ($2 \\leq n \\leq 10^5$)\u00a0\u2014 the number of elements in array $a$.\nThe second line contains $n-1$ integers $b'_1, b'_2, \\ldots, b'_{n-1}$ ($1 \\leq b'_i \\leq 10^9$).\nThe third line contains $n-1$ integers $c'_1, c'_2, \\ldots, c'_{n-1}$ ($1 \\leq c'_i \\leq 10^9$).\n-----Output-----\nIf Neko made a mistake and there is no array $a$ and a permutation $p$ leading to the $b'$ and $c'$, print -1. Otherwise, print $n$ positive integers $a_i$ ($1 \\le a_i \\le 10^9$), denoting the elements of the array $a$.\nIf there are multiple possible solutions, print any of them. \n-----Examples-----\nInput\n5\n4 5 3 5\n6 7 4 6\nOutput\n3 4 6 5 7 \nInput\n3\n2 4\n3 2\nOutput\n-1\nInput\n8\n2 3 1 1 2 4 3\n3 4 4 2 5 5 4\nOutput\n3 4 5 2 1 4 3 2 \n-----Note-----\nThe first example is explained is the problem statement.\nIn the third example, for $a = [3, 4, 5, 2, 1, 4, 3, 2]$, a possible permutation $p$ is $[7, 1, 5, 4, 3, 2, 6]$. In that case, Neko would have constructed the following arrays:\n  $b = [3, 4, 2, 1, 1, 3, 2]$  $c = [4, 5, 5, 2, 4, 4, 3]$  $b' = [2, 3, 1, 1, 2, 4, 3]$  $c' = [3, 4, 4, 2, 5, 5, 4]$\n\ndef",
        "answer": "def arrayPermutation(a, p):\n    b = [min(a[i], a[i+1]) for i in range(len(a)-1)]\n    c = [max(a[i], a[i+1]) for i in range(len(a)-1)]\n    b_p = [b[p[i]] for i in range(len(a)-1)]\n    c_p = [c[p[i]] for i in range(len(a)-1)]\n    if b == b_p and c == c_p:\n        return a\n    else:\n        return -1",
        "difficulty": "interview"
    },
    {
        "task_id": 1515,
        "prompt": "Complete the Python function given the prompt below:Teacher thinks that we make a lot of progress. Now we are even allowed to use decimal notation instead of counting sticks. After the test the teacher promised to show us a \"very beautiful number\". But the problem is, he's left his paper with the number in the teachers' office.\nThe teacher remembers that the \"very beautiful number\" was strictly positive, didn't contain any leading zeroes, had the length of exactly p decimal digits, and if we move the last digit of the number to the beginning, it grows exactly x times. Besides, the teacher is sure that among all such numbers the \"very beautiful number\" is minimal possible.\nThe teachers' office isn't near and the teacher isn't young. But we've passed the test and we deserved the right to see the \"very beautiful number\". Help to restore the justice, find the \"very beautiful number\" for us!\n-----Input-----\nThe single line contains integers p, x (1 \u2264 p \u2264 10^6, 1 \u2264 x \u2264 9).\n-----Output-----\nIf the teacher's made a mistake and such number doesn't exist, then print on a single line \"Impossible\" (without the quotes). Otherwise, print the \"very beautiful number\" without leading zeroes.\n-----Examples-----\nInput\n6 5\nOutput\n142857\nInput\n1 2\nOutput\nImpossible\nInput\n6 4\nOutput\n102564\n-----Note-----\nSample 1: 142857\u00b75 = 714285.\nSample 2: The number that consists of a single digit cannot stay what it is when multiplied by 2, thus, the answer to the test sample is \"Impossible\".\n\ndef",
        "answer": "def beautiful_number(p, x):\n    n = p * x\n    while n > 9:\n        n = n // 10 + n % 10 * 10 ** (p - 1)\n    return n",
        "difficulty": "interview"
    },
    {
        "task_id": 1516,
        "prompt": "Complete the Python function given the prompt below:This problem differs from the next one only in the presence of the constraint on the equal length of all numbers $a_1, a_2, \\dots, a_n$. Actually, this problem is a subtask of the problem D2 from the same contest and the solution of D2 solves this subtask too.\nA team of SIS students is going to make a trip on a submarine. Their target is an ancient treasure in a sunken ship lying on the bottom of the Great Rybinsk sea. Unfortunately, the students don't know the coordinates of the ship, so they asked Meshanya (who is a hereditary mage) to help them. He agreed to help them, but only if they solve his problem.\nLet's denote a function that alternates digits of two numbers $f(a_1 a_2 \\dots a_{p - 1} a_p, b_1 b_2 \\dots b_{q - 1} b_q)$, where $a_1 \\dots a_p$ and $b_1 \\dots b_q$ are digits of two integers written in the decimal notation without leading zeros.\nIn other words, the function $f(x, y)$ alternately shuffles the digits of the numbers $x$ and $y$ by writing them from the lowest digits to the older ones, starting with the number $y$. The result of the function is also built from right to left (that is, from the lower digits to the older ones). If the digits of one of the arguments have ended, then the remaining digits of the other argument are written out. Familiarize with examples and formal definitions of the function below.\nFor example: $$f(1111, 2222) = 12121212$$ $$f(7777, 888) = 7787878$$ $$f(33, 44444) = 4443434$$ $$f(555, 6) = 5556$$ $$f(111, 2222) = 2121212$$\nFormally,  if $p \\ge q$ then $f(a_1 \\dots a_p, b_1 \\dots b_q) = a_1 a_2 \\dots a_{p - q + 1} b_1 a_{p - q + 2} b_2 \\dots a_{p - 1} b_{q - 1} a_p b_q$;  if $p < q$ then $f(a_1 \\dots a_p, b_1 \\dots b_q) = b_1 b_2 \\dots b_{q - p} a_1 b_{q - p + 1} a_2 \\dots a_{p - 1} b_{q - 1} a_p b_q$. \nMishanya gives you an array consisting of $n$ integers $a_i$. All numbers in this array are of equal length (that is, they consist of the same number of digits). Your task is to help students to calculate $\\sum_{i = 1}^{n}\\sum_{j = 1}^{n} f(a_i, a_j)$ modulo $998\\,244\\,353$.\n-----Input-----\nThe first line of the input contains a single integer $n$ ($1 \\le n \\le 100\\,000$) \u2014 the number of elements in the array. The second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$) \u2014 the elements of the array. All numbers $a_1, a_2, \\dots, a_n$ are of equal length (that is, they consist of the same number of digits).\n-----Output-----\nPrint the answer modulo $998\\,244\\,353$.\n-----Examples-----\nInput\n3\n12 33 45\nOutput\n26730\nInput\n2\n123 456\nOutput\n1115598\nInput\n1\n1\nOutput\n11\nInput\n5\n1000000000 1000000000 1000000000 1000000000 1000000000\nOutput\n265359409\n\ndef",
        "answer": "def f(a, b):\n    if len(a) < len(b):\n        a, b = b, a\n    if len(a) == len(b):\n        return int(''.join(a[i] for i in range(len(a)) if i % 2 == 0)) * int(''.join(b[i] for i in range(len(b)) if i % 2 == 1))\n    else:\n        return int(''.join(a[i] for i in range(len(a)) if i % 2 == 0)) * int(''.join(b[i] for i in range(len(b)) if i % 2 == 0)) + int(''.join(a[i] for i in range(len(a)) if i % 2 == 1)) * int(''.join(b[i] for i in range(len(b)) if i % 2 == 1))",
        "difficulty": "interview"
    },
    {
        "task_id": 1517,
        "prompt": "Complete the Python function given the prompt below:Permutation p is an ordered set of integers p_1,  p_2, ...,  p_{n}, consisting of n distinct positive integers, each of them doesn't exceed n. We'll denote the i-th element of permutation p as p_{i}. We'll call number n the size or the length of permutation p_1,  p_2, ...,  p_{n}.\nPetya decided to introduce the sum operation on the set of permutations of length n. Let's assume that we are given two permutations of length n: a_1, a_2,..., a_{n} and b_1, b_2,..., b_{n}. Petya calls the sum of permutations a and b such permutation c of length n, where c_{i} = ((a_{i} - 1 + b_{i} - 1) mod n) + 1 (1 \u2264 i \u2264 n).\nOperation $x \\text{mod} y$ means taking the remainder after dividing number x by number y.\nObviously, not for all permutations a and b exists permutation c that is sum of a and b. That's why Petya got sad and asked you to do the following: given n, count the number of such pairs of permutations a and b of length n, that exists permutation c that is sum of a and b. The pair of permutations x, y (x \u2260 y) and the pair of permutations y, x are considered distinct pairs.\nAs the answer can be rather large, print the remainder after dividing it by 1000000007 (10^9 + 7).\n-----Input-----\nThe single line contains integer n (1 \u2264 n \u2264 16).\n-----Output-----\nIn the single line print a single non-negative integer \u2014 the number of such pairs of permutations a and b, that exists permutation c that is sum of a and b, modulo 1000000007 (10^9 + 7).\n-----Examples-----\nInput\n3\nOutput\n18\nInput\n5\nOutput\n1800\n\ndef",
        "answer": "def permutation_sum(n):\n    return n * (n + 1) // 2",
        "difficulty": "interview"
    },
    {
        "task_id": 1518,
        "prompt": "Complete the Python function given the prompt below:You have an array a[1], a[2],..., a[n], containing distinct integers from 1 to n. Your task is to sort this array in increasing order with the following operation (you may need to apply it multiple times):\n  choose two indexes, i and j (1 \u2264 i < j \u2264 n; (j - i + 1) is a prime number);  swap the elements on positions i and j; in other words, you are allowed to apply the following sequence of assignments: tmp = a[i], a[i] = a[j], a[j] = tmp (tmp is a temporary variable). \nYou do not need to minimize the number of used operations. However, you need to make sure that there are at most 5n operations.\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 10^5). The next line contains n distinct integers a[1], a[2],..., a[n] (1 \u2264 a[i] \u2264 n).\n-----Output-----\nIn the first line, print integer k (0 \u2264 k \u2264 5n) \u2014 the number of used operations. Next, print the operations. Each operation must be printed as \"i j\" (1 \u2264 i < j \u2264 n; (j - i + 1) is a prime).\nIf there are multiple answers, you can print any of them.\n-----Examples-----\nInput\n3\n3 2 1\nOutput\n1\n1 3\nInput\n2\n1 2\nOutput\n0\nInput\n4\n4 2 3 1\nOutput\n3\n2 4\n1 2\n2 4\n\ndef",
        "answer": "def swap(a, i, j):\n    a[i], a[j] = a[j], a[i]",
        "difficulty": "interview"
    },
    {
        "task_id": 1519,
        "prompt": "Complete the Python function given the prompt below:Vasya has recently got a job as a cashier at a local store. His day at work is $L$ minutes long. Vasya has already memorized $n$ regular customers, the $i$-th of which comes after $t_{i}$ minutes after the beginning of the day, and his service consumes $l_{i}$ minutes. It is guaranteed that no customer will arrive while Vasya is servicing another customer. \nVasya is a bit lazy, so he likes taking smoke breaks for $a$ minutes each. Those breaks may go one after another, but Vasya must be present at work during all the time periods he must serve regular customers, otherwise one of them may alert his boss. What is the maximum number of breaks Vasya can take during the day?\n-----Input-----\nThe first line contains three integers $n$, $L$ and $a$ ($0 \\le n \\le 10^{5}$, $1 \\le L \\le 10^{9}$, $1 \\le a \\le L$).\nThe $i$-th of the next $n$ lines contains two integers $t_{i}$ and $l_{i}$ ($0 \\le t_{i} \\le L - 1$, $1 \\le l_{i} \\le L$). It is guaranteed that $t_{i} + l_{i} \\le t_{i + 1}$ and $t_{n} + l_{n} \\le L$.\n-----Output-----\nOutput one integer \u00a0\u2014 the maximum number of breaks.\n-----Examples-----\nInput\n2 11 3\n0 1\n1 1\nOutput\n3\nInput\n0 5 2\nOutput\n2\nInput\n1 3 2\n1 2\nOutput\n0\n-----Note-----\nIn the first sample Vasya can take $3$ breaks starting after $2$, $5$ and $8$ minutes after the beginning of the day.\nIn the second sample Vasya can take $2$ breaks starting after $0$ and $2$ minutes after the beginning of the day.\nIn the third sample Vasya can't take any breaks.\n\ndef",
        "answer": "def max_breaks(n, L, a):\n    breaks = 0\n    for i in range(n):\n        breaks += min(L - 1, a + i) // a\n    return breaks",
        "difficulty": "interview"
    },
    {
        "task_id": 1520,
        "prompt": "Complete the Python function given the prompt below:Roman and Denis are on the trip to the programming competition. Since the trip was long, they soon got bored, and hence decided to came up with something. Roman invented a pizza's recipe, while Denis invented a string multiplication. According to Denis, the result of multiplication (product) of strings $s$ of length $m$ and $t$ is a string $t + s_1 + t + s_2 + \\ldots + t + s_m + t$, where $s_i$ denotes the $i$-th symbol of the string $s$, and \"+\" denotes string concatenation. For example, the product of strings \"abc\" and \"de\" is a string \"deadebdecde\", while the product of the strings \"ab\" and \"z\" is a string \"zazbz\". Note, that unlike the numbers multiplication, the product of strings $s$ and $t$ is not necessarily equal to product of $t$ and $s$.\nRoman was jealous of Denis, since he invented such a cool operation, and hence decided to invent something string-related too. Since Roman is beauty-lover, he decided to define the beauty of the string as the length of the longest substring, consisting of only one letter. For example, the beauty of the string \"xayyaaabca\" is equal to $3$, since there is a substring \"aaa\", while the beauty of the string \"qwerqwer\" is equal to $1$, since all neighboring symbols in it are different.\nIn order to entertain Roman, Denis wrote down $n$ strings $p_1, p_2, p_3, \\ldots, p_n$ on the paper and asked him to calculate the beauty of the string $( \\ldots (((p_1 \\cdot p_2) \\cdot p_3) \\cdot \\ldots ) \\cdot p_n$, where $s \\cdot t$ denotes a multiplication of strings $s$ and $t$. Roman hasn't fully realized how Denis's multiplication works, so he asked you for a help. Denis knows, that Roman is very impressionable, he guarantees, that the beauty of the resulting string is at most $10^9$.\n-----Input-----\nThe first line contains a single integer $n$ ($2 \\leq n \\leq 100\\,000$)\u00a0\u2014 the number of strings, wroted by Denis.\nNext $n$ lines contain non-empty strings $p_1, p_2, \\ldots, p_n$, consisting of lowercase english letters.\nIt's guaranteed, that the total length of the strings $p_i$ is at most $100\\,000$, and that's the beauty of the resulting product is at most $10^9$.\n-----Output-----\nPrint exactly one integer\u00a0\u2014 the beauty of the product of the strings.\n-----Examples-----\nInput\n3\na\nb\na\nOutput\n3\nInput\n2\nbnn\na\nOutput\n1\n-----Note-----\nIn the first example, the product of strings is equal to \"abaaaba\".\nIn the second example, the product of strings is equal to \"abanana\".\n\ndef",
        "answer": "def roman_mult(s1, s2):\n    return s2 + s1 + s2",
        "difficulty": "interview"
    },
    {
        "task_id": 1521,
        "prompt": "Complete the Python function given the prompt below:DZY has a hash table with p buckets, numbered from 0 to p - 1. He wants to insert n numbers, in the order they are given, into the hash table. For the i-th number x_{i}, DZY will put it into the bucket numbered h(x_{i}), where h(x) is the hash function. In this problem we will assume, that h(x) = x\u00a0mod\u00a0p. Operation a\u00a0mod\u00a0b denotes taking a remainder after division a by b.\nHowever, each bucket can contain no more than one element. If DZY wants to insert an number into a bucket which is already filled, we say a \"conflict\" happens. Suppose the first conflict happens right after the i-th insertion, you should output i. If no conflict happens, just output -1.\n-----Input-----\nThe first line contains two integers, p and n (2 \u2264 p, n \u2264 300). Then n lines follow. The i-th of them contains an integer x_{i} (0 \u2264 x_{i} \u2264 10^9).\n-----Output-----\nOutput a single integer \u2014 the answer to the problem.\n-----Examples-----\nInput\n10 5\n0\n21\n53\n41\n53\nOutput\n4\nInput\n5 5\n0\n1\n2\n3\n4\nOutput\n-1\n\ndef",
        "answer": "def hash(x):\n    return x % p",
        "difficulty": "interview"
    },
    {
        "task_id": 1522,
        "prompt": "Complete the Python function given the prompt below:After a hard day Vitaly got very hungry and he wants to eat his favorite potato pie. But it's not that simple. Vitaly is in the first room of the house with n room located in a line and numbered starting from one from left to right. You can go from the first room to the second room, from the second room to the third room and so on \u2014 you can go from the (n - 1)-th room to the n-th room. Thus, you can go to room x only from room x - 1.\nThe potato pie is located in the n-th room and Vitaly needs to go there. \nEach pair of consecutive rooms has a door between them. In order to go to room x from room x - 1, you need to open the door between the rooms with the corresponding key. \nIn total the house has several types of doors (represented by uppercase Latin letters) and several types of keys (represented by lowercase Latin letters). The key of type t can open the door of type T if and only if t and T are the same letter, written in different cases. For example, key f can open door F.\nEach of the first n - 1 rooms contains exactly one key of some type that Vitaly can use to get to next rooms. Once the door is open with some key, Vitaly won't get the key from the keyhole but he will immediately run into the next room. In other words, each key can open no more than one door.\nVitaly realizes that he may end up in some room without the key that opens the door to the next room. Before the start his run for the potato pie Vitaly can buy any number of keys of any type that is guaranteed to get to room n.\nGiven the plan of the house, Vitaly wants to know what is the minimum number of keys he needs to buy to surely get to the room n, which has a delicious potato pie. Write a program that will help Vitaly find out this number.\n-----Input-----\nThe first line of the input contains a positive integer n (2 \u2264 n \u2264 10^5)\u00a0\u2014\u00a0the number of rooms in the house.\nThe second line of the input contains string s of length 2\u00b7n - 2. Let's number the elements of the string from left to right, starting from one. \nThe odd positions in the given string s contain lowercase Latin letters\u00a0\u2014\u00a0the types of the keys that lie in the corresponding rooms. Thus, each odd position i of the given string s contains a lowercase Latin letter \u2014 the type of the key that lies in room number (i + 1) / 2.\nThe even positions in the given string contain uppercase Latin letters \u2014 the types of doors between the rooms. Thus, each even position i of the given string s contains an uppercase letter \u2014 the type of the door that leads from room i / 2 to room i / 2 + 1.\n-----Output-----\nPrint the only integer \u2014 the minimum number of keys that Vitaly needs to buy to surely get from room one to room n.\n-----Examples-----\nInput\n3\naAbB\nOutput\n0\nInput\n4\naBaCaB\nOutput\n3\nInput\n5\nxYyXzZaZ\nOutput\n2\n\ndef",
        "answer": "def get_key_count(n, s):\n    key_count = 0\n    for i in range(n - 1):\n        if s[i]!= s[i + 1]:\n            key_count += 1\n    return key_count",
        "difficulty": "interview"
    },
    {
        "task_id": 1523,
        "prompt": "Complete the Python function given the prompt below:The kingdom of Lazyland is the home to $n$ idlers. These idlers are incredibly lazy and create many problems to their ruler, the mighty King of Lazyland. \nToday $k$ important jobs for the kingdom ($k \\le n$) should be performed. Every job should be done by one person and every person can do at most one job. The King allowed every idler to choose one job they wanted to do and the $i$-th idler has chosen the job $a_i$. \nUnfortunately, some jobs may not be chosen by anyone, so the King has to persuade some idlers to choose another job. The King knows that it takes $b_i$ minutes to persuade the $i$-th idler. He asked his minister of labour to calculate the minimum total time he needs to spend persuading the idlers to get all the jobs done. Can you help him? \n-----Input-----\nThe first line of the input contains two integers $n$ and $k$ ($1 \\le k \\le n \\le 10^5$)\u00a0\u2014 the number of idlers and the number of jobs.\nThe second line of the input contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le k$)\u00a0\u2014 the jobs chosen by each idler.\nThe third line of the input contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($1 \\le b_i \\le 10^9$)\u00a0\u2014 the time the King needs to spend to persuade the $i$-th idler.\n-----Output-----\nThe only line of the output should contain one number\u00a0\u2014 the minimum total time the King needs to spend persuading the idlers to get all the jobs done.\n-----Examples-----\nInput\n8 7\n1 1 3 1 5 3 7 1\n5 7 4 8 1 3 5 2\nOutput\n10\nInput\n3 3\n3 1 2\n5 3 4\nOutput\n0\n-----Note-----\nIn the first example the optimal plan is to persuade idlers 1, 6, and 8 to do jobs 2, 4, and 6.\nIn the second example each job was chosen by some idler, so there is no need to persuade anyone.\n\ndef",
        "answer": "def solve(n, k, a, b):\n    return n * max(a) + sum(b)",
        "difficulty": "interview"
    },
    {
        "task_id": 1524,
        "prompt": "Complete the Python function given the prompt below:Given is a string S consisting of L and R.\nLet N be the length of S. There are N squares arranged from left to right, and the i-th character of S from the left is written on the i-th square from the left.\nThe character written on the leftmost square is always R, and the character written on the rightmost square is always L.\nInitially, one child is standing on each square.\nEach child will perform the move below 10^{100} times:\n - Move one square in the direction specified by the character written in the square on which the child is standing. L denotes left, and R denotes right.\nFind the number of children standing on each square after the children performed the moves.\n-----Constraints-----\n - S is a string of length between 2 and 10^5 (inclusive).\n - Each character of S is L or R.\n - The first and last characters of S are R and L, respectively.\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n-----Output-----\nPrint the number of children standing on each square after the children performed the moves, in order from left to right.\n-----Sample Input-----\nRRLRL\n-----Sample Output-----\n0 1 2 1 1\n - After each child performed one move, the number of children standing on each square is 0, 2, 1, 1, 1 from left to right.\n - After each child performed two moves, the number of children standing on each square is 0, 1, 2, 1, 1 from left to right.\n - After each child performed 10^{100} moves, the number of children standing on each square is 0, 1, 2, 1, 1 from left to right.\n\ndef",
        "answer": "def count_children(s):\n    children = [0] * len(s)\n    for i in range(len(s)):\n        if s[i] == 'R':\n            children[i] = 1\n    for i in range(len(s) - 1, -1, -1):\n        if s[i] == 'L':\n            children[i] = 1\n    return children",
        "difficulty": "interview"
    },
    {
        "task_id": 1525,
        "prompt": "Complete the Python function given the prompt below:Amidakuji is a traditional method of lottery in Japan.\nTo make an amidakuji, we first draw W parallel vertical lines, and then draw horizontal lines that connect them. The length of each vertical line is H+1 [cm], and the endpoints of the horizontal lines must be at 1, 2, 3,..., or H [cm] from the top of a vertical line.\nA valid amidakuji is an amidakuji that satisfies the following conditions:\n - No two horizontal lines share an endpoint.\n - The two endpoints of each horizontal lines must be at the same height.\n - A horizontal line must connect adjacent vertical lines.\nFind the number of the valid amidakuji that satisfy the following condition, modulo 1\\ 000\\ 000\\ 007: if we trace the path from the top of the leftmost vertical line to the bottom, always following horizontal lines when we encounter them, we reach the bottom of the K-th vertical line from the left.\nFor example, in the following amidakuji, we will reach the bottom of the fourth vertical line from the left.\n-----Constraints-----\n - H is an integer between 1 and 100 (inclusive).\n - W is an integer between 1 and 8 (inclusive).\n - K is an integer between 1 and W (inclusive).\n-----Input-----\nInput is given from Standard Input in the following format:\nH W K\n-----Output-----\nPrint the number of the amidakuji that satisfy the condition, modulo 1\\ 000\\ 000\\ 007.\n-----Sample Input-----\n1 3 2\n-----Sample Output-----\n1\nOnly the following one amidakuji satisfies the condition:\n\ndef",
        "answer": "def main():\n    h, w, k = map(int, input().split())\n    print(amidakuji(h, w, k))",
        "difficulty": "interview"
    },
    {
        "task_id": 1526,
        "prompt": "Complete the Python function given the prompt below:You are given three integers A, B and C. Find the minimum number of operations required to make A, B and C all equal by repeatedly performing the following two kinds of operations in any order:\n - Choose two among A, B and C, then increase both by 1.\n - Choose one among A, B and C, then increase it by 2.\nIt can be proved that we can always make A, B and C all equal by repeatedly performing these operations.\n-----Constraints-----\n - 0 \\leq A,B,C \\leq 50\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nA B C\n-----Output-----\nPrint the minimum number of operations required to make A, B and C all equal.\n-----Sample Input-----\n2 5 4\n-----Sample Output-----\n2\nWe can make A, B and C all equal by the following operations:\n - Increase A and C by 1. Now, A, B, C are 3, 5, 5, respectively.\n - Increase A by 2. Now, A, B, C are 5, 5, 5, respectively.\n\ndef",
        "answer": "def min_operations(a, b, c):\n    return min(a + b, a + c, b + c) - max(a, b, c)",
        "difficulty": "interview"
    },
    {
        "task_id": 1527,
        "prompt": "Complete the Python function given the prompt below:Takahashi has a maze, which is a grid of H \\times W squares with H horizontal rows and W vertical columns.\nThe square at the i-th row from the top and the j-th column is a \"wall\" square if S_{ij} is #, and a \"road\" square if S_{ij} is..\nFrom a road square, you can move to a horizontally or vertically adjacent road square.\nYou cannot move out of the maze, move to a wall square, or move diagonally.\nTakahashi will choose a starting square and a goal square, which can be any road squares, and give the maze to Aoki.\nAoki will then travel from the starting square to the goal square, in the minimum number of moves required.\nIn this situation, find the maximum possible number of moves Aoki has to make.\n-----Constraints-----\n - 1 \\leq H,W \\leq 20\n - S_{ij} is. or #.\n - S contains at least two occurrences of..\n - Any road square can be reached from any road square in zero or more moves.\n-----Input-----\nInput is given from Standard Input in the following format:\nH W\nS_{11}...S_{1W}\n:\nS_{H1}...S_{HW}\n-----Output-----\nPrint the maximum possible number of moves Aoki has to make.\n-----Sample Input-----\n3 3\n...\n...\n...\n-----Sample Output-----\n4\nIf Takahashi chooses the top-left square as the starting square and the bottom-right square as the goal square, Aoki has to make four moves.\n\ndef",
        "answer": "def find_path(maze, start, end):\n    # Fill this in.\n    # maze is a 2D array, start and end are tuples (i,j)\n    # return a path from start to end, or None if no path exists\n    # return a list of tuples (i,j) representing the path\n    # start and end are tuples (i,j)\n    # maze is a 2D array, start and end are tuples (i,j)\n    # return a path from start to end, or None if no path exists\n    # return a list of tuples (i,j) representing the path\n    # start and end are tuples (i,j)\n    # maze is a 2D array, start and end are tuples (i,j)\n    # return a path from start to end, or None if no path exists\n    # return a list of tuples (i,j) representing the path\n    # start and end are tuples (i,j)\n    # maze is a 2D array, start and end are tuples (i,j)\n    # return a path from start to end, or None if no path exists\n    # return a list of tuples (i,j) representing the path\n    # start and end are tuples (i,j)\n    # maze is a 2D array, start and end are tuples (i,j)\n    # return a path from start to end, or None if no path exists\n    # return a list of tuples (i,j) representing the path\n    # start and end are tuples (i,j)\n    # maze is a 2D array, start and end are tuples (i,j)\n    # return a path from start to end, or None if no path",
        "difficulty": "interview"
    },
    {
        "task_id": 1528,
        "prompt": "Complete the Python function given the prompt below:In some other world, today is Christmas.\nMr. Takaha decides to make a multi-dimensional burger in his party. A level-L burger (L is an integer greater than or equal to 0) is the following thing:\n - A level-0 burger is a patty.\n - A level-L burger (L \\geq 1) is a bun, a level-(L-1) burger, a patty, another level-(L-1) burger and another bun, stacked vertically in this order from the bottom.\nFor example, a level-1 burger and a level-2 burger look like BPPPB and BBPPPBPBPPPBB (rotated 90 degrees), where B and P stands for a bun and a patty.\nThe burger Mr. Takaha will make is a level-N burger. Lunlun the Dachshund will eat X layers from the bottom of this burger (a layer is a patty or a bun). How many patties will she eat?\n-----Constraints-----\n - 1 \\leq N \\leq 50\n - 1 \\leq X \\leq ( the total number of layers in a level-N burger )\n - N and X are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN X\n-----Output-----\nPrint the number of patties in the bottom-most X layers from the bottom of a level-N burger.\n-----Sample Input-----\n2 7\n-----Sample Output-----\n4\nThere are 4 patties in the bottom-most 7 layers of a level-2 burger (BBPPPBPBPPPBB).\n\ndef",
        "answer": "def burger(n, x):\n    if n == 1:\n        return 1\n    else:\n        return n * burger(n - 1, x) + x * burger(n - 1, x - 1)",
        "difficulty": "interview"
    },
    {
        "task_id": 1529,
        "prompt": "Complete the Python function given the prompt below:One day, liouzhou_101 got a chat record of Freda and Rainbow. Out of curiosity, he wanted to know which sentences were said by Freda, and which were said by Rainbow. According to his experience, he thought that Freda always said \"lala.\" at the end of her sentences, while Rainbow always said \"miao.\" at the beginning of his sentences. For each sentence in the chat record, help liouzhou_101 find whose sentence it is. \n-----Input-----\nThe first line of the input contains an integer n (1 \u2264 n \u2264 10), number of sentences in the chat record. Each of the next n lines contains a sentence. A sentence is a string that contains only Latin letters (A-Z, a-z), underline (_), comma (,), point (.) and space ( ). Its length doesn\u2019t exceed 100.\n-----Output-----\nFor each sentence, output \"Freda's\" if the sentence was said by Freda, \"Rainbow's\" if the sentence was said by Rainbow, or \"OMG>.< I don't know!\" if liouzhou_101 can\u2019t recognize whose sentence it is. He can\u2019t recognize a sentence if it begins with \"miao.\" and ends with \"lala.\", or satisfies neither of the conditions. \n-----Examples-----\nInput\n5\nI will go to play with you lala.\nwow, welcome.\nmiao.lala.\nmiao.\nmiao.\nOutput\nFreda's\nOMG>.< I don't know!\nOMG>.< I don't know!\nRainbow's\nOMG>.< I don't know!\n\ndef",
        "answer": "def is_lala(sentence):\n    return sentence.endswith('lala') and sentence.startswith('miao.')",
        "difficulty": "interview"
    },
    {
        "task_id": 1531,
        "prompt": "Complete the Python function given the prompt below:\u2014 Oh my sweet Beaverette, would you fancy a walk along a wonderful woodland belt with me?  \n \u2014 Of course, my Smart Beaver! Let us enjoy the splendid view together. How about Friday night? \nAt this point the Smart Beaver got rushing. Everything should be perfect by Friday, so he needed to prepare the belt to the upcoming walk. He needed to cut down several trees.\nLet's consider the woodland belt as a sequence of trees. Each tree i is described by the esthetic appeal a_{i} \u2014 some trees are very esthetically pleasing, others are'so-so', and some trees are positively ugly!\nThe Smart Beaver calculated that he needed the following effects to win the Beaverette's heart:   The first objective is to please the Beaverette: the sum of esthetic appeal of the remaining trees must be maximum possible;  the second objective is to surprise the Beaverette: the esthetic appeal of the first and the last trees in the resulting belt must be the same;  and of course, the walk should be successful: there must be at least two trees in the woodland belt left. \nNow help the Smart Beaver! Which trees does he need to cut down to win the Beaverette's heart?\n-----Input-----\nThe first line contains a single integer n \u2014 the initial number of trees in the woodland belt, 2 \u2264 n. The second line contains space-separated integers a_{i} \u2014 the esthetic appeals of each tree. All esthetic appeals do not exceed 10^9 in their absolute value.  to get 30 points, you need to solve the problem with constraints: n \u2264 100 (subproblem A1);  to get 100 points, you need to solve the problem with constraints: n \u2264 3\u00b710^5 (subproblems A1+A2). \n-----Output-----\nIn the first line print two integers \u2014 the total esthetic appeal of the woodland belt after the Smart Beaver's intervention and the number of the cut down trees k.\nIn the next line print k integers \u2014 the numbers of the trees the Beaver needs to cut down. Assume that the trees are numbered from 1 to n from left to right.\nIf there are multiple solutions, print any of them. It is guaranteed that at least two trees have equal esthetic appeal.\n-----Examples-----\nInput\n5\n1 2 3 1 2\nOutput\n8 1\n1 \nInput\n5\n1 -2 3 1 -2\nOutput\n5 2\n2 5\n\ndef",
        "answer": "def func(arr):\n    n = len(arr)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = arr[i]\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            dp[i][j] = max(arr[i] - dp[i+1][j], arr[j] - dp[i][j-1])\n    return dp[0][n-1]",
        "difficulty": "interview"
    },
    {
        "task_id": 1532,
        "prompt": "Complete the Python function given the prompt below:Kate has a set $S$ of $n$ integers $\\{1, \\dots, n\\} $. \nShe thinks that imperfection of a subset $M \\subseteq S$ is equal to the maximum of $gcd(a, b)$ over all pairs $(a, b)$ such that both $a$ and $b$ are in $M$ and $a \\neq b$. \nKate is a very neat girl and for each $k \\in \\{2, \\dots, n\\}$ she wants to find a subset that has the smallest imperfection among all subsets in $S$ of size $k$. There can be more than one subset with the smallest imperfection and the same size, but you don't need to worry about it. Kate wants to find all the subsets herself, but she needs your help to find the smallest possible imperfection for each size $k$, will name it $I_k$. \nPlease, help Kate to find $I_2$, $I_3$,..., $I_n$.\n-----Input-----\nThe first and only line in the input consists of only one integer $n$ ($2\\le n \\le 5 \\cdot 10^5$) \u00a0\u2014 the size of the given set $S$.\n-----Output-----\nOutput contains only one line that includes $n - 1$ integers: $I_2$, $I_3$,..., $I_n$.\n-----Examples-----\nInput\n2\nOutput\n1 \nInput\n3\nOutput\n1 1 \n-----Note-----\nFirst sample: answer is 1, because $gcd(1, 2) = 1$.\nSecond sample: there are subsets of $S$ with sizes $2, 3$ with imperfection equal to 1. For example, $\\{2,3\\}$ and $\\{1, 2, 3\\}$.\n\ndef",
        "answer": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)",
        "difficulty": "interview"
    },
    {
        "task_id": 1533,
        "prompt": "Complete the Python function given the prompt below:Harry Potter is on a mission to destroy You-Know-Who's Horcruxes. The first Horcrux that he encountered in the Chamber of Secrets is Tom Riddle's diary. The diary was with Ginny and it forced her to open the Chamber of Secrets. Harry wants to know the different people who had ever possessed the diary to make sure they are not under its influence.\nHe has names of n people who possessed the diary in order. You need to tell, for each person, if he/she possessed the diary at some point before or not.\nFormally, for a name s_{i} in the i-th line, output \"YES\" (without quotes) if there exists an index j such that s_{i} = s_{j} and j < i, otherwise, output \"NO\" (without quotes).\n-----Input-----\nFirst line of input contains an integer n (1 \u2264 n \u2264 100)\u00a0\u2014 the number of names in the list.\nNext n lines each contain a string s_{i}, consisting of lowercase English letters. The length of each string is between 1 and 100.\n-----Output-----\nOutput n lines each containing either \"YES\" or \"NO\" (without quotes), depending on whether this string was already present in the stream or not.\nYou can print each letter in any case (upper or lower).\n-----Examples-----\nInput\n6\ntom\nlucius\nginny\nharry\nginny\nharry\nOutput\nNO\nNO\nNO\nNO\nYES\nYES\nInput\n3\na\na\na\nOutput\nNO\nYES\nYES\n-----Note-----\nIn test case 1, for i = 5 there exists j = 3 such that s_{i} = s_{j} and j < i, which means that answer for i = 5 is \"YES\".\n\ndef",
        "answer": "def is_present(s):\n    for i in range(len(s)):\n        for j in range(i):\n            if s[i] == s[j]:\n                return \"YES\"\n    return \"NO\"",
        "difficulty": "interview"
    },
    {
        "task_id": 1534,
        "prompt": "Complete the Python function given the prompt below:One day Nikita found the string containing letters \"a\" and \"b\" only. \nNikita thinks that string is beautiful if it can be cut into 3 strings (possibly empty) without changing the order of the letters, where the 1-st and the 3-rd one contain only letters \"a\" and the 2-nd contains only letters \"b\".\nNikita wants to make the string beautiful by removing some (possibly none) of its characters, but without changing their order. What is the maximum length of the string he can get?\n-----Input-----\nThe first line contains a non-empty string of length not greater than 5 000 containing only lowercase English letters \"a\" and \"b\". \n-----Output-----\nPrint a single integer\u00a0\u2014 the maximum possible size of beautiful string Nikita can get.\n-----Examples-----\nInput\nabba\nOutput\n4\nInput\nbab\nOutput\n2\n-----Note-----\nIt the first sample the string is already beautiful.\nIn the second sample he needs to delete one of \"b\" to make it beautiful.\n\ndef",
        "answer": "def beautiful_string(s):\n    a = 0\n    b = 0\n    for i in s:\n        if i == 'a':\n            a += 1\n        elif i == 'b':\n            b += 1\n    return min(a, b)",
        "difficulty": "interview"
    },
    {
        "task_id": 1535,
        "prompt": "Complete the Python function given the prompt below:There are n Imperial stormtroopers on the field. The battle field is a plane with Cartesian coordinate system. Each stormtrooper is associated with his coordinates (x, y) on this plane. \nHan Solo has the newest duplex lazer gun to fight these stormtroopers. It is situated at the point (x_0, y_0). In one shot it can can destroy all the stormtroopers, situated on some line that crosses point (x_0, y_0).\nYour task is to determine what minimum number of shots Han Solo needs to defeat all the stormtroopers.\nThe gun is the newest invention, it shoots very quickly and even after a very large number of shots the stormtroopers don't have enough time to realize what's happening and change their location. \n-----Input-----\nThe first line contains three integers n, x_0 \u0438 y_0 (1 \u2264 n \u2264 1000,  - 10^4 \u2264 x_0, y_0 \u2264 10^4) \u2014 the number of stormtroopers on the battle field and the coordinates of your gun.\nNext n lines contain two integers each x_{i}, y_{i} ( - 10^4 \u2264 x_{i}, y_{i} \u2264 10^4) \u2014 the coordinates of the stormtroopers on the battlefield. It is guaranteed that no stormtrooper stands at the same point with the gun. Multiple stormtroopers can stand at the same point.\n-----Output-----\nPrint a single integer \u2014 the minimum number of shots Han Solo needs to destroy all the stormtroopers. \n-----Examples-----\nInput\n4 0 0\n1 1\n2 2\n2 0\n-1 -1\nOutput\n2\nInput\n2 1 2\n1 1\n1 0\nOutput\n1\n-----Note-----\nExplanation to the first and second samples from the statement, respectively:  [Image]\n\ndef",
        "answer": "def minimum_shots(n, x_0, y_0):\n    return n",
        "difficulty": "interview"
    },
    {
        "task_id": 1536,
        "prompt": "Complete the Python function given the prompt below:This is an easier version of the problem. In this version, $n \\le 2000$.\nThere are $n$ distinct points in three-dimensional space numbered from $1$ to $n$. The $i$-th point has coordinates $(x_i, y_i, z_i)$. The number of points $n$ is even.\nYou'd like to remove all $n$ points using a sequence of $\\frac{n}{2}$ snaps. In one snap, you can remove any two points $a$ and $b$ that have not been removed yet and form a perfectly balanced pair. A pair of points $a$ and $b$ is perfectly balanced if no other point $c$ (that has not been removed yet) lies within the axis-aligned minimum bounding box of points $a$ and $b$.\nFormally, point $c$ lies within the axis-aligned minimum bounding box of points $a$ and $b$ if and only if $\\min(x_a, x_b) \\le x_c \\le \\max(x_a, x_b)$, $\\min(y_a, y_b) \\le y_c \\le \\max(y_a, y_b)$, and $\\min(z_a, z_b) \\le z_c \\le \\max(z_a, z_b)$. Note that the bounding box might be degenerate. \nFind a way to remove all points in $\\frac{n}{2}$ snaps.\n-----Input-----\nThe first line contains a single integer $n$ ($2 \\le n \\le 2000$; $n$ is even), denoting the number of points.\nEach of the next $n$ lines contains three integers $x_i$, $y_i$, $z_i$ ($-10^8 \\le x_i, y_i, z_i \\le 10^8$), denoting the coordinates of the $i$-th point.\nNo two points coincide.\n-----Output-----\nOutput $\\frac{n}{2}$ pairs of integers $a_i, b_i$ ($1 \\le a_i, b_i \\le n$), denoting the indices of points removed on snap $i$. Every integer between $1$ and $n$, inclusive, must appear in your output exactly once.\nWe can show that it is always possible to remove all points. If there are many solutions, output any of them.\n-----Examples-----\nInput\n6\n3 1 0\n0 3 0\n2 2 0\n1 0 0\n1 3 0\n0 1 0\nOutput\n3 6\n5 1\n2 4\nInput\n8\n0 1 1\n1 0 1\n1 1 0\n1 1 1\n2 2 2\n3 2 2\n2 3 2\n2 2 3\nOutput\n4 5\n1 6\n2 7\n3 8\n-----Note-----\nIn the first example, here is what points and their corresponding bounding boxes look like (drawn in two dimensions for simplicity, as all points lie on $z = 0$ plane). Note that order of removing matters: for example, points $5$ and $1$ don't form a perfectly balanced pair initially, but they do after point $3$ is removed.  [Image]\n\ndef",
        "answer": "def snap_removal(points):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1537,
        "prompt": "Complete the Python function given the prompt below:Gildong has bought a famous painting software cfpaint. The working screen of cfpaint is square-shaped consisting of $n$ rows and $n$ columns of square cells. The rows are numbered from $1$ to $n$, from top to bottom, and the columns are numbered from $1$ to $n$, from left to right. The position of a cell at row $r$ and column $c$ is represented as $(r, c)$. There are only two colors for the cells in cfpaint \u2014 black and white.\nThere is a tool named eraser in cfpaint. The eraser has an integer size $k$ ($1 \\le k \\le n$). To use the eraser, Gildong needs to click on a cell $(i, j)$ where $1 \\le i, j \\le n - k + 1$. When a cell $(i, j)$ is clicked, all of the cells $(i', j')$ where $i \\le i' \\le i + k - 1$ and $j \\le j' \\le j + k - 1$ become white. In other words, a square with side equal to $k$ cells and top left corner at $(i, j)$ is colored white.\nA white line is a row or a column without any black cells.\nGildong has worked with cfpaint for some time, so some of the cells (possibly zero or all) are currently black. He wants to know the maximum number of white lines after using the eraser exactly once. Help Gildong find the answer to his question.\n-----Input-----\nThe first line contains two integers $n$ and $k$ ($1 \\le k \\le n \\le 2000$) \u2014 the number of rows and columns, and the size of the eraser.\nThe next $n$ lines contain $n$ characters each without spaces. The $j$-th character in the $i$-th line represents the cell at $(i,j)$. Each character is given as either 'B' representing a black cell, or 'W' representing a white cell.\n-----Output-----\nPrint one integer: the maximum number of white lines after using the eraser exactly once.\n-----Examples-----\nInput\n4 2\nBWWW\nWBBW\nWBBW\nWWWB\nOutput\n4\nInput\n3 1\nBWB\nWWB\nBWB\nOutput\n2\nInput\n5 3\nBWBBB\nBWBBB\nBBBBB\nBBBBB\nWBBBW\nOutput\n2\nInput\n2 2\nBW\nWB\nOutput\n4\nInput\n2 1\nWW\nWW\nOutput\n4\n-----Note-----\nIn the first example, Gildong can click the cell $(2, 2)$, then the working screen becomes: BWWW\nWWWW\nWWWW\nWWWB\nThen there are four white lines \u2014 the $2$-nd and $3$-rd row, and the $2$-nd and $3$-rd column.\nIn the second example, clicking the cell $(2, 3)$ makes the $2$-nd row a white line.\nIn the third example, both the $2$-nd column and $5$-th row become white lines by clicking the cell $(3, 2)$.\n\ndef",
        "answer": "def paint(n, k, arr):\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if arr[i][j] == 'W':\n                count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 1538,
        "prompt": "Complete the Python function given the prompt below:Mishka has got n empty boxes. For every i (1 \u2264 i \u2264 n), i-th box is a cube with side length a_{i}.\nMishka can put a box i into another box j if the following conditions are met:\n  i-th box is not put into another box;  j-th box doesn't contain any other boxes;  box i is smaller than box j (a_{i} < a_{j}). \nMishka can put boxes into each other an arbitrary number of times. He wants to minimize the number of visible boxes. A box is called visible iff it is not put into some another box.\nHelp Mishka to determine the minimum possible number of visible boxes!\n-----Input-----\nThe first line contains one integer n (1 \u2264 n \u2264 5000) \u2014 the number of boxes Mishka has got.\nThe second line contains n integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^9), where a_{i} is the side length of i-th box.\n-----Output-----\nPrint the minimum possible number of visible boxes.\n-----Examples-----\nInput\n3\n1 2 3\nOutput\n1\nInput\n4\n4 2 4 3\nOutput\n2\n-----Note-----\nIn the first example it is possible to put box 1 into box 2, and 2 into 3.\nIn the second example Mishka can put box 2 into box 3, and box 4 into box 1.\n\ndef",
        "answer": "def boxes(a):\n    a.sort()\n    count = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] < a[j]:\n                count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 1539,
        "prompt": "Complete the Python function given the prompt below:Arthur has bought a beautiful big table into his new flat. When he came home, Arthur noticed that the new table is unstable.\nIn total the table Arthur bought has n legs, the length of the i-th leg is l_{i}.\nArthur decided to make the table stable and remove some legs. For each of them Arthur determined number d_{i}\u00a0\u2014\u00a0the amount of energy that he spends to remove the i-th leg.\nA table with k legs is assumed to be stable if there are more than half legs of the maximum length. For example, to make a table with 5 legs stable, you need to make sure it has at least three (out of these five) legs of the maximum length. Also, a table with one leg is always stable and a table with two legs is stable if and only if they have the same lengths.\nYour task is to help Arthur and count the minimum number of energy units Arthur should spend on making the table stable.\n-----Input-----\nThe first line of the input contains integer n (1 \u2264 n \u2264 10^5)\u00a0\u2014\u00a0the initial number of legs in the table Arthur bought.\nThe second line of the input contains a sequence of n integers l_{i} (1 \u2264 l_{i} \u2264 10^5), where l_{i} is equal to the length of the i-th leg of the table.\nThe third line of the input contains a sequence of n integers d_{i} (1 \u2264 d_{i} \u2264 200), where d_{i} is the number of energy units that Arthur spends on removing the i-th leg off the table.\n-----Output-----\nPrint a single integer \u2014 the minimum number of energy units that Arthur needs to spend in order to make the table stable.\n-----Examples-----\nInput\n2\n1 5\n3 2\nOutput\n2\nInput\n3\n2 4 4\n1 1 1\nOutput\n0\nInput\n6\n2 2 1 1 3 3\n4 3 5 5 2 1\nOutput\n8\n\ndef",
        "answer": "def stable_table(n, l, d):\n    l.sort()\n    d.sort()\n    if n % 2 == 0:\n        return sum(d[:n//2])\n    else:\n        return sum(d[:n//2]) + d[n//2]",
        "difficulty": "interview"
    },
    {
        "task_id": 1540,
        "prompt": "Complete the Python function given the prompt below:The R2 company has n employees working for it. The work involves constant exchange of ideas, sharing the stories of success and upcoming challenging. For that, R2 uses a famous instant messaging program Spyke.\nR2 has m Spyke chats just to discuss all sorts of issues. In each chat, some group of employees exchanges messages daily. An employee can simultaneously talk in multiple chats. If some employee is in the k-th chat, he can write messages to this chat and receive notifications about messages from this chat. If an employee writes a message in the chat, all other participants of the chat receive a message notification.\nThe R2 company is conducting an audit. Now the specialists study effective communication between the employees. For this purpose, they have a chat log and the description of chat structure. You, as one of audit specialists, are commissioned to write a program that will use this data to determine the total number of message notifications received by each employee.\n-----Input-----\nThe first line contains three space-separated integers n, m and k (2 \u2264 n \u2264 2\u00b710^4;\u00a01 \u2264 m \u2264 10;\u00a01 \u2264 k \u2264 2\u00b710^5) \u2014 the number of the employees, the number of chats and the number of events in the log, correspondingly. \nNext n lines contain matrix a of size n \u00d7 m, consisting of numbers zero and one. The element of this matrix, recorded in the j-th column of the i-th line, (let's denote it as a_{ij}) equals 1, if the i-th employee is the participant of the j-th chat, otherwise the element equals 0. Assume that the employees are numbered from 1 to n and the chats are numbered from 1 to m.\nNext k lines contain the description of the log events. The i-th line contains two space-separated integers x_{i} and y_{i} (1 \u2264 x_{i} \u2264 n;\u00a01 \u2264 y_{i} \u2264 m) which mean that the employee number x_{i} sent one message to chat number y_{i}. It is guaranteed that employee number x_{i} is a participant of chat y_{i}. It is guaranteed that each chat contains at least two employees.\n-----Output-----\nPrint in the single line n space-separated integers, where the i-th integer shows the number of message notifications the i-th employee receives.\n-----Examples-----\nInput\n3 4 5\n1 1 1 1\n1 0 1 1\n1 1 0 0\n1 1\n3 1\n1 3\n2 4\n3 2\nOutput\n3 3 1 \nInput\n4 3 4\n0 1 1\n1 0 1\n1 1 1\n0 0 0\n1 2\n2 1\n3 1\n1 3\nOutput\n0 2 3 0\n\ndef",
        "answer": "def count_notifications(n, m, k, a):\n    notifications = [0] * n\n    for i in range(k):\n        x, y = map(int, input().split())\n        notifications[x - 1] += y\n    return notifications",
        "difficulty": "interview"
    },
    {
        "task_id": 1541,
        "prompt": "Complete the Python function given the prompt below:You have a description of a lever as string s. We'll represent the string length as record |s|, then the lever looks as a horizontal bar with weights of length |s| - 1 with exactly one pivot. We will assume that the bar is a segment on the Ox axis between points 0 and |s| - 1.\nThe decoding of the lever description is given below.\n  If the i-th character of the string equals \"^\", that means that at coordinate i there is the pivot under the bar.  If the i-th character of the string equals \"=\", that means that at coordinate i there is nothing lying on the bar.  If the i-th character of the string equals digit c (1-9), that means that at coordinate i there is a weight of mass c on the bar. \nYour task is, given the lever description, print if it will be in balance or not. Assume that the bar doesn't weight anything. Assume that the bar initially is in balance then all weights are simultaneously put on it. After that the bar either tilts to the left, or tilts to the right, or is in balance.\n-----Input-----\nThe first line contains the lever description as a non-empty string s (3 \u2264 |s| \u2264 10^6), consisting of digits (1-9) and characters \"^\" and \"=\". It is guaranteed that the line contains exactly one character \"^\". It is guaranteed that the pivot of the lever isn't located in any end of the lever bar.\nTo solve the problem you may need 64-bit integer numbers. Please, do not forget to use them in your programs.\n-----Output-----\nPrint \"left\" if the given lever tilts to the left, \"right\" if it tilts to the right and \"balance\", if it is in balance.\n-----Examples-----\nInput\n=^==\nOutput\nbalance\nInput\n9===^==1\nOutput\nleft\nInput\n2==^7==\nOutput\nright\nInput\n41^52==\nOutput\nbalance\n-----Note-----\nAs you solve the problem, you may find the following link useful to better understand how a lever functions: http://en.wikipedia.org/wiki/Lever.\nThe pictures to the examples:\n [Image] \n [Image] \n [Image] \n $\\Delta \\Delta \\Delta \\Delta$\n\ndef",
        "answer": "def lever(s):\n    # your code here\n    return \"left\" if s.count(\"^\") == 1 else \"right\" if s.count(\"^\") == 0 else \"balance\"",
        "difficulty": "interview"
    },
    {
        "task_id": 1542,
        "prompt": "Complete the Python function given the prompt below:Vasiliy likes to rest after a hard work, so you may often meet him in some bar nearby. As all programmers do, he loves the famous drink \"Beecola\", which can be bought in n different shops in the city. It's known that the price of one bottle in the shop i is equal to x_{i} coins.\nVasiliy plans to buy his favorite drink for q consecutive days. He knows, that on the i-th day he will be able to spent m_{i} coins. Now, for each of the days he want to know in how many different shops he can buy a bottle of \"Beecola\".\n-----Input-----\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 100 000)\u00a0\u2014 the number of shops in the city that sell Vasiliy's favourite drink.\nThe second line contains n integers x_{i} (1 \u2264 x_{i} \u2264 100 000)\u00a0\u2014 prices of the bottles of the drink in the i-th shop.\nThe third line contains a single integer q (1 \u2264 q \u2264 100 000)\u00a0\u2014 the number of days Vasiliy plans to buy the drink.\nThen follow q lines each containing one integer m_{i} (1 \u2264 m_{i} \u2264 10^9)\u00a0\u2014 the number of coins Vasiliy can spent on the i-th day.\n-----Output-----\nPrint q integers. The i-th of them should be equal to the number of shops where Vasiliy will be able to buy a bottle of the drink on the i-th day.\n-----Example-----\nInput\n5\n3 10 8 6 11\n4\n1\n10\n3\n11\nOutput\n0\n4\n1\n5\n-----Note-----\nOn the first day, Vasiliy won't be able to buy a drink in any of the shops.\nOn the second day, Vasiliy can buy a drink in the shops 1, 2, 3 and 4.\nOn the third day, Vasiliy can buy a drink only in the shop number 1.\nFinally, on the last day Vasiliy can buy a drink in any shop.\n\ndef",
        "answer": "def beecola(n, x, q, m):\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(1, m[i - 1] + 1):\n            if j >= x[i - 1]:\n                dp[i] = max(dp[i], dp[i - 1] + 1)\n    return dp[n]",
        "difficulty": "interview"
    },
    {
        "task_id": 1543,
        "prompt": "Complete the Python function given the prompt below:The cities of Byteland and Berland are located on the axis $Ox$. In addition, on this axis there are also disputed cities, which belong to each of the countries in their opinion. Thus, on the line $Ox$ there are three types of cities:  the cities of Byteland,  the cities of Berland,  disputed cities. \nRecently, the project BNET has been launched \u2014 a computer network of a new generation. Now the task of the both countries is to connect the cities so that the network of this country is connected.\nThe countries agreed to connect the pairs of cities with BNET cables in such a way that:  If you look at the only cities of Byteland and the disputed cities, then in the resulting set of cities, any city should be reachable from any other one by one or more cables,  If you look at the only cities of Berland and the disputed cities, then in the resulting set of cities, any city should be reachable from any other one by one or more cables. \nThus, it is necessary to choose a set of pairs of cities to connect by cables in such a way that both conditions are satisfied simultaneously. Cables allow bi-directional data transfer. Each cable connects exactly two distinct cities.\nThe cost of laying a cable from one city to another is equal to the distance between them. Find the minimum total cost of laying a set of cables so that two subsets of cities (Byteland and disputed cities, Berland and disputed cities) are connected.\nEach city is a point on the line $Ox$. It is technically possible to connect the cities $a$ and $b$ with a cable so that the city $c$ ($a < c < b$) is not connected to this cable, where $a$, $b$ and $c$ are simultaneously coordinates of the cities $a$, $b$ and $c$.\n-----Input-----\nThe first line contains a single integer $n$ ($2 \\le n \\le 2 \\cdot 10^{5}$) \u2014 the number of cities.\nThe following $n$ lines contains an integer $x_i$ and the letter $c_i$ ($-10^{9} \\le x_i \\le 10^{9}$) \u2014 the coordinate of the city and its type. If the city belongs to Byteland, $c_i$ equals to 'B'. If the city belongs to Berland, $c_i$ equals to \u00abR\u00bb. If the city is disputed, $c_i$ equals to 'P'. \nAll cities have distinct coordinates. Guaranteed, that the cities are given in the increasing order of their coordinates.\n-----Output-----\nPrint the minimal total length of such set of cables, that if we delete all Berland cities ($c_i$='R'), it will be possible to find a way from any remaining city to any other remaining city, moving only by cables. Similarly, if we delete all Byteland cities ($c_i$='B'), it will be possible to find a way from any remaining city to any other remaining city, moving only by cables.\n-----Examples-----\nInput\n4\n-5 R\n0 P\n3 P\n7 B\nOutput\n12\nInput\n5\n10 R\n14 B\n16 B\n21 R\n32 R\nOutput\n24\n-----Note-----\nIn the first example, you should connect the first city with the second, the second with the third, and the third with the fourth. The total length of the cables will be $5 + 3 + 4 = 12$.\nIn the second example there are no disputed cities, so you need to connect all the neighboring cities of Byteland and all the neighboring cities of Berland. The cities of Berland have coordinates $10, 21, 32$, so to connect them you need two cables of length $11$ and $11$. The cities of Byteland have coordinates $14$ and $16$, so to connect them you need one cable of length $2$. Thus, the total length of all cables is $11 + 11 + 2 = 24$.\n\ndef",
        "answer": "def connectCities(cities):\n    cities.sort()\n    cities.append(cities[0])\n    cities.append(cities[1])\n    cities.append(cities[2])\n    cities.append(cities[3])\n    cities.append(cities[4])\n    cities.append(cities[5])\n    cities.append(cities[6])\n    cities.append(cities[7])\n    cities.append(cities[8])\n    cities.append(cities[9])\n    cities.append(cities[10])\n    cities.append(cities[11])\n    cities.append(cities[12])\n    cities.append(cities[13])\n    cities.append(cities[14])\n    cities.append(cities[15])\n    cities.append(cities[16])\n    cities.append(cities[17])\n    cities.append(cities[18])\n    cities.append(cities[19])\n    cities.append(cities[20])\n    cities.append(cities[21])\n    cities.append(cities[22])\n    cities.append(cities[23])\n    cities.append(cities[24])\n    cities.append(cities[25])\n    cities.append(cities[26])\n    cities.append(cities[27])\n    cities.append(cities[28])\n    cities.append(cities[29])\n    cities.append(cities[30])\n    cities.append(cities[31])\n    ",
        "difficulty": "interview"
    },
    {
        "task_id": 1544,
        "prompt": "Complete the Python function given the prompt below:Because of budget cuts one IT company established new non-financial reward system instead of bonuses.\nTwo kinds of actions are rewarded: fixing critical bugs and suggesting new interesting features. A man who fixed a critical bug gets \"I fixed a critical bug\" pennant on his table. A man who suggested a new interesting feature gets \"I suggested a new feature\" pennant on his table.\nBecause of the limited budget of the new reward system only 5 \"I fixed a critical bug\" pennants and 3 \"I suggested a new feature\" pennants were bought.\nIn order to use these pennants for a long time they were made challenge ones. When a man fixes a new critical bug one of the earlier awarded \"I fixed a critical bug\" pennants is passed on to his table. When a man suggests a new interesting feature one of the earlier awarded \"I suggested a new feature\" pennants is passed on to his table.\nOne man can have several pennants of one type and of course he can have pennants of both types on his table. There are n tables in the IT company. Find the number of ways to place the pennants on these tables given that each pennant is situated on one of the tables and each table is big enough to contain any number of pennants.\n-----Input-----\nThe only line of the input contains one integer n (1 \u2264 n \u2264 500) \u2014 the number of tables in the IT company.\n-----Output-----\nOutput one integer \u2014 the amount of ways to place the pennants on n tables.\n-----Examples-----\nInput\n2\nOutput\n24\n\ndef",
        "answer": "def count_pennants(n):\n    if n == 1:\n        return 5\n    if n == 2:\n        return 15\n    if n == 3:\n        return 35\n    if n == 4:\n        return 55\n    if n == 5:\n        return 75\n    if n == 6:\n        return 105\n    if n == 7:\n        return 135\n    if n == 8:\n        return 165\n    if n == 9:\n        return 195\n    if n == 10:\n        return 225\n    if n == 11:\n        return 255\n    if n == 12:\n        return 285\n    if n == 13:\n        return 315\n    if n == 14:\n        return 345\n    if n == 15:\n        return 375\n    if n == 16:\n        return 405\n    if n == 17:\n        return 435\n    if n == 18:\n        return 465\n    if n == 19:\n        return 495\n    if n == 20:\n        return 525\n    if n == 21:\n        return 555\n    if n == 22:\n        return 585\n    if n == 23:\n        return 615\n    if n == 24:\n        return 645\n    if n == 25:\n        return 675\n    if n == 26:\n        return 705\n    if n == 27:\n        return 735\n    if n == 28:\n        return 765\n    if n == 29:\n        return 795\n    if n == 30:\n        return 825\n    if n == 31:\n        return 855\n    if n == 32:\n        return 885\n    if n == 33:\n        return 915\n    if n == 34:\n        return 945\n    if n",
        "difficulty": "interview"
    },
    {
        "task_id": 1545,
        "prompt": "Complete the Python function given the prompt below:Mahmoud wrote a message s of length n. He wants to send it as a birthday present to his friend Moaz who likes strings. He wrote it on a magical paper but he was surprised because some characters disappeared while writing the string. That's because this magical paper doesn't allow character number i in the English alphabet to be written on it in a string of length more than a_{i}. For example, if a_1 = 2 he can't write character 'a' on this paper in a string of length 3 or more. String \"aa\" is allowed while string \"aaa\" is not.\nMahmoud decided to split the message into some non-empty substrings so that he can write every substring on an independent magical paper and fulfill the condition. The sum of their lengths should be n and they shouldn't overlap. For example, if a_1 = 2 and he wants to send string \"aaa\", he can split it into \"a\" and \"aa\" and use 2 magical papers, or into \"a\", \"a\" and \"a\" and use 3 magical papers. He can't split it into \"aa\" and \"aa\" because the sum of their lengths is greater than n. He can split the message into single string if it fulfills the conditions.\nA substring of string s is a string that consists of some consecutive characters from string s, strings \"ab\", \"abc\" and \"b\" are substrings of string \"abc\", while strings \"acb\" and \"ac\" are not. Any string is a substring of itself.\nWhile Mahmoud was thinking of how to split the message, Ehab told him that there are many ways to split it. After that Mahmoud asked you three questions:   How many ways are there to split the string into substrings such that every substring fulfills the condition of the magical paper, the sum of their lengths is n and they don't overlap? Compute the answer modulo 10^9 + 7.  What is the maximum length of a substring that can appear in some valid splitting?  What is the minimum number of substrings the message can be spit in? \nTwo ways are considered different, if the sets of split positions differ. For example, splitting \"aa|a\" and \"a|aa\" are considered different splittings of message \"aaa\".\n-----Input-----\nThe first line contains an integer n (1 \u2264 n \u2264 10^3) denoting the length of the message.\nThe second line contains the message s of length n that consists of lowercase English letters.\nThe third line contains 26 integers a_1, a_2,..., a_26 (1 \u2264 a_{x} \u2264 10^3)\u00a0\u2014 the maximum lengths of substring each letter can appear in.\n-----Output-----\nPrint three lines.\nIn the first line print the number of ways to split the message into substrings and fulfill the conditions mentioned in the problem modulo 10^9  +  7.\nIn the second line print the length of the longest substring over all the ways.\nIn the third line print the minimum number of substrings over all the ways.\n-----Examples-----\nInput\n3\naab\n2 3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\nOutput\n3\n2\n2\nInput\n10\nabcdeabcde\n5 5 5 5 4 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\nOutput\n401\n4\n3\n-----Note-----\nIn the first example the three ways to split the message are:   a|a|b  aa|b  a|ab \nThe longest substrings are \"aa\" and \"ab\" of length 2.\nThe minimum number of substrings is 2 in \"a|ab\" or \"aa|b\".\nNotice that \"aab\" is not a possible splitting because the letter 'a' appears in a substring of length 3, while a_1 = 2.\n\ndef",
        "answer": "def magical_string(s, a):\n    n = len(s)\n    a = [0] + a\n    dp = [0] * (n + 1)\n    dp[1] = 1\n    for i in range(2, n + 1):\n        for j in range(1, i + 1):\n            if s[i - j] == 'a' and a[j] >= j:\n                dp[i] += dp[i - j]\n    return dp[n] % (10 ** 9 + 7)",
        "difficulty": "interview"
    },
    {
        "task_id": 1546,
        "prompt": "Complete the Python function given the prompt below:One day Vasya came up to the blackboard and wrote out n distinct integers from 1 to n in some order in a circle. Then he drew arcs to join the pairs of integers (a, b) (a \u2260 b), that are either each other's immediate neighbors in the circle, or there is number c, such that a and \u0441 are immediate neighbors, and b and c are immediate neighbors. As you can easily deduce, in the end Vasya drew 2\u00b7n arcs.\nFor example, if the numbers are written in the circle in the order 1, 2, 3, 4, 5 (in the clockwise direction), then the arcs will join pairs of integers (1, 2), (2, 3), (3, 4), (4, 5), (5, 1), (1, 3), (2, 4), (3, 5), (4, 1) and (5, 2).\nMuch time has passed ever since, the numbers we wiped off the blackboard long ago, but recently Vasya has found a piece of paper with 2\u00b7n written pairs of integers that were joined with the arcs on the board. Vasya asks you to find the order of numbers in the circle by these pairs.\n-----Input-----\nThe first line of the input contains a single integer n (5 \u2264 n \u2264 10^5) that shows, how many numbers were written on the board. Next 2\u00b7n lines contain pairs of integers a_{i}, b_{i} (1 \u2264 a_{i}, b_{i} \u2264 n, a_{i} \u2260 b_{i}) \u2014 the numbers that were connected by the arcs.\nIt is guaranteed that no pair of integers, connected by a arc, occurs in the input more than once. The pairs of numbers and the numbers in the pairs are given in the arbitrary order.\n-----Output-----\nIf Vasya made a mistake somewhere and there isn't any way to place numbers from 1 to n on the circle according to the statement, then print a single number \"-1\" (without the quotes). Otherwise, print any suitable sequence of n distinct integers from 1 to n. \nIf there are multiple solutions, you are allowed to print any of them. Specifically, it doesn't matter which number you write first to describe the sequence of the order. It also doesn't matter whether you write out the numbers in the clockwise or counter-clockwise direction.\n-----Examples-----\nInput\n5\n1 2\n2 3\n3 4\n4 5\n5 1\n1 3\n2 4\n3 5\n4 1\n5 2\nOutput\n1 2 3 4 5 \nInput\n6\n5 6\n4 3\n5 3\n2 4\n6 1\n3 1\n6 2\n2 5\n1 4\n3 6\n1 2\n4 5\nOutput\n1 2 4 5 3 6\n\ndef",
        "answer": "def order(n):\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    if n == 3:\n        return [1, 2, 3]\n    if n == 4:\n        return [1, 2, 4, 3]\n    if n == 5:\n        return [1, 2, 3, 4, 5]\n    if n == 6:\n        return [1, 2, 3, 4, 5, 6]\n    if n == 7:\n        return [1, 2, 3, 4, 5, 6, 7]\n    if n == 8:\n        return [1, 2, 3, 4, 5, 6, 7, 8]\n    if n == 9:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    if n == 10:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    if n == 11:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    if n == 12:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    if n == 13:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n    if n == 14:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n    if n == 15:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11",
        "difficulty": "interview"
    },
    {
        "task_id": 1547,
        "prompt": "Complete the Python function given the prompt below:Kris works in a large company \"Blake Technologies\". As a best engineer of the company he was assigned a task to develop a printer that will be able to print horizontal and vertical strips. First prototype is already built and Kris wants to tests it. He wants you to implement the program that checks the result of the printing.\nPrinter works with a rectangular sheet of paper of size n \u00d7 m. Consider the list as a table consisting of n rows and m columns. Rows are numbered from top to bottom with integers from 1 to n, while columns are numbered from left to right with integers from 1 to m. Initially, all cells are painted in color 0.\nYour program has to support two operations:   Paint all cells in row r_{i} in color a_{i};  Paint all cells in column c_{i} in color a_{i}. \nIf during some operation i there is a cell that have already been painted, the color of this cell also changes to a_{i}.\nYour program has to print the resulting table after k operation.\n-----Input-----\nThe first line of the input contains three integers n, m and k (1  \u2264  n,  m  \u2264 5000, n\u00b7m \u2264 100 000, 1 \u2264 k \u2264 100 000)\u00a0\u2014 the dimensions of the sheet and the number of operations, respectively.\nEach of the next k lines contains the description of exactly one query:   1\u00a0r_{i}\u00a0a_{i} (1 \u2264 r_{i} \u2264 n, 1 \u2264 a_{i} \u2264 10^9), means that row r_{i} is painted in color a_{i};  2\u00a0c_{i}\u00a0a_{i} (1 \u2264 c_{i} \u2264 m, 1 \u2264 a_{i} \u2264 10^9), means that column c_{i} is painted in color a_{i}. \n-----Output-----\nPrint n lines containing m integers each\u00a0\u2014 the resulting table after all operations are applied.\n-----Examples-----\nInput\n3 3 3\n1 1 3\n2 2 1\n1 2 2\nOutput\n3 1 3 \n2 2 2 \n0 1 0 \nInput\n5 3 5\n1 1 1\n1 3 1\n1 5 1\n2 1 1\n2 3 1\nOutput\n1 1 1 \n1 0 1 \n1 1 1 \n1 0 1 \n1 1 1 \n-----Note-----\nThe figure below shows all three operations for the first sample step by step. The cells that were painted on the corresponding step are marked gray.  [Image]\n\ndef",
        "answer": "def paint_cell(row, col, color):\n    for i in range(row):\n        for j in range(col):\n            if i == row - 1 and j == col - 1:\n                continue\n            if i == row - 1:\n                if j == col - 1:\n                    continue\n                if j < col - 1:\n                    if matrix[i][j + 1] == 0:\n                        matrix[i][j + 1] = color\n                if j > 0:\n                    if matrix[i][j - 1] == 0:\n                        matrix[i][j - 1] = color\n            if i < row - 1:\n                if j == col - 1:\n                    if matrix[i + 1][j] == 0:\n                        matrix[i + 1][j] = color\n                if j < col - 1:\n                    if matrix[i + 1][j] == 0:\n                        matrix[i + 1][j] = color\n                    if matrix[i][j + 1] == 0:\n                        matrix[i][j + 1] = color\n                if j > 0:\n                    if matrix[i + 1][j] == 0:\n                        matrix[i + 1][j] = color\n                    if matrix[i][j - 1] == 0:\n                        matrix[i][j - 1] = color\n            if j == col - 1:\n                if i < row - 1:\n                    if matrix[i + 1][j] == 0:\n                        matrix[i + 1][j] = color\n                if i > 0:\n                    if matrix[i - 1][j] == 0:\n                        matrix[i - 1][j] = color\n            if j < col - 1:\n                if i < row",
        "difficulty": "interview"
    },
    {
        "task_id": 1548,
        "prompt": "Complete the Python function given the prompt below:Gardener Alexey teaches competitive programming to high school students. To congratulate Alexey on the Teacher's Day, the students have gifted him a collection of wooden sticks, where every stick has an integer length. Now Alexey wants to grow a tree from them.\nThe tree looks like a polyline on the plane, consisting of all sticks. The polyline starts at the point $(0, 0)$. While constructing the polyline, Alexey will attach sticks to it one by one in arbitrary order. Each stick must be either vertical or horizontal (that is, parallel to $OX$ or $OY$ axis). It is not allowed for two consecutive sticks to be aligned simultaneously horizontally or simultaneously vertically. See the images below for clarification.\nAlexey wants to make a polyline in such a way that its end is as far as possible from $(0, 0)$. Please help him to grow the tree this way.\nNote that the polyline defining the form of the tree may have self-intersections and self-touches, but it can be proved that the optimal answer does not contain any self-intersections or self-touches.\n-----Input-----\nThe first line contains an integer $n$ ($1 \\le n \\le 100\\,000$)\u00a0\u2014 the number of sticks Alexey got as a present.\nThe second line contains $n$ integers $a_1, \\ldots, a_n$ ($1 \\le a_i \\le 10\\,000$) \u2014 the lengths of the sticks.\n-----Output-----\nPrint one integer\u00a0\u2014 the square of the largest possible distance from $(0, 0)$ to the tree end.\n-----Examples-----\nInput\n3\n1 2 3\nOutput\n26\nInput\n4\n1 1 2 2\nOutput\n20\n-----Note-----\nThe following pictures show optimal trees for example tests. The squared distance in the first example equals $5 \\cdot 5 + 1 \\cdot 1 = 26$, and in the second example $4 \\cdot 4 + 2 \\cdot 2 = 20$.\n [Image] \n [Image]\n\ndef",
        "answer": "def grow_tree(sticks):\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1549,
        "prompt": "Complete the Python function given the prompt below:Misha was interested in water delivery from childhood. That's why his mother sent him to the annual Innovative Olympiad in Irrigation (IOI). Pupils from all Berland compete there demonstrating their skills in watering. It is extremely expensive to host such an olympiad, so after the first $n$ olympiads the organizers introduced the following rule of the host city selection.\nThe host cities of the olympiads are selected in the following way. There are $m$ cities in Berland wishing to host the olympiad, they are numbered from $1$ to $m$. The host city of each next olympiad is determined as the city that hosted the olympiad the smallest number of times before. If there are several such cities, the city with the smallest index is selected among them.\nMisha's mother is interested where the olympiad will be held in some specific years. The only information she knows is the above selection rule and the host cities of the first $n$ olympiads. Help her and if you succeed, she will ask Misha to avoid flooding your house.\n-----Input-----\nThe first line contains three integers $n$, $m$ and $q$ ($1 \\leq n, m, q \\leq 500\\,000$)\u00a0\u2014 the number of olympiads before the rule was introduced, the number of cities in Berland wishing to host the olympiad, and the number of years Misha's mother is interested in, respectively.\nThe next line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq m$), where $a_i$ denotes the city which hosted the olympiad in the $i$-th year. Note that before the rule was introduced the host city was chosen arbitrarily.\nEach of the next $q$ lines contains an integer $k_i$ ($n + 1 \\leq k_i \\leq 10^{18}$)\u00a0\u2014 the year number Misha's mother is interested in host city in.\n-----Output-----\nPrint $q$ integers. The $i$-th of them should be the city the olympiad will be hosted in the year $k_i$.\n-----Examples-----\nInput\n6 4 10\n3 1 1 1 2 2\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\nOutput\n4\n3\n4\n2\n3\n4\n1\n2\n3\n4\nInput\n4 5 4\n4 4 5 1\n15\n9\n13\n6\nOutput\n5\n3\n3\n3\n-----Note-----\nIn the first example Misha's mother is interested in the first $10$ years after the rule was introduced. The host cities these years are 4, 3, 4, 2, 3, 4, 1, 2, 3, 4.\nIn the second example the host cities after the new city is introduced are 2, 3, 1, 2, 3, 5, 1, 2, 3, 4, 5, 1.\n\ndef",
        "answer": "def main():\n    n, m, q = map(int, input().split())\n    cities = list(map(int, input().split()))\n    for _ in range(q):\n        k = int(input())\n        print(cities[k - 1])",
        "difficulty": "interview"
    },
    {
        "task_id": 1550,
        "prompt": "Complete the Python function given the prompt below:You got a box with a combination lock. The lock has a display showing n digits. There are two buttons on the box, each button changes digits on the display. You have quickly discovered that the first button adds 1 to all the digits (all digits 9 become digits 0), and the second button shifts all the digits on the display one position to the right (the last digit becomes the first one). For example, if the display is currently showing number 579, then if we push the first button, the display will show 680, and if after that we push the second button, the display will show 068.\nYou know that the lock will open if the display is showing the smallest possible number that can be obtained by pushing the buttons in some order. The leading zeros are ignored while comparing numbers. Now your task is to find the desired number.\n-----Input-----\nThe first line contains a single integer n (1 \u2264 n \u2264 1000)\u00a0\u2014 the number of digits on the display.\nThe second line contains n digits\u00a0\u2014 the initial state of the display.\n-----Output-----\nPrint a single line containing n digits\u00a0\u2014 the desired state of the display containing the smallest possible number.\n-----Examples-----\nInput\n3\n579\nOutput\n024\nInput\n4\n2014\nOutput\n0142\n\ndef",
        "answer": "def display(n):\n    if n < 10:\n        return n\n    else:\n        return n % 10 + display(n // 10)",
        "difficulty": "interview"
    },
    {
        "task_id": 1551,
        "prompt": "Complete the Python function given the prompt below:n people are standing on a coordinate axis in points with positive integer coordinates strictly less than 10^6. For each person we know in which direction (left or right) he is facing, and his maximum speed.\nYou can put a bomb in some point with non-negative integer coordinate, and blow it up. At this moment all people will start running with their maximum speed in the direction they are facing. Also, two strange rays will start propagating from the bomb with speed s: one to the right, and one to the left. Of course, the speed s is strictly greater than people's maximum speed.\nThe rays are strange because if at any moment the position and the direction of movement of some ray and some person coincide, then the speed of the person immediately increases by the speed of the ray.\nYou need to place the bomb is such a point that the minimum time moment in which there is a person that has run through point 0, and there is a person that has run through point 10^6, is as small as possible. In other words, find the minimum time moment t such that there is a point you can place the bomb to so that at time moment t some person has run through 0, and some person has run through point 10^6.\n-----Input-----\nThe first line contains two integers n and s (2 \u2264 n \u2264 10^5, 2 \u2264 s \u2264 10^6)\u00a0\u2014 the number of people and the rays' speed.\nThe next n lines contain the description of people. The i-th of these lines contains three integers x_{i}, v_{i} and t_{i} (0 < x_{i} < 10^6, 1 \u2264 v_{i} < s, 1 \u2264 t_{i} \u2264 2)\u00a0\u2014 the coordinate of the i-th person on the line, his maximum speed and the direction he will run to (1 is to the left, i.e. in the direction of coordinate decrease, 2 is to the right, i.e. in the direction of coordinate increase), respectively.\nIt is guaranteed that the points 0 and 10^6 will be reached independently of the bomb's position.\n-----Output-----\nPrint the minimum time needed for both points 0 and 10^6 to be reached.\nYour answer is considered correct if its absolute or relative error doesn't exceed 10^{ - 6}. Namely, if your answer is a, and the jury's answer is b, then your answer is accepted, if $\\frac{|a - b|}{\\operatorname{max}(1,|b|)} \\leq 10^{-6}$.\n-----Examples-----\nInput\n2 999\n400000 1 2\n500000 1 1\nOutput\n500000.000000000000000000000000000000\nInput\n2 1000\n400000 500 1\n600000 500 2\nOutput\n400.000000000000000000000000000000\n-----Note-----\nIn the first example, it is optimal to place the bomb at a point with a coordinate of 400000. Then at time 0, the speed of the first person becomes 1000 and he reaches the point 10^6 at the time 600. The bomb will not affect on the second person, and he will reach the 0 point at the time 500000.\nIn the second example, it is optimal to place the bomb at the point 500000. The rays will catch up with both people at the time 200. At this time moment, the first is at the point with a coordinate of 300000, and the second is at the point with a coordinate of 700000. Their speed will become 1500 and at the time 400 they will simultaneously run through points 0 and 10^6.\n\ndef",
        "answer": "def solution(n, s, a, b, c):\n    # write your code in Python 3.6\n    pass\n",
        "difficulty": "interview"
    },
    {
        "task_id": 1552,
        "prompt": "Complete the Python function given the prompt below:The School \u21160 of the capital of Berland has n children studying in it. All the children in this school are gifted: some of them are good at programming, some are good at maths, others are good at PE (Physical Education). Hence, for each child we know value t_{i}:  t_{i} = 1, if the i-th child is good at programming,  t_{i} = 2, if the i-th child is good at maths,  t_{i} = 3, if the i-th child is good at PE \nEach child happens to be good at exactly one of these three subjects.\nThe Team Scientific Decathlon Olympias requires teams of three students. The school teachers decided that the teams will be composed of three children that are good at different subjects. That is, each team must have one mathematician, one programmer and one sportsman. Of course, each child can be a member of no more than one team.\nWhat is the maximum number of teams that the school will be able to present at the Olympiad? How should the teams be formed for that?\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 5000) \u2014 the number of children in the school. The second line contains n integers t_1, t_2,..., t_{n} (1 \u2264 t_{i} \u2264 3), where t_{i} describes the skill of the i-th child.\n-----Output-----\nIn the first line output integer w \u2014 the largest possible number of teams. \nThen print w lines, containing three numbers in each line. Each triple represents the indexes of the children forming the team. You can print both the teams, and the numbers in the triplets in any order. The children are numbered from 1 to n in the order of their appearance in the input. Each child must participate in no more than one team. If there are several solutions, print any of them.\nIf no teams can be compiled, print the only line with value w equal to 0.\n-----Examples-----\nInput\n7\n1 3 1 3 2 1 2\nOutput\n2\n3 5 2\n6 7 4\nInput\n4\n2 1 1 2\nOutput\n0\n\ndef",
        "answer": "def max_teams(n, t):\n    teams = []\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if t[i]!= t[j] and t[j]!= t[k] and t[k]!= t[i]:\n                    teams.append([i, j, k])\n    return teams",
        "difficulty": "interview"
    },
    {
        "task_id": 1553,
        "prompt": "Complete the Python function given the prompt below:Alyona has recently bought a miniature fridge that can be represented as a matrix with $h$ rows and $2$ columns. Initially there is only one shelf at the bottom of the fridge, but Alyona can install arbitrary number of shelves inside the fridge between any two rows. A shelf is two cells wide, does not occupy any space but separates the inside of the fridge to the lower and upper part.\n [Image] An example of a fridge with $h = 7$ and two shelves. The shelves are shown in black. The picture corresponds to the first example. \nAlyona has $n$ bottles of milk that she wants to put in the fridge. The $i$-th bottle is $a_i$ cells tall and $1$ cell wide. She can put a bottle on some shelf if the corresponding space above the shelf is at least as tall as the bottle. She can not put a bottle on top of another bottle (if there is no shelf between them). Two bottles can not share a cell.\nAlyona is interested in the largest integer $k$ such that she can put bottles $1$, $2$,..., $k$ in the fridge at the same time. Find this largest $k$.\n-----Input-----\nThe first line contains two integers $n$ and $h$ ($1 \\le n \\le 10^3$, $1 \\le h \\le 10^9$)\u00a0\u2014 the number of bottles and the height of the fridge.\nThe second line contains $n$ integers $a_1$, $a_2$,..., $a_n$ ($1 \\le a_i \\le h$)\u00a0\u2014 the heights of the bottles.\n-----Output-----\nPrint the single integer $k$\u00a0\u2014 the maximum integer such that Alyona can put the bottles $1$, $2$,..., $k$ in the fridge at the same time. If Alyona can put all bottles in the fridge, print $n$. It is easy to see that Alyona can always put at least one bottle in the fridge.\n-----Examples-----\nInput\n5 7\n2 3 5 4 1\nOutput\n3\nInput\n10 10\n9 1 1 1 1 1 1 1 1 1\nOutput\n4\nInput\n5 10\n3 1 4 2 4\nOutput\n5\n-----Note-----\nOne of optimal locations in the first example is shown on the picture in the statement.\nOne of optimal locations in the second example is shown on the picture below.\n [Image] \nOne of optimal locations in the third example is shown on the picture below.\n [Image]\n\ndef",
        "answer": "def solution(h, a):\n    # write your code in Python 3.6\n    n = len(a)\n    dp = [[0] * (h + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, h + 1):\n            if j >= a[i - 1]:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - a[i - 1]] + 1)\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][h]\n",
        "difficulty": "interview"
    },
    {
        "task_id": 1554,
        "prompt": "Complete the Python function given the prompt below:There are n pearls in a row. Let's enumerate them with integers from 1 to n from the left to the right. The pearl number i has the type a_{i}.\nLet's call a sequence of consecutive pearls a segment. Let's call a segment good if it contains two pearls of the same type.\nSplit the row of the pearls to the maximal number of good segments. Note that each pearl should appear in exactly one segment of the partition.\nAs input/output can reach huge size it is recommended to use fast input/output methods: for example, prefer to use scanf/printf instead of cin/cout in C++, prefer to use BufferedReader/PrintWriter instead of Scanner/System.out in Java.\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 3\u00b710^5) \u2014 the number of pearls in a row.\nThe second line contains n integers a_{i} (1 \u2264 a_{i} \u2264 10^9) \u2013 the type of the i-th pearl.\n-----Output-----\nOn the first line print integer k \u2014 the maximal number of segments in a partition of the row.\nEach of the next k lines should contain two integers l_{j}, r_{j} (1 \u2264 l_{j} \u2264 r_{j} \u2264 n) \u2014 the number of the leftmost and the rightmost pearls in the j-th segment.\nNote you should print the correct partition of the row of the pearls, so each pearl should be in exactly one segment and all segments should contain two pearls of the same type.\nIf there are several optimal solutions print any of them. You can print the segments in any order.\nIf there are no correct partitions of the row print the number \"-1\".\n-----Examples-----\nInput\n5\n1 2 3 4 1\nOutput\n1\n1 5\nInput\n5\n1 2 3 4 5\nOutput\n-1\nInput\n7\n1 2 1 3 1 2 1\nOutput\n2\n1 3\n4 7\n\ndef",
        "answer": "def partition(arr, n):\n    count = 0\n    i = 0\n    j = n - 1\n    while i <= j:\n        if arr[i] == arr[j]:\n            i += 1\n            j -= 1\n        else:\n            if arr[i] < arr[j]:\n                i += 1\n            else:\n                j -= 1\n            count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 1555,
        "prompt": "Complete the Python function given the prompt below:Mr. Apple, a gourmet, works as editor-in-chief of a gastronomic periodical. He travels around the world, tasting new delights of famous chefs from the most fashionable restaurants. Mr. Apple has his own signature method of review \u00a0\u2014 in each restaurant Mr. Apple orders two sets of dishes on two different days. All the dishes are different, because Mr. Apple doesn't like to eat the same food. For each pair of dishes from different days he remembers exactly which was better, or that they were of the same quality. After this the gourmet evaluates each dish with a positive integer.\nOnce, during a revision of a restaurant of Celtic medieval cuisine named \u00abPoisson\u00bb, that serves chestnut soup with fir, warm soda bread, spicy lemon pie and other folk food, Mr. Apple was very pleasantly surprised the gourmet with its variety of menu, and hence ordered too much. Now he's confused about evaluating dishes.\nThe gourmet tasted a set of $n$ dishes on the first day and a set of $m$ dishes on the second day. He made a table $a$ of size $n \\times m$, in which he described his impressions. If, according to the expert, dish $i$ from the first set was better than dish $j$ from the second set, then $a_{ij}$ is equal to \">\", in the opposite case $a_{ij}$ is equal to \"<\". Dishes also may be equally good, in this case $a_{ij}$ is \"=\".\nNow Mr. Apple wants you to help him to evaluate every dish. Since Mr. Apple is very strict, he will evaluate the dishes so that the maximal number used is as small as possible. But Mr. Apple also is very fair, so he never evaluates the dishes so that it goes against his feelings. In other words, if $a_{ij}$ is \"<\", then the number assigned to dish $i$ from the first set should be less than the number of dish $j$ from the second set, if $a_{ij}$ is \">\", then it should be greater, and finally if $a_{ij}$ is \"=\", then the numbers should be the same.\nHelp Mr. Apple to evaluate each dish from both sets so that it is consistent with his feelings, or determine that this is impossible.\n-----Input-----\nThe first line contains integers $n$ and $m$ ($1 \\leq n, m \\leq 1000$)\u00a0\u2014 the number of dishes in both days.\nEach of the next $n$ lines contains a string of $m$ symbols. The $j$-th symbol on $i$-th line is $a_{ij}$. All strings consist only of \"<\", \">\" and \"=\".\n-----Output-----\nThe first line of output should contain \"Yes\", if it's possible to do a correct evaluation for all the dishes, or \"No\" otherwise.\nIf case an answer exist, on the second line print $n$ integers\u00a0\u2014 evaluations of dishes from the first set, and on the third line print $m$ integers\u00a0\u2014 evaluations of dishes from the second set.\n-----Examples-----\nInput\n3 4\n>>>>\n>>>>\n>>>>\nOutput\nYes\n2 2 2 \n1 1 1 1 \nInput\n3 3\n>>>\n<<<\n>>>\nOutput\nYes\n3 1 3 \n2 2 2 \nInput\n3 2\n==\n=<\n==\nOutput\nNo\n-----Note-----\nIn the first sample, all dishes of the first day are better than dishes of the second day. So, the highest score will be $2$, for all dishes of the first day.\nIn the third sample, the table is contradictory\u00a0\u2014 there is no possible evaluation of the dishes that satisfies it.\n\ndef",
        "answer": "def gourmet(n, m, a):\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    for i in range(n):\n        for j in range(m):\n            if a[i][0] > a[j][1]:\n                a[i][0] = j + 1\n            elif a[i][0] < a[j][1]:\n                a[i][1] = j + 1\n    return a",
        "difficulty": "interview"
    },
    {
        "task_id": 1556,
        "prompt": "Complete the Python function given the prompt below:Recently Maxim has found an array of n integers, needed by no one. He immediately come up with idea of changing it: he invented positive integer x and decided to add or subtract it from arbitrary array elements. Formally, by applying single operation Maxim chooses integer i (1 \u2264 i \u2264 n) and replaces the i-th element of array a_{i} either with a_{i} + x or with a_{i} - x. Please note that the operation may be applied more than once to the same position.\nMaxim is a curious minimalis, thus he wants to know what is the minimum value that the product of all array elements (i.e. $\\prod_{i = 1}^{n} a_{i}$) can reach, if Maxim would apply no more than k operations to it. Please help him in that.\n-----Input-----\nThe first line of the input contains three integers n, k and x (1 \u2264 n, k \u2264 200 000, 1 \u2264 x \u2264 10^9)\u00a0\u2014 the number of elements in the array, the maximum number of operations and the number invented by Maxim, respectively.\nThe second line contains n integers a_1, a_2,..., a_{n} ($|a_{i}|\\leq 10^{9}$)\u00a0\u2014 the elements of the array found by Maxim.\n-----Output-----\nPrint n integers b_1, b_2,..., b_{n} in the only line\u00a0\u2014 the array elements after applying no more than k operations to the array. In particular, $a_{i} \\equiv b_{i} \\operatorname{mod} x$ should stay true for every 1 \u2264 i \u2264 n, but the product of all array elements should be minimum possible.\nIf there are multiple answers, print any of them.\n-----Examples-----\nInput\n5 3 1\n5 4 3 5 2\nOutput\n5 4 3 5 -1 \nInput\n5 3 1\n5 4 3 5 5\nOutput\n5 4 0 5 5 \nInput\n5 3 1\n5 4 4 5 5\nOutput\n5 1 4 5 5 \nInput\n3 2 7\n5 4 2\nOutput\n5 11 -5\n\ndef",
        "answer": "def array_manipulation(n, queries):\n    arr = [0] * (n + 1)\n    for a, b, k in queries:\n        arr[a - 1] += k\n        arr[b] -= k\n    max_val = 0\n    running_sum = 0\n    for i in arr:\n        running_sum += i\n        if running_sum > max_val:\n            max_val = running_sum\n    return max_val",
        "difficulty": "interview"
    },
    {
        "task_id": 1557,
        "prompt": "Complete the Python function given the prompt below:Vova is again playing some computer game, now an RPG. In the game Vova's character received a quest: to slay the fearsome monster called Modcrab.\nAfter two hours of playing the game Vova has tracked the monster and analyzed its tactics. The Modcrab has h_2 health points and an attack power of a_2. Knowing that, Vova has decided to buy a lot of strong healing potions and to prepare for battle.\nVova's character has h_1 health points and an attack power of a_1. Also he has a large supply of healing potions, each of which increases his current amount of health points by c_1 when Vova drinks a potion. All potions are identical to each other. It is guaranteed that c_1 > a_2.\nThe battle consists of multiple phases. In the beginning of each phase, Vova can either attack the monster (thus reducing its health by a_1) or drink a healing potion (it increases Vova's health by c_1; Vova's health can exceed h_1). Then, if the battle is not over yet, the Modcrab attacks Vova, reducing his health by a_2. The battle ends when Vova's (or Modcrab's) health drops to 0 or lower. It is possible that the battle ends in a middle of a phase after Vova's attack.\nOf course, Vova wants to win the fight. But also he wants to do it as fast as possible. So he wants to make up a strategy that will allow him to win the fight after the minimum possible number of phases.\nHelp Vova to make up a strategy! You may assume that Vova never runs out of healing potions, and that he can always win.\n-----Input-----\nThe first line contains three integers h_1, a_1, c_1 (1 \u2264 h_1, a_1 \u2264 100, 2 \u2264 c_1 \u2264 100) \u2014 Vova's health, Vova's attack power and the healing power of a potion.\nThe second line contains two integers h_2, a_2 (1 \u2264 h_2 \u2264 100, 1 \u2264 a_2 < c_1) \u2014 the Modcrab's health and his attack power.\n-----Output-----\nIn the first line print one integer n denoting the minimum number of phases required to win the battle.\nThen print n lines. i-th line must be equal to HEAL if Vova drinks a potion in i-th phase, or STRIKE if he attacks the Modcrab.\nThe strategy must be valid: Vova's character must not be defeated before slaying the Modcrab, and the monster's health must be 0 or lower after Vova's last action.\nIf there are multiple optimal solutions, print any of them.\n-----Examples-----\nInput\n10 6 100\n17 5\nOutput\n4\nSTRIKE\nHEAL\nSTRIKE\nSTRIKE\nInput\n11 6 100\n12 5\nOutput\n2\nSTRIKE\nSTRIKE\n-----Note-----\nIn the first example Vova's character must heal before or after his first attack. Otherwise his health will drop to zero in 2 phases while he needs 3 strikes to win.\nIn the second example no healing needed, two strikes are enough to get monster to zero health and win with 6 health left.\n\ndef",
        "answer": "def battle(h1, a1, c1, h2, a2):\n    if h1 < h2:\n        return 'STRIKE'\n    elif h1 > h2:\n        return 'HEAL'\n    else:\n        if a1 < a2:\n            return 'STRIKE'\n        elif a1 > a2:\n            return 'HEAL'\n        else:\n            return 'STRIKE'",
        "difficulty": "interview"
    },
    {
        "task_id": 1558,
        "prompt": "Complete the Python function given the prompt below:Vanya wants to pass n exams and get the academic scholarship. He will get the scholarship if the average grade mark for all the exams is at least avg. The exam grade cannot exceed r. Vanya has passed the exams and got grade a_{i} for the i-th exam. To increase the grade for the i-th exam by 1 point, Vanya must write b_{i} essays. He can raise the exam grade multiple times.\nWhat is the minimum number of essays that Vanya needs to write to get scholarship?\n-----Input-----\nThe first line contains three integers n, r, avg (1 \u2264 n \u2264 10^5, 1 \u2264 r \u2264 10^9, 1 \u2264 avg \u2264 min(r, 10^6))\u00a0\u2014 the number of exams, the maximum grade and the required grade point average, respectively.\nEach of the following n lines contains space-separated integers a_{i} and b_{i} (1 \u2264 a_{i} \u2264 r, 1 \u2264 b_{i} \u2264 10^6).\n-----Output-----\nIn the first line print the minimum number of essays.\n-----Examples-----\nInput\n5 5 4\n5 2\n4 7\n3 1\n3 2\n2 5\nOutput\n4\nInput\n2 5 4\n5 2\n5 2\nOutput\n0\n-----Note-----\nIn the first sample Vanya can write 2 essays for the 3rd exam to raise his grade by 2 points and 2 essays for the 4th exam to raise his grade by 1 point.\nIn the second sample, Vanya doesn't need to write any essays as his general point average already is above average.\n\ndef",
        "answer": "def solve(n, r, avg):\n    if avg > r:\n        return 0\n    if avg == r:\n        return 1\n    return n + 1",
        "difficulty": "interview"
    },
    {
        "task_id": 1559,
        "prompt": "Complete the Python function given the prompt below:Alice became interested in periods of integer numbers. We say positive $X$ integer number is periodic with length $L$ if there exists positive integer number $P$ with $L$ digits such that $X$ can be written as $PPPP\u2026P$. For example:\n$X = 123123123$ is periodic number with length $L = 3$ and $L = 9$\n$X = 42424242$ is periodic number with length $L = 2,L = 4$ and $L = 8$\n$X = 12345$ is periodic number with length $L = 5$\nFor given positive period length $L$ and positive integer number $A$, Alice wants to find smallest integer number $X$ strictly greater than $A$ that is periodic with length L.\n-----Input-----\nFirst line contains one positive integer number $L \\ (1 \\leq L \\leq 10^5)$ representing length of the period. Second line contains one positive integer number $A \\ (1 \\leq A \\leq 10^{100 000})$.\n-----Output-----\nOne positive integer number representing smallest positive number that is periodic with length $L$ and is greater than $A$.\n-----Examples-----\nInput\n3\n123456\nOutput\n124124\nInput\n3\n12345\nOutput\n100100\n-----Note-----\nIn first example 124124 is the smallest number greater than 123456 that can be written with period L = 3 (P = 124).\nIn the second example 100100 is the smallest number greater than 12345 with period L = 3 (P=100)\n\ndef",
        "answer": "def period(A,L):\n    P = A\n    while len(str(P)) < L:\n        P = P + A\n    return P",
        "difficulty": "interview"
    },
    {
        "task_id": 1560,
        "prompt": "Complete the Python function given the prompt below:Anatoly lives in the university dorm as many other students do. As you know, cockroaches are also living there together with students. Cockroaches might be of two colors: black and red. There are n cockroaches living in Anatoly's room.\nAnatoly just made all his cockroaches to form a single line. As he is a perfectionist, he would like the colors of cockroaches in the line to alternate. He has a can of black paint and a can of red paint. In one turn he can either swap any two cockroaches, or take any single cockroach and change it's color.\nHelp Anatoly find out the minimum number of turns he needs to make the colors of cockroaches in the line alternate.\n-----Input-----\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 100 000)\u00a0\u2014 the number of cockroaches.\nThe second line contains a string of length n, consisting of characters 'b' and 'r' that denote black cockroach and red cockroach respectively.\n-----Output-----\nPrint one integer\u00a0\u2014 the minimum number of moves Anatoly has to perform in order to make the colors of cockroaches in the line to alternate.\n-----Examples-----\nInput\n5\nrbbrr\nOutput\n1\nInput\n5\nbbbbb\nOutput\n2\nInput\n3\nrbr\nOutput\n0\n-----Note-----\nIn the first sample, Anatoly has to swap third and fourth cockroaches. He needs 1 turn to do this.\nIn the second sample, the optimum answer is to paint the second and the fourth cockroaches red. This requires 2 turns.\nIn the third sample, the colors of cockroaches in the line are alternating already, thus the answer is 0.\n\ndef",
        "answer": "def cockroach_swap(n, s):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1 if s[0]!= s[1] else 0\n    return min(cockroach_swap(n - 2, s) + 1, cockroach_swap(n - 1, s) + 1)",
        "difficulty": "interview"
    },
    {
        "task_id": 1561,
        "prompt": "Complete the Python function given the prompt below:Suppose that you are in a campus and have to go for classes day by day. As you may see, when you hurry to a classroom, you surprisingly find that many seats there are already occupied. Today you and your friends went for class, and found out that some of the seats were occupied.\nThe classroom contains $n$ rows of seats and there are $m$ seats in each row. Then the classroom can be represented as an $n \\times m$ matrix. The character '.' represents an empty seat, while '*' means that the seat is occupied. You need to find $k$ consecutive empty seats in the same row or column and arrange those seats for you and your friends. Your task is to find the number of ways to arrange the seats. Two ways are considered different if sets of places that students occupy differs.\n-----Input-----\nThe first line contains three positive integers $n,m,k$ ($1 \\leq n, m, k \\leq 2\\,000$), where $n,m$ represent the sizes of the classroom and $k$ is the number of consecutive seats you need to find.\nEach of the next $n$ lines contains $m$ characters '.' or '*'. They form a matrix representing the classroom, '.' denotes an empty seat, and '*' denotes an occupied seat.\n-----Output-----\nA single number, denoting the number of ways to find $k$ empty seats in the same row or column.\n-----Examples-----\nInput\n2 3 2\n**.\n...\nOutput\n3\nInput\n1 2 2\n..\nOutput\n1\nInput\n3 3 4\n.*.\n*.*\n.*.\nOutput\n0\n-----Note-----\nIn the first sample, there are three ways to arrange those seats. You can take the following seats for your arrangement.   $(1,3)$, $(2,3)$  $(2,2)$, $(2,3)$  $(2,1)$, $(2,2)$\n\ndef",
        "answer": "def numberOfWaysToFill(n, m, k):\n    # Write your code here\n    if n == 1 and m == 1:\n        return 1\n    if n == 1 and m > 1:\n        return 0\n    if n > 1 and m == 1:\n        return 0\n    if n == 2 and m == 2:\n        return 1\n    if n == 2 and m > 2:\n        return 0\n    if n > 2 and m == 2:\n        return 0\n    if n == 3 and m == 3:\n        return 1\n    if n == 3 and m > 3:\n        return 0\n    if n > 3 and m == 3:\n        return 0\n    if n == 4 and m == 4:\n        return 2\n    if n == 4 and m > 4:\n        return 0\n    if n > 4 and m == 4:\n        return 0\n    if n == 5 and m == 5:\n        return 3\n    if n == 5 and m > 5:\n        return 0\n    if n > 5 and m == 5:\n        return 0\n    if n == 6 and m == 6:\n        return 4\n    if n == 6 and m > 6:\n        return 0\n    if n > 6 and m == 6:\n        return 0\n    if n == 7 and m == 7:\n        return 5\n    if n == 7 and m > 7:\n        return 0\n    if n > 7 and m == 7:\n        return 0\n    if n == 8 and m == 8:\n        return 6\n    if n == 8 and m > 8:\n        return 0\n    if n > 8 and m == 8:\n        return 0\n    if n == 9 and m == 9:\n        return 7\n    if n ==",
        "difficulty": "interview"
    },
    {
        "task_id": 1562,
        "prompt": "Complete the Python function given the prompt below:You are on the island which can be represented as a $n \\times m$ table. The rows are numbered from $1$ to $n$ and the columns are numbered from $1$ to $m$. There are $k$ treasures on the island, the $i$-th of them is located at the position $(r_i, c_i)$.\nInitially you stand at the lower left corner of the island, at the position $(1, 1)$. If at any moment you are at the cell with a treasure, you can pick it up without any extra time. In one move you can move up (from $(r, c)$ to $(r+1, c)$), left (from $(r, c)$ to $(r, c-1)$), or right (from position $(r, c)$ to $(r, c+1)$). Because of the traps, you can't move down.\nHowever, moving up is also risky. You can move up only if you are in a safe column. There are $q$ safe columns: $b_1, b_2, \\ldots, b_q$. You want to collect all the treasures as fast as possible. Count the minimum number of moves required to collect all the treasures.\n-----Input-----\nThe first line contains integers $n$, $m$, $k$ and $q$ ($2 \\le n, \\, m, \\, k, \\, q \\le 2 \\cdot 10^5$, $q \\le m$)\u00a0\u2014 the number of rows, the number of columns, the number of treasures in the island and the number of safe columns.\nEach of the next $k$ lines contains two integers $r_i, c_i$, ($1 \\le r_i \\le n$, $1 \\le c_i \\le m$)\u00a0\u2014 the coordinates of the cell with a treasure. All treasures are located in distinct cells.\nThe last line contains $q$ distinct integers $b_1, b_2, \\ldots, b_q$ ($1 \\le b_i \\le m$) \u2014 the indices of safe columns.\n-----Output-----\nPrint the minimum number of moves required to collect all the treasures.\n-----Examples-----\nInput\n3 3 3 2\n1 1\n2 1\n3 1\n2 3\nOutput\n6\nInput\n3 5 3 2\n1 2\n2 3\n3 1\n1 5\nOutput\n8\nInput\n3 6 3 2\n1 6\n2 2\n3 4\n1 6\nOutput\n15\n-----Note-----\nIn the first example you should use the second column to go up, collecting in each row treasures from the first column. [Image] \nIn the second example, it is optimal to use the first column to go up. [Image] \nIn the third example, it is optimal to collect the treasure at cell $(1;6)$, go up to row $2$ at column $6$, then collect the treasure at cell $(2;2)$, go up to the top row at column $1$ and collect the last treasure at cell $(3;4)$. That's a total of $15$ moves. [Image]\n\ndef",
        "answer": "def treasureIsland(n, m, k, q, r_c):\n    r_c.sort(key=lambda x: x[1])\n    r_c.sort(key=lambda x: x[0])\n    r_c = [r_c[i] for i in range(k)]\n    r_c.sort(key=lambda x: x[0])\n    r_c.sort(key=lambda x: x[1])\n    r_c = [r_c[i] for i in range(k)]\n    r_c.sort(key=lambda x: x[0])\n    r_c.sort(key=lambda x: x[1])\n    r_c = [r_c[i] for i in range(k)]\n    r_c.sort(key=lambda x: x[0])\n    r_c.sort(key=lambda x: x[1])\n    r_c = [r_c[i] for i in range(k)]\n    r_c.sort(key=lambda x: x[0])\n    r_c.sort(key=lambda x: x[1])\n    r_c = [r_c[i] for i in range(k)]\n    r_c.sort(key=lambda x: x[0])\n    r_c.sort(key=lambda x: x[1])\n    r_c = [r_c[i] for i in range(k)]\n    r_c.sort(key=lambda x: x[0])\n    r_c.sort(key=lambda x: x[1])\n    r_c = [r_c[i] for i in range(k)]\n    r_c.",
        "difficulty": "interview"
    },
    {
        "task_id": 1563,
        "prompt": "Complete the Python function given the prompt below:You've got an undirected graph, consisting of n vertices and m edges. We will consider the graph's vertices numbered with integers from 1 to n. Each vertex of the graph has a color. The color of the i-th vertex is an integer c_{i}.\nLet's consider all vertices of the graph, that are painted some color k. Let's denote a set of such as V(k). Let's denote the value of the neighbouring color diversity for color k as the cardinality of the set Q(k) = {c_{u}\u00a0: \u00a0c_{u} \u2260 k and there is vertex v belonging to set V(k) such that nodes v and u are connected by an edge of the graph}.\nYour task is to find such color k, which makes the cardinality of set Q(k) maximum. In other words, you want to find the color that has the most diverse neighbours. Please note, that you want to find such color k, that the graph has at least one vertex with such color.\n-----Input-----\nThe first line contains two space-separated integers n, m (1 \u2264 n, m \u2264 10^5) \u2014 the number of vertices end edges of the graph, correspondingly. The second line contains a sequence of integers c_1, c_2,..., c_{n} (1 \u2264 c_{i} \u2264 10^5) \u2014 the colors of the graph vertices. The numbers on the line are separated by spaces.\nNext m lines contain the description of the edges: the i-th line contains two space-separated integers a_{i}, b_{i} (1 \u2264 a_{i}, b_{i} \u2264 n;\u00a0a_{i} \u2260 b_{i}) \u2014 the numbers of the vertices, connected by the i-th edge. \nIt is guaranteed that the given graph has no self-loops or multiple edges.\n-----Output-----\nPrint the number of the color which has the set of neighbours with the maximum cardinality. It there are multiple optimal colors, print the color with the minimum number. Please note, that you want to find such color, that the graph has at least one vertex with such color.\n-----Examples-----\nInput\n6 6\n1 1 2 3 5 8\n1 2\n3 2\n1 4\n4 3\n4 5\n4 6\nOutput\n3\nInput\n5 6\n4 2 5 2 4\n1 2\n2 3\n3 1\n5 3\n5 4\n3 4\nOutput\n2\n\ndef",
        "answer": "def color_diversity(n, m, edges, colors):\n    # Write your code here\n    colors_dict = {}\n    for color in colors:\n        colors_dict[color] = 0\n    for edge in edges:\n        colors_dict[edge[1]] += 1\n    max_color = 0\n    max_color_count = 0\n    for color in colors_dict:\n        if colors_dict[color] > max_color_count:\n            max_color_count = colors_dict[color]\n            max_color = color\n    return max_color",
        "difficulty": "interview"
    },
    {
        "task_id": 1564,
        "prompt": "Complete the Python function given the prompt below:Monocarp has got two strings $s$ and $t$ having equal length. Both strings consist of lowercase Latin letters \"a\" and \"b\". \nMonocarp wants to make these two strings $s$ and $t$ equal to each other. He can do the following operation any number of times: choose an index $pos_1$ in the string $s$, choose an index $pos_2$ in the string $t$, and swap $s_{pos_1}$ with $t_{pos_2}$.\nYou have to determine the minimum number of operations Monocarp has to perform to make $s$ and $t$ equal, and print any optimal sequence of operations \u2014 or say that it is impossible to make these strings equal.\n-----Input-----\nThe first line contains one integer $n$ $(1 \\le n \\le 2 \\cdot 10^{5})$ \u2014 the length of $s$ and $t$.\nThe second line contains one string $s$ consisting of $n$ characters \"a\" and \"b\". \nThe third line contains one string $t$ consisting of $n$ characters \"a\" and \"b\". \n-----Output-----\nIf it is impossible to make these strings equal, print $-1$.\nOtherwise, in the first line print $k$ \u2014 the minimum number of operations required to make the strings equal. In each of the next $k$ lines print two integers \u2014 the index in the string $s$ and the index in the string $t$ that should be used in the corresponding swap operation. \n-----Examples-----\nInput\n4\nabab\naabb\nOutput\n2\n3 3\n3 2\nInput\n1\na\nb\nOutput\n-1\nInput\n8\nbabbaabb\nabababaa\nOutput\n3\n2 6\n1 3\n7 8\n-----Note-----\nIn the first example two operations are enough. For example, you can swap the third letter in $s$ with the third letter in $t$. Then $s = $ \"abbb\", $t = $ \"aaab\". Then swap the third letter in $s$ and the second letter in $t$. Then both $s$ and $t$ are equal to \"abab\".\nIn the second example it's impossible to make two strings equal.\n\ndef",
        "answer": "def min_swaps(s, t):\n    s_count = 0\n    t_count = 0\n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            s_count += 1\n            t_count += 1\n    return min(s_count, t_count)",
        "difficulty": "interview"
    },
    {
        "task_id": 1565,
        "prompt": "Complete the Python function given the prompt below:Dima worked all day and wrote down on a long paper strip his favorite number $n$ consisting of $l$ digits. Unfortunately, the strip turned out to be so long that it didn't fit in the Dima's bookshelf.\nTo solve the issue, Dima decided to split the strip into two non-empty parts so that each of them contains a positive integer without leading zeros. After that he will compute the sum of the two integers and write it down on a new strip.\nDima wants the resulting integer to be as small as possible, because it increases the chances that the sum will fit it in the bookshelf. Help Dima decide what is the minimum sum he can obtain.\n-----Input-----\nThe first line contains a single integer $l$ ($2 \\le l \\le 100\\,000$)\u00a0\u2014 the length of the Dima's favorite number.\nThe second line contains the positive integer $n$ initially written on the strip: the Dima's favorite number.\nThe integer $n$ consists of exactly $l$ digits and it does not contain leading zeros. Dima guarantees, that there is at least one valid way to split the strip.\n-----Output-----\nPrint a single integer\u00a0\u2014 the smallest number Dima can obtain.\n-----Examples-----\nInput\n7\n1234567\nOutput\n1801\nInput\n3\n101\nOutput\n11\n-----Note-----\nIn the first example Dima can split the number $1234567$ into integers $1234$ and $567$. Their sum is $1801$.\nIn the second example Dima can split the number $101$ into integers $10$ and $1$. Their sum is $11$. Note that it is impossible to split the strip into \"1\" and \"01\" since the numbers can't start with zeros.\n\ndef",
        "answer": "def split_strip(n):\n    return min(n, n // 10 + n % 10)",
        "difficulty": "interview"
    },
    {
        "task_id": 1566,
        "prompt": "Complete the Python function given the prompt below:The zombies are gathering in their secret lair! Heidi will strike hard to destroy them once and for all. But there is a little problem... Before she can strike, she needs to know where the lair is. And the intel she has is not very good.\nHeidi knows that the lair can be represented as a rectangle on a lattice, with sides parallel to the axes. Each vertex of the polygon occupies an integer point on the lattice. For each cell of the lattice, Heidi can check the level of Zombie Contamination. This level is an integer between 0 and 4, equal to the number of corners of the cell that are inside or on the border of the rectangle.\nAs a test, Heidi wants to check that her Zombie Contamination level checker works. Given the output of the checker, Heidi wants to know whether it could have been produced by a single non-zero area rectangular-shaped lair (with axis-parallel sides). [Image]\n-----Input-----\nThe first line of each test case contains one integer N, the size of the lattice grid (5 \u2264 N \u2264 50). The next N lines each contain N characters, describing the level of Zombie Contamination of each cell in the lattice. Every character of every line is a digit between 0 and 4.\nCells are given in the same order as they are shown in the picture above: rows go in the decreasing value of y coordinate, and in one row cells go in the order of increasing x coordinate. This means that the first row corresponds to cells with coordinates (1, N),..., (N, N) and the last row corresponds to cells with coordinates (1, 1),..., (N, 1).\n-----Output-----\nThe first line of the output should contain Yes if there exists a single non-zero area rectangular lair with corners on the grid for which checking the levels of Zombie Contamination gives the results given in the input, and No otherwise.\n-----Example-----\nInput\n6\n000000\n000000\n012100\n024200\n012100\n000000\nOutput\nYes\n-----Note-----\nThe lair, if it exists, has to be rectangular (that is, have corners at some grid points with coordinates (x_1, y_1), (x_1, y_2), (x_2, y_1), (x_2, y_2)), has a non-zero area and be contained inside of the grid (that is, 0 \u2264 x_1 < x_2 \u2264 N, 0 \u2264 y_1 < y_2 \u2264 N), and result in the levels of Zombie Contamination as reported in the input.\n\ndef",
        "answer": "def check_zombie_contamination(lattice):\n    # Write your code here\n    # print(lattice)\n    # print(len(lattice))\n    # print(len(lattice[0]))\n    # print(lattice[0][0])\n    # print(lattice[0][1])\n    # print(lattice[1][0])\n    # print(lattice[1][1])\n    # print(lattice[2][0])\n    # print(lattice[2][1])\n    # print(lattice[3][0])\n    # print(lattice[3][1])\n    # print(lattice[4][0])\n    # print(lattice[4][1])\n    # print(lattice[5][0])\n    # print(lattice[5][1])\n    # print(lattice[6][0])\n    # print(lattice[6][1])\n    # print(lattice[7][0])\n    # print(lattice[7][1])\n    # print(lattice[8][0])\n    # print(lattice[8][1])\n    # print(lattice[9][0])\n    # print(lattice[9][1])\n    # print(lattice[10][0])\n    # print(lattice[10][1])\n    # print(lattice[11][0])\n    # print(lattice[11][1])\n    # print(lattice[12][0])\n    # print(lattice[12][1])\n    # print(lattice[",
        "difficulty": "interview"
    },
    {
        "task_id": 1567,
        "prompt": "Complete the Python function given the prompt below:We define $x \\bmod y$ as the remainder of division of $x$ by $y$ ($\\%$ operator in C++ or Java, mod operator in Pascal).\nLet's call an array of positive integers $[a_1, a_2, \\dots, a_k]$ stable if for every permutation $p$ of integers from $1$ to $k$, and for every non-negative integer $x$, the following condition is met:\n $ (((x \\bmod a_1) \\bmod a_2) \\dots \\bmod a_{k - 1}) \\bmod a_k = (((x \\bmod a_{p_1}) \\bmod a_{p_2}) \\dots \\bmod a_{p_{k - 1}}) \\bmod a_{p_k} $ \nThat is, for each non-negative integer $x$, the value of $(((x \\bmod a_1) \\bmod a_2) \\dots \\bmod a_{k - 1}) \\bmod a_k$ does not change if we reorder the elements of the array $a$.\nFor two given integers $n$ and $k$, calculate the number of stable arrays $[a_1, a_2, \\dots, a_k]$ such that $1 \\le a_1 < a_2 < \\dots < a_k \\le n$.\n-----Input-----\nThe only line contains two integers $n$ and $k$ ($1 \\le n, k \\le 5 \\cdot 10^5$).\n-----Output-----\nPrint one integer \u2014 the number of stable arrays $[a_1, a_2, \\dots, a_k]$ such that $1 \\le a_1 < a_2 < \\dots < a_k \\le n$. Since the answer may be large, print it modulo $998244353$.\n-----Examples-----\nInput\n7 3\nOutput\n16\nInput\n3 7\nOutput\n0\nInput\n1337 42\nOutput\n95147305\nInput\n1 1\nOutput\n1\nInput\n500000 1\nOutput\n500000\n\ndef",
        "answer": "def f(n, k):\n    if n == 1:\n        return 1\n    if n == 2:\n        return k\n    if n == 3:\n        return k * k\n    if n == 4:\n        return k * k * k\n    if n == 5:\n        return k * k * k * k\n    if n == 6:\n        return k * k * k * k * k\n    if n == 7:\n        return k * k * k * k * k * k\n    if n == 8:\n        return k * k * k * k * k * k * k\n    if n == 9:\n        return k * k * k * k * k * k * k * k\n    if n == 10:\n        return k * k * k * k * k * k * k * k * k\n    if n == 11:\n        return k * k * k * k * k * k * k * k * k * k\n    if n == 12:\n        return k * k * k * k * k * k * k * k * k * k * k\n    if n == 13:\n        return k * k * k * k * k * k * k * k * k * k * k * k\n    if n == 14:\n        return k * k * k * k * k * k * k * k * k * k * k * k * k\n    if n == 15:\n        return k * k * k * k * k * k * k * k * k * k * k * k * k * k\n    if n == 16:\n        return k * k * k * k * k * k * k * k * k * k * k * k * k * k * k\n    if n == 17:\n",
        "difficulty": "interview"
    },
    {
        "task_id": 1568,
        "prompt": "Complete the Python function given the prompt below:There are n incoming messages for Vasya. The i-th message is going to be received after t_{i} minutes. Each message has a cost, which equals to A initially. After being received, the cost of a message decreases by B each minute (it can become negative). Vasya can read any message after receiving it at any moment of time. After reading the message, Vasya's bank account receives the current cost of this message. Initially, Vasya's bank account is at 0.\nAlso, each minute Vasya's bank account receives C\u00b7k, where k is the amount of received but unread messages.\nVasya's messages are very important to him, and because of that he wants to have all messages read after T minutes.\nDetermine the maximum amount of money Vasya's bank account can hold after T minutes.\n-----Input-----\nThe first line contains five integers n, A, B, C and T (1 \u2264 n, A, B, C, T \u2264 1000).\nThe second string contains n integers t_{i} (1 \u2264 t_{i} \u2264 T).\n-----Output-----\nOutput one integer \u00a0\u2014 the answer to the problem.\n-----Examples-----\nInput\n4 5 5 3 5\n1 5 5 4\nOutput\n20\nInput\n5 3 1 1 3\n2 2 2 1 1\nOutput\n15\nInput\n5 5 3 4 5\n1 2 3 4 5\nOutput\n35\n-----Note-----\nIn the first sample the messages must be read immediately after receiving, Vasya receives A points for each message, n\u00b7A = 20 in total.\nIn the second sample the messages can be read at any integer moment.\nIn the third sample messages must be read at the moment T. This way Vasya has 1, 2, 3, 4 and 0 unread messages at the corresponding minutes, he gets 40 points for them. When reading messages, he receives (5 - 4\u00b73) + (5 - 3\u00b73) + (5 - 2\u00b73) + (5 - 1\u00b73) + 5 =  - 5 points. This is 35 in total.\n\ndef",
        "answer": "def read_messages(n, t, a, b, c, t_list):\n    t_list = [int(i) for i in t_list]\n    t_list.sort()\n    t_list.reverse()\n    t_list = [i - t_list[i] for i in range(len(t_list))]\n    t_list.sort()\n    t_list.reverse()\n    t_list = [i * a for i in t_list]\n    t_list.sort()\n    t_list.reverse()\n    t_list = [i + b for i in t_list]\n    t_list.sort()\n    t_list.reverse()\n    t_list = [i + c for i in t_list]\n    t_list.sort()\n    t_list.reverse()\n    return sum(t_list)",
        "difficulty": "interview"
    },
    {
        "task_id": 1569,
        "prompt": "Complete the Python function given the prompt below:Breaking Good is a new video game which a lot of gamers want to have. There is a certain level in the game that is really difficult even for experienced gamers.\nWalter William, the main character of the game, wants to join a gang called Los Hermanos (The Brothers). The gang controls the whole country which consists of n cities with m bidirectional roads connecting them. There is no road is connecting a city to itself and for any two cities there is at most one road between them. The country is connected, in the other words, it is possible to reach any city from any other city using the given roads. \nThe roads aren't all working. There are some roads which need some more work to be performed to be completely functioning.\nThe gang is going to rob a bank! The bank is located in city 1. As usual, the hardest part is to escape to their headquarters where the police can't get them. The gang's headquarters is in city n. To gain the gang's trust, Walter is in charge of this operation, so he came up with a smart plan.\nFirst of all the path which they are going to use on their way back from city 1 to their headquarters n must be as short as possible, since it is important to finish operation as fast as possible.\nThen, gang has to blow up all other roads in country that don't lay on this path, in order to prevent any police reinforcements. In case of non-working road, they don't have to blow up it as it is already malfunctional. \nIf the chosen path has some roads that doesn't work they'll have to repair those roads before the operation.\nWalter discovered that there was a lot of paths that satisfied the condition of being shortest possible so he decided to choose among them a path that minimizes the total number of affected roads (both roads that have to be blown up and roads to be repaired).\nCan you help Walter complete his task and gain the gang's trust?\n-----Input-----\nThe first line of input contains two integers n, m (2 \u2264 n \u2264 10^5, $0 \\leq m \\leq \\operatorname{min}(\\frac{n(n - 1)}{2}, 10^{5})$), the number of cities and number of roads respectively.\nIn following m lines there are descriptions of roads. Each description consists of three integers x, y, z (1 \u2264 x, y \u2264 n, $z \\in \\{0,1 \\}$) meaning that there is a road connecting cities number x and y. If z = 1, this road is working, otherwise it is not.\n-----Output-----\nIn the first line output one integer k, the minimum possible number of roads affected by gang.\nIn the following k lines output three integers describing roads that should be affected. Each line should contain three integers x, y, z (1 \u2264 x, y \u2264 n, $z \\in \\{0,1 \\}$), cities connected by a road and the new state of a road. z = 1 indicates that the road between cities x and y should be repaired and z = 0 means that road should be blown up. \nYou may output roads in any order. Each affected road should appear exactly once. You may output cities connected by a single road in any order. If you output a road, it's original state should be different from z.\nAfter performing all operations accroding to your plan, there should remain working only roads lying on some certain shortest past between city 1 and n.\nIf there are multiple optimal answers output any.\n-----Examples-----\nInput\n2 1\n1 2 0\nOutput\n1\n1 2 1\nInput\n4 4\n1 2 1\n1 3 0\n2 3 1\n3 4 1\nOutput\n3\n1 2 0\n1 3 1\n2 3 0\nInput\n8 9\n1 2 0\n8 3 0\n2 3 1\n1 4 1\n8 7 0\n1 5 1\n4 6 1\n5 7 0\n6 8 0\nOutput\n3\n2 3 0\n1 5 0\n6 8 1\n-----Note-----\nIn the first test the only path is 1 - 2\nIn the second test the only shortest path is 1 - 3 - 4\nIn the third test there are multiple shortest paths but the optimal is 1 - 4 - 6 - 8\n\ndef",
        "answer": "def breaking_good(n, m, roads):\n    roads_to_be_blown = []\n    roads_to_be_repaired = []\n    for road in roads:\n        if road[2] == 0:\n            roads_to_be_blown.append(road)\n        else:\n            roads_to_be_repaired.append(road)\n    roads_to_be_blown.sort(key=lambda x: x[0])\n    roads_to_be_repaired.sort(key=lambda x: x[0])\n    roads_to_be_blown.sort(key=lambda x: x[1])\n    roads_to_be_repaired.sort(key=lambda x: x[1])\n    roads_to_be_blown.sort(key=lambda x: x[0] * x[1])\n    roads_to_be_repaired.sort(key=lambda x: x[0] * x[1])\n    roads_to_be_blown.sort(key=lambda x: x[1])\n    roads_to_be_repaired.sort(key=lambda x: x[1])\n    roads_to_be_blown.sort(key=lambda x: x[0])\n    roads_to_be_repaired.sort(key=lambda x: x[0])\n    roads_to_be_blown.sort(key=lambda x: x[1])\n    roads_to_be_repaired.sort(key=lambda x: x[1])\n    roads_to_be_blown.sort(key=lambda x: x[0] * x[1])\n    roads_to_be_repaired.sort(key=lambda x: x[0] *",
        "difficulty": "interview"
    },
    {
        "task_id": 1570,
        "prompt": "Complete the Python function given the prompt below:A soldier wants to buy w bananas in the shop. He has to pay k dollars for the first banana, 2k dollars for the second one and so on (in other words, he has to pay i\u00b7k dollars for the i-th banana). \nHe has n dollars. How many dollars does he have to borrow from his friend soldier to buy w bananas?\n-----Input-----\nThe first line contains three positive integers k, n, w (1  \u2264  k, w  \u2264  1000, 0 \u2264 n \u2264 10^9), the cost of the first banana, initial number of dollars the soldier has and number of bananas he wants. \n-----Output-----\nOutput one integer \u2014 the amount of dollars that the soldier must borrow from his friend. If he doesn't have to borrow money, output 0.\n-----Examples-----\nInput\n3 17 4\nOutput\n13\n\ndef",
        "answer": "def soldier(k, n, w):\n    return k * w - n",
        "difficulty": "interview"
    },
    {
        "task_id": 1571,
        "prompt": "Complete the Python function given the prompt below:Kaavi, the mysterious fortune teller, deeply believes that one's fate is inevitable and unavoidable. Of course, she makes her living by predicting others' future. While doing divination, Kaavi believes that magic spells can provide great power for her to see the future. [Image]\u00a0\nKaavi has a string $T$ of length $m$ and all the strings with the prefix $T$ are magic spells. Kaavi also has a string $S$ of length $n$ and an empty string $A$.\nDuring the divination, Kaavi needs to perform a sequence of operations. There are two different operations: Delete the first character of $S$ and add it at the front of $A$. Delete the first character of $S$ and add it at the back of $A$.\nKaavi can perform no more than $n$ operations. To finish the divination, she wants to know the number of different operation sequences to make $A$ a magic spell (i.e. with the prefix $T$). As her assistant, can you help her? The answer might be huge, so Kaavi only needs to know the answer modulo $998\\,244\\,353$.\nTwo operation sequences are considered different if they are different in length or there exists an $i$ that their $i$-th operation is different. \nA substring is a contiguous sequence of characters within a string. A prefix of a string $S$ is a substring of $S$ that occurs at the beginning of $S$.\n-----Input-----\nThe first line contains a string $S$ of length $n$ ($1 \\leq n \\leq 3000$).\nThe second line contains a string $T$ of length $m$ ($1 \\leq m \\leq n$).\nBoth strings contain only lowercase Latin letters.\n-----Output-----\nThe output contains only one integer \u00a0\u2014 the answer modulo $998\\,244\\,353$.\n-----Examples-----\nInput\nabab\nba\nOutput\n12\nInput\ndefineintlonglong\nsignedmain\nOutput\n0\nInput\nrotator\nrotator\nOutput\n4\nInput\ncacdcdbbbb\nbdcaccdbbb\nOutput\n24\n-----Note-----\nThe first test:\n$\\text{baba abab bbaa baab baab}$\nThe red ones are the magic spells. In the first operation, Kaavi can either add the first character \"a\" at the front or the back of $A$, although the results are the same, they are considered as different operations. So the answer is $6\\times2=12$.\n\ndef",
        "answer": "def divination(S, T):\n    n = len(S)\n    m = len(T)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if S[j - 1] == T[i - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[m][n]",
        "difficulty": "interview"
    },
    {
        "task_id": 1572,
        "prompt": "Complete the Python function given the prompt below:You have array a_1, a_2,..., a_{n}. Segment [l, r] (1 \u2264 l \u2264 r \u2264 n) is good if a_{i} = a_{i} - 1 + a_{i} - 2, for all i (l + 2 \u2264 i \u2264 r).\nLet's define len([l, r]) = r - l + 1, len([l, r]) is the length of the segment [l, r]. Segment [l_1, r_1], is longer than segment [l_2, r_2], if len([l_1, r_1]) > len([l_2, r_2]).\nYour task is to find a good segment of the maximum length in array a. Note that a segment of length 1 or 2 is always good.\n-----Input-----\nThe first line contains a single integer n (1 \u2264 n \u2264 10^5) \u2014 the number of elements in the array. The second line contains integers: a_1, a_2,..., a_{n} (0 \u2264 a_{i} \u2264 10^9).\n-----Output-----\nPrint the length of the longest good segment in array a.\n-----Examples-----\nInput\n10\n1 2 3 5 8 13 21 34 55 89\nOutput\n10\nInput\n5\n1 1 1 1 1\nOutput\n2\n\ndef",
        "answer": "def longest_good_segment(a):\n    n = len(a)\n    l = [0] * n\n    r = [0] * n\n    l[0] = 1\n    r[n - 1] = 1\n    for i in range(1, n):\n        l[i] = 1\n        for j in range(i):\n            if a[i] - a[j] == 1 + a[j] - 2:\n                l[i] = max(l[i], l[j] + 1)\n    for i in range(n - 2, -1, -1):\n        r[i] = 1\n        for j in range(i + 1, n):\n            if a[i] - a[j] == 1 + a[j] - 2:\n                r[i] = max(r[i], r[j] + 1)\n    max_len = 0\n    for i in range(n):\n        max_len = max(max_len, l[i] + r[i] - 1)\n    return max_len",
        "difficulty": "interview"
    },
    {
        "task_id": 1573,
        "prompt": "Complete the Python function given the prompt below:Kefa wants to celebrate his first big salary by going to restaurant. However, he needs company. \nKefa has n friends, each friend will agree to go to the restaurant if Kefa asks. Each friend is characterized by the amount of money he has and the friendship factor in respect to Kefa. The parrot doesn't want any friend to feel poor compared to somebody else in the company (Kefa doesn't count). A friend feels poor if in the company there is someone who has at least d units of money more than he does. Also, Kefa wants the total friendship factor of the members of the company to be maximum. Help him invite an optimal company!\n-----Input-----\nThe first line of the input contains two space-separated integers, n and d (1 \u2264 n \u2264 10^5, $1 \\leq d \\leq 10^{9}$) \u2014 the number of Kefa's friends and the minimum difference between the amount of money in order to feel poor, respectively.\nNext n lines contain the descriptions of Kefa's friends, the (i + 1)-th line contains the description of the i-th friend of type m_{i}, s_{i} (0 \u2264 m_{i}, s_{i} \u2264 10^9) \u2014 the amount of money and the friendship factor, respectively. \n-----Output-----\nPrint the maximum total friendship factir that can be reached.\n-----Examples-----\nInput\n4 5\n75 5\n0 100\n150 20\n75 1\nOutput\n100\nInput\n5 100\n0 7\n11 32\n99 10\n46 8\n87 54\nOutput\n111\n-----Note-----\nIn the first sample test the most profitable strategy is to form a company from only the second friend. At all other variants the total degree of friendship will be worse.\nIn the second sample test we can take all the friends.\n\ndef",
        "answer": "def max_total_friendship(n, d):\n    friends = []\n    for _ in range(n):\n        friends.append(list(map(int, input().split())))\n    friends.sort(key=lambda x: x[1])\n    total_friendship = 0\n    for friend in friends:\n        if friend[1] - friend[0] > d:\n            total_friendship += friend[1]\n        else:\n            total_friendship += friend[0]\n    return total_friendship",
        "difficulty": "interview"
    },
    {
        "task_id": 1574,
        "prompt": "Complete the Python function given the prompt below:Do you know a story about the three musketeers? Anyway, you will learn about its origins now.\nRichelimakieu is a cardinal in the city of Bearis. He is tired of dealing with crime by himself. He needs three brave warriors to help him to fight against bad guys.\nThere are n warriors. Richelimakieu wants to choose three of them to become musketeers but it's not that easy. The most important condition is that musketeers must know each other to cooperate efficiently. And they shouldn't be too well known because they could be betrayed by old friends. For each musketeer his recognition is the number of warriors he knows, excluding other two musketeers.\nHelp Richelimakieu! Find if it is possible to choose three musketeers knowing each other, and what is minimum possible sum of their recognitions.\n-----Input-----\nThe first line contains two space-separated integers, n and m (3 \u2264 n \u2264 4000, 0 \u2264 m \u2264 4000) \u2014 respectively number of warriors and number of pairs of warriors knowing each other.\ni-th of the following m lines contains two space-separated integers a_{i} and b_{i} (1 \u2264 a_{i}, b_{i} \u2264 n, a_{i} \u2260 b_{i}). Warriors a_{i} and b_{i} know each other. Each pair of warriors will be listed at most once.\n-----Output-----\nIf Richelimakieu can choose three musketeers, print the minimum possible sum of their recognitions. Otherwise, print \"-1\" (without the quotes).\n-----Examples-----\nInput\n5 6\n1 2\n1 3\n2 3\n2 4\n3 4\n4 5\nOutput\n2\nInput\n7 4\n2 1\n3 6\n5 1\n1 7\nOutput\n-1\n-----Note-----\nIn the first sample Richelimakieu should choose a triple 1, 2, 3. The first musketeer doesn't know anyone except other two musketeers so his recognition is 0. The second musketeer has recognition 1 because he knows warrior number 4. The third musketeer also has recognition 1 because he knows warrior 4. Sum of recognitions is 0 + 1 + 1 = 2.\nThe other possible triple is 2, 3, 4 but it has greater sum of recognitions, equal to 1 + 1 + 1 = 3.\nIn the second sample there is no triple of warriors knowing each other.\n\ndef",
        "answer": "def find_triple(n, m, a, b):\n    # Write your code here\n    a.sort()\n    b.sort()\n    a_set = set(a)\n    b_set = set(b)\n    a_set.intersection_update(b_set)\n    if len(a_set) == 0:\n        return -1\n    else:\n        return sum(a_set)",
        "difficulty": "interview"
    },
    {
        "task_id": 1575,
        "prompt": "Complete the Python function given the prompt below:Finally! Vasya have come of age and that means he can finally get a passport! To do it, he needs to visit the passport office, but it's not that simple. There's only one receptionist at the passport office and people can queue up long before it actually opens. Vasya wants to visit the passport office tomorrow.\nHe knows that the receptionist starts working after t_{s} minutes have passed after midnight and closes after t_{f} minutes have passed after midnight (so that (t_{f} - 1) is the last minute when the receptionist is still working). The receptionist spends exactly t minutes on each person in the queue. If the receptionist would stop working within t minutes, he stops serving visitors (other than the one he already serves). \nVasya also knows that exactly n visitors would come tomorrow. For each visitor Vasya knows the point of time when he would come to the passport office. Each visitor queues up and doesn't leave until he was served. If the receptionist is free when a visitor comes (in particular, if the previous visitor was just served and the queue is empty), the receptionist begins to serve the newcomer immediately. [Image] \"Reception 1\" \nFor each visitor, the point of time when he would come to the passport office is positive. Vasya can come to the office at the time zero (that is, at midnight) if he needs so, but he can come to the office only at integer points of time. If Vasya arrives at the passport office at the same time with several other visitors, he yields to them and stand in the queue after the last of them.\nVasya wants to come at such point of time that he will be served by the receptionist, and he would spend the minimum possible time in the queue. Help him!\n-----Input-----\nThe first line contains three integers: the point of time when the receptionist begins to work t_{s}, the point of time when the receptionist stops working t_{f} and the time the receptionist spends on each visitor t. The second line contains one integer n\u00a0\u2014 the amount of visitors (0 \u2264 n \u2264 100 000). The third line contains positive integers in non-decreasing order\u00a0\u2014 the points of time when the visitors arrive to the passport office.\nAll times are set in minutes and do not exceed 10^12; it is guaranteed that t_{s} < t_{f}. It is also guaranteed that Vasya can arrive at the passport office at such a point of time that he would be served by the receptionist.\n-----Output-----\nPrint single non-negative integer\u00a0\u2014 the point of time when Vasya should arrive at the passport office. If Vasya arrives at the passport office at the same time with several other visitors, he yields to them and queues up the last. If there are many answers, you can print any of them.\n-----Examples-----\nInput\n10 15 2\n2\n10 13\nOutput\n12\nInput\n8 17 3\n4\n3 4 5 8\nOutput\n2\n-----Note-----\nIn the first example the first visitor comes exactly at the point of time when the receptionist begins to work, and he is served for two minutes. At 12 minutes after the midnight the receptionist stops serving the first visitor, and if Vasya arrives at this moment, he will be served immediately, because the next visitor would only come at 13 minutes after midnight.\nIn the second example, Vasya has to come before anyone else to be served.\n\ndef",
        "answer": "def passport(t_s, t_f, n, arr):\n    arr.sort()\n    i = 0\n    while i < len(arr):\n        if arr[i] < t_s:\n            i += 1\n        else:\n            break\n    if i == len(arr):\n        return arr[-1]\n    else:\n        return arr[i] - 1",
        "difficulty": "interview"
    },
    {
        "task_id": 1576,
        "prompt": "Complete the Python function given the prompt below:Polycarp loves ciphers. He has invented his own cipher called Right-Left.\nRight-Left cipher is used for strings. To encrypt the string $s=s_{1}s_{2} \\dots s_{n}$ Polycarp uses the following algorithm:  he writes down $s_1$,  he appends the current word with $s_2$ (i.e. writes down $s_2$ to the right of the current result),  he prepends the current word with $s_3$ (i.e. writes down $s_3$ to the left of the current result),  he appends the current word with $s_4$ (i.e. writes down $s_4$ to the right of the current result),  he prepends the current word with $s_5$ (i.e. writes down $s_5$ to the left of the current result),  and so on for each position until the end of $s$. \nFor example, if $s$=\"techno\" the process is: \"t\" $\\to$ \"te\" $\\to$ \"cte\" $\\to$ \"cteh\" $\\to$ \"ncteh\" $\\to$ \"ncteho\". So the encrypted $s$=\"techno\" is \"ncteho\".\nGiven string $t$ \u2014 the result of encryption of some string $s$. Your task is to decrypt it, i.e. find the string $s$.\n-----Input-----\nThe only line of the input contains $t$ \u2014 the result of encryption of some string $s$. It contains only lowercase Latin letters. The length of $t$ is between $1$ and $50$, inclusive.\n-----Output-----\nPrint such string $s$ that after encryption it equals $t$.\n-----Examples-----\nInput\nncteho\nOutput\ntechno\nInput\nerfdcoeocs\nOutput\ncodeforces\nInput\nz\nOutput\nz\n\ndef",
        "answer": "def right_left_cipher(t):\n    s = ''\n    for i in range(len(t)):\n        if i % 2 == 0:\n            s += t[i]\n        else:\n            s = t[i] + s\n    return s",
        "difficulty": "interview"
    },
    {
        "task_id": 1577,
        "prompt": "Complete the Python function given the prompt below:Anton likes to play chess, and so does his friend Danik.\nOnce they have played n games in a row. For each game it's known who was the winner\u00a0\u2014 Anton or Danik. None of the games ended with a tie.\nNow Anton wonders, who won more games, he or Danik? Help him determine this.\n-----Input-----\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 100 000)\u00a0\u2014 the number of games played.\nThe second line contains a string s, consisting of n uppercase English letters 'A' and 'D'\u00a0\u2014 the outcome of each of the games. The i-th character of the string is equal to 'A' if the Anton won the i-th game and 'D' if Danik won the i-th game.\n-----Output-----\nIf Anton won more games than Danik, print \"Anton\" (without quotes) in the only line of the output.\nIf Danik won more games than Anton, print \"Danik\" (without quotes) in the only line of the output.\nIf Anton and Danik won the same number of games, print \"Friendship\" (without quotes).\n-----Examples-----\nInput\n6\nADAAAA\nOutput\nAnton\nInput\n7\nDDDAADA\nOutput\nDanik\nInput\n6\nDADADA\nOutput\nFriendship\n-----Note-----\nIn the first sample, Anton won 6 games, while Danik\u00a0\u2014 only 1. Hence, the answer is \"Anton\".\nIn the second sample, Anton won 3 games and Danik won 4 games, so the answer is \"Danik\".\nIn the third sample, both Anton and Danik won 3 games and the answer is \"Friendship\".\n\ndef",
        "answer": "def chess(n, s):\n    a = 0\n    d = 0\n    for i in range(n):\n        if s[i] == 'A':\n            a += 1\n        else:\n            d += 1\n    if a > d:\n        return 'Anton'\n    elif d > a:\n        return 'Danik'\n    else:\n        return 'Friendship'",
        "difficulty": "interview"
    },
    {
        "task_id": 1578,
        "prompt": "Complete the Python function given the prompt below:For an integer N, we will choose a permutation \\{P_1, P_2,..., P_N\\} of \\{1, 2,..., N\\}.\nThen, for each i=1,2,...,N, let M_i be the remainder when i is divided by P_i.\nFind the maximum possible value of M_1 + M_2 + \\cdots + M_N.\n-----Constraints-----\n - N is an integer satisfying 1 \\leq N \\leq 10^9.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n-----Output-----\nPrint the maximum possible value of M_1 + M_2 + \\cdots + M_N.\n-----Sample Input-----\n2\n-----Sample Output-----\n1\nWhen the permutation \\{P_1, P_2\\} = \\{2, 1\\} is chosen, M_1 + M_2 = 1 + 0 = 1.\n\ndef",
        "answer": "def max_remainder(n):\n    max_rem = 0\n    for i in range(1, n+1):\n        rem = i % n\n        if rem > max_rem:\n            max_rem = rem\n    return max_rem",
        "difficulty": "interview"
    },
    {
        "task_id": 1579,
        "prompt": "Complete the Python function given the prompt below:There are N dots in a two-dimensional plane. The coordinates of the i-th dot are (x_i, y_i).\nWe will repeat the following operation as long as possible:\n - Choose four integers a, b, c, d (a \\neq c, b \\neq d) such that there are dots at exactly three of the positions (a, b), (a, d), (c, b) and (c, d), and add a dot at the remaining position.\nWe can prove that we can only do this operation a finite number of times. Find the maximum number of times we can do the operation.\n-----Constraints-----\n - 1 \\leq N \\leq 10^5\n - 1 \\leq x_i, y_i \\leq 10^5\n - If i \\neq j, x_i \\neq x_j or y_i \\neq y_j.\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nx_1 y_1\n:\nx_N y_N\n-----Output-----\nPrint the maximum number of times we can do the operation.\n-----Sample Input-----\n3\n1 1\n5 1\n5 5\n-----Sample Output-----\n1\nBy choosing a = 1, b = 1, c = 5, d = 5, we can add a dot at (1, 5). We cannot do the operation any more, so the maximum number of operations is 1.\n\ndef",
        "answer": "def max_ops(n):\n    # Write your code here\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    return max_ops(n-1) + max_ops(n-2) + max_ops(n-3)",
        "difficulty": "interview"
    },
    {
        "task_id": 1580,
        "prompt": "Complete the Python function given the prompt below:There are N cards placed face down in a row. On each card, an integer 1 or 2 is written.\nLet A_i be the integer written on the i-th card.\nYour objective is to guess A_1, A_2,..., A_N correctly.\nYou know the following facts:\n - For each i = 1, 2,..., M, the value A_{X_i} + A_{Y_i} + Z_i is an even number.\nYou are a magician and can use the following magic any number of times:\nMagic: Choose one card and know the integer A_i written on it. The cost of using this magic is 1.\nWhat is the minimum cost required to determine all of A_1, A_2,..., A_N?\nIt is guaranteed that there is no contradiction in given input.\n-----Constraints-----\n - All values in input are integers.\n - 2 \\leq N \\leq 10^5\n - 1 \\leq M \\leq 10^5\n - 1 \\leq X_i < Y_i \\leq N\n - 1 \\leq Z_i \\leq 100\n - The pairs (X_i, Y_i) are distinct.\n - There is no contradiction in input. (That is, there exist integers A_1, A_2,..., A_N that satisfy the conditions.)\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\nX_1 Y_1 Z_1\nX_2 Y_2 Z_2\n\\vdots\nX_M Y_M Z_M\n-----Output-----\nPrint the minimum total cost required to determine all of A_1, A_2,..., A_N.\n-----Sample Input-----\n3 1\n1 2 1\n-----Sample Output-----\n2\nYou can determine all of A_1, A_2, A_3 by using the magic for the first and third cards.\n\ndef",
        "answer": "def magic(n, m, x, y, z):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 3\n    if n == 6:\n        return 4\n    if n == 7:\n        return 4\n    if n == 8:\n        return 5\n    if n == 9:\n        return 5\n    if n == 10:\n        return 6\n    if n == 11:\n        return 6\n    if n == 12:\n        return 7\n    if n == 13:\n        return 7\n    if n == 14:\n        return 8\n    if n == 15:\n        return 8\n    if n == 16:\n        return 9\n    if n == 17:\n        return 9\n    if n == 18:\n        return 10\n    if n == 19:\n        return 10\n    if n == 20:\n        return 11\n    if n == 21:\n        return 11\n    if n == 22:\n        return 12\n    if n == 23:\n        return 12\n    if n == 24:\n        return 13\n    if n == 25:\n        return 13\n    if n == 26:\n        return 14\n    if n == 27:\n        return 14\n    if n == 28:\n        return 15\n    if n == 29:\n        return 15\n    if n == 30:\n        return 16\n    if n == 31:\n        return 16\n    if n == 32:\n        return 17\n    if n == 33:\n        return 17\n    if n == 34:\n        return 18\n    if n == 35:\n        return 18\n    if",
        "difficulty": "interview"
    },
    {
        "task_id": 1581,
        "prompt": "Complete the Python function given the prompt below:Find the number of sequences of length K consisting of positive integers such that the product of any two adjacent elements is at most N, modulo 10^9+7.\n-----Constraints-----\n - 1\\leq N\\leq 10^9\n - 1 2\\leq K\\leq 100 (fixed at 21:33 JST)\n - N and K are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\n-----Output-----\nPrint the number of sequences, modulo 10^9+7.\n-----Sample Input-----\n3 2\n-----Sample Output-----\n5\n(1,1), (1,2), (1,3), (2,1), and (3,1) satisfy the condition.\n\ndef",
        "answer": "def numSequences(N, K):\n    # Write your code here\n    if K == 1:\n        return N\n    if N == 1:\n        return 1\n    if K == 2:\n        return N * (N + 1) // 2\n    if N == 2:\n        return N * (N + 1) // 2\n    if K == 3:\n        return N * (N + 1) * (N + 2) // 6\n    if N == 3:\n        return N * (N + 1) * (N + 2) // 6\n    if K == 4:\n        return N * (N + 1) * (N + 2) * (N + 3) // 24\n    if N == 4:\n        return N * (N + 1) * (N + 2) * (N + 3) // 24\n    if K == 5:\n        return N * (N + 1) * (N + 2) * (N + 3) * (N + 4) // 120\n    if N == 5:\n        return N * (N + 1) * (N + 2) * (N + 3) * (N + 4) // 120\n    if K == 6:\n        return N * (N + 1) * (N + 2) * (N + 3) * (N + 4) * (N + 5) // 720\n    if N == 6:\n        return N * (N + 1) * (N + 2) * (N + 3) * (N + 4) * (N + 5) // 720\n    if K == 7:\n        return N * (N + 1) * (N + 2) * (N + 3) * (N + 4) * (N + 5) * (N + 6) // 5040\n    if",
        "difficulty": "interview"
    },
    {
        "task_id": 1582,
        "prompt": "Complete the Python function given the prompt below:Given is a positive integer N.\nFind the number of pairs (A, B) of positive integers not greater than N that satisfy the following condition:\n - When A and B are written in base ten without leading zeros, the last digit of A is equal to the first digit of B, and the first digit of A is equal to the last digit of B.\n-----Constraints-----\n - 1 \\leq N \\leq 2 \\times 10^5\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n-----Output-----\nPrint the answer.\n-----Sample Input-----\n25\n-----Sample Output-----\n17\nThe following 17 pairs satisfy the condition: (1,1), (1,11), (2,2), (2,22), (3,3), (4,4), (5,5), (6,6), (7,7), (8,8), (9,9), (11,1), (11,11), (12,21), (21,12), (22,2), and (22,22).\n\ndef",
        "answer": "def count_pairs(n):\n    count = 0\n    for i in range(1, n):\n        for j in range(i, n):\n            if (i % 10 == j % 10) and (i // 10 == j // 10):\n                count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 1583,
        "prompt": "Complete the Python function given the prompt below:Takahashi has a water bottle with the shape of a rectangular prism whose base is a square of side a~\\mathrm{cm} and whose height is b~\\mathrm{cm}. (The thickness of the bottle can be ignored.)\nWe will pour x~\\mathrm{cm}^3 of water into the bottle, and gradually tilt the bottle around one of the sides of the base.\nWhen will the water be spilled? More formally, find the maximum angle in which we can tilt the bottle without spilling any water.\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq a \\leq 100\n - 1 \\leq b \\leq 100\n - 1 \\leq x \\leq a^2b\n-----Input-----\nInput is given from Standard Input in the following format:\na b x\n-----Output-----\nPrint the maximum angle in which we can tilt the bottle without spilling any water, in degrees.\nYour output will be judged as correct when the absolute or relative error from the judge's output is at most 10^{-6}.\n-----Sample Input-----\n2 2 4\n-----Sample Output-----\n45.0000000000\nThis bottle has a cubic shape, and it is half-full. The water gets spilled when we tilt the bottle more than 45 degrees.\n\ndef",
        "answer": "def solve(a, b, x):\n    return round(math.degrees(math.atan(b/a)), 6)",
        "difficulty": "interview"
    },
    {
        "task_id": 1584,
        "prompt": "Complete the Python function given the prompt below:Takahashi has N sticks that are distinguishable from each other. The length of the i-th stick is L_i.\nHe is going to form a triangle using three of these sticks. Let a, b, and c be the lengths of the three sticks used. Here, all of the following conditions must be satisfied:\n - a < b + c\n - b < c + a\n - c < a + b\nHow many different triangles can be formed? Two triangles are considered different when there is a stick used in only one of them.\n-----Constraints-----\n - All values in input are integers.\n - 3 \\leq N \\leq 2 \\times 10^3\n - 1 \\leq L_i \\leq 10^3\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nL_1 L_2... L_N\n-----Constraints-----\nPrint the number of different triangles that can be formed.\n-----Sample Input-----\n4\n3 4 2 1\n-----Sample Output-----\n1\nOnly one triangle can be formed: the triangle formed by the first, second, and third sticks.\n\ndef",
        "answer": "def triangle(sticks):\n    count = 0\n    for i in range(len(sticks)):\n        for j in range(i+1, len(sticks)):\n            for k in range(j+1, len(sticks)):\n                if sticks[i] < sticks[j] + sticks[k] and sticks[j] < sticks[k] + sticks[i] and sticks[k] < sticks[i] + sticks[j]:\n                    count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 1585,
        "prompt": "Complete the Python function given the prompt below:As a token of his gratitude, Takahashi has decided to give his mother an integer sequence.\nThe sequence A needs to satisfy the conditions below:\n - A consists of integers between X and Y (inclusive).\n - For each 1\\leq i \\leq |A|-1, A_{i+1} is a multiple of A_i and strictly greater than A_i.\nFind the maximum possible length of the sequence.\n-----Constraints-----\n - 1 \\leq X \\leq Y \\leq 10^{18}\n - All input values are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nX Y\n-----Output-----\nPrint the maximum possible length of the sequence.\n-----Sample Input-----\n3 20\n-----Sample Output-----\n3\nThe sequence 3,6,18 satisfies the conditions.\n\ndef",
        "answer": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)",
        "difficulty": "interview"
    },
    {
        "task_id": 1586,
        "prompt": "Complete the Python function given the prompt below:For an integer n not less than 0, let us define f(n) as follows:\n - f(n) = 1 (if n < 2)\n - f(n) = n f(n-2) (if n \\geq 2)\nGiven is an integer N. Find the number of trailing zeros in the decimal notation of f(N).\n-----Constraints-----\n - 0 \\leq N \\leq 10^{18}\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n-----Output-----\nPrint the number of trailing zeros in the decimal notation of f(N).\n-----Sample Input-----\n12\n-----Sample Output-----\n1\nf(12) = 12 \u00d7 10 \u00d7 8 \u00d7 6 \u00d7 4 \u00d7 2 = 46080, which has one trailing zero.\n\ndef",
        "answer": "def f(n):\n    if n < 2:\n        return 1\n    else:\n        return n * f(n-2)",
        "difficulty": "interview"
    },
    {
        "task_id": 1587,
        "prompt": "Complete the Python function given the prompt below:An altar enshrines N stones arranged in a row from left to right. The color of the i-th stone from the left (1 \\leq i \\leq N) is given to you as a character c_i; R stands for red and W stands for white.\nYou can do the following two kinds of operations any number of times in any order:\n - Choose two stones (not necessarily adjacent) and swap them.\n - Choose one stone and change its color (from red to white and vice versa).\nAccording to a fortune-teller, a white stone placed to the immediate left of a red stone will bring a disaster. At least how many operations are needed to reach a situation without such a white stone?\n-----Constraints-----\n - 2 \\leq N \\leq 200000\n - c_i is R or W.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nc_{1}c_{2}...c_{N}\n-----Output-----\nPrint an integer representing the minimum number of operations needed.\n-----Sample Input-----\n4\nWWRR\n-----Sample Output-----\n2\nFor example, the two operations below will achieve the objective.\n - Swap the 1-st and 3-rd stones from the left, resulting in RWWR.\n - Change the color of the 4-th stone from the left, resulting in RWWW.\n\ndef",
        "answer": "def swap_stones(stones):\n    count = 0\n    for i in range(len(stones)):\n        if stones[i] == 'W':\n            for j in range(i+1, len(stones)):\n                if stones[j] == 'W':\n                    stones[i], stones[j] = stones[j], stones[i]\n                    count += 1\n                    break\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 1588,
        "prompt": "Complete the Python function given the prompt below:Little Chris is very keen on his toy blocks. His teacher, however, wants Chris to solve more problems, so he decided to play a trick on Chris.\nThere are exactly s blocks in Chris's set, each block has a unique number from 1 to s. Chris's teacher picks a subset of blocks X and keeps it to himself. He will give them back only if Chris can pick such a non-empty subset Y from the remaining blocks, that the equality holds: $\\sum_{x \\in X}(x - 1) = \\sum_{y \\in Y}(s - y)$ \"Are you kidding me?\", asks Chris.\nFor example, consider a case where s = 8 and Chris's teacher took the blocks with numbers 1, 4 and 5. One way for Chris to choose a set is to pick the blocks with numbers 3 and 6, see figure. Then the required sums would be equal: (1 - 1) + (4 - 1) + (5 - 1) = (8 - 3) + (8 - 6) = 7.\n $\\left. \\begin{array}{l l l l l l}{1} & {2} & {3} & {4} & {5} & {6} & {7} & {8} \\end{array} \\right.$ \nHowever, now Chris has exactly s = 10^6 blocks. Given the set X of blocks his teacher chooses, help Chris to find the required set Y!\n-----Input-----\nThe first line of input contains a single integer n (1 \u2264 n \u2264 5\u00b710^5), the number of blocks in the set X. The next line contains n distinct space-separated integers x_1, x_2,..., x_{n} (1 \u2264 x_{i} \u2264 10^6), the numbers of the blocks in X.\nNote: since the size of the input and output could be very large, don't use slow output techniques in your language. For example, do not use input and output streams (cin, cout) in C++.\n-----Output-----\nIn the first line of output print a single integer m (1 \u2264 m \u2264 10^6 - n), the number of blocks in the set Y. In the next line output m distinct space-separated integers y_1, y_2,..., y_{m} (1 \u2264 y_{i} \u2264 10^6), such that the required equality holds. The sets X and Y should not intersect, i.e. x_{i} \u2260 y_{j} for all i, j (1 \u2264 i \u2264 n; 1 \u2264 j \u2264 m). It is guaranteed that at least one solution always exists. If there are multiple solutions, output any of them.\n-----Examples-----\nInput\n3\n1 4 5\nOutput\n2\n999993 1000000\nInput\n1\n1\nOutput\n1\n1000000\n\ndef",
        "answer": "def solve(s, x):\n    x.sort()\n    y = []\n    for i in range(s):\n        y.append(x[i] - 1)\n    return y",
        "difficulty": "interview"
    },
    {
        "task_id": 1589,
        "prompt": "Complete the Python function given the prompt below:One day Vitaly was going home late at night and wondering: how many people aren't sleeping at that moment? To estimate, Vitaly decided to look which windows are lit in the house he was passing by at that moment.\nVitaly sees a building of n floors and 2\u00b7m windows on each floor. On each floor there are m flats numbered from 1 to m, and two consecutive windows correspond to each flat. If we number the windows from 1 to 2\u00b7m from left to right, then the j-th flat of the i-th floor has windows 2\u00b7j - 1 and 2\u00b7j in the corresponding row of windows (as usual, floors are enumerated from the bottom). Vitaly thinks that people in the flat aren't sleeping at that moment if at least one of the windows corresponding to this flat has lights on.\nGiven the information about the windows of the given house, your task is to calculate the number of flats where, according to Vitaly, people aren't sleeping.\n-----Input-----\nThe first line of the input contains two integers n and m (1 \u2264 n, m \u2264 100)\u00a0\u2014 the number of floors in the house and the number of flats on each floor respectively.\nNext n lines describe the floors from top to bottom and contain 2\u00b7m characters each. If the i-th window of the given floor has lights on, then the i-th character of this line is '1', otherwise it is '0'.\n-----Output-----\nPrint a single integer\u00a0\u2014 the number of flats that have lights on in at least one window, that is, the flats where, according to Vitaly, people aren't sleeping.\n-----Examples-----\nInput\n2 2\n0 0 0 1\n1 0 1 1\nOutput\n3\nInput\n1 3\n1 1 0 1 0 0\nOutput\n2\n-----Note-----\nIn the first test case the house has two floors, two flats on each floor. That is, in total there are 4 flats. The light isn't on only on the second floor in the left flat. That is, in both rooms of the flat the light is off.\nIn the second test case the house has one floor and the first floor has three flats. The light is on in the leftmost flat (in both windows) and in the middle flat (in one window). In the right flat the light is off.\n\ndef",
        "answer": "def lights(lst):\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] == 1:\n            count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 1590,
        "prompt": "Complete the Python function given the prompt below:You are given an array $a_1, a_2, \\dots, a_n$. All $a_i$ are pairwise distinct.\nLet's define function $f(l, r)$ as follows:   let's define array $b_1, b_2, \\dots, b_{r - l + 1}$, where $b_i = a_{l - 1 + i}$;  sort array $b$ in increasing order;  result of the function $f(l, r)$ is $\\sum\\limits_{i = 1}^{r - l + 1}{b_i \\cdot i}$. \nCalculate $\\left(\\sum\\limits_{1 \\le l \\le r \\le n}{f(l, r)}\\right) \\mod (10^9+7)$, i.e. total sum of $f$ for all subsegments of $a$ modulo $10^9+7$.\n-----Input-----\nThe first line contains one integer $n$ ($1 \\le n \\le 5 \\cdot 10^5$) \u2014 the length of array $a$.\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$, $a_i \\neq a_j$ for $i \\neq j$) \u2014 array $a$.\n-----Output-----\nPrint one integer \u2014 the total sum of $f$ for all subsegments of $a$ modulo $10^9+7$\n-----Examples-----\nInput\n4\n5 2 4 7\nOutput\n167\nInput\n3\n123456789 214365879 987654321\nOutput\n582491518\n-----Note-----\nDescription of the first example:   $f(1, 1) = 5 \\cdot 1 = 5$;  $f(1, 2) = 2 \\cdot 1 + 5 \\cdot 2 = 12$;  $f(1, 3) = 2 \\cdot 1 + 4 \\cdot 2 + 5 \\cdot 3 = 25$;  $f(1, 4) = 2 \\cdot 1 + 4 \\cdot 2 + 5 \\cdot 3 + 7 \\cdot 4 = 53$;  $f(2, 2) = 2 \\cdot 1 = 2$;  $f(2, 3) = 2 \\cdot 1 + 4 \\cdot 2 = 10$;  $f(2, 4) = 2 \\cdot 1 + 4 \\cdot 2 + 7 \\cdot 3 = 31$;  $f(3, 3) = 4 \\cdot 1 = 4$;  $f(3, 4) = 4 \\cdot 1 + 7 \\cdot 2 = 18$;  $f(4, 4) = 7 \\cdot 1 = 7$;\n\ndef",
        "answer": "def f(l, r):\n    b = a[l - 1:r]\n    b.sort()\n    return sum(b[i] * i for i in range(len(b))) % (10 ** 9 + 7)",
        "difficulty": "interview"
    },
    {
        "task_id": 1591,
        "prompt": "Complete the Python function given the prompt below:Old timers of Summer Informatics School can remember previous camps in which each student was given a drink of his choice on the vechorka (late-evening meal). Or may be the story was more complicated?\nThere are $n$ students living in a building, and for each of them the favorite drink $a_i$ is known. So you know $n$ integers $a_1, a_2, \\dots, a_n$, where $a_i$ ($1 \\le a_i \\le k$) is the type of the favorite drink of the $i$-th student. The drink types are numbered from $1$ to $k$.\nThere are infinite number of drink sets. Each set consists of exactly two portions of the same drink. In other words, there are $k$ types of drink sets, the $j$-th type contains two portions of the drink $j$. The available number of sets of each of the $k$ types is infinite.\nYou know that students will receive the minimum possible number of sets to give all students exactly one drink. Obviously, the number of sets will be exactly $\\lceil \\frac{n}{2} \\rceil$, where $\\lceil x \\rceil$ is $x$ rounded up.\nAfter students receive the sets, they will distribute their portions by their choice: each student will get exactly one portion. Note, that if $n$ is odd then one portion will remain unused and the students' teacher will drink it.\nWhat is the maximum number of students that can get their favorite drink if $\\lceil \\frac{n}{2} \\rceil$ sets will be chosen optimally and students will distribute portions between themselves optimally?\n-----Input-----\nThe first line of the input contains two integers $n$ and $k$ ($1 \\le n, k \\le 1\\,000$) \u2014 the number of students in the building and the number of different drinks.\nThe next $n$ lines contain student's favorite drinks. The $i$-th line contains a single integer from $1$ to $k$ \u2014 the type of the favorite drink of the $i$-th student.\n-----Output-----\nPrint exactly one integer \u2014 the maximum number of students that can get a favorite drink.\n-----Examples-----\nInput\n5 3\n1\n3\n1\n1\n2\nOutput\n4\nInput\n10 3\n2\n1\n3\n2\n3\n3\n1\n3\n1\n2\nOutput\n9\n-----Note-----\nIn the first example, students could choose three sets with drinks $1$, $1$ and $2$ (so they will have two sets with two drinks of the type $1$ each and one set with two drinks of the type $2$, so portions will be $1, 1, 1, 1, 2, 2$). This way all students except the second one will get their favorite drinks.\nAnother possible answer is sets with drinks $1$, $2$ and $3$. In this case the portions will be $1, 1, 2, 2, 3, 3$. Then all the students except one will gain their favorite drinks. The only student that will not gain the favorite drink will be a student with $a_i = 1$ (i.e. the first, the third or the fourth).\n\ndef",
        "answer": "def solution(n, k):\n    return n - (n // 2)",
        "difficulty": "interview"
    },
    {
        "task_id": 1592,
        "prompt": "Complete the Python function given the prompt below:Some large corporation where Polycarpus works has its own short message service center (SMSC). The center's task is to send all sorts of crucial information. Polycarpus decided to check the efficiency of the SMSC. \nFor that, he asked to give him the statistics of the performance of the SMSC for some period of time. In the end, Polycarpus got a list of n tasks that went to the SMSC of the corporation. Each task was described by the time it was received by the SMSC and the number of text messages to send. More formally, the i-th task was described by two integers t_{i} and c_{i} \u2014 the receiving time (the second) and the number of the text messages, correspondingly.\nPolycarpus knows that the SMSC cannot send more than one text message per second. The SMSC uses a queue to organize its work. Consider a time moment x, the SMSC work at that moment as follows:\n  If at the time moment x the queue is not empty, then SMSC sends one message from the queue (SMSC gets the message from the head of the queue). Otherwise it doesn't send messages at the time moment x.  If at the time moment x SMSC receives a task, then it adds to the queue all the messages from this task (SMSC adds messages to the tail of the queue). Note, that the messages from the task cannot be send at time moment x. That's because the decision about sending message or not is made at point 1 before adding these messages to the queue. \nGiven the information about all n tasks, Polycarpus wants to count two values: the time when the last text message was sent and the maximum size of the queue at some time. Help him count these two characteristics he needs to evaluate the efficiency of the SMSC.\n-----Input-----\nThe first line contains a single integer n (1 \u2264 n \u2264 10^3) \u2014 the number of tasks of the SMSC. Next n lines contain the tasks' descriptions: the i-th line contains two space-separated integers t_{i} and c_{i} (1 \u2264 t_{i}, c_{i} \u2264 10^6) \u2014 the time (the second) when the i-th task was received and the number of messages to send, correspondingly.\nIt is guaranteed that all tasks were received at different moments of time. It is guaranteed that the tasks are sorted in the chronological order, that is, t_{i} < t_{i} + 1 for all integer i (1 \u2264 i < n).\n-----Output-----\nIn a single line print two space-separated integers \u2014 the time when the last text message was sent and the maximum queue size at a certain moment of time.\n-----Examples-----\nInput\n2\n1 1\n2 1\nOutput\n3 1\nInput\n1\n1000000 10\nOutput\n1000010 10\nInput\n3\n3 3\n4 3\n5 3\nOutput\n12 7\n-----Note-----\nIn the first test sample: \n  second 1: the first message has appeared in the queue, the queue's size is 1;  second 2: the first message is sent, the second message has been received, the queue's size is 1;  second 3: the second message is sent, the queue's size is 0, \nThus, the maximum size of the queue is 1, the last message was sent at the second 3.\n\ndef",
        "answer": "def max_queue_size(tasks):\n    queue = []\n    max_size = 0\n    last_sent = 0\n    for task in tasks:\n        while queue and queue[0] <= task[0]:\n            queue.pop(0)\n        queue.append(task[1])\n        max_size = max(max_size, len(queue))\n        last_sent = task[0]\n    return last_sent, max_size",
        "difficulty": "interview"
    },
    {
        "task_id": 1593,
        "prompt": "Complete the Python function given the prompt below:The administration of the Tomsk Region firmly believes that it's time to become a megacity (that is, get population of one million). Instead of improving the demographic situation, they decided to achieve its goal by expanding the boundaries of the city.\nThe city of Tomsk can be represented as point on the plane with coordinates (0; 0). The city is surrounded with n other locations, the i-th one has coordinates (x_{i}, y_{i}) with the population of k_{i} people. You can widen the city boundaries to a circle of radius r. In such case all locations inside the circle and on its border are included into the city.\nYour goal is to write a program that will determine the minimum radius r, to which is necessary to expand the boundaries of Tomsk, so that it becomes a megacity.\n-----Input-----\nThe first line of the input contains two integers n and s (1 \u2264 n \u2264 10^3; 1 \u2264 s < 10^6) \u2014 the number of locatons around Tomsk city and the population of the city. Then n lines follow. The i-th line contains three integers \u2014 the x_{i} and y_{i} coordinate values of the i-th location and the number k_{i} of people in it (1 \u2264 k_{i} < 10^6). Each coordinate is an integer and doesn't exceed 10^4 in its absolute value.\nIt is guaranteed that no two locations are at the same point and no location is at point (0;\u00a00).\n-----Output-----\nIn the output, print \"-1\" (without the quotes), if Tomsk won't be able to become a megacity. Otherwise, in the first line print a single real number \u2014 the minimum radius of the circle that the city needs to expand to in order to become a megacity.\nThe answer is considered correct if the absolute or relative error don't exceed 10^{ - 6}.\n-----Examples-----\nInput\n4 999998\n1 1 1\n2 2 1\n3 3 1\n2 -2 1\nOutput\n2.8284271\nInput\n4 999998\n1 1 2\n2 2 1\n3 3 1\n2 -2 1\nOutput\n1.4142136\nInput\n2 1\n1 1 999997\n2 2 1\nOutput\n-1\n\ndef",
        "answer": "def f(n, s):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1.41421356\n    if n == 3:\n        return 1.73205081\n    if n == 4:\n        return 2.23606798\n    if n == 5:\n        return 2.64575131\n    if n == 6:\n        return 2.82842712\n    if n == 7:\n        return 3.14159265\n    if n == 8:\n        return 3.41421356\n    if n == 9:\n        return 3.64575131\n    if n == 10:\n        return 3.82842712\n    if n == 11:\n        return 4.23606798\n    if n == 12:\n        return 4.64575131\n    if n == 13:\n        return 4.82842712\n    if n == 14:\n        return 5.23606798\n    if n == 15:\n        return 5.64575131\n    if n == 16:\n        return 5.82842712\n    if n == 17:\n        return 6.23606798\n    if n == 18:\n        return 6.64575131\n    if n == 19:\n        return 6.82842712\n    if n == 20:\n        return 7.23606798\n    if n == 21:\n        return 7.64575131\n    if n == 22:\n        return 7.82842712\n    if n == 23:\n        return 8.23606798\n    if n == 24:\n        return 8.64575131\n    if n == 25:\n        return 8.82842712\n    if n == 26:",
        "difficulty": "interview"
    },
    {
        "task_id": 1594,
        "prompt": "Complete the Python function given the prompt below:Eugeny loves listening to music. He has n songs in his play list. We know that song number i has the duration of t_{i} minutes. Eugeny listens to each song, perhaps more than once. He listens to song number i c_{i} times. Eugeny's play list is organized as follows: first song number 1 plays c_1 times, then song number 2 plays c_2 times,..., in the end the song number n plays c_{n} times.\nEugeny took a piece of paper and wrote out m moments of time when he liked a song. Now for each such moment he wants to know the number of the song that played at that moment. The moment x means that Eugeny wants to know which song was playing during the x-th minute of his listening to the play list.\nHelp Eugeny and calculate the required numbers of songs.\n-----Input-----\nThe first line contains two integers n, m (1 \u2264 n, m \u2264 10^5). The next n lines contain pairs of integers. The i-th line contains integers c_{i}, t_{i} (1 \u2264 c_{i}, t_{i} \u2264 10^9) \u2014 the description of the play list. It is guaranteed that the play list's total duration doesn't exceed 10^9 $(\\sum_{i = 1}^{n} c_{i} \\cdot t_{i} \\leq 10^{9})$.\nThe next line contains m positive integers v_1, v_2,..., v_{m}, that describe the moments Eugeny has written out. It is guaranteed that there isn't such moment of time v_{i}, when the music doesn't play any longer. It is guaranteed that v_{i} < v_{i} + 1 (i < m).\nThe moment of time v_{i} means that Eugeny wants to know which song was playing during the v_{i}-th munite from the start of listening to the playlist.\n-----Output-----\nPrint m integers \u2014 the i-th number must equal the number of the song that was playing during the v_{i}-th minute after Eugeny started listening to the play list.\n-----Examples-----\nInput\n1 2\n2 8\n1 16\nOutput\n1\n1\nInput\n4 9\n1 2\n2 1\n1 1\n2 2\n1 2 3 4 5 6 7 8 9\nOutput\n1\n1\n2\n2\n3\n4\n4\n4\n4\n\ndef",
        "answer": "def song_count(c, t, v):\n    count = 0\n    for i in range(len(v)):\n        count += c[v[i] - 1] * (v[i + 1] - v[i])\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 1595,
        "prompt": "Complete the Python function given the prompt below:At the children's day, the child came to Picks's house, and messed his house up. Picks was angry at him. A lot of important things were lost, in particular the favorite set of Picks.\nFortunately, Picks remembers something about his set S:  its elements were distinct integers from 1 to limit;  the value of $\\sum_{x \\in S} \\text{lowbit}(x)$ was equal to sum; here lowbit(x) equals 2^{k} where k is the position of the first one in the binary representation of x. For example, lowbit(10010_2) = 10_2, lowbit(10001_2) = 1_2, lowbit(10000_2) = 10000_2 (binary representation). \nCan you help Picks and find any set S, that satisfies all the above conditions?\n-----Input-----\nThe first line contains two integers: sum, limit (1 \u2264 sum, limit \u2264 10^5).\n-----Output-----\nIn the first line print an integer n (1 \u2264 n \u2264 10^5), denoting the size of S. Then print the elements of set S in any order. If there are multiple answers, print any of them.\nIf it's impossible to find a suitable set, print -1.\n-----Examples-----\nInput\n5 5\nOutput\n2\n4 5\nInput\n4 3\nOutput\n3\n2 3 1\nInput\n5 1\nOutput\n-1\n-----Note-----\nIn sample test 1: lowbit(4) = 4, lowbit(5) = 1, 4 + 1 = 5.\nIn sample test 2: lowbit(1) = 1, lowbit(2) = 2, lowbit(3) = 1, 1 + 2 + 1 = 4.\n\ndef",
        "answer": "def lowbit(x):\n    return x & -x",
        "difficulty": "interview"
    },
    {
        "task_id": 1596,
        "prompt": "Complete the Python function given the prompt below:Constanze is the smartest girl in her village but she has bad eyesight.\nOne day, she was able to invent an incredible machine! When you pronounce letters, the machine will inscribe them onto a piece of paper. For example, if you pronounce 'c', 'o', 'd', and 'e' in that order, then the machine will inscribe \"code\" onto the paper. Thanks to this machine, she can finally write messages without using her glasses.\nHowever, her dumb friend Akko decided to play a prank on her. Akko tinkered with the machine so that if you pronounce 'w', it will inscribe \"uu\" instead of \"w\", and if you pronounce'm', it will inscribe \"nn\" instead of \"m\"! Since Constanze had bad eyesight, she was not able to realize what Akko did.\nThe rest of the letters behave the same as before: if you pronounce any letter besides 'w' and'm', the machine will just inscribe it onto a piece of paper.\nThe next day, I received a letter in my mailbox. I can't understand it so I think it's either just some gibberish from Akko, or Constanze made it using her machine. But since I know what Akko did, I can just list down all possible strings that Constanze's machine would have turned into the message I got and see if anything makes sense.\nBut I need to know how much paper I will need, and that's why I'm asking you for help. Tell me the number of strings that Constanze's machine would've turned into the message I got.\nBut since this number can be quite large, tell me instead its remainder when divided by $10^9+7$.\nIf there are no strings that Constanze's machine would've turned into the message I got, then print $0$.\n-----Input-----\nInput consists of a single line containing a string $s$ ($1 \\leq |s| \\leq 10^5$) \u2014 the received message. $s$ contains only lowercase Latin letters.\n-----Output-----\nPrint a single integer \u2014 the number of strings that Constanze's machine would've turned into the message $s$, modulo $10^9+7$.\n-----Examples-----\nInput\nouuokarinn\nOutput\n4\nInput\nbanana\nOutput\n1\nInput\nnnn\nOutput\n3\nInput\namanda\nOutput\n0\n-----Note-----\nFor the first example, the candidate strings are the following: \"ouuokarinn\", \"ouuokarim\", \"owokarim\", and \"owokarinn\".\nFor the second example, there is only one: \"banana\".\nFor the third example, the candidate strings are the following: \"nm\", \"mn\" and \"nnn\".\nFor the last example, there are no candidate strings that the machine can turn into \"amanda\", since the machine won't inscribe'm'.\n\ndef",
        "answer": "def solve(s):\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 1597,
        "prompt": "Complete the Python function given the prompt below:Teachers of one programming summer school decided to make a surprise for the students by giving them names in the style of the \"Hobbit\" movie. Each student must get a pseudonym maximally similar to his own name. The pseudonym must be a name of some character of the popular saga and now the teachers are busy matching pseudonyms to student names.\nThere are n students in a summer school. Teachers chose exactly n pseudonyms for them. Each student must get exactly one pseudonym corresponding to him. Let us determine the relevance of a pseudonym b to a student with name a as the length of the largest common prefix a and b. We will represent such value as $\\operatorname{lcp}(a, b)$. Then we can determine the quality of matching of the pseudonyms to students as a sum of relevances of all pseudonyms to the corresponding students.\nFind the matching between students and pseudonyms with the maximum quality.\n-----Input-----\nThe first line contains number n (1 \u2264 n \u2264 100 000) \u2014 the number of students in the summer school.\nNext n lines contain the name of the students. Each name is a non-empty word consisting of lowercase English letters. Some names can be repeating.\nThe last n lines contain the given pseudonyms. Each pseudonym is a non-empty word consisting of small English letters. Some pseudonyms can be repeating.\nThe total length of all the names and pseudonyms doesn't exceed 800 000 characters.\n-----Output-----\nIn the first line print the maximum possible quality of matching pseudonyms to students.\nIn the next n lines describe the optimal matching. Each line must have the form a b (1 \u2264 a, b \u2264 n), that means that the student who was number a in the input, must match to the pseudonym number b in the input.\nThe matching should be a one-to-one correspondence, that is, each student and each pseudonym should occur exactly once in your output. If there are several optimal answers, output any.\n-----Examples-----\nInput\n5\ngennady\ngalya\nboris\nbill\ntoshik\nbilbo\ntorin\ngendalf\nsmaug\ngaladriel\nOutput\n11\n4 1\n2 5\n1 3\n5 2\n3 4\n-----Note-----\nThe first test from the statement the match looks as follows:   bill  \u2192  bilbo (lcp = 3)  galya  \u2192  galadriel (lcp = 3)  gennady  \u2192  gendalf (lcp = 3)  toshik  \u2192  torin (lcp = 2)  boris  \u2192  smaug (lcp = 0)\n\ndef",
        "answer": "def lcp(a, b):\n    n, m = len(a), len(b)\n    res = 0\n    for i in range(min(n, m)):\n        if a[i] == b[i]:\n            res += 1\n        else:\n            break\n    return res",
        "difficulty": "interview"
    },
    {
        "task_id": 1598,
        "prompt": "Complete the Python function given the prompt below:The only difference between easy and hard versions is the length of the string. You can hack this problem only if you solve both problems.\nKirk has a binary string $s$ (a string which consists of zeroes and ones) of length $n$ and he is asking you to find a binary string $t$ of the same length which satisfies the following conditions:\n For any $l$ and $r$ ($1 \\leq l \\leq r \\leq n$) the length of the longest non-decreasing subsequence of the substring $s_{l}s_{l+1} \\ldots s_{r}$ is equal to the length of the longest non-decreasing subsequence of the substring $t_{l}t_{l+1} \\ldots t_{r}$;\n The number of zeroes in $t$ is the maximum possible.\nA non-decreasing subsequence of a string $p$ is a sequence of indices $i_1, i_2, \\ldots, i_k$ such that $i_1 < i_2 < \\ldots < i_k$ and $p_{i_1} \\leq p_{i_2} \\leq \\ldots \\leq p_{i_k}$. The length of the subsequence is $k$.\nIf there are multiple substrings which satisfy the conditions, output any.\n-----Input-----\nThe first line contains a binary string of length not more than $2\\: 000$.\n-----Output-----\nOutput a binary string which satisfied the above conditions. If there are many such strings, output any of them.\n-----Examples-----\nInput\n110\nOutput\n010\nInput\n010\nOutput\n010\nInput\n0001111\nOutput\n0000000\nInput\n0111001100111011101000\nOutput\n0011001100001011101000\n-----Note-----\nIn the first example: \n For the substrings of the length $1$ the length of the longest non-decreasing subsequnce is $1$;  For $l = 1, r = 2$ the longest non-decreasing subsequnce of the substring $s_{1}s_{2}$ is $11$ and the longest non-decreasing subsequnce of the substring $t_{1}t_{2}$ is $01$;  For $l = 1, r = 3$ the longest non-decreasing subsequnce of the substring $s_{1}s_{3}$ is $11$ and the longest non-decreasing subsequnce of the substring $t_{1}t_{3}$ is $00$;  For $l = 2, r = 3$ the longest non-decreasing subsequnce of the substring $s_{2}s_{3}$ is $1$ and the longest non-decreasing subsequnce of the substring $t_{2}t_{3}$ is $1$; \nThe second example is similar to the first one.\n\ndef",
        "answer": "def longest_non_decreasing_subsequence(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]",
        "difficulty": "interview"
    },
    {
        "task_id": 1599,
        "prompt": "Complete the Python function given the prompt below:Ilya the Lion wants to help all his friends with passing exams. They need to solve the following problem to pass the IT exam.\nYou've got string s = s_1s_2... s_{n} (n is the length of the string), consisting only of characters \".\" and \"#\" and m queries. Each query is described by a pair of integers l_{i}, r_{i} (1 \u2264 l_{i} < r_{i} \u2264 n). The answer to the query l_{i}, r_{i} is the number of such integers i (l_{i} \u2264 i < r_{i}), that s_{i} = s_{i} + 1.\nIlya the Lion wants to help his friends but is there anyone to help him? Help Ilya, solve the problem.\n-----Input-----\nThe first line contains string s of length n (2 \u2264 n \u2264 10^5). It is guaranteed that the given string only consists of characters \".\" and \"#\".\nThe next line contains integer m (1 \u2264 m \u2264 10^5) \u2014 the number of queries. Each of the next m lines contains the description of the corresponding query. The i-th line contains integers l_{i}, r_{i} (1 \u2264 l_{i} < r_{i} \u2264 n).\n-----Output-----\nPrint m integers \u2014 the answers to the queries in the order in which they are given in the input.\n-----Examples-----\nInput\n......\n4\n3 4\n2 3\n1 6\n2 6\nOutput\n1\n1\n5\n4\nInput\n#..###\n5\n1 3\n5 6\n1 5\n3 6\n3 4\nOutput\n1\n1\n2\n2\n0\n\ndef",
        "answer": "def solution(s, queries):\n    # write your code in Python 3.6\n    pass\n",
        "difficulty": "interview"
    }
]