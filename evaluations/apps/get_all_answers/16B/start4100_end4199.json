[
   {
      "task_id": 4100,
      "prompt": "Complete the Python function given the prompt below:Takahashi has decided to hold fastest-finger-fast quiz games. Kizahashi, who is in charge of making the scoreboard, is struggling to write the program that manages the players' scores in a game, which proceeds as follows.\nA game is played by N players, numbered 1 to N. At the beginning of a game, each player has K points.\nWhen a player correctly answers a question, each of the other N-1 players receives minus one (-1) point. There is no other factor that affects the players' scores.\nAt the end of a game, the players with 0 points or lower are eliminated, and the remaining players survive.\nIn the last game, the players gave a total of Q correct answers, the i-th of which was given by Player A_i.\nFor Kizahashi, write a program that determines whether each of the N players survived this game.\n-----Constraints-----\n - All values in input are integers.\n - 2 \\leq N \\leq 10^5\n - 1 \\leq K \\leq 10^9\n - 1 \\leq Q \\leq 10^5\n - 1 \\leq A_i \\leq N\\ (1 \\leq i \\leq Q)\n-----Input-----\nInput is given from Standard Input in the following format:\nN K Q\nA_1\nA_2\n.\n.\n.\nA_Q\n-----Output-----\nPrint N lines. The i-th line should contain Yes if Player i survived the game, and No otherwise.\n-----Sample Input-----\n6 3 4\n3\n1\n3\n2\n-----Sample Output-----\nNo\nNo\nYes\nNo\nNo\nNo\nIn the beginning, the players' scores are (3, 3, 3, 3, 3, 3).\n - Player 3 correctly answers a question. The players' scores are now (2, 2, 3, 2, 2, 2).\n - Player 1 correctly answers a question. The players' scores are now (2, 1, 2, 1, 1, 1).\n - Player 3 correctly answers a question. The players' scores are now (1, 0, 2, 0, 0, 0).\n - Player 2 correctly answers a question. The players' scores are now (0, 0, 1, -1, -1, -1).\nPlayers 1, 2, 4, 5 and 6, who have 0 points or lower, are eliminated, and Player 3 survives this game.\n\ndef",
      "answer": "def main():\n    n, k, q = map(int, input().split())\n    scores = [k] * n\n    for _ in range(q):\n        a = int(input())\n        scores[a - 1] -= 1\n    for i in range(n):\n        if scores[i] <= 0:\n            print('No')\n        else:\n            print('Yes')",
      "difficulty": "introductory"
   },
   {
      "task_id": 4101,
      "prompt": "Complete the Python function given the prompt below:You are given a binary matrix $a$ of size $n \\times m$. A binary matrix is a matrix where each element is either $0$ or $1$.\nYou may perform some (possibly zero) operations with this matrix. During each operation you can inverse the row of this matrix or a column of this matrix. Formally, inverting a row is changing all values in this row to the opposite ($0$ to $1$, $1$ to $0$). Inverting a column is changing all values in this column to the opposite.\nYour task is to sort the initial matrix by some sequence of such operations. The matrix is considered sorted if the array $[a_{1, 1}, a_{1, 2}, \\dots, a_{1, m}, a_{2, 1}, a_{2, 2}, \\dots, a_{2, m}, \\dots, a_{n, m - 1}, a_{n, m}]$ is sorted in non-descending order.\n-----Input-----\nThe first line of the input contains two integers $n$ and $m$ ($1 \\le n, m \\le 200$) \u2014 the number of rows and the number of columns in the matrix.\nThe next $n$ lines contain $m$ integers each. The $j$-th element in the $i$-th line is $a_{i, j}$ ($0 \\le a_{i, j} \\le 1$) \u2014 the element of $a$ at position $(i, j)$.\n-----Output-----\nIf it is impossible to obtain a sorted matrix, print \"NO\" in the first line.\nOtherwise print \"YES\" in the first line. In the second line print a string $r$ of length $n$. The $i$-th character $r_i$ of this string should be '1' if the $i$-th row of the matrix is inverted and '0' otherwise. In the third line print a string $c$ of length $m$. The $j$-th character $c_j$ of this string should be '1' if the $j$-th column of the matrix is inverted and '0' otherwise. If there are multiple answers, you can print any.\n-----Examples-----\nInput\n2 2\n1 1\n0 1\nOutput\nYES\n00\n10\nInput\n3 4\n0 0 0 1\n0 0 0 0\n1 1 1 1\nOutput\nYES\n010\n0000\nInput\n3 3\n0 0 0\n1 0 1\n1 1 0\nOutput\nNO\n\ndef",
      "answer": "def sort_matrix(n, m, a):\n    # Write your code here\n    a.sort()\n    if a[0][0] == 0:\n        for i in range(n):\n            for j in range(m):\n                if a[i][j] == 1:\n                    a[i][j] = 0\n                    break\n    else:\n        for i in range(n):\n            for j in range(m):\n                if a[i][j] == 0:\n                    a[i][j] = 1\n                    break\n    for i in range(n):\n        for j in range(m):\n            if a[i][j]!= a[i][j - 1]:\n                return \"NO\"\n    for j in range(m):\n        for i in range(n):\n            if a[i][j]!= a[i - 1][j]:\n                return \"NO\"\n    return \"YES\"",
      "difficulty": "introductory"
   },
   {
      "task_id": 4102,
      "prompt": "Complete the Python function given the prompt below:-----Input-----\nThe only line of the input contains a string of digits. The length of the string is between 1 and 10, inclusive.\n-----Output-----\nOutput \"Yes\" or \"No\".\n-----Examples-----\nInput\n373\nOutput\nYes\nInput\n121\nOutput\nNo\nInput\n436\nOutput\nYes\n\ndef",
      "answer": "def is_palindrome(n):\n    return n == int(str(n)[::-1])",
      "difficulty": "introductory"
   },
   {
      "task_id": 4103,
      "prompt": "Complete the Python function given the prompt below:There is a robot staying at $X=0$ on the $Ox$ axis. He has to walk to $X=n$. You are controlling this robot and controlling how he goes. The robot has a battery and an accumulator with a solar panel.\nThe $i$-th segment of the path (from $X=i-1$ to $X=i$) can be exposed to sunlight or not. The array $s$ denotes which segments are exposed to sunlight: if segment $i$ is exposed, then $s_i = 1$, otherwise $s_i = 0$.\nThe robot has one battery of capacity $b$ and one accumulator of capacity $a$. For each segment, you should choose which type of energy storage robot will use to go to the next point (it can be either battery or accumulator). If the robot goes using the battery, the current charge of the battery is decreased by one (the robot can't use the battery if its charge is zero). And if the robot goes using the accumulator, the current charge of the accumulator is decreased by one (and the robot also can't use the accumulator if its charge is zero).\nIf the current segment is exposed to sunlight and the robot goes through it using the battery, the charge of the accumulator increases by one (of course, its charge can't become higher than it's maximum capacity).\nIf accumulator is used to pass some segment, its charge decreases by 1 no matter if the segment is exposed or not.\nYou understand that it is not always possible to walk to $X=n$. You want your robot to go as far as possible. Find the maximum number of segments of distance the robot can pass if you control him optimally.\n-----Input-----\nThe first line of the input contains three integers $n, b, a$ ($1 \\le n, b, a \\le 2 \\cdot 10^5$) \u2014 the robot's destination point, the battery capacity and the accumulator capacity, respectively.\nThe second line of the input contains $n$ integers $s_1, s_2, \\dots, s_n$ ($0 \\le s_i \\le 1$), where $s_i$ is $1$ if the $i$-th segment of distance is exposed to sunlight, and $0$ otherwise.\n-----Output-----\nPrint one integer \u2014 the maximum number of segments the robot can pass if you control him optimally.\n-----Examples-----\nInput\n5 2 1\n0 1 0 1 0\nOutput\n5\nInput\n6 2 1\n1 0 0 1 0 1\nOutput\n3\n-----Note-----\nIn the first example the robot can go through the first segment using the accumulator, and charge levels become $b=2$ and $a=0$. The second segment can be passed using the battery, and charge levels become $b=1$ and $a=1$. The third segment can be passed using the accumulator, and charge levels become $b=1$ and $a=0$. The fourth segment can be passed using the battery, and charge levels become $b=0$ and $a=1$. And the fifth segment can be passed using the accumulator.\nIn the second example the robot can go through the maximum number of segments using battery two times and accumulator one time in any order.\n\ndef",
      "answer": "def robot(n, b, a, s):\n    battery = 0\n    accumulator = 0\n    for i in range(n):\n        if s[i] == 1:\n            battery += 1\n            accumulator += 1\n        else:\n            battery -= 1\n            accumulator -= 1\n        if battery < 0:\n            battery = 0\n        if accumulator < 0:\n            accumulator = 0\n    return battery + accumulator",
      "difficulty": "introductory"
   },
   {
      "task_id": 4104,
      "prompt": "Complete the Python function given the prompt below:One very experienced problem writer decided to prepare a problem for April Fools Day contest. The task was very simple - given an arithmetic expression, return the result of evaluating this expression. However, looks like there is a bug in the reference solution...\n-----Input-----\nThe only line of input data contains the arithmetic expression. The expression will contain between 2 and 10 operands, separated with arithmetic signs plus and/or minus. Each operand will be an integer between 0 and 255, inclusive.\n-----Output-----\nReproduce the output of the reference solution, including the bug.\n-----Examples-----\nInput\n8-7+6-5+4-3+2-1-0\nOutput\n4\nInput\n2+2\nOutput\n-46\nInput\n112-37\nOutput\n375\n\ndef",
      "answer": "def a(s):\n    s = s.split('-')\n    s = [int(i) for i in s]\n    s = sum(s)\n    return s",
      "difficulty": "introductory"
   },
   {
      "task_id": 4105,
      "prompt": "Complete the Python function given the prompt below:The king of Berland organizes a ball! $n$ pair are invited to the ball, they are numbered from $1$ to $n$. Each pair consists of one man and one woman. Each dancer (either man or woman) has a monochrome costume. The color of each costume is represented by an integer from $1$ to $k$, inclusive.\nLet $b_i$ be the color of the man's costume and $g_i$ be the color of the woman's costume in the $i$-th pair. You have to choose a color for each dancer's costume (i.e. values $b_1, b_2, \\dots, b_n$ and $g_1, g_2, \\dots g_n$) in such a way that:  for every $i$: $b_i$ and $g_i$ are integers between $1$ and $k$, inclusive;  there are no two completely identical pairs, i.e. no two indices $i, j$ ($i \\ne j$) such that $b_i = b_j$ and $g_i = g_j$ at the same time;  there is no pair such that the color of the man's costume is the same as the color of the woman's costume in this pair, i.e. $b_i \\ne g_i$ for every $i$;  for each two consecutive (adjacent) pairs both man's costume colors and woman's costume colors differ, i.e. for every $i$ from $1$ to $n-1$ the conditions $b_i \\ne b_{i + 1}$ and $g_i \\ne g_{i + 1}$ hold. \nLet's take a look at the examples of bad and good color choosing (for $n=4$ and $k=3$, man is the first in a pair and woman is the second):\nBad color choosing:   $(1, 2)$, $(2, 3)$, $(3, 2)$, $(1, 2)$ \u2014 contradiction with the second rule (there are equal pairs);  $(2, 3)$, $(1, 1)$, $(3, 2)$, $(1, 3)$ \u2014 contradiction with the third rule (there is a pair with costumes of the same color);  $(1, 2)$, $(2, 3)$, $(1, 3)$, $(2, 1)$ \u2014 contradiction with the fourth rule (there are two consecutive pairs such that colors of costumes of men/women are the same). \nGood color choosing:   $(1, 2)$, $(2, 1)$, $(1, 3)$, $(3, 1)$;  $(1, 2)$, $(3, 1)$, $(2, 3)$, $(3, 2)$;  $(3, 1)$, $(1, 2)$, $(2, 3)$, $(3, 2)$. \nYou have to find any suitable color choosing or say that no suitable choosing exists.\n-----Input-----\nThe only line of the input contains two integers $n$ and $k$ ($2 \\le n, k \\le 2 \\cdot 10^5$) \u2014 the number of pairs and the number of colors.\n-----Output-----\nIf it is impossible to find any suitable colors choosing, print \"NO\".\nOtherwise print \"YES\" and then the colors of the costumes of pairs in the next $n$ lines. The $i$-th line should contain two integers $b_i$ and $g_i$ \u2014 colors of costumes of man and woman in the $i$-th pair, respectively.\nYou can print each letter in any case (upper or lower). For example, \"YeS\", \"no\" and \"yES\" are all acceptable.\n-----Examples-----\nInput\n4 3\nOutput\nYES\n3 1\n1 3\n3 2\n2 3\nInput\n10 4\nOutput\nYES\n2 1\n1 3\n4 2\n3 4\n4 3\n3 2\n2 4\n4 1\n1 4\n3 1\nInput\n13 4\nOutput\nNO\n\ndef",
      "answer": "def f(n, k):\n    if n == 1:\n        return True\n    if n == 2:\n        return k > 2\n    if k == 1:\n        return False\n    if k == 2:\n        return n % 2 == 0\n    if k == 3:\n        return n % 2 == 1\n    if k == 4:\n        return n % 2 == 0\n    if k == 5:\n        return n % 2 == 1\n    if k == 6:\n        return n % 2 == 0\n    if k == 7:\n        return n % 2 == 1\n    if k == 8:\n        return n % 2 == 0\n    if k == 9:\n        return n % 2 == 1\n    if k == 10:\n        return n % 2 == 0\n    if k == 11:\n        return n % 2 == 1\n    if k == 12:\n        return n % 2 == 0\n    if k == 13:\n        return n % 2 == 1\n    if k == 14:\n        return n % 2 == 0\n    if k == 15:\n        return n % 2 == 1\n    if k == 16:\n        return n % 2 == 0\n    if k == 17:\n        return n % 2 == 1\n    if k == 18:\n        return n % 2 == 0\n    if k == 19:\n        return n % 2 == 1\n    if k == 20:\n        return n % 2 == 0\n    if k == 21:\n        return n % 2 == 1\n    if k == 22:\n        return n % 2 == 0\n    if k == 23:\n        return n % 2 == 1\n    if k == 24:\n        return n % 2 == 0\n    if k == 25:\n        return n % 2 == 1\n    if k == 26:\n        return n % 2 == 0\n    if k == 27:\n        return n % 2 == 1\n    if k == 28:\n        return n % 2 == 0\n    if k == 29:\n        return n % 2 == 1\n    if k == 30:\n        return n % 2 == 0\n    if k == 31:\n        return n % 2 == 1\n    if k == 32:\n        ",
      "difficulty": "introductory"
   },
   {
      "task_id": 4106,
      "prompt": "Complete the Python function given the prompt below:The only difference between easy and hard versions is the constraints.\nVova likes pictures with kittens. The news feed in the social network he uses can be represented as an array of $n$ consecutive pictures (with kittens, of course). Vova likes all these pictures, but some are more beautiful than the others: the $i$-th picture has beauty $a_i$.\nVova wants to repost exactly $x$ pictures in such a way that:   each segment of the news feed of at least $k$ consecutive pictures has at least one picture reposted by Vova;  the sum of beauty values of reposted pictures is maximum possible. \nFor example, if $k=1$ then Vova has to repost all the pictures in the news feed. If $k=2$ then Vova can skip some pictures, but between every pair of consecutive pictures Vova has to repost at least one of them.\nYour task is to calculate the maximum possible sum of values of reposted pictures if Vova follows conditions described above, or say that there is no way to satisfy all conditions.\n-----Input-----\nThe first line of the input contains three integers $n, k$ and $x$ ($1 \\le k, x \\le n \\le 200$) \u2014 the number of pictures in the news feed, the minimum length of segment with at least one repost in it and the number of pictures Vova is ready to repost.\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$), where $a_i$ is the beauty of the $i$-th picture.\n-----Output-----\nPrint -1 if there is no way to repost some pictures to satisfy all the conditions in the problem statement.\nOtherwise print one integer \u2014 the maximum sum of values of reposted pictures if Vova follows conditions described in the problem statement.\n-----Examples-----\nInput\n5 2 3\n5 1 3 10 1\nOutput\n18\nInput\n6 1 5\n10 30 30 70 10 10\nOutput\n-1\nInput\n4 3 1\n1 100 1 1\nOutput\n100\n\ndef",
      "answer": "def max_sum(n, k, x, a):\n    a.sort(reverse=True)\n    s = 0\n    for i in range(n - k + 1):\n        s += a[i]\n        if s >= x:\n            return s\n    return -1",
      "difficulty": "introductory"
   },
   {
      "task_id": 4107,
      "prompt": "Complete the Python function given the prompt below:You work as a system administrator in a dormitory, which has $n$ rooms one after another along a straight hallway. Rooms are numbered from $1$ to $n$.\nYou have to connect all $n$ rooms to the Internet.\nYou can connect each room to the Internet directly, the cost of such connection for the $i$-th room is $i$ coins. \nSome rooms also have a spot for a router. The cost of placing a router in the $i$-th room is also $i$ coins. You cannot place a router in a room which does not have a spot for it. When you place a router in the room $i$, you connect all rooms with the numbers from $max(1,~i - k)$ to $min(n,~i + k)$ inclusive to the Internet, where $k$ is the range of router. The value of $k$ is the same for all routers. \nCalculate the minimum total cost of connecting all $n$ rooms to the Internet. You can assume that the number of rooms which have a spot for a router is not greater than the number of routers you have.\n-----Input-----\nThe first line of the input contains two integers $n$ and $k$ ($1 \\le n, k \\le 2 \\cdot 10^5$) \u2014 the number of rooms and the range of each router.\nThe second line of the input contains one string $s$ of length $n$, consisting only of zeros and ones. If the $i$-th character of the string equals to '1' then there is a spot for a router in the $i$-th room. If the $i$-th character of the string equals to '0' then you cannot place a router in the $i$-th room.\n-----Output-----\nPrint one integer \u2014 the minimum total cost of connecting all $n$ rooms to the Internet.\n-----Examples-----\nInput\n5 2\n00100\nOutput\n3\nInput\n6 1\n000000\nOutput\n21\nInput\n4 1\n0011\nOutput\n4\nInput\n12 6\n000010000100\nOutput\n15\n-----Note-----\nIn the first example it is enough to place the router in the room $3$, then all rooms will be connected to the Internet. The total cost of connection is $3$.\nIn the second example you can place routers nowhere, so you need to connect all rooms directly. Thus, the total cost of connection of all rooms is $1 + 2 + 3 + 4 + 5 + 6 = 21$.\nIn the third example you need to connect the room $1$ directly and place the router in the room $3$. Thus, the total cost of connection of all rooms is $1 + 3 = 4$.\nIn the fourth example you need to place routers in rooms $5$ and $10$. Then all rooms will be connected to the Internet. The total cost of connection is $5 + 10 = 15$.\n\ndef",
      "answer": "def connect_rooms(n, k, s):\n    # Write your code here\n    cost = 0\n    for i in range(n):\n        if s[i] == '1':\n            cost += i\n        else:\n            cost += n\n    for i in range(n):\n        if s[i] == '1':\n            for j in range(max(1, i - k), min(n, i + k) + 1):\n                if s[j] == '1':\n                    cost += j\n    return cost",
      "difficulty": "introductory"
   },
   {
      "task_id": 4108,
      "prompt": "Complete the Python function given the prompt below:You are given strings S and T consisting of lowercase English letters.\nYou can perform the following operation on S any number of times:\nOperation: Choose two distinct lowercase English letters c_1 and c_2, then replace every occurrence of c_1 with c_2, and every occurrence of c_2 with c_1.\nDetermine if S and T can be made equal by performing the operation zero or more times.\n-----Constraints-----\n - 1 \\leq |S| \\leq 2 \\times 10^5\n - |S| = |T|\n - S and T consists of lowercase English letters.\n-----Input-----\nInput is given from Standard Input in the following format:\nS\nT\n-----Output-----\nIf S and T can be made equal, print Yes; otherwise, print No.\n-----Sample Input-----\nazzel\napple\n-----Sample Output-----\nYes\nazzel can be changed to apple, as follows:\n - Choose e as c_1 and l as c_2. azzel becomes azzle.\n - Choose z as c_1 and p as c_2. azzle becomes apple.\n\ndef",
      "answer": "def can_be_changed(s, t):\n    if len(s)!= len(t):\n        return False\n    if len(s) == 0:\n        return True\n    if s[0] == t[0]:\n        return can_be_changed(s[1:], t[1:])\n    else:\n        return can_be_changed(s[1:], t) or can_be_changed(s, t[1:])",
      "difficulty": "introductory"
   },
   {
      "task_id": 4109,
      "prompt": "Complete the Python function given the prompt below:Takahashi, who is a novice in competitive programming, wants to learn M algorithms.\nInitially, his understanding level of each of the M algorithms is 0.\nTakahashi is visiting a bookstore, where he finds N books on algorithms.\nThe i-th book (1\\leq i\\leq N) is sold for C_i yen (the currency of Japan). If he buys and reads it, his understanding level of the j-th algorithm will increase by A_{i,j} for each j (1\\leq j\\leq M).\nThere is no other way to increase the understanding levels of the algorithms.\nTakahashi's objective is to make his understanding levels of all the M algorithms X or higher. Determine whether this objective is achievable. If it is achievable, find the minimum amount of money needed to achieve it.\n\n\ndef",
      "answer": "def solve(A, M, X):\n    # Write your code here\n    A.sort(reverse=True)\n    for i in range(M):\n        if A[i] < X:\n            return -1\n    return sum(A)",
      "difficulty": "introductory"
   },
   {
      "task_id": 4110,
      "prompt": "Complete the Python function given the prompt below:A programming competition site AtCode provides algorithmic problems.\nEach problem is allocated a score based on its difficulty.\nCurrently, for each integer i between 1 and D (inclusive), there are p_i problems with a score of 100i points.\nThese p_1 + \u2026 + p_D problems are all of the problems available on AtCode.\nA user of AtCode has a value called total score.\nThe total score of a user is the sum of the following two elements:\n - Base score: the sum of the scores of all problems solved by the user.\n - Perfect bonuses: when a user solves all problems with a score of 100i points, he/she earns the perfect bonus of c_i points, aside from the base score (1 \u2264 i \u2264 D).\nTakahashi, who is the new user of AtCode, has not solved any problem.\nHis objective is to have a total score of G or more points.\nAt least how many problems does he need to solve for this objective?\n-----Constraints-----\n - 1 \u2264 D \u2264 10\n - 1 \u2264 p_i \u2264 100\n - 100 \u2264 c_i \u2264 10^6\n - 100 \u2264 G\n - All values in input are integers.\n - c_i and G are all multiples of 100.\n - It is possible to have a total score of G or more points.\n-----Input-----\nInput is given from Standard Input in the following format:\nD G\np_1 c_1\n:\np_D c_D\n-----Output-----\nPrint the minimum number of problems that needs to be solved in order to have a total score of G or more points. Note that this objective is always achievable (see Constraints).\n-----Sample Input-----\n2 700\n3 500\n5 800\n-----Sample Output-----\n3\nIn this case, there are three problems each with 100 points and five problems each with 200 points. The perfect bonus for solving all the 100-point problems is 500 points, and the perfect bonus for solving all the 200-point problems is 800 points. Takahashi's objective is to have a total score of 700 points or more.\nOne way to achieve this objective is to solve four 200-point problems and earn a base score of 800 points. However, if we solve three 100-point problems, we can earn the perfect bonus of 500 points in addition to the base score of 300 points, for a total score of 800 points, and we can achieve the objective with fewer problems.\n\ndef",
      "answer": "def solve(D, G, p, c):\n    count = 0\n    for i in range(1, D+1):\n        count += p[i]\n        if count >= G:\n            return i\n    return D",
      "difficulty": "introductory"
   },
   {
      "task_id": 4111,
      "prompt": "Complete the Python function given the prompt below:Tanya has $n$ candies numbered from $1$ to $n$. The $i$-th candy has the weight $a_i$.\nShe plans to eat exactly $n-1$ candies and give the remaining candy to her dad. Tanya eats candies in order of increasing their numbers, exactly one candy per day.\nYour task is to find the number of such candies $i$ (let's call these candies good) that if dad gets the $i$-th candy then the sum of weights of candies Tanya eats in even days will be equal to the sum of weights of candies Tanya eats in odd days. Note that at first, she will give the candy, after it she will eat the remaining candies one by one.\nFor example, $n=4$ and weights are $[1, 4, 3, 3]$. Consider all possible cases to give a candy to dad:  Tanya gives the $1$-st candy to dad ($a_1=1$), the remaining candies are $[4, 3, 3]$. She will eat $a_2=4$ in the first day, $a_3=3$ in the second day, $a_4=3$ in the third day. So in odd days she will eat $4+3=7$ and in even days she will eat $3$. Since $7 \\ne 3$ this case shouldn't be counted to the answer (this candy isn't good).  Tanya gives the $2$-nd candy to dad ($a_2=4$), the remaining candies are $[1, 3, 3]$. She will eat $a_1=1$ in the first day, $a_3=3$ in the second day, $a_4=3$ in the third day. So in odd days she will eat $1+3=4$ and in even days she will eat $3$. Since $4 \\ne 3$ this case shouldn't be counted to the answer (this candy isn't good).  Tanya gives the $3$-rd candy to dad ($a_3=3$), the remaining candies are $[1, 4, 3]$. She will eat $a_1=1$ in the first day, $a_2=4$ in the second day, $a_4=3$ in the third day. So in odd days she will eat $1+3=4$ and in even days she will eat $4$. Since $4 = 4$ this case should be counted to the answer (this candy is good).  Tanya gives the $4$-th candy to dad ($a_4=3$), the remaining candies are $[1, 4, 3]$. She will eat $a_1=1$ in the first day, $a_2=4$ in the second day, $a_3=3$ in the third day. So in odd days she will eat $1+3=4$ and in even days she will eat $4$. Since $4 = 4$ this case should be counted to the answer (this candy is good). \nIn total there $2$ cases which should counted (these candies are good), so the answer is $2$.\n-----Input-----\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of candies.\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^4$), where $a_i$ is the weight of the $i$-th candy.\n-----Output-----\nPrint one integer \u2014 the number of such candies $i$ (good candies) that if dad gets the $i$-th candy then the sum of weights of candies Tanya eats in even days will be equal to the sum of weights of candies Tanya eats in odd days.\n-----Examples-----\nInput\n7\n5 5 4 5 5 5 6\nOutput\n2\nInput\n8\n4 8 8 7 8 4 4 5\nOutput\n2\nInput\n9\n2 3 4 2 2 3 2 2 4\nOutput\n3\n-----Note-----\nIn the first example indices of good candies are $[1, 2]$.\nIn the second example indices of good candies are $[2, 3]$.\nIn the third example indices of good candies are $[4, 5, 9]$.\n\ndef",
      "answer": "def candies(n, arr):\n    odd = 0\n    even = 0\n    for i in range(n):\n        if i % 2 == 0:\n            even += arr[i]\n        else:\n            odd += arr[i]\n    return min(odd, even)",
      "difficulty": "introductory"
   },
   {
      "task_id": 4112,
      "prompt": "Complete the Python function given the prompt below:The only difference between easy and hard versions is the constraints.\nVova likes pictures with kittens. The news feed in the social network he uses can be represented as an array of $n$ consecutive pictures (with kittens, of course). Vova likes all these pictures, but some are more beautiful than the others: the $i$-th picture has beauty $a_i$.\nVova wants to repost exactly $x$ pictures in such a way that:   each segment of the news feed of at least $k$ consecutive pictures has at least one picture reposted by Vova;  the sum of beauty values of reposted pictures is maximum possible. \nFor example, if $k=1$ then Vova has to repost all the pictures in the news feed. If $k=2$ then Vova can skip some pictures, but between every pair of consecutive pictures Vova has to repost at least one of them.\nYour task is to calculate the maximum possible sum of values of reposted pictures if Vova follows conditions described above, or say that there is no way to satisfy all conditions.\n-----Input-----\nThe first line of the input contains three integers $n, k$ and $x$ ($1 \\le k, x \\le n \\le 5000$) \u2014 the number of pictures in the news feed, the minimum length of segment with at least one repost in it and the number of pictures Vova is ready to repost.\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$), where $a_i$ is the beauty of the $i$-th picture.\n-----Output-----\nPrint -1 if there is no way to repost some pictures to satisfy all the conditions in the problem statement.\nOtherwise print one integer \u2014 the maximum sum of values of reposted pictures if Vova follows conditions described in the problem statement.\n-----Examples-----\nInput\n5 2 3\n5 1 3 10 1\nOutput\n18\nInput\n6 1 5\n10 30 30 70 10 10\nOutput\n-1\nInput\n4 3 1\n1 100 1 1\nOutput\n100\n\ndef",
      "answer": "def max_sum(n, k, x, a):\n    a.sort(reverse=True)\n    s = 0\n    for i in range(n - k + 1):\n        s += a[i]\n        if s >= x:\n            return s\n    return -1",
      "difficulty": "introductory"
   },
   {
      "task_id": 4113,
      "prompt": "Complete the Python function given the prompt below:La Confiserie d'ABC sells cakes at 4 dollars each and doughnuts at 7 dollars each.\nDetermine if there is a way to buy some of them for exactly N dollars. You can buy two or more doughnuts and two or more cakes, and you can also choose to buy zero doughnuts or zero cakes.\n-----Constraints-----\n - N is an integer between 1 and 100, inclusive.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n-----Output-----\nIf there is a way to buy some cakes and some doughnuts for exactly N dollars, print Yes; otherwise, print No.\n-----Sample Input-----\n11\n-----Sample Output-----\nYes\nIf you buy one cake and one doughnut, the total will be 4 + 7 = 11 dollars.\n\ndef",
      "answer": "def cakes_and_doughnuts(n):\n  return \"Yes\" if n % 4 == 0 or n % 7 == 0 else \"No\"",
      "difficulty": "introductory"
   },
   {
      "task_id": 4114,
      "prompt": "Complete the Python function given the prompt below:In the Ancient Kingdom of Snuke, there was a pyramid to strengthen the authority of Takahashi, the president of AtCoder Inc.\nThe pyramid had center coordinates (C_X, C_Y) and height H. The altitude of coordinates (X, Y) is max(H - |X - C_X| - |Y - C_Y|, 0).  \nAoki, an explorer, conducted a survey to identify the center coordinates and height of this pyramid. As a result, he obtained the following information:  \n - C_X, C_Y was integers between 0 and 100 (inclusive), and H was an integer not less than 1.  \n - Additionally, he obtained N pieces of information. The i-th of them is: \"the altitude of point (x_i, y_i) is h_i.\"  \nThis was enough to identify the center coordinates and the height of the pyramid. Find these values with the clues above.  \n-----Constraints-----\n - N is an integer between 1 and 100 (inclusive).\n - x_i and y_i are integers between 0 and 100 (inclusive).\n - h_i is an integer between 0 and 10^9 (inclusive).\n - The N coordinates (x_1, y_1), (x_2, y_2), (x_3, y_3),..., (x_N, y_N) are all different.\n - The center coordinates and the height of the pyramid can be uniquely identified.\n-----Input-----\nInput is given from Standard Input in the following format:  \nN\nx_1 y_1 h_1\nx_2 y_2 h_2\nx_3 y_3 h_3\n:\nx_N y_N h_N\n-----Output-----\nPrint values C_X, C_Y and H representing the center coordinates and the height of the pyramid in one line, with spaces in between.  \n-----Sample Input-----\n4\n2 3 5\n2 1 5\n1 2 5\n3 2 5\n-----Sample Output-----\n2 2 6\nIn this case, the center coordinates and the height can be identified as (2, 2) and 6.\n\ndef",
      "answer": "def solve(n, x, y, h):\n    return (x, y, h)",
      "difficulty": "introductory"
   },
   {
      "task_id": 4115,
      "prompt": "Complete the Python function given the prompt below:Takahashi loves palindromes. Non-palindromic strings are unacceptable to him. Each time he hugs a string, he can change one of its characters to any character of his choice.\nGiven is a string S. Find the minimum number of hugs needed to make S palindromic.\n-----Constraints-----\n - S is a string consisting of lowercase English letters.\n - The length of S is between 1 and 100 (inclusive).\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n-----Output-----\nPrint the minimum number of hugs needed to make S palindromic.\n-----Sample Input-----\nredcoder\n-----Sample Output-----\n1\nFor example, we can change the fourth character to o and get a palindrome redooder.\n\ndef",
      "answer": "def palindrome(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i]!= s[len(s)-1-i]:\n            count += 1\n    return count",
      "difficulty": "introductory"
   },
   {
      "task_id": 4116,
      "prompt": "Complete the Python function given the prompt below:Having learned the multiplication table, Takahashi can multiply two integers between 1 and 9 (inclusive) together.\nGiven an integer N, determine whether N can be represented as the product of two integers between 1 and 9. If it can, print Yes; if it cannot, print No.\n-----Constraints-----\n - 1 \\leq N \\leq 100\n - N is an integer.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n-----Output-----\nIf N can be represented as the product of two integers between 1 and 9 (inclusive), print Yes; if it cannot, print No.\n-----Sample Input-----\n10\n-----Sample Output-----\nYes\n10 can be represented as, for example, 2 \\times 5.\n\ndef",
      "answer": "def check(n):\n    for i in range(1, 10):\n        if n % i!= 0:\n            return False\n    return True",
      "difficulty": "introductory"
   },
   {
      "task_id": 4117,
      "prompt": "Complete the Python function given the prompt below:We have sticks numbered 1, \\cdots, N. The length of Stick i (1 \\leq i \\leq N) is L_i.\nIn how many ways can we choose three of the sticks with different lengths that can form a triangle?\nThat is, find the number of triples of integers (i, j, k) (1 \\leq i < j < k \\leq N) that satisfy both of the following conditions:\n - L_i, L_j, and L_k are all different.\n - There exists a triangle whose sides have lengths L_i, L_j, and L_k.\n-----Constraints-----\n - 1 \\leq N \\leq 100\n - 1 \\leq L_i \\leq 10^9\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nL_1 L_2 \\cdots L_N\n-----Output-----\nPrint the number of ways to choose three of the sticks with different lengths that can form a triangle.\n-----Sample Input-----\n5\n4 4 9 7 5\n-----Sample Output-----\n5\nThe following five triples (i, j, k) satisfy the conditions: (1, 3, 4), (1, 4, 5), (2, 3, 4), (2, 4, 5), and (3, 4, 5).\n\ndef",
      "answer": "def countTriplets(sticks):\n    # Write your code here\n    sticks.sort()\n    count = 0\n    for i in range(len(sticks)):\n        for j in range(i+1, len(sticks)):\n            for k in range(j+1, len(sticks)):\n                if sticks[i]!= sticks[j] and sticks[j]!= sticks[k] and sticks[k]!= sticks[i]:\n                    count += 1\n    return count",
      "difficulty": "introductory"
   },
   {
      "task_id": 4118,
      "prompt": "Complete the Python function given the prompt below:Having learned the multiplication table, Takahashi can multiply two integers between 1 and 9 (inclusive) together. He cannot do any other calculation.\nGiven are two integers A and B.\nIf Takahashi can calculate A \\times B, print the result; if he cannot, print -1 instead.\n-----Constraints-----\n - 1 \\leq A \\leq 20\n - 1 \\leq B \\leq 20\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n-----Output-----\nIf Takahashi can calculate A \\times B, print the result; if he cannot, print -1.\n-----Sample Input-----\n2 5\n-----Sample Output-----\n10\n2 \\times 5 = 10.\n\ndef",
      "answer": "def multiplication_table(a, b):\n    if a > 9 or b > 9:\n        return -1\n    else:\n        return a * b",
      "difficulty": "introductory"
   },
   {
      "task_id": 4119,
      "prompt": "Complete the Python function given the prompt below:We will play a one-player game using a number line and N pieces.\nFirst, we place each of these pieces at some integer coordinate.\nHere, multiple pieces can be placed at the same coordinate.\nOur objective is to visit all of the M coordinates X_1, X_2,..., X_M with these pieces, by repeating the following move:\nMove: Choose a piece and let x be its coordinate. Put that piece at coordinate x+1 or x-1.\nNote that the coordinates where we initially place the pieces are already regarded as visited.\nFind the minimum number of moves required to achieve the objective.\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 10^5\n - 1 \\leq M \\leq 10^5\n - -10^5 \\leq X_i \\leq 10^5\n - X_1, X_2,..., X_M are all different.\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\nX_1 X_2... X_M\n-----Output-----\nFind the minimum number of moves required to achieve the objective.\n-----Sample Input-----\n2 5\n10 12 1 2 14\n-----Sample Output-----\n5\nThe objective can be achieved in five moves as follows, and this is the minimum number of moves required.\n - Initially, put the two pieces at coordinates 1 and 10.\n - Move the piece at coordinate 1 to 2.\n - Move the piece at coordinate 10 to 11.\n - Move the piece at coordinate 11 to 12.\n - Move the piece at coordinate 12 to 13.\n - Move the piece at coordinate 13 to 14.\n\ndef",
      "answer": "def minMoves(n, m, x):\n    # Write your code here\n    x.sort()\n    count = 0\n    for i in range(m):\n        count += abs(x[i] - (i + 1))\n    return count",
      "difficulty": "introductory"
   },
   {
      "task_id": 4120,
      "prompt": "Complete the Python function given the prompt below:There are $n$ cities in Berland. Some pairs of cities are connected by roads. All roads are bidirectional. Each road connects two different cities. There is at most one road between a pair of cities. The cities are numbered from $1$ to $n$.\nIt is known that, from the capital (the city with the number $1$), you can reach any other city by moving along the roads.\nThe President of Berland plans to improve the country's road network. The budget is enough to repair exactly $n-1$ roads. The President plans to choose a set of $n-1$ roads such that:\n  it is possible to travel from the capital to any other city along the $n-1$ chosen roads,  if $d_i$ is the number of roads needed to travel from the capital to city $i$, moving only along the $n-1$ chosen roads, then $d_1 + d_2 + \\dots + d_n$ is minimized (i.e. as minimal as possible). \nIn other words, the set of $n-1$ roads should preserve the connectivity of the country, and the sum of distances from city $1$ to all cities should be minimized (where you can only use the $n-1$ chosen roads).\nThe president instructed the ministry to prepare $k$ possible options to choose $n-1$ roads so that both conditions above are met.\nWrite a program that will find $k$ possible ways to choose roads for repair. If there are fewer than $k$ ways, then the program should output all possible valid ways to choose roads.\n-----Input-----\nThe first line of the input contains integers $n$, $m$ and $k$ ($2 \\le n \\le 2\\cdot10^5, n-1 \\le m \\le 2\\cdot10^5, 1 \\le k \\le 2\\cdot10^5$), where $n$ is the number of cities in the country, $m$ is the number of roads and $k$ is the number of options to choose a set of roads for repair. It is guaranteed that $m \\cdot k \\le 10^6$.\nThe following $m$ lines describe the roads, one road per line. Each line contains two integers $a_i$, $b_i$ ($1 \\le a_i, b_i \\le n$, $a_i \\ne b_i$) \u2014 the numbers of the cities that the $i$-th road connects. There is at most one road between a pair of cities. The given set of roads is such that you can reach any city from the capital.\n-----Output-----\nPrint $t$ ($1 \\le t \\le k$) \u2014 the number of ways to choose a set of roads for repair. Recall that you need to find $k$ different options; if there are fewer than $k$ of them, then you need to find all possible different valid options.\nIn the following $t$ lines, print the options, one per line. Print an option as a string of $m$ characters where the $j$-th character is equal to '1' if the $j$-th road is included in the option, and is equal to '0' if the road is not included. The roads should be numbered according to their order in the input. The options can be printed in any order. All the $t$ lines should be different.\nSince it is guaranteed that $m \\cdot k \\le 10^6$, the total length of all the $t$ lines will not exceed $10^6$.\nIf there are several answers, output any of them.\n-----Examples-----\nInput\n4 4 3\n1 2\n2 3\n1 4\n4 3\nOutput\n2\n1110\n1011\nInput\n4 6 3\n1 2\n2 3\n1 4\n4 3\n2 4\n1 3\nOutput\n1\n101001\nInput\n5 6 2\n1 2\n1 3\n2 4\n2 5\n3 4\n3 5\nOutput\n2\n111100\n110110\n\ndef",
      "answer": "def roads(n, m, k):\n    roads = []\n    for i in range(m):\n        roads.append(list(map(int, input().split())))\n    roads.sort(key=lambda x: x[1])\n    roads.sort(key=lambda x: x[0])\n    roads = roads[:n-1]\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads = roads[:n-1]\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads = roads[:n-1]\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads = roads[:n-1]\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads = roads[:n-1]\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads = roads[:n-1]\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads = roads[:n-1]\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads = roads[:n-1]\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads = roads[:n-1]\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads = roads[:n-1]\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads = roads[:n-1]\n    roads.sort(key=lambda x",
      "difficulty": "introductory"
   },
   {
      "task_id": 4121,
      "prompt": "Complete the Python function given the prompt below:Vova's family is building the Great Vova Wall (named by Vova himself). Vova's parents, grandparents, grand-grandparents contributed to it. Now it's totally up to Vova to put the finishing touches.\nThe current state of the wall can be respresented by a sequence $a$ of $n$ integers, with $a_i$ being the height of the $i$-th part of the wall.\nVova can only use $2 \\times 1$ bricks to put in the wall (he has infinite supply of them, however).\nVova can put bricks horizontally on the neighboring parts of the wall of equal height. It means that if for some $i$ the current height of part $i$ is the same as for part $i + 1$, then Vova can put a brick there and thus increase both heights by 1. Obviously, Vova can't put bricks in such a way that its parts turn out to be off the borders (to the left of part $1$ of the wall or to the right of part $n$ of it).\nThe next paragraph is specific to the version 1 of the problem.\nVova can also put bricks vertically. That means increasing height of any part of the wall by 2.\nVova is a perfectionist, so he considers the wall completed when:\n  all parts of the wall has the same height;  the wall has no empty spaces inside it. \nCan Vova complete the wall using any amount of bricks (possibly zero)?\n-----Input-----\nThe first line contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of parts in the wall.\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$) \u2014 the initial heights of the parts of the wall.\n-----Output-----\nPrint \"YES\" if Vova can complete the wall using any amount of bricks (possibly zero).\nPrint \"NO\" otherwise.\n-----Examples-----\nInput\n5\n2 1 1 2 5\nOutput\nYES\nInput\n3\n4 5 3\nOutput\nYES\nInput\n2\n10 10\nOutput\nYES\nInput\n3\n1 2 3\nOutput\nNO\n-----Note-----\nIn the first example Vova can put a brick on parts 2 and 3 to make the wall $[2, 2, 2, 2, 5]$ and then put 3 bricks on parts 1 and 2 and 3 bricks on parts 3 and 4 to make it $[5, 5, 5, 5, 5]$.\nIn the second example Vova can put a brick vertically on part 3 to make the wall $[4, 5, 5]$, then horizontally on parts 2 and 3 to make it $[4, 6, 6]$ and then vertically on part 1 to make it $[6, 6, 6]$.\nIn the third example the wall is already complete.\n\ndef",
      "answer": "def vova_wall(n, a):\n    if n == 1:\n        return True\n    if n == 2:\n        return a[0] == a[1]\n    if a[0] == a[1] == a[2]:\n        return vova_wall(n - 1, a)\n    if a[0] == a[1] or a[0] == a[2] or a[1] == a[2]:\n        return False\n    return vova_wall(n - 1, a)",
      "difficulty": "introductory"
   },
   {
      "task_id": 4122,
      "prompt": "Complete the Python function given the prompt below:A superhero fights with a monster. The battle consists of rounds, each of which lasts exactly $n$ minutes. After a round ends, the next round starts immediately. This is repeated over and over again.\nEach round has the same scenario. It is described by a sequence of $n$ numbers: $d_1, d_2, \\dots, d_n$ ($-10^6 \\le d_i \\le 10^6$). The $i$-th element means that monster's hp (hit points) changes by the value $d_i$ during the $i$-th minute of each round. Formally, if before the $i$-th minute of a round the monster's hp is $h$, then after the $i$-th minute it changes to $h := h + d_i$.\nThe monster's initial hp is $H$. It means that before the battle the monster has $H$ hit points. Print the first minute after which the monster dies. The monster dies if its hp is less than or equal to $0$. Print -1 if the battle continues infinitely.\n-----Input-----\nThe first line contains two integers $H$ and $n$ ($1 \\le H \\le 10^{12}$, $1 \\le n \\le 2\\cdot10^5$). The second line contains the sequence of integers $d_1, d_2, \\dots, d_n$ ($-10^6 \\le d_i \\le 10^6$), where $d_i$ is the value to change monster's hp in the $i$-th minute of a round.\n-----Output-----\nPrint -1 if the superhero can't kill the monster and the battle will last infinitely. Otherwise, print the positive integer $k$ such that $k$ is the first minute after which the monster is dead.\n-----Examples-----\nInput\n1000 6\n-100 -200 -300 125 77 -4\nOutput\n9\nInput\n1000000000000 5\n-1 0 0 0 0\nOutput\n4999999999996\nInput\n10 4\n-3 -6 5 4\nOutput\n-1\n\ndef",
      "answer": "def fight(H, d):\n    hp = H\n    for i in range(len(d)):\n        hp += d[i]\n        if hp <= 0:\n            return i + 1\n    return -1",
      "difficulty": "introductory"
   },
   {
      "task_id": 4123,
      "prompt": "Complete the Python function given the prompt below:Two-gram is an ordered pair (i.e. string of length two) of capital Latin letters. For example, \"AZ\", \"AA\", \"ZA\" \u2014 three distinct two-grams.\nYou are given a string $s$ consisting of $n$ capital Latin letters. Your task is to find any two-gram contained in the given string as a substring (i.e. two consecutive characters of the string) maximal number of times. For example, for string $s$ = \"BBAABBBA\" the answer is two-gram \"BB\", which contained in $s$ three times. In other words, find any most frequent two-gram.\nNote that occurrences of the two-gram can overlap with each other.\n-----Input-----\nThe first line of the input contains integer number $n$ ($2 \\le n \\le 100$) \u2014 the length of string $s$. The second line of the input contains the string $s$ consisting of $n$ capital Latin letters.\n-----Output-----\nPrint the only line containing exactly two capital Latin letters \u2014 any two-gram contained in the given string $s$ as a substring (i.e. two consecutive characters of the string) maximal number of times.\n-----Examples-----\nInput\n7\nABACABA\nOutput\nAB\nInput\n5\nZZZAA\nOutput\nZZ\n-----Note-----\nIn the first example \"BA\" is also valid answer.\nIn the second example the only two-gram \"ZZ\" can be printed because it contained in the string \"ZZZAA\" two times.\n\ndef",
      "answer": "def two_gram(s):\n    max_count = 0\n    max_two_gram = ''\n    for i in range(len(s)-1):\n        two_gram = s[i:i+2]\n        count = 0\n        for j in range(len(s)-1):\n            if two_gram == s[j:j+2]:\n                count += 1\n        if count > max_count:\n            max_count = count\n            max_two_gram = two_gram\n    return max_two_gram",
      "difficulty": "introductory"
   },
   {
      "task_id": 4124,
      "prompt": "Complete the Python function given the prompt below:You are given two strings $s$ and $t$. In a single move, you can choose any of two strings and delete the first (that is, the leftmost) character. After a move, the length of the string decreases by $1$. You can't choose a string if it is empty.\nFor example:  by applying a move to the string \"where\", the result is the string \"here\",  by applying a move to the string \"a\", the result is an empty string \"\". \nYou are required to make two given strings equal using the fewest number of moves. It is possible that, in the end, both strings will be equal to the empty string, and so, are equal to each other. In this case, the answer is obviously the sum of the lengths of the initial strings.\nWrite a program that finds the minimum number of moves to make two given strings $s$ and $t$ equal.\n-----Input-----\nThe first line of the input contains $s$. In the second line of the input contains $t$. Both strings consist only of lowercase Latin letters. The number of letters in each string is between 1 and $2\\cdot10^5$, inclusive.\n-----Output-----\nOutput the fewest number of moves required. It is possible that, in the end, both strings will be equal to the empty string, and so, are equal to each other. In this case, the answer is obviously the sum of the lengths of the given strings.\n-----Examples-----\nInput\ntest\nwest\nOutput\n2\nInput\ncodeforces\nyes\nOutput\n9\nInput\ntest\nyes\nOutput\n7\nInput\nb\nab\nOutput\n1\n-----Note-----\nIn the first example, you should apply the move once to the first string and apply the move once to the second string. As a result, both strings will be equal to \"est\".\nIn the second example, the move should be applied to the string \"codeforces\" $8$ times. As a result, the string becomes \"codeforces\" $\\to$ \"es\". The move should be applied to the string \"yes\" once. The result is the same string \"yes\" $\\to$ \"es\".\nIn the third example, you can make the strings equal only by completely deleting them. That is, in the end, both strings will be empty.\nIn the fourth example, the first character of the second string should be deleted.\n\ndef",
      "answer": "def make_equal(s, t):\n    return abs(len(s) - len(t))",
      "difficulty": "introductory"
   },
   {
      "task_id": 4125,
      "prompt": "Complete the Python function given the prompt below:There are N cities on a number line. The i-th city is located at coordinate x_i.\nYour objective is to visit all these cities at least once.\nIn order to do so, you will first set a positive integer D.\nThen, you will depart from coordinate X and perform Move 1 and Move 2 below, as many times as you like:\n - Move 1: travel from coordinate y to coordinate y + D.\n - Move 2: travel from coordinate y to coordinate y - D.\nFind the maximum value of D that enables you to visit all the cities.\nHere, to visit a city is to travel to the coordinate where that city is located.\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 10^5\n - 1 \\leq X \\leq 10^9\n - 1 \\leq x_i \\leq 10^9\n - x_i are all different.\n - x_1, x_2,..., x_N \\neq X\n-----Input-----\nInput is given from Standard Input in the following format:\nN X\nx_1 x_2... x_N\n-----Output-----\nPrint the maximum value of D that enables you to visit all the cities.\n-----Sample Input-----\n3 3\n1 7 11\n-----Sample Output-----\n2\nSetting D = 2 enables you to visit all the cities as follows, and this is the maximum value of such D.\n - Perform Move 2 to travel to coordinate 1.\n - Perform Move 1 to travel to coordinate 3.\n - Perform Move 1 to travel to coordinate 5.\n - Perform Move 1 to travel to coordinate 7.\n - Perform Move 1 to travel to coordinate 9.\n - Perform Move 1 to travel to coordinate 11.\n\ndef",
      "answer": "def max_distance(n, x):\n    return max(x) - min(x)",
      "difficulty": "introductory"
   },
   {
      "task_id": 4126,
      "prompt": "Complete the Python function given the prompt below:A string S of an odd length is said to be a strong palindrome if and only if all of the following conditions are satisfied:\n - S is a palindrome.\n - Let N be the length of S. The string formed by the 1-st through ((N-1)/2)-th characters of S is a palindrome.\n - The string consisting of the (N+3)/2-st through N-th characters of S is a palindrome.\nDetermine whether S is a strong palindrome.\n-----Constraints-----\n - S consists of lowercase English letters.\n - The length of S is an odd number between 3 and 99 (inclusive).\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n-----Output-----\nIf S is a strong palindrome, print Yes;\notherwise, print No.\n-----Sample Input-----\nakasaka\n-----Sample Output-----\nYes\n - S is akasaka.\n - The string formed by the 1-st through the 3-rd characters is aka.\n - The string formed by the 5-th through the 7-th characters is aka.\nAll of these are palindromes, so S is a strong palindrome.\n\ndef",
      "answer": "def is_strong_palindrome(s):\n    n = len(s)\n    if n < 3 or n % 2 == 0:\n        return False\n    for i in range(n//2):\n        if s[i]!= s[n-1-i]:\n            return False\n    for i in range(n//2+1, n):\n        if s[i]!= s[n-1-i]:\n            return False\n    return True",
      "difficulty": "introductory"
   },
   {
      "task_id": 4127,
      "prompt": "Complete the Python function given the prompt below:Compute A \\times B, truncate its fractional part, and print the result as an integer.\n-----Constraints-----\n - 0 \\leq A \\leq 10^{15}\n - 0 \\leq B < 10\n - A is an integer.\n - B is a number with two digits after the decimal point.\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n-----Output-----\nPrint the answer as an integer.\n-----Sample Input-----\n198 1.10\n-----Sample Output-----\n217\nWe have 198 \\times 1.10 = 217.8. After truncating the fractional part, we have the answer: 217.\n\ndef",
      "answer": "def multiply(a, b):\n    return int(a * b)",
      "difficulty": "introductory"
   },
   {
      "task_id": 4128,
      "prompt": "Complete the Python function given the prompt below:There are two sisters Alice and Betty. You have $n$ candies. You want to distribute these $n$ candies between two sisters in such a way that:  Alice will get $a$ ($a > 0$) candies;  Betty will get $b$ ($b > 0$) candies;  each sister will get some integer number of candies;  Alice will get a greater amount of candies than Betty (i.e. $a > b$);  all the candies will be given to one of two sisters (i.e. $a+b=n$). \nYour task is to calculate the number of ways to distribute exactly $n$ candies between sisters in a way described above. Candies are indistinguishable.\nFormally, find the number of ways to represent $n$ as the sum of $n=a+b$, where $a$ and $b$ are positive integers and $a>b$.\nYou have to answer $t$ independent test cases.\n-----Input-----\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases. Then $t$ test cases follow.\nThe only line of a test case contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^9$) \u2014 the number of candies you have.\n-----Output-----\nFor each test case, print the answer \u2014 the number of ways to distribute exactly $n$ candies between two sisters in a way described in the problem statement. If there is no way to satisfy all the conditions, print $0$.\n-----Example-----\nInput\n6\n7\n1\n2\n3\n2000000000\n763243547\nOutput\n3\n0\n0\n1\n999999999\n381621773\n-----Note-----\nFor the test case of the example, the $3$ possible ways to distribute candies are:  $a=6$, $b=1$;  $a=5$, $b=2$;  $a=4$, $b=3$.\n\ndef",
      "answer": "def candies(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45",
      "difficulty": "introductory"
   },
   {
      "task_id": 4129,
      "prompt": "Complete the Python function given the prompt below:There are $n$ cities and $m$ roads in Berland. Each road connects a pair of cities. The roads in Berland are one-way.\nWhat is the minimum number of new roads that need to be built to make all the cities reachable from the capital?\nNew roads will also be one-way.\n-----Input-----\nThe first line of input consists of three integers $n$, $m$ and $s$ ($1 \\le n \\le 5000, 0 \\le m \\le 5000, 1 \\le s \\le n$) \u2014 the number of cities, the number of roads and the index of the capital. Cities are indexed from $1$ to $n$.\nThe following $m$ lines contain roads: road $i$ is given as a pair of cities $u_i$, $v_i$ ($1 \\le u_i, v_i \\le n$, $u_i \\ne v_i$). For each pair of cities $(u, v)$, there can be at most one road from $u$ to $v$. Roads in opposite directions between a pair of cities are allowed (i.e. from $u$ to $v$ and from $v$ to $u$).\n-----Output-----\nPrint one integer \u2014 the minimum number of extra roads needed to make all the cities reachable from city $s$. If all the cities are already reachable from $s$, print 0.\n-----Examples-----\nInput\n9 9 1\n1 2\n1 3\n2 3\n1 5\n5 6\n6 1\n1 8\n9 8\n7 1\nOutput\n3\nInput\n5 4 5\n1 2\n2 3\n3 4\n4 1\nOutput\n1\n-----Note-----\nThe first example is illustrated by the following: [Image] \nFor example, you can add roads ($6, 4$), ($7, 9$), ($1, 7$) to make all the cities reachable from $s = 1$.\nThe second example is illustrated by the following: [Image] \nIn this example, you can add any one of the roads ($5, 1$), ($5, 2$), ($5, 3$), ($5, 4$) to make all the cities reachable from $s = 5$.\n\ndef",
      "answer": "def roadsAndLibraries(n, c_lib, c_road, cities):\n    if c_lib < c_road:\n        return c_lib * n\n    else:\n        return c_road * n",
      "difficulty": "introductory"
   },
   {
      "task_id": 4130,
      "prompt": "Complete the Python function given the prompt below:There are $n$ boxers, the weight of the $i$-th boxer is $a_i$. Each of them can change the weight by no more than $1$ before the competition (the weight cannot become equal to zero, that is, it must remain positive). Weight is always an integer number.\nIt is necessary to choose the largest boxing team in terms of the number of people, that all the boxers' weights in the team are different (i.e. unique).\nWrite a program that for given current values \u200b$a_i$ will find the maximum possible number of boxers in a team.\nIt is possible that after some change the weight of some boxer is $150001$ (but no more).\n-----Input-----\nThe first line contains an integer $n$ ($1 \\le n \\le 150000$) \u2014 the number of boxers. The next line contains $n$ integers $a_1, a_2, \\dots, a_n$, where $a_i$ ($1 \\le a_i \\le 150000$) is the weight of the $i$-th boxer.\n-----Output-----\nPrint a single integer \u2014 the maximum possible number of people in a team.\n-----Examples-----\nInput\n4\n3 2 4 1\nOutput\n4\nInput\n6\n1 1 1 4 4 4\nOutput\n5\n-----Note-----\nIn the first example, boxers should not change their weights \u2014 you can just make a team out of all of them.\nIn the second example, one boxer with a weight of $1$ can be increased by one (get the weight of $2$), one boxer with a weight of $4$ can be reduced by one, and the other can be increased by one (resulting the boxers with a weight of $3$ and $5$, respectively). Thus, you can get a team consisting of boxers with weights of $5, 4, 3, 2, 1$.\n\ndef",
      "answer": "def max_weight(a):\n    a.sort()\n    a.reverse()\n    return a[0]",
      "difficulty": "introductory"
   },
   {
      "task_id": 4131,
      "prompt": "Complete the Python function given the prompt below:In Republic of Atcoder, there are N prefectures, and a total of M cities that belong to those prefectures.\nCity i is established in year Y_i and belongs to Prefecture P_i.\nYou can assume that there are no multiple cities that are established in the same year.\nIt is decided to allocate a 12-digit ID number to each city.\nIf City i is the x-th established city among the cities that belong to Prefecture i, the first six digits of the ID number of City i is P_i, and the last six digits of the ID number is x.\nHere, if P_i or x (or both) has less than six digits, zeros are added to the left until it has six digits.\nFind the ID numbers for all the cities.\nNote that there can be a prefecture with no cities.\n-----Constraints-----\n - 1 \\leq N \\leq 10^5\n - 1 \\leq M \\leq 10^5\n - 1 \\leq P_i \\leq N\n - 1 \\leq Y_i \\leq 10^9\n - Y_i are all different.\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\nP_1 Y_1\n:\nP_M Y_M\n-----Output-----\nPrint the ID numbers for all the cities, in ascending order of indices (City 1, City 2,...).\n-----Sample Input-----\n2 3\n1 32\n2 63\n1 12\n-----Sample Output-----\n000001000002\n000002000001\n000001000001\n - As City 1 is the second established city among the cities that belong to Prefecture 1, its ID number is 000001000002.\n - As City 2 is the first established city among the cities that belong to Prefecture 2, its ID number is 000002000001.\n - As City 3 is the first established city among the cities that belong to Prefecture 1, its ID number is 000001000001.\n\ndef",
      "answer": "def main():\n    n, m = map(int, input().split())\n    prefectures = []\n    cities = []\n    for i in range(n):\n        prefectures.append(input())\n    for i in range(m):\n        cities.append(input())\n    for i in range(m):\n        print(prefectures[int(cities[i][0]) - 1] + cities[i][1:])",
      "difficulty": "introductory"
   },
   {
      "task_id": 4132,
      "prompt": "Complete the Python function given the prompt below:There are N monsters, numbered 1, 2,..., N.\nInitially, the health of Monster i is A_i.\nBelow, a monster with at least 1 health is called alive.\nUntil there is only one alive monster, the following is repeated:\n - A random alive monster attacks another random alive monster.\n - As a result, the health of the monster attacked is reduced by the amount equal to the current health of the monster attacking.\nFind the minimum possible final health of the last monster alive.\n-----Constraints-----\n - All values in input are integers.\n - 2 \\leq N \\leq 10^5\n - 1 \\leq A_i \\leq 10^9\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 A_2... A_N\n-----Output-----\nPrint the minimum possible final health of the last monster alive.\n-----Sample Input-----\n4\n2 10 8 40\n-----Sample Output-----\n2\nWhen only the first monster keeps on attacking, the final health of the last monster will be 2, which is minimum.\n\ndef",
      "answer": "def min_health(arr):\n    arr.sort()\n    arr.reverse()\n    return arr[0]",
      "difficulty": "introductory"
   },
   {
      "task_id": 4133,
      "prompt": "Complete the Python function given the prompt below:Golorps are mysterious creatures who feed on variables. Golorp's name is a program in some programming language. Some scientists believe that this language is Befunge; golorps are tantalizingly silent.\nVariables consumed by golorps can take values from 0 to 9, inclusive. For each golorp its daily diet is defined by its name. Some golorps are so picky that they can't be fed at all. Besides, all golorps are very health-conscious and try to eat as little as possible. Given a choice of several valid sequences of variable values, each golorp will choose lexicographically smallest one.\nFor the purposes of this problem you can assume that a golorp consists of jaws and a stomach. The number of variables necessary to feed a golorp is defined by the shape of its jaws. Variables can get to the stomach only via the jaws.\nA hungry golorp is visiting you. You know its name; feed it or figure out that it's impossible.\n-----Input-----\nThe input is a single string (between 13 and 1024 characters long) \u2014 the name of the visiting golorp. All names are similar and will resemble the ones given in the samples. The name is guaranteed to be valid.\n-----Output-----\nOutput lexicographically smallest sequence of variable values fit for feeding this golorp. Values should be listed in the order in which they get into the jaws. If the golorp is impossible to feed, output \"false\".\n-----Examples-----\nInput\n?(_-_/___*__):-___>__.\nOutput\n0010\nInput\n?(__-_+_/_____):-__>__,_____<__.\nOutput\nfalse\nInput\n?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\nOutput\n0250341\nInput\n?(__+___+__-___):-___>__.\nOutput\n0101\n\ndef",
      "answer": "def golorps(name):\n    # your code here\n    return \"\"",
      "difficulty": "introductory"
   },
   {
      "task_id": 4134,
      "prompt": "Complete the Python function given the prompt below:There is a rectangular grid of size $n \\times m$. Each cell has a number written on it; the number on the cell ($i, j$) is $a_{i, j}$. Your task is to calculate the number of paths from the upper-left cell ($1, 1$) to the bottom-right cell ($n, m$) meeting the following constraints:\n  You can move to the right or to the bottom only. Formally, from the cell ($i, j$) you may move to the cell ($i, j + 1$) or to the cell ($i + 1, j$). The target cell can't be outside of the grid.  The xor of all the numbers on the path from the cell ($1, 1$) to the cell ($n, m$) must be equal to $k$ (xor operation is the bitwise exclusive OR, it is represented as '^' in Java or C++ and \"xor\" in Pascal). \nFind the number of such paths in the given grid.\n-----Input-----\nThe first line of the input contains three integers $n$, $m$ and $k$ ($1 \\le n, m \\le 20$, $0 \\le k \\le 10^{18}$) \u2014 the height and the width of the grid, and the number $k$.\nThe next $n$ lines contain $m$ integers each, the $j$-th element in the $i$-th line is $a_{i, j}$ ($0 \\le a_{i, j} \\le 10^{18}$).\n-----Output-----\nPrint one integer \u2014 the number of paths from ($1, 1$) to ($n, m$) with xor sum equal to $k$.\n-----Examples-----\nInput\n3 3 11\n2 1 5\n7 10 0\n12 6 4\nOutput\n3\nInput\n3 4 2\n1 3 3 3\n0 3 3 2\n3 0 1 1\nOutput\n5\nInput\n3 4 1000000000000000000\n1 3 3 3\n0 3 3 2\n3 0 1 1\nOutput\n0\n-----Note-----\nAll the paths from the first example:   $(1, 1) \\rightarrow (2, 1) \\rightarrow (3, 1) \\rightarrow (3, 2) \\rightarrow (3, 3)$;  $(1, 1) \\rightarrow (2, 1) \\rightarrow (2, 2) \\rightarrow (2, 3) \\rightarrow (3, 3)$;  $(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (3, 2) \\rightarrow (3, 3)$. \nAll the paths from the second example:   $(1, 1) \\rightarrow (2, 1) \\rightarrow (3, 1) \\rightarrow (3, 2) \\rightarrow (3, 3) \\rightarrow (3, 4)$;  $(1, 1) \\rightarrow (2, 1) \\rightarrow (2, 2) \\rightarrow (3, 2) \\rightarrow (3, 3) \\rightarrow (3, 4)$;  $(1, 1) \\rightarrow (2, 1) \\rightarrow (2, 2) \\rightarrow (2, 3) \\rightarrow (2, 4) \\rightarrow (3, 4)$;  $(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 3) \\rightarrow (3, 3) \\rightarrow (3, 4)$;  $(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3) \\rightarrow (3, 3) \\rightarrow (3, 4)$.\n\ndef",
      "answer": "def count_paths(n, m, k):\n    # Write your code here\n    dp = [[0 for _ in range(m)] for _ in range(n)]\n    dp[0][0] = 1 if k == 0 else 0\n    for i in range(n):\n        for j in range(m):\n            if i == 0 and j == 0:\n                continue\n            dp[i][j] = dp[i][j-1] + dp[i-1][j]\n            if i == 0:\n                dp[i][j] = dp[i][j] if k == 0 else dp[i][j] ^ k\n            elif j == 0:\n                dp[i][j] = dp[i][j] if k == 0 else dp[i][j] ^ k\n            else:\n                dp[i][j] = dp[i][j] if k == 0 else dp[i][j] ^ k\n    return dp[n-1][m-1]",
      "difficulty": "introductory"
   },
   {
      "task_id": 4135,
      "prompt": "Complete the Python function given the prompt below:A string $s$ of length $n$ can be encrypted by the following algorithm:  iterate over all divisors of $n$ in decreasing order (i.e. from $n$ to $1$),  for each divisor $d$, reverse the substring $s[1 \\dots d]$ (i.e. the substring which starts at position $1$ and ends at position $d$). \nFor example, the above algorithm applied to the string $s$=\"codeforces\" leads to the following changes: \"codeforces\" $\\to$ \"secrofedoc\" $\\to$ \"orcesfedoc\" $\\to$ \"rocesfedoc\" $\\to$ \"rocesfedoc\" (obviously, the last reverse operation doesn't change the string because $d=1$).\nYou are given the encrypted string $t$. Your task is to decrypt this string, i.e., to find a string $s$ such that the above algorithm results in string $t$. It can be proven that this string $s$ always exists and is unique.\n-----Input-----\nThe first line of input consists of a single integer $n$ ($1 \\le n \\le 100$) \u2014 the length of the string $t$. The second line of input consists of the string $t$. The length of $t$ is $n$, and it consists only of lowercase Latin letters.\n-----Output-----\nPrint a string $s$ such that the above algorithm results in $t$.\n-----Examples-----\nInput\n10\nrocesfedoc\nOutput\ncodeforces\nInput\n16\nplmaetwoxesisiht\nOutput\nthisisexampletwo\nInput\n1\nz\nOutput\nz\n-----Note-----\nThe first example is described in the problem statement.\n\ndef",
      "answer": "def decrypt(t):\n    s = \"\"\n    for i in range(1, len(t) + 1):\n        s += t[-i]\n    return s",
      "difficulty": "introductory"
   },
   {
      "task_id": 4136,
      "prompt": "Complete the Python function given the prompt below:A + B is often used as an example of the easiest problem possible to show some contest platform. However, some scientists have observed that sometimes this problem is not so easy to get accepted. Want to try?\n-----Input-----\nThe input contains two integers a and b (0 \u2264 a, b \u2264 10^3), separated by a single space.\n-----Output-----\nOutput the sum of the given integers.\n-----Examples-----\nInput\n5 14\nOutput\n19\nInput\n381 492\nOutput\n873\n\ndef",
      "answer": "def a_plus_b(a, b):\n    return a + b",
      "difficulty": "introductory"
   },
   {
      "task_id": 4137,
      "prompt": "Complete the Python function given the prompt below:In this problem you will write a simple generator of Brainfuck (https://en.wikipedia.org/wiki/Brainfuck) calculators.\nYou are given an arithmetic expression consisting of integers from 0 to 255 and addition/subtraction signs between them. Output a Brainfuck program which, when executed, will print the result of evaluating this expression.\nWe use a fairly standard Brainfuck interpreter for checking the programs:\n 30000 memory cells.\n memory cells store integers from 0 to 255 with unsigned 8-bit wraparound.\n console input (, command) is not supported, but it's not needed for this problem.\n-----Input-----\nThe only line of input data contains the arithmetic expression. The expression will contain between 2 and 10 operands, separated with arithmetic signs plus and/or minus. Each operand will be an integer between 0 and 255, inclusive. The calculations result is guaranteed to be an integer between 0 and 255, inclusive (results of intermediary calculations might be outside of these boundaries).\n-----Output-----\nOutput a Brainfuck program which, when executed, will print the result of evaluating this expression. The program must be at most 5000000 characters long (including the non-command characters), and its execution must be complete in at most 50000000 steps.\n-----Examples-----\nInput\n2+3\nOutput\n++>\n+++>\n<[<+>-]<\n++++++++++++++++++++++++++++++++++++++++++++++++.\nInput\n9-7\nOutput\n+++++++++>\n+++++++>\n<[<->-]<\n++++++++++++++++++++++++++++++++++++++++++++++++.\n-----Note-----\nYou can download the source code of the Brainfuck interpreter by the link http://assets.codeforces.com/rounds/784/bf.cpp. We use this code to interpret outputs.\n\ndef",
      "answer": "def brainfuck(code):\n    code = code.replace('<', '[').replace('>', ']')\n    code = code.replace('+', '+').replace('-', '-')\n    code = code.replace('.', '.').replace('[', '<').replace(']', '>')\n    return code",
      "difficulty": "introductory"
   },
   {
      "task_id": 4138,
      "prompt": "Complete the Python function given the prompt below:The only difference between the easy and the hard versions is the maximum value of $k$.\nYou are given an infinite sequence of form \"112123123412345$\\dots$\" which consist of blocks of all consecutive positive integers written one after another. The first block consists of all numbers from $1$ to $1$, the second one \u2014 from $1$ to $2$, the third one \u2014 from $1$ to $3$, $\\dots$, the $i$-th block consists of all numbers from $1$ to $i$. \nSo the first $56$ elements of the sequence are \"11212312341234512345612345671234567812345678912345678910\". Elements of the sequence are numbered from one. For example, the $1$-st element of the sequence is $1$, the $3$-rd element of the sequence is $2$, the $20$-th element of the sequence is $5$, the $38$-th element is $2$, the $56$-th element of the sequence is $0$.\nYour task is to answer $q$ independent queries. In the $i$-th query you are given one integer $k_i$. Calculate the digit at the position $k_i$ of the sequence.\n-----Input-----\nThe first line of the input contains one integer $q$ ($1 \\le q \\le 500$) \u2014 the number of queries.\nThe $i$-th of the following $q$ lines contains one integer $k_i$ $(1 \\le k_i \\le 10^{18})$ \u2014 the description of the corresponding query.\n-----Output-----\nPrint $q$ lines. In the $i$-th line print one digit $x_i$ $(0 \\le x_i \\le 9)$ \u2014 the answer to the query $i$, i.e. $x_i$ should be equal to the element at the position $k_i$ of the sequence.\n-----Examples-----\nInput\n5\n1\n3\n20\n38\n56\nOutput\n1\n2\n5\n2\n0\nInput\n4\n2132\n506\n999999999999999999\n1000000000000000000\nOutput\n8\n2\n4\n1\n-----Note-----\nAnswers on queries from the first example are described in the problem statement.\n\ndef",
      "answer": "def kth_digit(k, n):\n    return (k-1) // n % 10",
      "difficulty": "introductory"
   },
   {
      "task_id": 4139,
      "prompt": "Complete the Python function given the prompt below:You are given an integer N. Among the integers between 1 and N (inclusive), how many Shichi-Go-San numbers (literally \"Seven-Five-Three numbers\") are there?\nHere, a Shichi-Go-San number is a positive integer that satisfies the following condition:\n - When the number is written in base ten, each of the digits 7, 5 and 3 appears at least once, and the other digits never appear.\n-----Constraints-----\n - 1 \\leq N < 10^9\n - N is an integer.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n-----Output-----\nPrint the number of the Shichi-Go-San numbers between 1 and N (inclusive).\n-----Sample Input-----\n575\n-----Sample Output-----\n4\nThere are four Shichi-Go-San numbers not greater than 575: 357, 375, 537 and 573.\n\ndef",
      "answer": "def seven_five_three(n):\n    count = 0\n    for i in range(1, n+1):\n        if '7' in str(i) or '5' in str(i) or '3' in str(i):\n            count += 1\n    return count",
      "difficulty": "introductory"
   },
   {
      "task_id": 4140,
      "prompt": "Complete the Python function given the prompt below:N tiles are arranged in a row from left to right. The initial color of each tile is represented by a string S of length N.\nThe i-th tile from the left is painted black if the i-th character of S is 0, and painted white if that character is 1.\nYou want to repaint some of the tiles black or white, so that any two adjacent tiles have different colors.\nAt least how many tiles need to be repainted to satisfy the condition?\n-----Constraints-----\n - 1 \\leq |S| \\leq 10^5\n - S_i is 0 or 1.\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n-----Output-----\nPrint the minimum number of tiles that need to be repainted to satisfy the condition.\n-----Sample Input-----\n000\n-----Sample Output-----\n1\nThe condition can be satisfied by repainting the middle tile white.\n\ndef",
      "answer": "def paint_tiles(s):\n    return s.count('1')",
      "difficulty": "introductory"
   },
   {
      "task_id": 4141,
      "prompt": "Complete the Python function given the prompt below:You are an immigration officer in the Kingdom of AtCoder. The document carried by an immigrant has some number of integers written on it, and you need to check whether they meet certain criteria.\nAccording to the regulation, the immigrant should be allowed entry to the kingdom if and only if the following condition is satisfied:\n - All even numbers written on the document are divisible by 3 or 5.\nIf the immigrant should be allowed entry according to the regulation, output APPROVED; otherwise, print DENIED.\n-----Notes-----\n - The condition in the statement can be rephrased as \"If x is an even number written on the document, x is divisible by 3 or 5\".\nHere \"if\" and \"or\" are logical terms.\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 100\n - 1 \\leq A_i \\leq 1000\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 A_2 \\dots A_N\n-----Output-----\nIf the immigrant should be allowed entry according to the regulation, print APPROVED; otherwise, print DENIED.\n-----Sample Input-----\n5\n6 7 9 10 31\n-----Sample Output-----\nAPPROVED\nThe even numbers written on the document are 6 and 10.\nAll of them are divisible by 3 or 5, so the immigrant should be allowed entry.\n\ndef",
      "answer": "def check_immigration(n, a):\n    for i in range(n):\n        if a[i] % 2 == 0:\n            if a[i] % 3 == 0 or a[i] % 5 == 0:\n                print(\"APPROVED\")\n            else:\n                print(\"DENIED\")\n        else:\n            print(\"DENIED\")",
      "difficulty": "introductory"
   },
   {
      "task_id": 4142,
      "prompt": "Complete the Python function given the prompt below:Takahashi will do a tap dance. The dance is described by a string S where each character is L, R, U, or D. These characters indicate the positions on which Takahashi should step. He will follow these instructions one by one in order, starting with the first character.\nS is said to be easily playable if and only if it satisfies both of the following conditions:\n - Every character in an odd position (1-st, 3-rd, 5-th, \\ldots) is R, U, or D.\n - Every character in an even position (2-nd, 4-th, 6-th, \\ldots) is L, U, or D.\nYour task is to print Yes if S is easily playable, and No otherwise.\n-----Constraints-----\n - S is a string of length between 1 and 100 (inclusive).\n - Each character of S is L, R, U, or D.\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n-----Output-----\nPrint Yes if S is easily playable, and No otherwise.\n-----Sample Input-----\nRUDLUDR\n-----Sample Output-----\nYes\nEvery character in an odd position (1-st, 3-rd, 5-th, 7-th) is R, U, or D.\nEvery character in an even position (2-nd, 4-th, 6-th) is L, U, or D.\nThus, S is easily playable.\n\ndef",
      "answer": "def tap_dance(s):\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i] == 'L' or s[i] == 'U':\n                continue\n            else:\n                return 'No'\n        else:\n            if s[i] == 'R' or s[i] == 'D':\n                continue\n            else:\n                return 'No'\n    return 'Yes'",
      "difficulty": "introductory"
   },
   {
      "task_id": 4143,
      "prompt": "Complete the Python function given the prompt below:In 2028 and after a continuous growth, AtCoder Inc. finally built an empire with six cities (City 1, 2, 3, 4, 5, 6)!\nThere are five means of transport in this empire:\n - Train: travels from City 1 to 2 in one minute. A train can occupy at most A people.\n - Bus: travels from City 2 to 3 in one minute. A bus can occupy at most B people.\n - Taxi: travels from City 3 to 4 in one minute. A taxi can occupy at most C people.\n - Airplane: travels from City 4 to 5 in one minute. An airplane can occupy at most D people.\n - Ship: travels from City 5 to 6 in one minute. A ship can occupy at most E people.\nFor each of them, one vehicle leaves the city at each integer time (time 0, 1, 2,...).\nThere is a group of N people at City 1, and they all want to go to City 6.\nAt least how long does it take for all of them to reach there? \nYou can ignore the time needed to transfer.  \n-----Constraints-----\n - 1 \\leq N, A, B, C, D, E \\leq 10^{15}\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA\nB\nC\nD\nE\n-----Output-----\nPrint the minimum time required for all of the people to reach City 6, in minutes.\n-----Sample Input-----\n5\n3\n2\n4\n3\n5\n-----Sample Output-----\n7\nOne possible way to travel is as follows.\nFirst, there are N = 5 people at City 1, as shown in the following image:\nIn the first minute, three people travels from City 1 to City 2 by train. Note that a train can only occupy at most three people.\nIn the second minute, the remaining two people travels from City 1 to City 2 by train, and two of the three people who were already at City 2 travels to City 3 by bus. Note that a bus can only occupy at most two people.\nIn the third minute, two people travels from City 2 to City 3 by train, and another two people travels from City 3 to City 4 by taxi.\nFrom then on, if they continue traveling without stopping until they reach City 6, all of them can reach there in seven minutes.\nThere is no way for them to reach City 6 in 6 minutes or less.\n\ndef",
      "answer": "def main():\n    n = int(input())\n    a, b, c, d, e = map(int, input().split())\n    print(min(a*n, b*(n-1), c*(n-2), d*(n-3), e*(n-4)))",
      "difficulty": "introductory"
   },
   {
      "task_id": 4144,
      "prompt": "Complete the Python function given the prompt below:How many integer sequences A_1,A_2,\\ldots,A_N of length N satisfy all of the following conditions?\n - 0 \\leq A_i \\leq 9\n - There exists some i such that A_i=0 holds.\n - There exists some i such that A_i=9 holds.\nThe answer can be very large, so output it modulo 10^9 + 7.\n-----Constraints-----\n - 1 \\leq N \\leq 10^6\n - N is an integer.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n-----Output-----\nPrint the answer modulo 10^9 + 7.\n-----Sample Input-----\n2\n-----Sample Output-----\n2\nTwo sequences \\{0,9\\} and \\{9,0\\} satisfy all conditions.\n\ndef",
      "answer": "def count_sequences(n):\n    if n == 1:\n        return 2\n    else:\n        return count_sequences(n-1) + count_sequences(n-1)",
      "difficulty": "introductory"
   },
   {
      "task_id": 4145,
      "prompt": "Complete the Python function given the prompt below:Find the minimum prime number greater than or equal to X.\n-----Notes-----\nA prime number is an integer greater than 1 that cannot be evenly divided by any positive integer except 1 and itself.\nFor example, 2, 3, and 5 are prime numbers, while 4 and 6 are not.\n-----Constraints-----\n -  2 \\le X \\le 10^5 \n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nX\n-----Output-----\nPrint the minimum prime number greater than or equal to X.\n-----Sample Input-----\n20\n-----Sample Output-----\n23\nThe minimum prime number greater than or equal to 20 is 23.\n\ndef",
      "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True",
      "difficulty": "introductory"
   },
   {
      "task_id": 4146,
      "prompt": "Complete the Python function given the prompt below:A sequence a_1,a_2,...,a_n is said to be /\\/\\/\\/ when the following conditions are satisfied:\n - For each i = 1,2,..., n-2, a_i = a_{i+2}.\n - Exactly two different numbers appear in the sequence.\nYou are given a sequence v_1,v_2,...,v_n whose length is even.\nWe would like to make this sequence /\\/\\/\\/ by replacing some of its elements.\nFind the minimum number of elements that needs to be replaced.\n-----Constraints-----\n - 2 \\leq n \\leq 10^5\n - n is even.\n - 1 \\leq v_i \\leq 10^5\n - v_i is an integer.\n-----Input-----\nInput is given from Standard Input in the following format:\nn\nv_1 v_2... v_n\n-----Output-----\nPrint the minimum number of elements that needs to be replaced.\n-----Sample Input-----\n4\n3 1 3 2\n-----Sample Output-----\n1\nThe sequence 3,1,3,2 is not /\\/\\/\\/, but we can make it /\\/\\/\\/ by replacing one of its elements: for example, replace the fourth element to make it 3,1,3,1.\n\ndef",
      "answer": "def check(a):\n    for i in range(len(a)-2):\n        if a[i]==a[i+2]:\n            return False\n    return True",
      "difficulty": "introductory"
   },
   {
      "task_id": 4147,
      "prompt": "Complete the Python function given the prompt below:You have N bamboos. The lengths (in centimeters) of these are l_1, l_2,..., l_N, respectively.\nYour objective is to use some of these bamboos (possibly all) to obtain three bamboos of length A, B, C. For that, you can use the following three kinds of magics any number:\n - Extension Magic: Consumes 1 MP (magic point). Choose one bamboo and increase its length by 1.\n - Shortening Magic: Consumes 1 MP. Choose one bamboo of length at least 2 and decrease its length by 1.\n - Composition Magic: Consumes 10 MP. Choose two bamboos and combine them into one bamboo. The length of this new bamboo is equal to the sum of the lengths of the two bamboos combined. (Afterwards, further magics can be used on this bamboo.)\nAt least how much MP is needed to achieve the objective?\n-----Constraints-----\n - 3 \\leq N \\leq 8\n - 1 \\leq C < B < A \\leq 1000\n - 1 \\leq l_i \\leq 1000\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN A B C\nl_1\nl_2\n:\nl_N\n-----Output-----\nPrint the minimum amount of MP needed to achieve the objective.\n-----Sample Input-----\n5 100 90 80\n98\n40\n30\n21\n80\n-----Sample Output-----\n23\nWe are obtaining three bamboos of lengths 100, 90, 80 from five bamboos 98, 40, 30, 21, 80. We already have a bamboo of length 80, and we can obtain bamboos of lengths 100, 90 by using the magics as follows at the total cost of 23 MP, which is optimal.\n - Use Extension Magic twice on the bamboo of length 98 to obtain a bamboo of length 100. (MP consumed: 2)\n - Use Composition Magic on the bamboos of lengths 40, 30 to obtain a bamboo of length 70. (MP consumed: 10)\n - Use Shortening Magic once on the bamboo of length 21 to obtain a bamboo of length 20. (MP consumed: 1)\n - Use Composition Magic on the bamboo of length 70 obtained in step 2 and the bamboo of length 20 obtained in step 3 to obtain a bamboo of length 90. (MP consumed: 10)\n\ndef",
      "answer": "def main():\n    n, a, b, c = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    mp = 0\n    for i in range(n):\n        if l[i] == a:\n            mp += 10\n        elif l[i] == b:\n            mp += 10\n        elif l[i] == c:\n            mp += 10\n        elif l[i] > a:\n            mp += 1\n            l[i] -= 1\n        elif l[i] > b:\n            mp += 1\n            l[i] -= 1\n        elif l[i] > c:\n            mp += 1\n            l[i] -= 1\n    print(mp)",
      "difficulty": "introductory"
   },
   {
      "task_id": 4148,
      "prompt": "Complete the Python function given the prompt below:We have a string S consisting of uppercase English letters. Additionally, an integer N will be given.\nShift each character of S by N in alphabetical order (see below), and print the resulting string.\nWe assume that A follows Z. For example, shifting A by 2 results in C (A \\to B \\to C), and shifting Y by 3 results in B (Y \\to Z \\to A \\to B).\n-----Constraints-----\n - 0 \\leq N \\leq 26\n - 1 \\leq |S| \\leq 10^4\n - S consists of uppercase English letters.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nS\n-----Output-----\nPrint the string resulting from shifting each character of S by N in alphabetical order.\n-----Sample Input-----\n2\nABCXYZ\n-----Sample Output-----\nCDEZAB\nNote that A follows Z.\n\ndef",
      "answer": "def shift(s, n):\n    return chr(ord('A') + (ord(s) - ord('A') + n) % 26)",
      "difficulty": "introductory"
   },
   {
      "task_id": 4149,
      "prompt": "Complete the Python function given the prompt below:Authors guessed an array $a$ consisting of $n$ integers; each integer is not less than $2$ and not greater than $2 \\cdot 10^5$. You don't know the array $a$, but you know the array $b$ which is formed from it with the following sequence of operations:  Firstly, let the array $b$ be equal to the array $a$;  Secondly, for each $i$ from $1$ to $n$:   if $a_i$ is a prime number, then one integer $p_{a_i}$ is appended to array $b$, where $p$ is an infinite sequence of prime numbers ($2, 3, 5, \\dots$);  otherwise (if $a_i$ is not a prime number), the greatest divisor of $a_i$ which is not equal to $a_i$ is appended to $b$;   Then the obtained array of length $2n$ is shuffled and given to you in the input. \nHere $p_{a_i}$ means the $a_i$-th prime number. The first prime $p_1 = 2$, the second one is $p_2 = 3$, and so on.\nYour task is to recover any suitable array $a$ that forms the given array $b$. It is guaranteed that the answer exists (so the array $b$ is obtained from some suitable array $a$). If there are multiple answers, you can print any.\n-----Input-----\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of elements in $a$.\nThe second line of the input contains $2n$ integers $b_1, b_2, \\dots, b_{2n}$ ($2 \\le b_i \\le 2750131$), where $b_i$ is the $i$-th element of $b$. $2750131$ is the $199999$-th prime number.\n-----Output-----\nIn the only line of the output print $n$ integers $a_1, a_2, \\dots, a_n$ ($2 \\le a_i \\le 2 \\cdot 10^5$) in any order \u2014 the array $a$ from which the array $b$ can be obtained using the sequence of moves given in the problem statement. If there are multiple answers, you can print any.\n-----Examples-----\nInput\n3\n3 5 2 3 2 4\nOutput\n3 4 2 \nInput\n1\n2750131 199999\nOutput\n199999 \nInput\n1\n3 6\nOutput\n6\n\ndef",
      "answer": "def is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True",
      "difficulty": "introductory"
   },
   {
      "task_id": 4150,
      "prompt": "Complete the Python function given the prompt below:There are $n$ students standing in a row. Two coaches are forming two teams \u2014 the first coach chooses the first team and the second coach chooses the second team.\nThe $i$-th student has integer programming skill $a_i$. All programming skills are distinct and between $1$ and $n$, inclusive.\nFirstly, the first coach will choose the student with maximum programming skill among all students not taken into any team, and $k$ closest students to the left of him and $k$ closest students to the right of him (if there are less than $k$ students to the left or to the right, all of them will be chosen). All students that are chosen leave the row and join the first team. Secondly, the second coach will make the same move (but all students chosen by him join the second team). Then again the first coach will make such move, and so on. This repeats until the row becomes empty (i. e. the process ends when each student becomes to some team).\nYour problem is to determine which students will be taken into the first team and which students will be taken into the second team.\n-----Input-----\nThe first line of the input contains two integers $n$ and $k$ ($1 \\le k \\le n \\le 2 \\cdot 10^5$) \u2014 the number of students and the value determining the range of chosen students during each move, respectively.\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le n$), where $a_i$ is the programming skill of the $i$-th student. It is guaranteed that all programming skills are distinct.\n-----Output-----\nPrint a string of $n$ characters; $i$-th character should be 1 if $i$-th student joins the first team, or 2 otherwise.\n-----Examples-----\nInput\n5 2\n2 4 5 3 1\nOutput\n11111\nInput\n5 1\n2 1 3 5 4\nOutput\n22111\nInput\n7 1\n7 2 1 3 5 4 6\nOutput\n1121122\nInput\n5 1\n2 4 5 3 1\nOutput\n21112\n-----Note-----\nIn the first example the first coach chooses the student on a position $3$, and the row becomes empty (all students join the first team).\nIn the second example the first coach chooses the student on position $4$, and the row becomes $[2, 1]$ (students with programming skills $[3, 4, 5]$ join the first team). Then the second coach chooses the student on position $1$, and the row becomes empty (and students with programming skills $[1, 2]$ join the second team).\nIn the third example the first coach chooses the student on position $1$, and the row becomes $[1, 3, 5, 4, 6]$ (students with programming skills $[2, 7]$ join the first team). Then the second coach chooses the student on position $5$, and the row becomes $[1, 3, 5]$ (students with programming skills $[4, 6]$ join the second team). Then the first coach chooses the student on position $3$, and the row becomes $[1]$ (students with programming skills $[3, 5]$ join the first team). And then the second coach chooses the remaining student (and the student with programming skill $1$ joins the second team).\nIn the fourth example the first coach chooses the student on position $3$, and the row becomes $[2, 1]$ (students with programming skills $[3, 4, 5]$ join the first team). Then the second coach chooses the student on position $1$, and the row becomes empty (and students with programming skills $[1, 2]$ join the second team).\n\ndef",
      "answer": "def solution(n, k):\n    # write your code in Python 3.6\n    # n = 5, k = 2\n    # n = 7, k = 1\n    # n = 5, k = 1\n    # n = 5, k = 1\n    # n = 5, k = 1\n    # n = 5, k = 1\n    # n = 5, k = 1\n    # n = 5, k = 1\n    # n = 5, k = 1\n    # n = 5, k = 1\n    # n = 5, k = 1\n    # n = 5, k = 1\n    # n = 5, k = 1\n    # n = 5, k = 1\n    # n = 5, k = 1\n    # n = 5, k = 1\n    # n = 5, k = 1\n    # n = 5, k = 1\n    # n = 5, k = 1\n    # n = 5, k = 1\n    # n = 5, k = 1\n    # n = 5, k = 1\n    # n = 5, k = 1\n    # n = 5, k = 1\n    # n = 5, k = 1\n    # n = 5, k = 1\n    # n = 5, k = 1\n    # n = 5, k = 1\n    # n = 5, k = 1\n    # n = 5, k = 1\n    # n = 5, k = 1\n    # n = 5, k = 1\n    # n = 5, k = 1\n    # n = 5, k = 1\n    # n = 5, k = 1\n    # n = 5, k = 1\n    # n = 5, k = 1\n    # n = 5, k = 1\n    # n = 5, k = 1\n    # n = 5, k = 1\n    # n = 5, k = 1\n    # n = 5, k = 1\n    # n = 5, k = 1\n    # n = 5, k = 1\n    # n = 5, k = 1\n    # n = 5, k = 1\n    # n = 5, k = 1\n    # n = 5, k = 1\n    #",
      "difficulty": "introductory"
   },
   {
      "task_id": 4151,
      "prompt": "Complete the Python function given the prompt below:You are given an array $a$ consisting of $n$ integers. Let's denote monotonic renumeration of array $a$ as an array $b$ consisting of $n$ integers such that all of the following conditions are met:\n  $b_1 = 0$;  for every pair of indices $i$ and $j$ such that $1 \\le i, j \\le n$, if $a_i = a_j$, then $b_i = b_j$ (note that if $a_i \\ne a_j$, it is still possible that $b_i = b_j$);  for every index $i \\in [1, n - 1]$ either $b_i = b_{i + 1}$ or $b_i + 1 = b_{i + 1}$. \nFor example, if $a = [1, 2, 1, 2, 3]$, then two possible monotonic renumerations of $a$ are $b = [0, 0, 0, 0, 0]$ and $b = [0, 0, 0, 0, 1]$.\nYour task is to calculate the number of different monotonic renumerations of $a$. The answer may be large, so print it modulo $998244353$.\n-----Input-----\nThe first line contains one integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of elements in $a$.\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$).\n-----Output-----\nPrint one integer \u2014 the number of different monotonic renumerations of $a$, taken modulo $998244353$.\n-----Examples-----\nInput\n5\n1 2 1 2 3\nOutput\n2\nInput\n2\n100 1\nOutput\n2\nInput\n4\n1 3 3 7\nOutput\n4\n\ndef",
      "answer": "def count_monotonic_renumerations(a):\n    n = len(a)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = 1\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] == a[j]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1]\n    return dp[n - 1][n - 1] % (10 ** 9 + 7)",
      "difficulty": "introductory"
   },
   {
      "task_id": 4152,
      "prompt": "Complete the Python function given the prompt below:A sequence $a_1, a_2, \\dots, a_n$ is called good if, for each element $a_i$, there exists an element $a_j$ ($i \\ne j$) such that $a_i+a_j$ is a power of two (that is, $2^d$ for some non-negative integer $d$).\nFor example, the following sequences are good:  $[5, 3, 11]$ (for example, for $a_1=5$ we can choose $a_2=3$. Note that their sum is a power of two. Similarly, such an element can be found for $a_2$ and $a_3$),  $[1, 1, 1, 1023]$,  $[7, 39, 89, 25, 89]$,  $[]$. \nNote that, by definition, an empty sequence (with a length of $0$) is good.\nFor example, the following sequences are not good:  $[16]$ (for $a_1=16$, it is impossible to find another element $a_j$ such that their sum is a power of two),  $[4, 16]$ (for $a_1=4$, it is impossible to find another element $a_j$ such that their sum is a power of two),  $[1, 3, 2, 8, 8, 8]$ (for $a_3=2$, it is impossible to find another element $a_j$ such that their sum is a power of two). \nYou are given a sequence $a_1, a_2, \\dots, a_n$. What is the minimum number of elements you need to remove to make it good? You can delete an arbitrary set of elements.\n-----Input-----\nThe first line contains the integer $n$ ($1 \\le n \\le 120000$) \u2014 the length of the given sequence.\nThe second line contains the sequence of integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$).\n-----Output-----\nPrint the minimum number of elements needed to be removed from the given sequence in order to make it good. It is possible that you need to delete all $n$ elements, make it empty, and thus get a good sequence.\n-----Examples-----\nInput\n6\n4 7 1 5 4 9\nOutput\n1\nInput\n5\n1 2 3 4 5\nOutput\n2\nInput\n1\n16\nOutput\n1\nInput\n4\n1 1 1 1023\nOutput\n0\n-----Note-----\nIn the first example, it is enough to delete one element $a_4=5$. The remaining elements form the sequence $[4, 7, 1, 4, 9]$, which is good.\n\ndef",
      "answer": "def power_of_two(n):\n    if n == 0:\n        return False\n    while n % 2 == 0:\n        n /= 2\n    return n == 1",
      "difficulty": "introductory"
   },
   {
      "task_id": 4153,
      "prompt": "Complete the Python function given the prompt below:There are N cubes stacked vertically on a desk.\nYou are given a string S of length N. The color of the i-th cube from the bottom is red if the i-th character in S is 0, and blue if that character is 1.\nYou can perform the following operation any number of times: choose a red cube and a blue cube that are adjacent, and remove them. Here, the cubes that were stacked on the removed cubes will fall down onto the object below them.\nAt most how many cubes can be removed?\n-----Constraints-----\n - 1 \\leq N \\leq 10^5\n - |S| = N\n - Each character in S is 0 or 1.\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n-----Output-----\nPrint the maximum number of cubes that can be removed.\n-----Sample Input-----\n0011\n-----Sample Output-----\n4\nAll four cubes can be removed, by performing the operation as follows:\n - Remove the second and third cubes from the bottom. Then, the fourth cube drops onto the first cube.\n - Remove the first and second cubes from the bottom.\n\ndef",
      "answer": "def remove_cubes(s):\n    # Write your code here\n    count = 0\n    for i in range(len(s)):\n        if s[i] == '0':\n            count += 1\n    return count",
      "difficulty": "introductory"
   },
   {
      "task_id": 4154,
      "prompt": "Complete the Python function given the prompt below:We have N ID cards, and there are M gates.\nWe can pass the i-th gate if we have one of the following ID cards: the L_i-th, (L_i+1)-th,..., and R_i-th ID cards.\nHow many of the ID cards allow us to pass all the gates alone?\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 10^5\n - 1 \\leq M \\leq 10^5\n - 1 \\leq L_i \\leq R_i \\leq N\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\nL_1 R_1\nL_2 R_2\n\\vdots\nL_M R_M\n-----Output-----\nPrint the number of ID cards that allow us to pass all the gates alone.\n-----Sample Input-----\n4 2\n1 3\n2 4\n-----Sample Output-----\n2\nTwo ID cards allow us to pass all the gates alone, as follows:\n - The first ID card does not allow us to pass the second gate.\n - The second ID card allows us to pass all the gates.\n - The third ID card allows us to pass all the gates.\n - The fourth ID card does not allow us to pass the first gate.\n\ndef",
      "answer": "def solve(n, m, lr):\n    pass",
      "difficulty": "introductory"
   },
   {
      "task_id": 4155,
      "prompt": "Complete the Python function given the prompt below:In a flower bed, there are N flowers, numbered 1,2,......,N. Initially, the heights of all flowers are 0.\nYou are given a sequence h=\\{h_1,h_2,h_3,......\\} as input. You would like to change the height of Flower k to h_k for all k (1 \\leq  k \\leq N), by repeating the following \"watering\" operation:\n - Specify integers l and r. Increase the height of Flower x by 1 for all x such that l \\leq x \\leq r.\nFind the minimum number of watering operations required to satisfy the condition.\n-----Constraints-----\n - 1 \\leq N  \\leq 100\n - 0 \\leq h_i \\leq 100\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nh_1 h_2 h_3...... h_N\n-----Output-----\nPrint the minimum number of watering operations required to satisfy the condition.\n-----Sample Input-----\n4\n1 2 2 1\n-----Sample Output-----\n2\nThe minimum number of watering operations required is 2.\nOne way to achieve it is:\n - Perform the operation with (l,r)=(1,3).\n - Perform the operation with (l,r)=(2,4).\n\ndef",
      "answer": "def water(arr,l,r):\n    count=0\n    for i in range(l,r+1):\n        arr[i]+=1\n        count+=1\n    return count",
      "difficulty": "introductory"
   },
   {
      "task_id": 4156,
      "prompt": "Complete the Python function given the prompt below:The busses in Berland are equipped with a video surveillance system. The system records information about changes in the number of passengers in a bus after stops.\nIf $x$ is the number of passengers in a bus just before the current bus stop and $y$ is the number of passengers in the bus just after current bus stop, the system records the number $y-x$. So the system records show how number of passengers changed.\nThe test run was made for single bus and $n$ bus stops. Thus, the system recorded the sequence of integers $a_1, a_2, \\dots, a_n$ (exactly one number for each bus stop), where $a_i$ is the record for the bus stop $i$. The bus stops are numbered from $1$ to $n$ in chronological order.\nDetermine the number of possible ways how many people could be in the bus before the first bus stop, if the bus has a capacity equals to $w$ (that is, at any time in the bus there should be from $0$ to $w$ passengers inclusive).\n-----Input-----\nThe first line contains two integers $n$ and $w$ $(1 \\le n \\le 1\\,000, 1 \\le w \\le 10^{9})$ \u2014 the number of bus stops and the capacity of the bus.\nThe second line contains a sequence $a_1, a_2, \\dots, a_n$ $(-10^{6} \\le a_i \\le 10^{6})$, where $a_i$ equals to the number, which has been recorded by the video system after the $i$-th bus stop.\n-----Output-----\nPrint the number of possible ways how many people could be in the bus before the first bus stop, if the bus has a capacity equals to $w$. If the situation is contradictory (i.e. for any initial number of passengers there will be a contradiction), print 0.\n-----Examples-----\nInput\n3 5\n2 1 -3\nOutput\n3\nInput\n2 4\n-1 1\nOutput\n4\nInput\n4 10\n2 4 1 2\nOutput\n2\n-----Note-----\nIn the first example initially in the bus could be $0$, $1$ or $2$ passengers.\nIn the second example initially in the bus could be $1$, $2$, $3$ or $4$ passengers.\nIn the third example initially in the bus could be $0$ or $1$ passenger.\n\ndef",
      "answer": "def bus(n, w, a):\n    a.sort()\n    dp = [[0 for _ in range(w+1)] for _ in range(n+1)]\n    dp[0][0] = 1\n    for i in range(1, n+1):\n        for j in range(w+1):\n            if j - a[i-1] >= 0:\n                dp[i][j] = dp[i-1][j] + dp[i-1][j-a[i-1]]\n            else:\n                dp[i][j] = dp[i-1][j]\n    return dp[n][w]",
      "difficulty": "introductory"
   },
   {
      "task_id": 4157,
      "prompt": "Complete the Python function given the prompt below:Polycarp likes to play with numbers. He takes some integer number $x$, writes it down on the board, and then performs with it $n - 1$ operations of the two kinds:   divide the number $x$ by $3$ ($x$ must be divisible by $3$);  multiply the number $x$ by $2$. \nAfter each operation, Polycarp writes down the result on the board and replaces $x$ by the result. So there will be $n$ numbers on the board after all.\nYou are given a sequence of length $n$ \u2014 the numbers that Polycarp wrote down. This sequence is given in arbitrary order, i.e. the order of the sequence can mismatch the order of the numbers written on the board.\nYour problem is to rearrange (reorder) elements of this sequence in such a way that it can match possible Polycarp's game in the order of the numbers written on the board. I.e. each next number will be exactly two times of the previous number or exactly one third of previous number.\nIt is guaranteed that the answer exists.\n-----Input-----\nThe first line of the input contatins an integer number $n$ ($2 \\le n \\le 100$) \u2014 the number of the elements in the sequence. The second line of the input contains $n$ integer numbers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 3 \\cdot 10^{18}$) \u2014 rearranged (reordered) sequence that Polycarp can wrote down on the board.\n-----Output-----\nPrint $n$ integer numbers \u2014 rearranged (reordered) input sequence that can be the sequence that Polycarp could write down on the board.\nIt is guaranteed that the answer exists.\n-----Examples-----\nInput\n6\n4 8 6 3 12 9\nOutput\n9 3 6 12 4 8 \nInput\n4\n42 28 84 126\nOutput\n126 42 84 28 \nInput\n2\n1000000000000000000 3000000000000000000\nOutput\n3000000000000000000 1000000000000000000 \n-----Note-----\nIn the first example the given sequence can be rearranged in the following way: $[9, 3, 6, 12, 4, 8]$. It can match possible Polycarp's game which started with $x = 9$.\n\ndef",
      "answer": "def polycarp(seq):\n    seq.sort()\n    seq.append(seq[0] * 2)\n    seq.append(seq[0] * 3)\n    seq.sort()\n    return seq",
      "difficulty": "introductory"
   },
   {
      "task_id": 4158,
      "prompt": "Complete the Python function given the prompt below:There are $n$ distinct points on a coordinate line, the coordinate of $i$-th point equals to $x_i$. Choose a subset of the given set of points such that the distance between each pair of points in a subset is an integral power of two. It is necessary to consider each pair of points, not only adjacent. Note that any subset containing one element satisfies the condition above. Among all these subsets, choose a subset with maximum possible size.\nIn other words, you have to choose the maximum possible number of points $x_{i_1}, x_{i_2}, \\dots, x_{i_m}$ such that for each pair $x_{i_j}$, $x_{i_k}$ it is true that $|x_{i_j} - x_{i_k}| = 2^d$ where $d$ is some non-negative integer number (not necessarily the same for each pair of points).\n-----Input-----\nThe first line contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of points.\nThe second line contains $n$ pairwise distinct integers $x_1, x_2, \\dots, x_n$ ($-10^9 \\le x_i \\le 10^9$) \u2014 the coordinates of points.\n-----Output-----\nIn the first line print $m$ \u2014 the maximum possible number of points in a subset that satisfies the conditions described above.\nIn the second line print $m$ integers \u2014 the coordinates of points in the subset you have chosen.\nIf there are multiple answers, print any of them.\n-----Examples-----\nInput\n6\n3 5 4 7 10 12\nOutput\n3\n7 3 5\nInput\n5\n-1 2 5 8 11\nOutput\n1\n8\n-----Note-----\nIn the first example the answer is $[7, 3, 5]$. Note, that $|7-3|=4=2^2$, $|7-5|=2=2^1$ and $|3-5|=2=2^1$. You can't find a subset having more points satisfying the required property.\n\ndef",
      "answer": "def f(n, x):\n    x.sort()\n    m = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if x[j] - x[i] == 2**m:\n                m += 1\n                break\n    return m",
      "difficulty": "introductory"
   },
   {
      "task_id": 4159,
      "prompt": "Complete the Python function given the prompt below:Takahashi has A cookies, and Aoki has B cookies.\nTakahashi will do the following action K times:\n - If Takahashi has one or more cookies, eat one of his cookies.\n - Otherwise, if Aoki has one or more cookies, eat one of Aoki's cookies.\n - If they both have no cookies, do nothing.\nIn the end, how many cookies will Takahashi and Aoki have, respectively?\n-----Constraints-----\n - 0 \\leq A \\leq 10^{12}\n - 0 \\leq B \\leq 10^{12}\n - 0 \\leq K \\leq 10^{12}\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nA B K\n-----Output-----\nPrint the numbers of Takahashi's and Aoki's cookies after K actions.\n-----Sample Input-----\n2 3 3\n-----Sample Output-----\n0 2\nTakahashi will do the following:\n - He has two cookies, so he eats one of them.\n - Now he has one cookie left, and he eats it.\n - Now he has no cookies left, but Aoki has three, so Takahashi eats one of them.\nThus, in the end, Takahashi will have 0 cookies, and Aoki will have 2.\n\ndef",
      "answer": "def cookies(A, B, K):\n    takahashi = A\n    aoki = B\n    for i in range(K):\n        if takahashi > 0:\n            takahashi -= 1\n        elif aoki > 0:\n            aoki -= 1\n        else:\n            pass\n    return takahashi, aoki",
      "difficulty": "introductory"
   },
   {
      "task_id": 4160,
      "prompt": "Complete the Python function given the prompt below:Takahashi has a deposit of 100 yen (the currency of Japan) in AtCoder Bank.\nThe bank pays an annual interest rate of 1 % compounded annually. (A fraction of less than one yen is discarded.)\nAssuming that nothing other than the interest affects Takahashi's balance, in how many years does the balance reach X yen or above for the first time?\n-----Constraints-----\n -  101 \\le X \\le 10^{18} \n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nX\n-----Output-----\nPrint the number of years it takes for Takahashi's balance to reach X yen or above for the first time.\n-----Sample Input-----\n103\n-----Sample Output-----\n3\n - The balance after one year is 101 yen.\n - The balance after two years is 102 yen.\n - The balance after three years is 103 yen.\nThus, it takes three years for the balance to reach 103 yen or above.\n\ndef",
      "answer": "def main():\n    x = int(input())\n    print(x // 100)",
      "difficulty": "introductory"
   },
   {
      "task_id": 4161,
      "prompt": "Complete the Python function given the prompt below:Find \\displaystyle{\\sum_{a=1}^{K}\\sum_{b=1}^{K}\\sum_{c=1}^{K} \\gcd(a,b,c)}.\nHere \\gcd(a,b,c) denotes the greatest common divisor of a, b, and c.\n-----Constraints-----\n - 1 \\leq K \\leq 200\n - K is an integer.\n-----Input-----\nInput is given from Standard Input in the following format:\nK\n-----Output-----\nPrint the value of \\displaystyle{\\sum_{a=1}^{K}\\sum_{b=1}^{K}\\sum_{c=1}^{K} \\gcd(a,b,c)}.\n-----Sample Input-----\n2\n-----Sample Output-----\n9\n\\gcd(1,1,1)+\\gcd(1,1,2)+\\gcd(1,2,1)+\\gcd(1,2,2)+\\gcd(2,1,1)+\\gcd(2,1,2)+\\gcd(2,2,1)+\\gcd(2,2,2)=1+1+1+1+1+1+1+2=9\nThus, the answer is 9.\n\ndef",
      "answer": "def gcd(a,b):\n    if b==0:\n        return a\n    else:\n        return gcd(b,a%b)",
      "difficulty": "introductory"
   },
   {
      "task_id": 4162,
      "prompt": "Complete the Python function given the prompt below:You are given N positive integers a_1, a_2,..., a_N.\nFor a non-negative integer m, let f(m) = (m\\ mod\\ a_1) + (m\\ mod\\ a_2) +... + (m\\ mod\\ a_N).\nHere, X\\ mod\\ Y denotes the remainder of the division of X by Y.\nFind the maximum value of f.\n-----Constraints-----\n - All values in input are integers.\n - 2 \\leq N \\leq 3000\n - 2 \\leq a_i \\leq 10^5\n-----Input-----\nInput is given from Standard Input in the following format:\nN\na_1 a_2... a_N\n-----Output-----\nPrint the maximum value of f.\n-----Sample Input-----\n3\n3 4 6\n-----Sample Output-----\n10\nf(11) = (11\\ mod\\ 3) + (11\\ mod\\ 4) + (11\\ mod\\ 6) = 10 is the maximum value of f.\n\ndef",
      "answer": "def f(m):\n    return sum(map(lambda x: m % x, a))",
      "difficulty": "introductory"
   },
   {
      "task_id": 4163,
      "prompt": "Complete the Python function given the prompt below:Tak performed the following action N times: rolling two dice.\nThe result of the i-th roll is D_{i,1} and D_{i,2}.\nCheck if doublets occurred at least three times in a row.\nSpecifically, check if there exists at lease one i such that D_{i,1}=D_{i,2}, D_{i+1,1}=D_{i+1,2} and D_{i+2,1}=D_{i+2,2} hold.\n-----Constraints-----\n - 3 \\leq N \\leq 100\n - 1\\leq D_{i,j} \\leq 6\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nD_{1,1} D_{1,2}\n\\vdots\nD_{N,1} D_{N,2}\n-----Output-----\nPrint Yes if doublets occurred at least three times in a row. Print No otherwise.\n-----Sample Input-----\n5\n1 2\n6 6\n4 4\n3 3\n3 2\n-----Sample Output-----\nYes\nFrom the second roll to the fourth roll, three doublets occurred in a row.\n\ndef",
      "answer": "def doubles(n,d):\n    for i in range(n-2):\n        if d[i]==d[i+1] and d[i+1]==d[i+2]:\n            return True\n    return False",
      "difficulty": "introductory"
   },
   {
      "task_id": 4164,
      "prompt": "Complete the Python function given the prompt below:Given is an integer r.\nHow many times is the area of a circle of radius r larger than the area of a circle of radius 1?\nIt can be proved that the answer is always an integer under the constraints given.\n-----Constraints-----\n - 1 \\leq r \\leq 100\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nr\n-----Output-----\nPrint the area of a circle of radius r, divided by the area of a circle of radius 1, as an integer.\n-----Sample Input-----\n2\n-----Sample Output-----\n4\nThe area of a circle of radius 2 is 4 times larger than the area of a circle of radius 1.\nNote that output must be an integer - for example, 4.0 will not be accepted.\n\ndef",
      "answer": "def area_of_circle(r):\n    return r ** 2 * 3.14",
      "difficulty": "introductory"
   },
   {
      "task_id": 4165,
      "prompt": "Complete the Python function given the prompt below:Determine if an N-sided polygon (not necessarily convex) with sides of length L_1, L_2,..., L_N can be drawn in a two-dimensional plane.\nYou can use the following theorem:\nTheorem: an N-sided polygon satisfying the condition can be drawn if and only if the longest side is strictly shorter than the sum of the lengths of the other N-1 sides.\n-----Constraints-----\n - All values in input are integers.\n - 3 \\leq N \\leq 10\n - 1 \\leq L_i \\leq 100\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nL_1 L_2... L_N\n-----Output-----\nIf an N-sided polygon satisfying the condition can be drawn, print Yes; otherwise, print No.\n-----Sample Input-----\n4\n3 8 5 1\n-----Sample Output-----\nYes\nSince 8 < 9 = 3 + 5 + 1, it follows from the theorem that such a polygon can be drawn on a plane.\n\ndef",
      "answer": "def polygon(n, l):\n    if n == 3:\n        return l[0] < l[1] + l[2]\n    return l[0] < sum(l[1:]) + l[0]",
      "difficulty": "introductory"
   },
   {
      "task_id": 4166,
      "prompt": "Complete the Python function given the prompt below:If there is an integer not less than 0 satisfying the following conditions, print the smallest such integer; otherwise, print -1.\n - The integer has exactly N digits in base ten. (We assume 0 to be a 1-digit integer. For other integers, leading zeros are not allowed.)\n - The s_i-th digit from the left is c_i. \\left(i = 1, 2, \\cdots, M\\right)\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 3\n - 0 \\leq M \\leq 5\n - 1 \\leq s_i \\leq N\n - 0 \\leq c_i \\leq 9\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\ns_1 c_1\n\\vdots\ns_M c_M\n-----Output-----\nPrint the answer.\n-----Sample Input-----\n3 3\n1 7\n3 2\n1 7\n-----Sample Output-----\n702\n702 satisfies the conditions - its 1-st and 3-rd digits are 7 and 2, respectively - while no non-negative integer less than 702 satisfies them.\n\ndef",
      "answer": "def solve(n, m, s, c):\n    if n == 1:\n        if c == s[0]:\n            return 0\n        else:\n            return -1\n    else:\n        if c == s[n - 1]:\n            return solve(n - 1, m, s, c)\n        else:\n            return solve(n - 1, m, s, c) + pow(10, n - 1)",
      "difficulty": "introductory"
   },
   {
      "task_id": 4167,
      "prompt": "Complete the Python function given the prompt below:You are given integers N and K. Find the number of triples (a,b,c) of positive integers not greater than N such that a+b,b+c and c+a are all multiples of K.\nThe order of a,b,c does matter, and some of them can be the same.\n-----Constraints-----\n - 1 \\leq N,K \\leq 2\\times 10^5\n - N and K are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\n-----Output-----\nPrint the number of triples (a,b,c) of positive integers not greater than N such that a+b,b+c and c+a are all multiples of K.\n-----Sample Input-----\n3 2\n-----Sample Output-----\n9\n(1,1,1),(1,1,3),(1,3,1),(1,3,3),(2,2,2),(3,1,1),(3,1,3),(3,3,1) and (3,3,3) satisfy the condition.\n\ndef",
      "answer": "def count_triples(n, k):\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if (i + j) % k == 0 and (j + i) % k == 0:\n                count += 1\n    return count",
      "difficulty": "introductory"
   },
   {
      "task_id": 4168,
      "prompt": "Complete the Python function given the prompt below:Given an integer N, find the base -2 representation of N.\nHere, S is the base -2 representation of N when the following are all satisfied:\n - S is a string consisting of 0 and 1.\n - Unless S = 0, the initial character of S is 1.\n - Let S = S_k S_{k-1}... S_0, then S_0 \\times (-2)^0 + S_1 \\times (-2)^1 +... + S_k \\times (-2)^k = N.\nIt can be proved that, for any integer M, the base -2 representation of M is uniquely determined.\n-----Constraints-----\n - Every value in input is integer.\n - -10^9 \\leq N \\leq 10^9\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n-----Output-----\nPrint the base -2 representation of N.\n-----Sample Input-----\n-9\n-----Sample Output-----\n1011\nAs (-2)^0 + (-2)^1 + (-2)^3 = 1 + (-2) + (-8) = -9, 1011 is the base -2 representation of -9.\n\ndef",
      "answer": "def base_2(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == -1:\n        return -1\n    if n < 0:\n        return -1 * base_2(-n)\n    if n > 0:\n        return base_2(n // 2) * 2 + n % 2",
      "difficulty": "introductory"
   },
   {
      "task_id": 4169,
      "prompt": "Complete the Python function given the prompt below:Hearing that energy drinks increase rating in those sites, Takahashi decides to buy up M cans of energy drinks.\nThere are N stores that sell energy drinks. In the i-th store, he can buy at most B_i cans of energy drinks for A_i yen (the currency of Japan) each.\nWhat is the minimum amount of money with which he can buy M cans of energy drinks?\nIt is guaranteed that, in the given inputs, a sufficient amount of money can always buy M cans of energy drinks.\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N, M \\leq 10^5\n - 1 \\leq A_i \\leq 10^9\n - 1 \\leq B_i \\leq 10^5\n - B_1 +... + B_N \\geq M\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\nA_1 B_1\nA_2 B_2\n\\vdots\nA_N B_N\n-----Output-----\nPrint the minimum amount of money with which Takahashi can buy M cans of energy drinks.\n-----Sample Input-----\n2 5\n4 9\n2 4\n-----Sample Output-----\n12\nWith 12 yen, we can buy one drink at the first store and four drinks at the second store, for the total of five drinks. However, we cannot buy 5 drinks with 11 yen or less.\n\ndef",
      "answer": "def main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort()\n    b.sort()\n    ans = 0\n    for i in range(n):\n        ans += a[i] * b[i]\n    print(ans)",
      "difficulty": "introductory"
   },
   {
      "task_id": 4170,
      "prompt": "Complete the Python function given the prompt below:There are N squares arranged in a row from left to right.\nThe height of the i-th square from the left is H_i.\nYou will land on a square of your choice, then repeat moving to the adjacent square on the right as long as the height of the next square is not greater than that of the current square.\nFind the maximum number of times you can move.\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 10^5\n - 1 \\leq H_i \\leq 10^9\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nH_1 H_2... H_N\n-----Output-----\nPrint the maximum number of times you can move.\n-----Sample Input-----\n5\n10 4 8 7 3\n-----Sample Output-----\n2\nBy landing on the third square from the left, you can move to the right twice.\n\ndef",
      "answer": "def max_moves(arr):\n    max_moves = 0\n    for i in range(len(arr)):\n        if arr[i] > max_moves:\n            max_moves = arr[i]\n    return max_moves",
      "difficulty": "introductory"
   },
   {
      "task_id": 4171,
      "prompt": "Complete the Python function given the prompt below:The only difference between easy and hard versions is the number of elements in the array.\nYou are given an array $a$ consisting of $n$ integers. In one move you can choose any $a_i$ and divide it by $2$ rounding down (in other words, in one move you can set $a_i := \\lfloor\\frac{a_i}{2}\\rfloor$).\nYou can perform such an operation any (possibly, zero) number of times with any $a_i$.\nYour task is to calculate the minimum possible number of operations required to obtain at least $k$ equal numbers in the array.\nDon't forget that it is possible to have $a_i = 0$ after some operations, thus the answer always exists.\n-----Input-----\nThe first line of the input contains two integers $n$ and $k$ ($1 \\le k \\le n \\le 2 \\cdot 10^5$) \u2014 the number of elements in the array and the number of equal numbers required.\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 2 \\cdot 10^5$), where $a_i$ is the $i$-th element of $a$.\n-----Output-----\nPrint one integer \u2014 the minimum possible number of operations required to obtain at least $k$ equal numbers in the array.\n-----Examples-----\nInput\n5 3\n1 2 2 4 5\nOutput\n1\nInput\n5 3\n1 2 3 4 5\nOutput\n2\nInput\n5 3\n1 2 3 3 3\nOutput\n0\n\ndef",
      "answer": "def min_operations(a, k):\n    a.sort()\n    count = 0\n    for i in range(len(a)):\n        if a[i] % 2 == 0:\n            a[i] = a[i] // 2\n            count += 1\n        if count >= k:\n            break\n    return len(a) - i",
      "difficulty": "introductory"
   },
   {
      "task_id": 4172,
      "prompt": "Complete the Python function given the prompt below:You are given the array $a$ consisting of $n$ elements and the integer $k \\le n$.\nYou want to obtain at least $k$ equal elements in the array $a$. In one move, you can make one of the following two operations:\n  Take one of the minimum elements of the array and increase its value by one (more formally, if the minimum value of $a$ is $mn$ then you choose such index $i$ that $a_i = mn$ and set $a_i := a_i + 1$);  take one of the maximum elements of the array and decrease its value by one (more formally, if the maximum value of $a$ is $mx$ then you choose such index $i$ that $a_i = mx$ and set $a_i := a_i - 1$). \nYour task is to calculate the minimum number of moves required to obtain at least $k$ equal elements in the array.\n-----Input-----\nThe first line of the input contains two integers $n$ and $k$ ($1 \\le k \\le n \\le 2 \\cdot 10^5$) \u2014 the number of elements in $a$ and the required number of equal elements.\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$), where $a_i$ is the $i$-th element of $a$.\n-----Output-----\nPrint one integer \u2014 the minimum number of moves required to obtain at least $k$ equal elements in the array.\n-----Examples-----\nInput\n6 5\n1 2 2 4 2 3\nOutput\n3\nInput\n7 5\n3 3 2 1 1 1 3\nOutput\n4\n\ndef",
      "answer": "def solution(a, k):\n    a.sort()\n    count = 0\n    for i in range(len(a)):\n        if a[i] == a[i-1]:\n            count += 1\n        if count >= k:\n            return i\n    return len(a)",
      "difficulty": "introductory"
   },
   {
      "task_id": 4173,
      "prompt": "Complete the Python function given the prompt below:Polycarp wants to cook a soup. To do it, he needs to buy exactly $n$ liters of water.\nThere are only two types of water bottles in the nearby shop \u2014 $1$-liter bottles and $2$-liter bottles. There are infinitely many bottles of these two types in the shop.\nThe bottle of the first type costs $a$ burles and the bottle of the second type costs $b$ burles correspondingly.\nPolycarp wants to spend as few money as possible. Your task is to find the minimum amount of money (in burles) Polycarp needs to buy exactly $n$ liters of water in the nearby shop if the bottle of the first type costs $a$ burles and the bottle of the second type costs $b$ burles. \nYou also have to answer $q$ independent queries.\n-----Input-----\nThe first line of the input contains one integer $q$ ($1 \\le q \\le 500$) \u2014 the number of queries.\nThe next $n$ lines contain queries. The $i$-th query is given as three space-separated integers $n_i$, $a_i$ and $b_i$ ($1 \\le n_i \\le 10^{12}, 1 \\le a_i, b_i \\le 1000$) \u2014 how many liters Polycarp needs in the $i$-th query, the cost (in burles) of the bottle of the first type in the $i$-th query and the cost (in burles) of the bottle of the second type in the $i$-th query, respectively.\n-----Output-----\nPrint $q$ integers. The $i$-th integer should be equal to the minimum amount of money (in burles) Polycarp needs to buy exactly $n_i$ liters of water in the nearby shop if the bottle of the first type costs $a_i$ burles and the bottle of the second type costs $b_i$ burles.\n-----Example-----\nInput\n4\n10 1 3\n7 3 2\n1 1000 1\n1000000000000 42 88\nOutput\n10\n9\n1000\n42000000000000\n\ndef",
      "answer": "def min_cost(n, a, b):\n    return n * min(a, b)",
      "difficulty": "introductory"
   },
   {
      "task_id": 4174,
      "prompt": "Complete the Python function given the prompt below:A ball will bounce along a number line, making N + 1 bounces. It will make the first bounce at coordinate D_1 = 0, and the i-th bounce (2 \\leq i \\leq N+1) at coordinate D_i = D_{i-1} + L_{i-1}.\nHow many times will the ball make a bounce where the coordinate is at most X?\n-----Constraints-----\n - 1 \\leq N \\leq 100\n - 1 \\leq L_i \\leq 100\n - 1 \\leq X \\leq 10000\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN X\nL_1 L_2... L_{N-1} L_N\n-----Output-----\nPrint the number of times the ball will make a bounce where the coordinate is at most X.\n-----Sample Input-----\n3 6\n3 4 5\n-----Sample Output-----\n2\nThe ball will make a bounce at the coordinates 0, 3, 7 and 12, among which two are less than or equal to 6.\n\ndef",
      "answer": "def bounce(n, x, d):\n    if n == 1:\n        return 1 if d <= x else 0\n    return bounce(n-1, x, d+l[n-1]) + bounce(n-1, x, d+l[n-1])",
      "difficulty": "introductory"
   },
   {
      "task_id": 4175,
      "prompt": "Complete the Python function given the prompt below:Takahashi is practicing shiritori alone again today.\nShiritori is a game as follows:\n - In the first turn, a player announces any one word.\n - In the subsequent turns, a player announces a word that satisfies the following conditions:\n - That word is not announced before.\n - The first character of that word is the same as the last character of the last word announced.\nIn this game, he is practicing to announce as many words as possible in ten seconds.\nYou are given the number of words Takahashi announced, N, and the i-th word he announced, W_i, for each i. Determine if the rules of shiritori was observed, that is, every word announced by him satisfied the conditions.\n-----Constraints-----\n - N is an integer satisfying 2 \\leq N \\leq 100.\n - W_i is a string of length between 1 and 10 (inclusive) consisting of lowercase English letters.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nW_1\nW_2\n:\nW_N\n-----Output-----\nIf every word announced by Takahashi satisfied the conditions, print Yes; otherwise, print No.\n-----Sample Input-----\n4\nhoge\nenglish\nhoge\nenigma\n-----Sample Output-----\nNo\nAs hoge is announced multiple times, the rules of shiritori was not observed.\n\ndef",
      "answer": "def shiritori(n, words):\n    for i in range(n):\n        if i == 0:\n            continue\n        if words[i] == words[i-1][-1]:\n            continue\n        if words[i] in words[:i]:\n            return \"No\"\n    return \"Yes\"",
      "difficulty": "introductory"
   },
   {
      "task_id": 4176,
      "prompt": "Complete the Python function given the prompt below:Takahashi is organizing a party.\nAt the party, each guest will receive one or more snack pieces.\nTakahashi predicts that the number of guests at this party will be A or B.\nFind the minimum number of pieces that can be evenly distributed to the guests in both of the cases predicted.\nWe assume that a piece cannot be divided and distributed to multiple guests.\n-----Constraints-----\n - 1 \\leq A, B \\leq 10^5\n - A \\neq B\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n-----Output-----\nPrint the minimum number of pieces that can be evenly distributed to the guests in both of the cases with A guests and B guests.\n-----Sample Input-----\n2 3\n-----Sample Output-----\n6\nWhen we have six snack pieces, each guest can take three pieces if we have two guests, and each guest can take two if we have three guests.\n\ndef",
      "answer": "def solve(A, B):\n  return A + B - 1",
      "difficulty": "introductory"
   },
   {
      "task_id": 4177,
      "prompt": "Complete the Python function given the prompt below:Given is a string S. Replace every character in S with x and print the result.\n-----Constraints-----\n - S is a string consisting of lowercase English letters.\n - The length of S is between 1 and 100 (inclusive).\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n-----Output-----\nReplace every character in S with x and print the result.\n-----Sample Input-----\nsardine\n-----Sample Output-----\nxxxxxxx\nReplacing every character in S with x results in xxxxxxx.\n\ndef",
      "answer": "def replace(s):\n    return s.replace('a', 'x')",
      "difficulty": "introductory"
   },
   {
      "task_id": 4178,
      "prompt": "Complete the Python function given the prompt below:There are N squares arranged in a row from left to right. The height of the i-th square from the left is H_i.\nFor each square, you will perform either of the following operations once:\n - Decrease the height of the square by 1.\n - Do nothing.\nDetermine if it is possible to perform the operations so that the heights of the squares are non-decreasing from left to right.\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 10^5\n - 1 \\leq H_i \\leq 10^9\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nH_1 H_2... H_N\n-----Output-----\nIf it is possible to perform the operations so that the heights of the squares are non-decreasing from left to right, print Yes; otherwise, print No.\n-----Sample Input-----\n5\n1 2 1 1 3\n-----Sample Output-----\nYes\nYou can achieve the objective by decreasing the height of only the second square from the left by 1.\n\ndef",
      "answer": "def nonDecreasingArray(arr):\n    # Write your code here\n    n = len(arr)\n    stack = []\n    for i in range(n):\n        while stack and arr[stack[-1]] > arr[i]:\n            j = stack.pop()\n            if arr[j] == arr[i]:\n                return \"No\"\n        stack.append(i)\n    return \"Yes\"",
      "difficulty": "introductory"
   },
   {
      "task_id": 4179,
      "prompt": "Complete the Python function given the prompt below:There are N pieces of source code. The characteristics of the i-th code is represented by M integers A_{i1}, A_{i2},..., A_{iM}.\nAdditionally, you are given integers B_1, B_2,..., B_M and C.\nThe i-th code correctly solves this problem if and only if A_{i1} B_1 + A_{i2} B_2 +... + A_{iM} B_M + C > 0.\nAmong the N codes, find the number of codes that correctly solve this problem.\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N, M \\leq 20\n - -100 \\leq A_{ij} \\leq 100\n - -100 \\leq B_i \\leq 100\n - -100 \\leq C \\leq 100\n-----Input-----\nInput is given from Standard Input in the following format:\nN M C\nB_1 B_2... B_M\nA_{11} A_{12}... A_{1M}\nA_{21} A_{22}... A_{2M}\n\\vdots\nA_{N1} A_{N2}... A_{NM}\n-----Output-----\nPrint the number of codes among the given N codes that correctly solve this problem.\n-----Sample Input-----\n2 3 -10\n1 2 3\n3 2 1\n1 2 2\n-----Sample Output-----\n1\nOnly the second code correctly solves this problem, as follows:\n - Since 3 \\times 1 + 2 \\times 2 + 1 \\times 3 + (-10) = 0 \\leq 0, the first code does not solve this problem.\n - 1 \\times 1 + 2 \\times 2 + 2 \\times 3 + (-10) = 1 > 0, the second code solves this problem.\n\ndef",
      "answer": "def solve(N, M, C, B, A):\n    count = 0\n    for i in range(N):\n        if sum([A[i][j] * B[j] for j in range(M)]) + C > 0:\n            count += 1\n    return count",
      "difficulty": "introductory"
   },
   {
      "task_id": 4180,
      "prompt": "Complete the Python function given the prompt below:We will buy a product for N yen (the currency of Japan) at a shop.\nIf we use only 1000-yen bills to pay the price, how much change will we receive?\nAssume we use the minimum number of bills required.\n-----Constraints-----\n - 1 \\leq N \\leq 10000\n - N is an integer.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n-----Output-----\nPrint the amount of change as an integer.\n-----Sample Input-----\n1900\n-----Sample Output-----\n100\nWe will use two 1000-yen bills to pay the price and receive 100 yen in change.\n\ndef",
      "answer": "def change(n):\n    change = 0\n    while n > 0:\n        if n >= 1000:\n            n -= 1000\n            change += 1\n        elif n >= 500:\n            n -= 500\n            change += 1\n        elif n >= 100:\n            n -= 100\n            change += 1\n        elif n >= 50:\n            n -= 50\n            change += 1\n        elif n >= 10:\n            n -= 10\n            change += 1\n        elif n >= 5:\n            n -= 5\n            change += 1\n        elif n >= 1:\n            n -= 1\n            change += 1\n    return change",
      "difficulty": "introductory"
   },
   {
      "task_id": 4181,
      "prompt": "Complete the Python function given the prompt below:There are N+1 towns. The i-th town is being attacked by A_i monsters.\nWe have N heroes. The i-th hero can defeat monsters attacking the i-th or (i+1)-th town, for a total of at most B_i monsters.\nWhat is the maximum total number of monsters the heroes can cooperate to defeat?\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 10^5\n - 1 \\leq A_i \\leq 10^9\n - 1 \\leq B_i \\leq 10^9\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 A_2... A_{N+1}\nB_1 B_2... B_N\n-----Output-----\nPrint the maximum total number of monsters the heroes can defeat.\n-----Sample Input-----\n2\n3 5 2\n4 5\n-----Sample Output-----\n9\nIf the heroes choose the monsters to defeat as follows, they can defeat nine monsters in total, which is the maximum result.\n - The first hero defeats two monsters attacking the first town and two monsters attacking the second town.\n - The second hero defeats three monsters attacking the second town and two monsters attacking the third town.\n\ndef",
      "answer": "def solve(N, A, B):\n    # Write your code here\n    A.sort()\n    B.sort()\n    ans = 0\n    for i in range(N):\n        ans += A[i] * B[i]\n    return ans",
      "difficulty": "introductory"
   },
   {
      "task_id": 4182,
      "prompt": "Complete the Python function given the prompt below:Our world is one-dimensional, and ruled by two empires called Empire A and Empire B.\nThe capital of Empire A is located at coordinate X, and that of Empire B is located at coordinate Y.\nOne day, Empire A becomes inclined to put the cities at coordinates x_1, x_2,..., x_N under its control, and Empire B becomes inclined to put the cities at coordinates y_1, y_2,..., y_M under its control.\nIf there exists an integer Z that satisfies all of the following three conditions, they will come to an agreement, but otherwise war will break out.\n - X < Z \\leq Y\n - x_1, x_2,..., x_N < Z\n - y_1, y_2,..., y_M \\geq Z\nDetermine if war will break out.\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N, M \\leq 100\n - -100 \\leq X < Y \\leq 100\n - -100 \\leq x_i, y_i \\leq 100\n - x_1, x_2,..., x_N \\neq X\n - x_i are all different.\n - y_1, y_2,..., y_M \\neq Y\n - y_i are all different.\n-----Input-----\nInput is given from Standard Input in the following format:\nN M X Y\nx_1 x_2... x_N\ny_1 y_2... y_M\n-----Output-----\nIf war will break out, print War; otherwise, print No War.\n-----Sample Input-----\n3 2 10 20\n8 15 13\n16 22\n-----Sample Output-----\nNo War\nThe choice Z = 16 satisfies all of the three conditions as follows, thus they will come to an agreement.\n - X = 10 < 16 \\leq 20 = Y\n - 8, 15, 13 < 16\n - 16, 22 \\geq 16\n\ndef",
      "answer": "def war_break(x, y, n, m):\n    if x < y and x < n and y > m:\n        return True\n    else:\n        return False",
      "difficulty": "introductory"
   },
   {
      "task_id": 4183,
      "prompt": "Complete the Python function given the prompt below:We have N clocks. The hand of the i-th clock (1\u2264i\u2264N) rotates through 360\u00b0 in exactly T_i seconds.\nInitially, the hand of every clock stands still, pointing directly upward.\nNow, Dolphin starts all the clocks simultaneously.\nIn how many seconds will the hand of every clock point directly upward again?\n-----Constraints-----\n - 1\u2264N\u2264100 \n - 1\u2264T_i\u226410^{18} \n - All input values are integers.  \n - The correct answer is at most 10^{18} seconds.\n-----Input-----\nInput is given from Standard Input in the following format:  \nN\nT_1\n:  \nT_N\n-----Output-----\nPrint the number of seconds after which the hand of every clock point directly upward again.\n-----Sample Input-----\n2\n2\n3\n-----Sample Output-----\n6\nWe have two clocks. The time when the hand of each clock points upward is as follows:\n - Clock 1: 2, 4, 6,... seconds after the beginning\n - Clock 2: 3, 6, 9,... seconds after the beginning\nTherefore, it takes 6 seconds until the hands of both clocks point directly upward.\n\ndef",
      "answer": "def clock_hands(n, t):\n    return n * max(t, 360 - t)",
      "difficulty": "introductory"
   },
   {
      "task_id": 4184,
      "prompt": "Complete the Python function given the prompt below:We have N weights indexed 1 to N. The mass of the weight indexed i is W_i.\nWe will divide these weights into two groups: the weights with indices not greater than T, and those with indices greater than T, for some integer 1 \\leq T < N. Let S_1 be the sum of the masses of the weights in the former group, and S_2 be the sum of the masses of the weights in the latter group.\nConsider all possible such divisions and find the minimum possible absolute difference of S_1 and S_2.\n-----Constraints-----\n - 2 \\leq N \\leq 100\n - 1 \\leq W_i \\leq 100\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nW_1 W_2... W_{N-1} W_N\n-----Output-----\nPrint the minimum possible absolute difference of S_1 and S_2.\n-----Sample Input-----\n3\n1 2 3\n-----Sample Output-----\n0\nIf T = 2, S_1 = 1 + 2 = 3 and S_2 = 3, with the absolute difference of 0.\n\ndef",
      "answer": "def min_diff(arr, t):\n    s1 = 0\n    s2 = 0\n    for i in range(len(arr)):\n        if i <= t:\n            s1 += arr[i]\n        else:\n            s2 += arr[i]\n    return abs(s1 - s2)",
      "difficulty": "introductory"
   },
   {
      "task_id": 4185,
      "prompt": "Complete the Python function given the prompt below:\nYou are given a rectangular matrix of size $n \\times m$ consisting of integers from $1$ to $2 \\cdot 10^5$.\nIn one move, you can:  choose any element of the matrix and change its value to any integer between $1$ and $n \\cdot m$, inclusive;  take any column and shift it one cell up cyclically (see the example of such cyclic shift below). \nA cyclic shift is an operation such that you choose some $j$ ($1 \\le j \\le m$) and set $a_{1, j} := a_{2, j}, a_{2, j} := a_{3, j}, \\dots, a_{n, j} := a_{1, j}$ simultaneously. [Image] Example of cyclic shift of the first column \nYou want to perform the minimum number of moves to make this matrix look like this: $\\left. \\begin{array}{|c c c c|} \\hline 1 & {2} & {\\ldots} & {m} \\\\{m + 1} & {m + 2} & {\\ldots} & {2m} \\\\{\\vdots} & {\\vdots} & {\\ddots} & {\\vdots} \\\\{(n - 1) m + 1} & {(n - 1) m + 2} & {\\ldots} & {nm} \\\\ \\hline \\end{array} \\right.$ \nIn other words, the goal is to obtain the matrix, where $a_{1, 1} = 1, a_{1, 2} = 2, \\dots, a_{1, m} = m, a_{2, 1} = m + 1, a_{2, 2} = m + 2, \\dots, a_{n, m} = n \\cdot m$ (i.e. $a_{i, j} = (i - 1) \\cdot m + j$) with the minimum number of moves performed.\n-----Input-----\nThe first line of the input contains two integers $n$ and $m$ ($1 \\le n, m \\le 2 \\cdot 10^5, n \\cdot m \\le 2 \\cdot 10^5$) \u2014 the size of the matrix.\nThe next $n$ lines contain $m$ integers each. The number at the line $i$ and position $j$ is $a_{i, j}$ ($1 \\le a_{i, j} \\le 2 \\cdot 10^5$).\n-----Output-----\nPrint one integer \u2014 the minimum number of moves required to obtain the matrix, where $a_{1, 1} = 1, a_{1, 2} = 2, \\dots, a_{1, m} = m, a_{2, 1} = m + 1, a_{2, 2} = m + 2, \\dots, a_{n, m} = n \\cdot m$ ($a_{i, j} = (i - 1)m + j$).\n-----Examples-----\nInput\n3 3\n3 2 1\n1 2 3\n4 5 6\nOutput\n6\nInput\n4 3\n1 2 3\n4 5 6\n7 8 9\n10 11 12\nOutput\n0\nInput\n3 4\n1 6 3 4\n5 10 7 8\n9 2 11 12\nOutput\n2\n-----Note-----\nIn the first example, you can set $a_{1, 1} := 7, a_{1, 2} := 8$ and $a_{1, 3} := 9$ then shift the first, the second and the third columns cyclically, so the answer is $6$. It can be shown that you cannot achieve a better answer.\nIn the second example, the matrix is already good so the answer is $0$.\nIn the third example, it is enough to shift the second column cyclically twice to obtain a good matrix, so the answer is $2$.\n\ndef",
      "answer": "def matrix_rotation(matrix):\n    n = len(matrix)\n    m = len(matrix[0])\n    for i in range(m):\n        for j in range(n):\n            matrix[j][i], matrix[j][(i + 1) % m] = matrix[j][(i + 1) % m], matrix[j][i]\n    return matrix\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4186,
      "prompt": "Complete the Python function given the prompt below:\nThere are $n$ students in a university. The number of students is even. The $i$-th student has programming skill equal to $a_i$. \nThe coach wants to form $\\frac{n}{2}$ teams. Each team should consist of exactly two students, and each student should belong to exactly one team. Two students can form a team only if their skills are equal (otherwise they cannot understand each other and cannot form a team).\nStudents can solve problems to increase their skill. One solved problem increases the skill by one.\nThe coach wants to know the minimum total number of problems students should solve to form exactly $\\frac{n}{2}$ teams (i.e. each pair of students should form a team). Your task is to find this number.\n-----Input-----\nThe first line of the input contains one integer $n$ ($2 \\le n \\le 100$) \u2014 the number of students. It is guaranteed that $n$ is even.\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$), where $a_i$ is the skill of the $i$-th student.\n-----Output-----\nPrint one number \u2014 the minimum total number of problems students should solve to form exactly $\\frac{n}{2}$ teams.\n-----Examples-----\nInput\n6\n5 10 2 3 14 5\nOutput\n5\nInput\n2\n1 100\nOutput\n99\n-----Note-----\nIn the first example the optimal teams will be: $(3, 4)$, $(1, 6)$ and $(2, 5)$, where numbers in brackets are indices of students. Then, to form the first team the third student should solve $1$ problem, to form the second team nobody needs to solve problems and to form the third team the second student should solve $4$ problems so the answer is $1 + 4 = 5$.\nIn the second example the first student should solve $99$ problems to form a team with the second one.\n\ndef",
      "answer": "def team_formation(students):\n    n = len(students)\n    students.sort()\n    count = 0\n    for i in range(n//2):\n        count += students[i]\n    return count\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4187,
      "prompt": "Complete the Python function given the prompt below:\nEach day in Berland consists of $n$ hours. Polycarp likes time management. That's why he has a fixed schedule for each day \u2014 it is a sequence $a_1, a_2, \\dots, a_n$ (each $a_i$ is either $0$ or $1$), where $a_i=0$ if Polycarp works during the $i$-th hour of the day and $a_i=1$ if Polycarp rests during the $i$-th hour of the day.\nDays go one after another endlessly and Polycarp uses the same schedule for each day.\nWhat is the maximal number of continuous hours during which Polycarp rests? It is guaranteed that there is at least one working hour in a day.\n-----Input-----\nThe first line contains $n$ ($1 \\le n \\le 2\\cdot10^5$) \u2014 number of hours per day.\nThe second line contains $n$ integer numbers $a_1, a_2, \\dots, a_n$ ($0 \\le a_i \\le 1$), where $a_i=0$ if the $i$-th hour in a day is working and $a_i=1$ if the $i$-th hour is resting. It is guaranteed that $a_i=0$ for at least one $i$.\n-----Output-----\nPrint the maximal number of continuous hours during which Polycarp rests. Remember that you should consider that days go one after another endlessly and Polycarp uses the same schedule for each day.\n-----Examples-----\nInput\n5\n1 0 1 0 1\nOutput\n2\nInput\n6\n0 1 0 1 1 0\nOutput\n2\nInput\n7\n1 0 1 1 1 0 1\nOutput\n3\nInput\n3\n0 0 0\nOutput\n0\n-----Note-----\nIn the first example, the maximal rest starts in last hour and goes to the first hour of the next day.\nIn the second example, Polycarp has maximal rest from the $4$-th to the $5$-th hour.\nIn the third example, Polycarp has maximal rest from the $3$-rd to the $5$-th hour.\nIn the fourth example, Polycarp has no rest at all.\n\ndef",
      "answer": "def polycarp(n, a):\n    count = 0\n    for i in range(n):\n        if a[i] == 0:\n            count += 1\n        else:\n            count = 0\n        if count > max_count:\n            max_count = count\n    return max_count\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4188,
      "prompt": "Complete the Python function given the prompt below:\nLittle Petya wanted to give an April Fools Day present to some scientists. After some hesitation he decided to give them the array that he got as a present in Codeforces Round #153 (Div.2). The scientists rejoiced at the gift and decided to put some important facts to this array. Here are the first few of the facts: The highest mountain above sea level in the world is Mount Everest. Its peak rises to 8848 m.  The largest board game tournament consisted of 958 participants playing chapaev. The largest online maths competition consisted of 12766 participants. The Nile is credited as the longest river in the world. From its farthest stream in Burundi, it extends 6695 km in length. While not in flood, the main stretches of the Amazon river in South America can reach widths of up to 1100 km at its widest points. Angel Falls is the highest waterfall. Its greatest single drop measures 807 m. The Hotel Everest View above Namche, Nepal \u2014 the village closest to Everest base camp \u2013 is at a record height of 31962 m Uranium is the heaviest of all the naturally occurring elements. Its most common isotope has a nucleus containing 146 neutrons. The coldest permanently inhabited place is the Siberian village of Oymyakon, where the temperature of -68\u00b0C was registered in the twentieth century. The longest snake held in captivity is over 25 feet long. Its name is Medusa. Colonel Meow holds the world record for longest fur on a cat \u2014 almost 134 centimeters. Sea otters can have up to 10000 hairs per square inch. This is the most dense fur in the animal kingdom. The largest state of USA is Alaska; its area is 663268 square miles Alaska has a longer coastline than all of the other 49 U.S. States put together: it is 154103 miles long. Lake Baikal is the largest freshwater lake in the world. It reaches 1642\u00a0meters in depth and contains around one-fifth of the world\u2019s unfrozen fresh water. The most colorful national flag is the one of Turkmenistan, with 106 colors. \n-----Input-----\nThe input will contain a single integer between 1 and 16.\n-----Output-----\nOutput a single integer.\n-----Examples-----\nInput\n1\nOutput\n1\nInput\n7\nOutput\n0\n\ndef",
      "answer": "def fact(n):\n    if n == 0:\n        return 1\n    return n * fact(n - 1)\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4189,
      "prompt": "Complete the Python function given the prompt below:\nNot to be confused with chessboard.\n [Image] \n-----Input-----\nThe first line of input contains a single integer N (1 \u2264 N \u2264 100) \u2014 the number of cheeses you have.\nThe next N lines describe the cheeses you have. Each line contains two space-separated strings: the name of the cheese and its type. The name is a string of lowercase English letters between 1 and 10 characters long. The type is either \"soft\" or \"hard. All cheese names are distinct.\n-----Output-----\nOutput a single number.\n-----Examples-----\nInput\n9\nbrie soft\ncamembert soft\nfeta soft\ngoat soft\nmuenster soft\nasiago hard\ncheddar hard\ngouda hard\nswiss hard\nOutput\n3\nInput\n6\nparmesan hard\nemmental hard\nedam hard\ncolby hard\ngruyere hard\nasiago hard\nOutput\n4\n\ndef",
      "answer": "def chessboard(n):\n    cheese = []\n    for i in range(n):\n        cheese.append(input().split())\n    cheese.sort()\n    for i in range(n):\n        for j in range(n):\n            if i % 2 == 0 and j % 2 == 0:\n                print(cheese[i][j], end=\" \")\n            elif i % 2!= 0 and j % 2!= 0:\n                print(cheese[i][j], end=\" \")\n        print()\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4190,
      "prompt": "Complete the Python function given the prompt below:\nYou are given two arrays $a$ and $b$, both of length $n$. All elements of both arrays are from $0$ to $n-1$.\nYou can reorder elements of the array $b$ (if you want, you may leave the order of elements as it is). After that, let array $c$ be the array of length $n$, the $i$-th element of this array is $c_i = (a_i + b_i) \\% n$, where $x \\% y$ is $x$ modulo $y$.\nYour task is to reorder elements of the array $b$ to obtain the lexicographically minimum possible array $c$.\nArray $x$ of length $n$ is lexicographically less than array $y$ of length $n$, if there exists such $i$ ($1 \\le i \\le n$), that $x_i < y_i$, and for any $j$ ($1 \\le j < i$) $x_j = y_j$.\n-----Input-----\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of elements in $a$, $b$ and $c$.\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($0 \\le a_i < n$), where $a_i$ is the $i$-th element of $a$.\nThe third line of the input contains $n$ integers $b_1, b_2, \\dots, b_n$ ($0 \\le b_i < n$), where $b_i$ is the $i$-th element of $b$.\n-----Output-----\nPrint the lexicographically minimum possible array $c$. Recall that your task is to reorder elements of the array $b$ and obtain the lexicographically minimum possible array $c$, where the $i$-th element of $c$ is $c_i = (a_i + b_i) \\% n$.\n-----Examples-----\nInput\n4\n0 1 2 1\n3 2 1 1\nOutput\n1 0 0 2 \nInput\n7\n2 5 1 5 3 4 3\n2 4 3 5 6 5 1\nOutput\n0 0 0 1 0 2 4\n\ndef",
      "answer": "def array_manipulation(n, queries):\n    arr = [0] * n\n    for query in queries:\n        arr[query[0] - 1] += query[2]\n        if query[1]!= len(arr):\n            arr[query[1]] -= query[2]\n    max_value = 0\n    running_sum = 0\n    for num in arr:\n        running_sum += num\n        if running_sum > max_value:\n            max_value = running_sum\n    return max_value\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4191,
      "prompt": "Complete the Python function given the prompt below:\n[Image] \n-----Input-----\nThe input consists of four lines, each line containing a single digit 0 or 1.\n-----Output-----\nOutput a single digit, 0 or 1.\n-----Example-----\nInput\n0\n1\n1\n0\nOutput\n0\n\ndef",
      "answer": "def f(a, b, c, d):\n    return a + b + c + d\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4192,
      "prompt": "Complete the Python function given the prompt below:\nTakahashi is meeting up with Aoki.\nThey have planned to meet at a place that is D meters away from Takahashi's house in T minutes from now.\nTakahashi will leave his house now and go straight to the place at a speed of S meters per minute.\nWill he arrive in time?\n-----Constraints-----\n - 1 \\leq D \\leq 10000\n - 1 \\leq T \\leq 10000\n - 1 \\leq S \\leq 10000\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nD T S\n-----Output-----\nIf Takahashi will reach the place in time, print Yes; otherwise, print No.\n-----Sample Input-----\n1000 15 80\n-----Sample Output-----\nYes\nIt takes 12.5 minutes to go 1000 meters to the place at a speed of 80 meters per minute. They have planned to meet in 15 minutes so he will arrive in time.\n\ndef",
      "answer": "def takahashi(d, t, s):\n    return \"Yes\" if d / s <= t else \"No\"\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4193,
      "prompt": "Complete the Python function given the prompt below:\nWe have a bingo card with a 3\\times3 grid. The square at the i-th row from the top and the j-th column from the left contains the number A_{i, j}.\nThe MC will choose N numbers, b_1, b_2, \\cdots, b_N. If our bingo sheet contains some of those numbers, we will mark them on our sheet.\nDetermine whether we will have a bingo when the N numbers are chosen, that is, the sheet will contain three marked numbers in a row, column, or diagonal.\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq A_{i, j} \\leq 100\n - A_{i_1, j_1} \\neq A_{i_2, j_2} ((i_1, j_1) \\neq (i_2, j_2))\n - 1 \\leq N \\leq 10\n - 1 \\leq b_i \\leq 100\n - b_i \\neq b_j (i \\neq j)\n-----Input-----\nInput is given from Standard Input in the following format:\nA_{1, 1} A_{1, 2} A_{1, 3}\nA_{2, 1} A_{2, 2} A_{2, 3}\nA_{3, 1} A_{3, 2} A_{3, 3}\nN\nb_1\n\\vdots\nb_N\n-----Output-----\nIf we will have a bingo, print Yes; otherwise, print No.\n-----Sample Input-----\n84 97 66\n79 89 11\n61 59 7\n7\n89\n7\n87\n79\n24\n84\n30\n-----Sample Output-----\nYes\nWe will mark A_{1, 1}, A_{2, 1}, A_{2, 2}, A_{3, 3}, and complete the diagonal from the top-left to the bottom-right.\n\ndef",
      "answer": "def bingo(A, N, b):\n    for i in range(3):\n        if A[i][0] == b[0] or A[i][1] == b[1] or A[i][2] == b[2]:\n            return \"Yes\"\n    for j in range(3):\n        if A[0][j] == b[0] or A[1][j] == b[1] or A[2][j] == b[2]:\n            return \"Yes\"\n    if A[0][0] == b[0] or A[1][1] == b[1] or A[2][2] == b[2]:\n        return \"Yes\"\n    if A[2][0] == b[0] or A[1][1] == b[1] or A[0][2] == b[2]:\n        return \"Yes\"\n    return \"No\"\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4194,
      "prompt": "Complete the Python function given the prompt below:\nTakahashi has N days of summer vacation.\nHis teacher gave him M summer assignments. It will take A_i days for him to do the i-th assignment.\nHe cannot do multiple assignments on the same day, or hang out on a day he does an assignment.\nWhat is the maximum number of days Takahashi can hang out during the vacation if he finishes all the assignments during this vacation?\nIf Takahashi cannot finish all the assignments during the vacation, print -1 instead.\n-----Constraints-----\n - 1 \\leq N \\leq 10^6\n - 1 \\leq M \\leq 10^4\n - 1 \\leq A_i \\leq 10^4\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\nA_1... A_M\n-----Output-----\nPrint the maximum number of days Takahashi can hang out during the vacation, or -1.\n-----Sample Input-----\n41 2\n5 6\n-----Sample Output-----\n30\nFor example, he can do the first assignment on the first 5 days, hang out on the next 30 days, and do the second assignment on the last 6 days of the vacation. In this way, he can safely spend 30 days hanging out.\n\ndef",
      "answer": "def solve(n, m, a):\n    a.sort()\n    i = 0\n    j = n - 1\n    while i < j:\n        if a[i] + a[j] <= m:\n            i += 1\n        j -= 1\n    if i == j:\n        return a[i] + m - a[i]\n    else:\n        return -1\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4195,
      "prompt": "Complete the Python function given the prompt below:\nToday, the memorable AtCoder Beginner Contest 100 takes place. On this occasion, Takahashi would like to give an integer to Ringo.\nAs the name of the contest is AtCoder Beginner Contest 100, Ringo would be happy if he is given a positive integer that can be divided by 100 exactly D times.\nFind the N-th smallest integer that would make Ringo happy.\n-----Constraints-----\n - D is 0, 1 or 2.\n - N is an integer between 1 and 100 (inclusive).\n-----Input-----\nInput is given from Standard Input in the following format:\nD N\n-----Output-----\nPrint the N-th smallest integer that can be divided by 100 exactly D times.\n-----Sample Input-----\n0 5\n-----Sample Output-----\n5\nThe integers that can be divided by 100 exactly 0 times (that is, not divisible by 100) are as follows: 1, 2, 3, 4, 5, 6, 7,...\nThus, the 5-th smallest integer that would make Ringo happy is 5.\n\ndef",
      "answer": "def divisible(n):\n    if n % 100 == 0:\n        return True\n    else:\n        return False\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4196,
      "prompt": "Complete the Python function given the prompt below:\nThere are N integers, A_1, A_2,..., A_N, written on the blackboard.\nYou will choose one of them and replace it with an integer of your choice between 1 and 10^9 (inclusive), possibly the same as the integer originally written.\nFind the maximum possible greatest common divisor of the N integers on the blackboard after your move.\n-----Constraints-----\n - All values in input are integers.\n - 2 \\leq N \\leq 10^5\n - 1 \\leq A_i \\leq 10^9\n-----Output-----\nInput is given from Standard Input in the following format:\nN\nA_1 A_2... A_N\n-----Output-----\nPrint the maximum possible greatest common divisor of the N integers on the blackboard after your move.\n-----Sample Input-----\n3\n7 6 8\n-----Sample Output-----\n2\nIf we replace 7 with 4, the greatest common divisor of the three integers on the blackboard will be 2, which is the maximum possible value.\n\ndef",
      "answer": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4197,
      "prompt": "Complete the Python function given the prompt below:\nTakahashi is a teacher responsible for a class of N students.\nThe students are given distinct student numbers from 1 to N.\nToday, all the students entered the classroom at different times.\nAccording to Takahashi's record, there were A_i students in the classroom when student number i entered the classroom (including student number i).\nFrom these records, reconstruct the order in which the students entered the classroom.\n-----Constraints-----\n -  1 \\le N \\le 10^5 \n -  1 \\le A_i \\le N \n -  A_i \\neq A_j  (i \\neq j)\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 A_2 \\ldots A_N\n-----Output-----\nPrint the student numbers of the students in the order the students entered the classroom.\n-----Sample Input-----\n3\n2 3 1\n-----Sample Output-----\n3 1 2\nFirst, student number 3 entered the classroom.\nThen, student number 1 entered the classroom.\nFinally, student number 2 entered the classroom.\n\ndef",
      "answer": "def reconstruct_classroom(n, a):\n    # Write your code here\n    a.sort()\n    print(*a)\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4198,
      "prompt": "Complete the Python function given the prompt below:\nTakahashi has come to an integer shop to buy an integer.\nThe shop sells the integers from 1 through 10^9. The integer N is sold for A \\times N + B \\times d(N) yen (the currency of Japan), where d(N) is the number of digits in the decimal notation of N.\nFind the largest integer that Takahashi can buy when he has X yen. If no integer can be bought, print 0.\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq A \\leq 10^9\n - 1 \\leq B \\leq 10^9\n - 1 \\leq X \\leq 10^{18}\n-----Input-----\nInput is given from Standard Input in the following format:\nA B X\n-----Output-----\nPrint the greatest integer that Takahashi can buy. If no integer can be bought, print 0.\n-----Sample Input-----\n10 7 100\n-----Sample Output-----\n9\nThe integer 9 is sold for 10 \\times 9 + 7 \\times 1 = 97 yen, and this is the greatest integer that can be bought.\nSome of the other integers are sold for the following prices:\n - 10: 10 \\times 10 + 7 \\times 2 = 114 yen\n - 100: 10 \\times 100 + 7 \\times 3 = 1021 yen\n - 12345: 10 \\times 12345 + 7 \\times 5 = 123485 yen\n\ndef",
      "answer": "def main():\n    a, b, x = map(int, input().split())\n    print(max_purchase(a, b, x))\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4199,
      "prompt": "Complete the Python function given the prompt below:\nN friends of Takahashi has come to a theme park.\nTo ride the most popular roller coaster in the park, you must be at least K centimeters tall.\nThe i-th friend is h_i centimeters tall.\nHow many of the Takahashi's friends can ride the roller coaster?\n-----Constraints-----\n -  1 \\le N \\le 10^5 \n -  1 \\le K \\le 500 \n -  1 \\le h_i \\le 500\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\nh_1 h_2 \\ldots h_N\n-----Output-----\nPrint the number of people among the Takahashi's friends who can ride the roller coaster.\n-----Sample Input-----\n4 150\n150 140 100 200\n-----Sample Output-----\n2\nTwo of them can ride the roller coaster: the first and fourth friends.\n\ndef",
      "answer": "def solve(N, K, h):\n    count = 0\n    for i in range(N):\n        if h[i] >= K:\n            count += 1\n    return count\n\n",
      "difficulty": "introductory",
      "split": "test"
   }
]