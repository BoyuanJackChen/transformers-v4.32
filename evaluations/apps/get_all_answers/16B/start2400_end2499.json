[
    {
        "task_id": 2400,
        "prompt": "Complete the Python function given the prompt below:DLS and JLS are bored with a Math lesson. In order to entertain themselves, DLS took a sheet of paper and drew $n$ distinct lines, given by equations $y = x + p_i$ for some distinct $p_1, p_2, \\ldots, p_n$.\nThen JLS drew on the same paper sheet $m$ distinct lines given by equations $y = -x + q_i$ for some distinct $q_1, q_2, \\ldots, q_m$.\nDLS and JLS are interested in counting how many line pairs have integer intersection points, i.e. points with both coordinates that are integers. Unfortunately, the lesson will end up soon, so DLS and JLS are asking for your help.\n-----Input-----\nThe first line contains one integer $t$ ($1 \\le t \\le 1000$), the number of test cases in the input. Then follow the test case descriptions.\nThe first line of a test case contains an integer $n$ ($1 \\le n \\le 10^5$), the number of lines drawn by DLS.\nThe second line of a test case contains $n$ distinct integers $p_i$ ($0 \\le p_i \\le 10^9$) describing the lines drawn by DLS. The integer $p_i$ describes a line given by the equation $y = x + p_i$.\nThe third line of a test case contains an integer $m$ ($1 \\le m \\le 10^5$), the number of lines drawn by JLS.\nThe fourth line of a test case contains $m$ distinct integers $q_i$ ($0 \\le q_i \\le 10^9$) describing the lines drawn by JLS. The integer $q_i$ describes a line given by the equation $y = -x + q_i$.\nThe sum of the values of $n$ over all test cases in the input does not exceed $10^5$. Similarly, the sum of the values of $m$ over all test cases in the input does not exceed $10^5$.\nIn hacks it is allowed to use only one test case in the input, so $t=1$ should be satisfied.\n-----Output-----\nFor each test case in the input print a single integer\u00a0\u2014 the number of line pairs with integer intersection points. \n-----Example-----\nInput\n3\n3\n1 3 2\n2\n0 3\n1\n1\n1\n1\n1\n2\n1\n1\nOutput\n3\n1\n0\n-----Note-----\nThe picture shows the lines from the first test case of the example. Black circles denote intersection points with integer coordinates. [Image]\n\ndef",
        "answer": "def intersection(p, q):\n    return p[0] * q[1] - p[1] * q[0]",
        "difficulty": "interview"
    },
    {
        "task_id": 2401,
        "prompt": "Complete the Python function given the prompt below:Heidi got one brain, thumbs up! But the evening isn't over yet and one more challenge awaits our dauntless agent: after dinner, at precisely midnight, the N attendees love to play a very risky game...\nEvery zombie gets a number n_{i} (1 \u2264 n_{i} \u2264 N) written on his forehead. Although no zombie can see his own number, he can see the numbers written on the foreheads of all N - 1 fellows. Note that not all numbers have to be unique (they can even all be the same). From this point on, no more communication between zombies is allowed. Observation is the only key to success. When the cuckoo clock strikes midnight, all attendees have to simultaneously guess the number on their own forehead. If at least one of them guesses his number correctly, all zombies survive and go home happily. On the other hand, if not a single attendee manages to guess his number correctly, all of them are doomed to die!\nZombies aren't very bright creatures though, and Heidi has to act fast if she does not want to jeopardize her life. She has one single option: by performing some quick surgery on the brain she managed to get from the chest, she has the ability to remotely reprogram the decision-making strategy of all attendees for their upcoming midnight game! Can you suggest a sound strategy to Heidi which, given the rules of the game, ensures that at least one attendee will guess his own number correctly, for any possible sequence of numbers on the foreheads?\nGiven a zombie's rank R and the N - 1 numbers n_{i} on the other attendees' foreheads, your program will have to return the number that the zombie of rank R shall guess. Those answers define your strategy, and we will check if it is flawless or not.\n-----Input-----\nThe first line of input contains a single integer T (1 \u2264 T \u2264 50000): the number of scenarios for which you have to make a guess.\nThe T scenarios follow, described on two lines each:   The first line holds two integers, N (2 \u2264 N \u2264 6), the number of attendees, and R (1 \u2264 R \u2264 N), the rank of the zombie who has to make the guess.  The second line lists N - 1 integers: the numbers on the foreheads of all other attendees, listed in increasing order of the attendees' rank. (Every zombie knows the rank of every other zombie.) \n-----Output-----\nFor every scenario, output a single integer: the number that the zombie of rank R shall guess, based on the numbers n_{i} on his N - 1 fellows' foreheads.\n-----Examples-----\nInput\n4\n2 1\n1\n2 2\n1\n2 1\n2\n2 2\n2\nOutput\n1\n2\n2\n1\nInput\n2\n5 2\n2 2 2 2\n6 4\n3 2 6 1 2\nOutput\n5\n2\n-----Note-----\nFor instance, if there were N = 2 two attendees, a successful strategy could be:   The zombie of rank 1 always guesses the number he sees on the forehead of the zombie of rank 2.  The zombie of rank 2 always guesses the opposite of the number he sees on the forehead of the zombie of rank 1.\n\ndef",
        "answer": "def guess_number(n, r):\n    if r == 1:\n        return n\n    else:\n        return n - 1",
        "difficulty": "interview"
    },
    {
        "task_id": 2402,
        "prompt": "Complete the Python function given the prompt below:Nikolay has only recently started in competitive programming, but already qualified to the finals of one prestigious olympiad. There going to be $n$ participants, one of whom is Nikolay. Like any good olympiad, it consists of two rounds. Tired of the traditional rules, in which the participant who solved the largest number of problems wins, the organizers came up with different rules.\nSuppose in the first round participant A took $x$-th place and in the second round\u00a0\u2014 $y$-th place. Then the total score of the participant A is sum $x + y$. The overall place of the participant A is the number of participants (including A) having their total score less than or equal to the total score of A. Note, that some participants may end up having a common overall place. It is also important to note, that in both the first and the second round there were no two participants tying at a common place. In other words, for every $i$ from $1$ to $n$ exactly one participant took $i$-th place in first round and exactly one participant took $i$-th place in second round.\nRight after the end of the Olympiad, Nikolay was informed that he got $x$-th place in first round and $y$-th place in the second round. Nikolay doesn't know the results of other participants, yet he wonders what is the minimum and maximum place he can take, if we consider the most favorable and unfavorable outcome for him. Please help Nikolay to find the answer to this question.\n-----Input-----\nThe first line contains an integer $t$ ($1 \\le t \\le 100$)\u00a0\u2014 the number of test cases to solve.\nEach of the following $t$ lines contains integers $n$, $x$, $y$ ($1 \\leq n \\leq 10^9$, $1 \\le x, y \\le n$)\u00a0\u2014 the number of participants in the olympiad, the place that Nikolay took in the first round and the place that Nikolay took in the second round.\n-----Output-----\nPrint two integers\u00a0\u2014 the minimum and maximum possible overall place Nikolay could take.\n-----Examples-----\nInput\n1\n5 1 3\nOutput\n1 3\nInput\n1\n6 3 4\nOutput\n2 6\n-----Note-----\nExplanation for the first example:\nSuppose there were 5 participants A-E. Let's denote Nikolay as A. The the most favorable results for Nikolay could look as follows: $\\left. \\begin{array}{|c|c|c|c|c|} \\hline \\text{Participant} & {\\text{Round 1}} & {\\text{Round 2}} & {\\text{Total score}} & {\\text{Place}} \\\\ \\hline A & {1} & {3} & {4} & {1} \\\\ \\hline B & {2} & {4} & {6} & {3} \\\\ \\hline C & {3} & {5} & {8} & {5} \\\\ \\hline D & {4} & {1} & {5} & {2} \\\\ \\hline E & {5} & {2} & {7} & {4} \\\\ \\hline \\end{array} \\right.$ \nHowever, the results of the Olympiad could also look like this: $\\left. \\begin{array}{|c|c|c|c|c|} \\hline \\text{Participant} & {\\text{Round 1}} & {\\text{Round 2}} & {\\text{Total score}} & {\\text{Place}} \\\\ \\hline A & {1} & {3} & {4} & {3} \\\\ \\hline B & {2} & {2} & {4} & {3} \\\\ \\hline C & {3} & {1} & {4} & {3} \\\\ \\hline D & {4} & {4} & {8} & {4} \\\\ \\hline E & {5} & {5} & {10} & {5} \\\\ \\hline \\end{array} \\right.$ \nIn the first case Nikolay would have taken first place, and in the second\u00a0\u2014 third place.\n\ndef",
        "answer": "def solve(n, x, y):\n    return min(x, y) + max(x, y) - 1",
        "difficulty": "interview"
    },
    {
        "task_id": 2403,
        "prompt": "Complete the Python function given the prompt below:Captain Fint is involved in another treasure hunt, but have found only one strange problem. The problem may be connected to the treasure's location or may not. That's why captain Flint decided to leave the solving the problem to his crew and offered an absurdly high reward: one day off. The problem itself sounds like this...\nThere are two arrays $a$ and $b$ of length $n$. Initially, an $ans$ is equal to $0$ and the following operation is defined:   Choose position $i$ ($1 \\le i \\le n$);  Add $a_i$ to $ans$;  If $b_i \\neq -1$ then add $a_i$ to $a_{b_i}$. \nWhat is the maximum $ans$ you can get by performing the operation on each $i$ ($1 \\le i \\le n$) exactly once?\nUncle Bogdan is eager to get the reward, so he is asking your help to find the optimal order of positions to perform the operation on them.\n-----Input-----\nThe first line contains the integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$)\u00a0\u2014 the length of arrays $a$ and $b$.\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($\u221210^6 \\le a_i \\le 10^6$).\nThe third line contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($1 \\le b_i \\le n$ or $b_i = -1$).\nAdditional constraint: it's guaranteed that for any $i$ ($1 \\le i \\le n$) the sequence $b_i, b_{b_i}, b_{b_{b_i}}, \\ldots$ is not cyclic, in other words it will always end with $-1$.\n-----Output-----\nIn the first line, print the maximum $ans$ you can get.\nIn the second line, print the order of operations: $n$ different integers $p_1, p_2, \\ldots, p_n$ ($1 \\le p_i \\le n$). The $p_i$ is the position which should be chosen at the $i$-th step. If there are multiple orders, print any of them.\n-----Examples-----\nInput\n3\n1 2 3\n2 3 -1\nOutput\n10\n1 2 3 \nInput\n2\n-1 100\n2 -1\nOutput\n99\n2 1 \nInput\n10\n-10 -1 2 2 5 -2 -3 -4 2 -6\n-1 -1 2 2 -1 5 5 7 7 9\nOutput\n-9\n3 5 6 1 9 4 10 7 8 2\n\ndef",
        "answer": "def treasure_hunt(n, a, b):\n    ans = 0\n    for i in range(n):\n        if b[i]!= -1:\n            ans += a[i]\n            a[b[i]] += a[i]\n    return ans",
        "difficulty": "interview"
    },
    {
        "task_id": 2404,
        "prompt": "Complete the Python function given the prompt below:There was once young lass called Mary,  \nWhose jokes were occasionally scary.  \nOn this April's Fool  \nFixed limerick rules  \nAllowed her to trip the unwary.\nCan she fill all the lines\nTo work at all times?\nOn juggling the words\nRight around two-thirds\nShe nearly ran out of rhymes.\n\n-----Input-----\nThe input contains a single integer $a$ ($4 \\le a \\le 998$). Not every integer in the range is a valid input for the problem; you are guaranteed that the input will be a valid integer.\n-----Output-----\nOutput a single number.\n-----Examples-----\nInput\n35\nOutput\n57\nInput\n57\nOutput\n319\nInput\n391\nOutput\n1723\n\ndef",
        "answer": "def funny_joke(a):\n    return a*(a+1)//2",
        "difficulty": "interview"
    },
    {
        "task_id": 2405,
        "prompt": "Complete the Python function given the prompt below:A factory produces thimbles in bulk. Typically, it can produce up to a thimbles a day. However, some of the machinery is defective, so it can currently only produce b thimbles each day. The factory intends to choose a k-day period to do maintenance and construction; it cannot produce any thimbles during this time, but will be restored to its full production of a thimbles per day after the k days are complete.\nInitially, no orders are pending. The factory receives updates of the form d_{i}, a_{i}, indicating that a_{i} new orders have been placed for the d_{i}-th day. Each order requires a single thimble to be produced on precisely the specified day. The factory may opt to fill as many or as few of the orders in a single batch as it likes.\nAs orders come in, the factory owner would like to know the maximum number of orders he will be able to fill if he starts repairs on a given day p_{i}. Help the owner answer his questions.\n-----Input-----\nThe first line contains five integers n, k, a, b, and q (1 \u2264 k \u2264 n \u2264 200 000, 1 \u2264 b < a \u2264 10 000, 1 \u2264 q \u2264 200 000)\u00a0\u2014 the number of days, the length of the repair time, the production rates of the factory, and the number of updates, respectively.\nThe next q lines contain the descriptions of the queries. Each query is of one of the following two forms:   1 d_{i} a_{i} (1 \u2264 d_{i} \u2264 n, 1 \u2264 a_{i} \u2264 10 000), representing an update of a_{i} orders on day d_{i}, or  2 p_{i} (1 \u2264 p_{i} \u2264 n - k + 1), representing a question: at the moment, how many orders could be filled if the factory decided to commence repairs on day p_{i}? \nIt's guaranteed that the input will contain at least one query of the second type.\n-----Output-----\nFor each query of the second type, print a line containing a single integer \u2014 the maximum number of orders that the factory can fill over all n days.\n-----Examples-----\nInput\n5 2 2 1 8\n1 1 2\n1 5 3\n1 2 1\n2 2\n1 4 2\n1 3 2\n2 1\n2 3\nOutput\n3\n6\n4\nInput\n5 4 10 1 6\n1 1 5\n1 5 5\n1 3 2\n1 5 2\n2 1\n2 2\nOutput\n7\n1\n-----Note-----\nConsider the first sample.\nWe produce up to 1 thimble a day currently and will produce up to 2 thimbles a day after repairs. Repairs take 2 days.\nFor the first question, we are able to fill 1 order on day 1, no orders on days 2 and 3 since we are repairing, no orders on day 4 since no thimbles have been ordered for that day, and 2 orders for day 5 since we are limited to our production capacity, for a total of 3 orders filled.\nFor the third question, we are able to fill 1 order on day 1, 1 order on day 2, and 2 orders on day 5, for a total of 4 orders.\n\ndef",
        "answer": "def thimble_factory(n, k, a, b, q):\n    thimbles = [0] * n\n    for i in range(q):\n        if q[i][0] == 1:\n            thimbles[q[i][1] - 1] += q[i][2]\n        else:\n            thimbles[q[i][1] - 1] -= q[i][2]\n    for i in range(k, n):\n        thimbles[i] = max(thimbles[i - k] + a[i] - b[i], 0)\n    return thimbles",
        "difficulty": "interview"
    },
    {
        "task_id": 2406,
        "prompt": "Complete the Python function given the prompt below:Omkar is standing at the foot of Celeste mountain. The summit is $n$ meters away from him, and he can see all of the mountains up to the summit, so for all $1 \\leq j \\leq n$ he knows that the height of the mountain at the point $j$ meters away from himself is $h_j$ meters. It turns out that for all $j$ satisfying $1 \\leq j \\leq n - 1$, $h_j < h_{j + 1}$ (meaning that heights are strictly increasing).\nSuddenly, a landslide occurs! While the landslide is occurring, the following occurs: every minute, if $h_j + 2 \\leq h_{j + 1}$, then one square meter of dirt will slide from position $j + 1$ to position $j$, so that $h_{j + 1}$ is decreased by $1$ and $h_j$ is increased by $1$. These changes occur simultaneously, so for example, if $h_j + 2 \\leq h_{j + 1}$ and $h_{j + 1} + 2 \\leq h_{j + 2}$ for some $j$, then $h_j$ will be increased by $1$, $h_{j + 2}$ will be decreased by $1$, and $h_{j + 1}$ will be both increased and decreased by $1$, meaning that in effect $h_{j + 1}$ is unchanged during that minute.\nThe landslide ends when there is no $j$ such that $h_j + 2 \\leq h_{j + 1}$. Help Omkar figure out what the values of $h_1, \\dots, h_n$ will be after the landslide ends. It can be proven that under the given constraints, the landslide will always end in finitely many minutes.\nNote that because of the large amount of input, it is recommended that your code uses fast IO.\n-----Input-----\nThe first line contains a single integer $n$ ($1 \\leq n \\leq 10^6$). \nThe second line contains $n$ integers $h_1, h_2, \\dots, h_n$ satisfying $0 \\leq h_1 < h_2 < \\dots < h_n \\leq 10^{12}$\u00a0\u2014 the heights.\n-----Output-----\nOutput $n$ integers, where the $j$-th integer is the value of $h_j$ after the landslide has stopped.\n-----Example-----\nInput\n4\n2 6 7 8\nOutput\n5 5 6 7\n-----Note-----\nInitially, the mountain has heights $2, 6, 7, 8$.\nIn the first minute, we have $2 + 2 \\leq 6$, so $2$ increases to $3$ and $6$ decreases to $5$, leaving $3, 5, 7, 8$.\nIn the second minute, we have $3 + 2 \\leq 5$ and $5 + 2 \\leq 7$, so $3$ increases to $4$, $5$ is unchanged, and $7$ decreases to $6$, leaving $4, 5, 6, 8$.\nIn the third minute, we have $6 + 2 \\leq 8$, so $6$ increases to $7$ and $8$ decreases to $7$, leaving $4, 5, 7, 7$.\nIn the fourth minute, we have $5 + 2 \\leq 7$, so $5$ increases to $6$ and $7$ decreases to $6$, leaving $4, 6, 6, 7$.\nIn the fifth minute, we have $4 + 2 \\leq 6$, so $4$ increases to $5$ and $6$ decreases to $5$, leaving $5, 5, 6, 7$.\nIn the sixth minute, nothing else can change so the landslide stops and our answer is $5, 5, 6, 7$.\n\ndef",
        "answer": "def landslide(n, h):\n    h = [0] + h\n    h = [0] + h\n    h = [0] + h\n    h = [0] + h\n    h = [0] + h\n    h = [0] + h\n    h = [0] + h\n    h = [0] + h\n    h = [0] + h\n    h = [0] + h\n    h = [0] + h\n    h = [0] + h\n    h = [0] + h\n    h = [0] + h\n    h = [0] + h\n    h = [0] + h\n    h = [0] + h\n    h = [0] + h\n    h = [0] + h\n    h = [0] + h\n    h = [0] + h\n    h = [0] + h\n    h = [0] + h\n    h = [0] + h\n    h = [0] + h\n    h = [0] + h\n    h = [0] + h\n    h = [0] + h\n    h = [0] + h\n    h = [0] + h\n    h = [0] + h\n    h = [0] + h\n    h = [0] + h\n    h = [0] + h\n    h = [0] + h\n    h = [0] + h\n    h = [0] + h\n    h = [0] + h\n    h = [0] + h\n    h = [0] + h\n    h = [0] + h\n    h = [0] + h\n    h = [0] + h\n    h = [0]",
        "difficulty": "interview"
    },
    {
        "task_id": 2407,
        "prompt": "Complete the Python function given the prompt below:Ivan plays an old action game called Heretic. He's stuck on one of the final levels of this game, so he needs some help with killing the monsters.\nThe main part of the level is a large corridor (so large and narrow that it can be represented as an infinite coordinate line). The corridor is divided into two parts; let's assume that the point $x = 0$ is where these parts meet.\nThe right part of the corridor is filled with $n$ monsters \u2014 for each monster, its initial coordinate $x_i$ is given (and since all monsters are in the right part, every $x_i$ is positive).\nThe left part of the corridor is filled with crusher traps. If some monster enters the left part of the corridor or the origin (so, its current coordinate becomes less than or equal to $0$), it gets instantly killed by a trap.\nThe main weapon Ivan uses to kill the monsters is the Phoenix Rod. It can launch a missile that explodes upon impact, obliterating every monster caught in the explosion and throwing all other monsters away from the epicenter. Formally, suppose that Ivan launches a missile so that it explodes in the point $c$. Then every monster is either killed by explosion or pushed away. Let some monster's current coordinate be $y$, then:\n  if $c = y$, then the monster is killed;  if $y < c$, then the monster is pushed $r$ units to the left, so its current coordinate becomes $y - r$;  if $y > c$, then the monster is pushed $r$ units to the right, so its current coordinate becomes $y + r$. \nIvan is going to kill the monsters as follows: choose some integer point $d$ and launch a missile into that point, then wait until it explodes and all the monsters which are pushed to the left part of the corridor are killed by crusher traps, then, if at least one monster is still alive, choose another integer point (probably the one that was already used) and launch a missile there, and so on.\nWhat is the minimum number of missiles Ivan has to launch in order to kill all of the monsters? You may assume that every time Ivan fires the Phoenix Rod, he chooses the impact point optimally.\nYou have to answer $q$ independent queries.\n-----Input-----\nThe first line contains one integer $q$ ($1 \\le q \\le 10^5$) \u2014 the number of queries.\nThe first line of each query contains two integers $n$ and $r$ ($1 \\le n, r \\le 10^5$)\u00a0\u2014 the number of enemies and the distance that the enemies are thrown away from the epicenter of the explosion.\nThe second line of each query contains $n$ integers $x_i$ ($1 \\le x_i \\le 10^5$)\u00a0\u2014 the initial positions of the monsters.\nIt is guaranteed that sum of all $n$ over all queries does not exceed $10^5$.\n-----Output-----\nFor each query print one integer\u00a0\u2014 the minimum number of shots from the Phoenix Rod required to kill all monsters.\n-----Example-----\nInput\n2\n3 2\n1 3 5\n4 1\n5 2 3 5\nOutput\n2\n2\n-----Note-----\nIn the first test case, Ivan acts as follows:   choose the point $3$, the first monster dies from a crusher trap at the point $-1$, the second monster dies from the explosion, the third monster is pushed to the point $7$;  choose the point $7$, the third monster dies from the explosion. \nIn the second test case, Ivan acts as follows:   choose the point $5$, the first and fourth monsters die from the explosion, the second monster is pushed to the point $1$, the third monster is pushed to the point $2$;  choose the point $2$, the first monster dies from a crusher trap at the point $0$, the second monster dies from the explosion.\n\ndef",
        "answer": "def f(n, r):\n    if n == 1:\n        return r\n    return f(n - 1, r) + r",
        "difficulty": "interview"
    },
    {
        "task_id": 2408,
        "prompt": "Complete the Python function given the prompt below:This problem is same as the next one, but has smaller constraints.\nIt was a Sunday morning when the three friends Selena, Shiro and Katie decided to have a trip to the nearby power station (do not try this at home). After arriving at the power station, the cats got impressed with a large power transmission system consisting of many chimneys, electric poles, and wires. Since they are cats, they found those things gigantic.\nAt the entrance of the station, there is a map describing the complicated wiring system. Selena is the best at math among three friends. He decided to draw the map on the Cartesian plane. Each pole is now a point at some coordinates $(x_i, y_i)$. Since every pole is different, all of the points representing these poles are distinct. Also, every two poles are connected with each other by wires. A wire is a straight line on the plane infinite in both directions. If there are more than two poles lying on the same line, they are connected by a single common wire.\nSelena thinks, that whenever two different electric wires intersect, they may interfere with each other and cause damage. So he wonders, how many pairs are intersecting? Could you help him with this problem?\n-----Input-----\nThe first line contains a single integer $n$ ($2 \\le n \\le 50$)\u00a0\u2014 the number of electric poles.\nEach of the following $n$ lines contains two integers $x_i$, $y_i$ ($-10^4 \\le x_i, y_i \\le 10^4$)\u00a0\u2014 the coordinates of the poles.\nIt is guaranteed that all of these $n$ points are distinct.\n-----Output-----\nPrint a single integer\u00a0\u2014 the number of pairs of wires that are intersecting.\n-----Examples-----\nInput\n4\n0 0\n1 1\n0 3\n1 2\nOutput\n14\nInput\n4\n0 0\n0 2\n0 4\n2 0\nOutput\n6\nInput\n3\n-1 -1\n1 0\n3 1\nOutput\n0\n-----Note-----\nIn the first example: [Image] \nIn the second example: [Image] \nNote that the three poles $(0, 0)$, $(0, 2)$ and $(0, 4)$ are connected by a single wire.\nIn the third example: [Image]\n\ndef",
        "answer": "def count_intersections(points):\n    count = 0\n    for i in range(len(points)):\n        for j in range(i + 1, len(points)):\n            if points[i][0] == points[j][0] or points[i][1] == points[j][1]:\n                count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 2409,
        "prompt": "Complete the Python function given the prompt below:The only difference between easy and hard versions is on constraints. In this version constraints are higher. You can make hacks only if all versions of the problem are solved.\nKoa the Koala is at the beach!\nThe beach consists (from left to right) of a shore, $n+1$ meters of sea and an island at $n+1$ meters from the shore.\nShe measured the depth of the sea at $1, 2, \\dots, n$ meters from the shore and saved them in array $d$. $d_i$ denotes the depth of the sea at $i$ meters from the shore for $1 \\le i \\le n$.\nLike any beach this one has tide, the intensity of the tide is measured by parameter $k$ and affects all depths from the beginning at time $t=0$ in the following way:\n  For a total of $k$ seconds, each second, tide increases all depths by $1$.\n  Then, for a total of $k$ seconds, each second, tide decreases all depths by $1$.\n  This process repeats again and again (ie. depths increase for $k$ seconds then decrease for $k$ seconds and so on...).\nFormally, let's define $0$-indexed array $p = [0, 1, 2, \\ldots, k - 2, k - 1, k, k - 1, k - 2, \\ldots, 2, 1]$ of length $2k$. At time $t$ ($0 \\le t$) depth at $i$ meters from the shore equals $d_i + p[t \\bmod 2k]$ ($t \\bmod 2k$ denotes the remainder of the division of $t$ by $2k$). Note that the changes occur instantaneously after each second, see the notes for better understanding. \nAt time $t=0$ Koa is standing at the shore and wants to get to the island. Suppose that at some time $t$ ($0 \\le t$) she is at $x$ ($0 \\le x \\le n$) meters from the shore:\n  In one second Koa can swim $1$ meter further from the shore ($x$ changes to $x+1$) or not swim at all ($x$ stays the same), in both cases $t$ changes to $t+1$.\n  As Koa is a bad swimmer, the depth of the sea at the point where she is can't exceed $l$ at integer points of time (or she will drown). More formally, if Koa is at $x$ ($1 \\le x \\le n$) meters from the shore at the moment $t$ (for some integer $t\\ge 0$), the depth of the sea at this point \u00a0\u2014 $d_x + p[t \\bmod 2k]$ \u00a0\u2014 can't exceed $l$. In other words, $d_x + p[t \\bmod 2k] \\le l$ must hold always.\n  Once Koa reaches the island at $n+1$ meters from the shore, she stops and can rest.\nNote that while Koa swims tide doesn't have effect on her (ie. she can't drown while swimming). Note that Koa can choose to stay on the shore for as long as she needs and neither the shore or the island are affected by the tide (they are solid ground and she won't drown there). \nKoa wants to know whether she can go from the shore to the island. Help her!\n-----Input-----\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) \u00a0\u2014 the number of test cases. Description of the test cases follows.\nThe first line of each test case contains three integers $n$, $k$ and $l$ ($1 \\le n \\le 3 \\cdot 10^5; 1 \\le k \\le 10^9; 1 \\le l \\le 10^9$)\u00a0\u2014 the number of meters of sea Koa measured and parameters $k$ and $l$.\nThe second line of each test case contains $n$ integers $d_1, d_2, \\ldots, d_n$ ($0 \\le d_i \\le 10^9$) \u00a0\u2014 the depths of each meter of sea Koa measured.\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $3 \\cdot 10^5$.\n-----Output-----\nFor each test case:\nPrint Yes if Koa can get from the shore to the island, and No otherwise.\nYou may print each letter in any case (upper or lower).\n-----Example-----\nInput\n7\n2 1 1\n1 0\n5 2 3\n1 2 3 2 2\n4 3 4\n0 2 4 3\n2 3 5\n3 0\n7 2 3\n3 0 2 1 3 0 1\n7 1 4\n4 4 3 0 2 4 2\n5 2 3\n1 2 3 2 2\nOutput\nYes\nNo\nYes\nYes\nYes\nNo\nNo\n-----Note-----\nIn the following $s$ denotes the shore, $i$ denotes the island, $x$ denotes distance from Koa to the shore, the underline denotes the position of Koa, and values in the array below denote current depths, affected by tide, at $1, 2, \\dots, n$ meters from the shore.\nIn test case $1$ we have $n = 2, k = 1, l = 1, p = [ 0, 1 ]$.\nKoa wants to go from shore (at $x = 0$) to the island (at $x = 3$). Let's describe a possible solution:\n  Initially at $t = 0$ the beach looks like this: $[\\underline{s}, 1, 0, i]$.  At $t = 0$ if Koa would decide to swim to $x = 1$, beach would look like: $[s, \\underline{2}, 1, i]$ at $t = 1$, since $2 > 1$ she would drown. So Koa waits $1$ second instead and beach looks like $[\\underline{s}, 2, 1, i]$ at $t = 1$.  At $t = 1$ Koa swims to $x = 1$, beach looks like $[s, \\underline{1}, 0, i]$ at $t = 2$. Koa doesn't drown because $1 \\le 1$.  At $t = 2$ Koa swims to $x = 2$, beach looks like $[s, 2, \\underline{1}, i]$ at $t = 3$. Koa doesn't drown because $1 \\le 1$.  At $t = 3$ Koa swims to $x = 3$, beach looks like $[s, 1, 0, \\underline{i}]$ at $t = 4$.  At $t = 4$ Koa is at $x = 3$ and she made it! \nWe can show that in test case $2$ Koa can't get to the island.\n\ndef",
        "answer": "def solution(n, k, l, d):\n    p = [0, 1]\n    for i in range(2, 2 * k + 1):\n        p.append(p[i - 1] + p[i - 2])\n    for i in range(n):\n        d[i] += p[k]\n    for i in range(n):\n        if d[i] > l:\n            return \"No\"\n    return \"Yes\"",
        "difficulty": "interview"
    },
    {
        "task_id": 2410,
        "prompt": "Complete the Python function given the prompt below:Today, Yasser and Adel are at the shop buying cupcakes. There are $n$ cupcake types, arranged from $1$ to $n$ on the shelf, and there are infinitely many of each type. The tastiness of a cupcake of type $i$ is an integer $a_i$. There are both tasty and nasty cupcakes, so the tastiness can be positive, zero or negative.\nYasser, of course, wants to try them all, so he will buy exactly one cupcake of each type.\nOn the other hand, Adel will choose some segment $[l, r]$ $(1 \\le l \\le r \\le n)$ that does not include all of cupcakes (he can't choose $[l, r] = [1, n]$) and buy exactly one cupcake of each of types $l, l + 1, \\dots, r$.\nAfter that they will compare the total tastiness of the cupcakes each of them have bought. Yasser will be happy if the total tastiness of cupcakes he buys is strictly greater than the total tastiness of cupcakes Adel buys regardless of Adel's choice.\nFor example, let the tastinesses of the cupcakes be $[7, 4, -1]$. Yasser will buy all of them, the total tastiness will be $7 + 4 - 1 = 10$. Adel can choose segments $[7], [4], [-1], [7, 4]$ or $[4, -1]$, their total tastinesses are $7, 4, -1, 11$ and $3$, respectively. Adel can choose segment with tastiness $11$, and as $10$ is not strictly greater than $11$, Yasser won't be happy :(\nFind out if Yasser will be happy after visiting the shop.\n-----Input-----\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\nThe first line of each test case contains $n$ ($2 \\le n \\le 10^5$).\nThe second line of each test case contains $n$ integers $a_1, a_2, \\dots, a_n$ ($-10^9 \\le a_i \\le 10^9$), where $a_i$ represents the tastiness of the $i$-th type of cupcake.\nIt is guaranteed that the sum of $n$ over all test cases doesn't exceed $10^5$.\n-----Output-----\nFor each test case, print \"YES\", if the total tastiness of cupcakes Yasser buys will always be strictly greater than the total tastiness of cupcakes Adel buys regardless of Adel's choice. Otherwise, print \"NO\".\n-----Example-----\nInput\n3\n4\n1 2 3 4\n3\n7 4 -1\n3\n5 -5 5\nOutput\nYES\nNO\nNO\n-----Note-----\nIn the first example, the total tastiness of any segment Adel can choose is less than the total tastiness of all cupcakes.\nIn the second example, Adel will choose the segment $[1, 2]$ with total tastiness $11$, which is not less than the total tastiness of all cupcakes, which is $10$.\nIn the third example, Adel can choose the segment $[3, 3]$ with total tastiness of $5$. Note that Yasser's cupcakes' total tastiness is also $5$, so in that case, the total tastiness of Yasser's cupcakes isn't strictly greater than the total tastiness of Adel's cupcakes.\n\ndef",
        "answer": "def yasser(n, a):\n    a.sort()\n    total = 0\n    for i in range(n):\n        total += a[i]\n    if total > 0:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "difficulty": "interview"
    },
    {
        "task_id": 2411,
        "prompt": "Complete the Python function given the prompt below:This problem is same as the previous one, but has larger constraints.\nIt was a Sunday morning when the three friends Selena, Shiro and Katie decided to have a trip to the nearby power station (do not try this at home). After arriving at the power station, the cats got impressed with a large power transmission system consisting of many chimneys, electric poles, and wires. Since they are cats, they found those things gigantic.\nAt the entrance of the station, there is a map describing the complicated wiring system. Selena is the best at math among three friends. He decided to draw the map on the Cartesian plane. Each pole is now a point at some coordinates $(x_i, y_i)$. Since every pole is different, all of the points representing these poles are distinct. Also, every two poles are connected with each other by wires. A wire is a straight line on the plane infinite in both directions. If there are more than two poles lying on the same line, they are connected by a single common wire.\nSelena thinks, that whenever two different electric wires intersect, they may interfere with each other and cause damage. So he wonders, how many pairs are intersecting? Could you help him with this problem?\n-----Input-----\nThe first line contains a single integer $n$ ($2 \\le n \\le 1000$)\u00a0\u2014 the number of electric poles.\nEach of the following $n$ lines contains two integers $x_i$, $y_i$ ($-10^4 \\le x_i, y_i \\le 10^4$)\u00a0\u2014 the coordinates of the poles.\nIt is guaranteed that all of these $n$ points are distinct.\n-----Output-----\nPrint a single integer\u00a0\u2014 the number of pairs of wires that are intersecting.\n-----Examples-----\nInput\n4\n0 0\n1 1\n0 3\n1 2\nOutput\n14\nInput\n4\n0 0\n0 2\n0 4\n2 0\nOutput\n6\nInput\n3\n-1 -1\n1 0\n3 1\nOutput\n0\n-----Note-----\nIn the first example:\n [Image] \nIn the second example:\n [Image] \nNote that the three poles $(0, 0)$, $(0, 2)$ and $(0, 4)$ are connected by a single wire.\nIn the third example:\n [Image]\n\ndef",
        "answer": "def count_intersections(points):\n    count = 0\n    for i in range(len(points)):\n        for j in range(i + 1, len(points)):\n            if points[i][0] == points[j][0] or points[i][1] == points[j][1]:\n                count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 2412,
        "prompt": "Complete the Python function given the prompt below:A telephone number is a sequence of exactly 11 digits, where the first digit is 8. For example, the sequence 80011223388 is a telephone number, but the sequences 70011223388 and 80000011223388 are not.\nYou are given a string $s$ of length $n$, consisting of digits.\nIn one operation you can delete any character from string $s$. For example, it is possible to obtain strings 112, 111 or 121 from string 1121.\nYou need to determine whether there is such a sequence of operations (possibly empty), after which the string $s$ becomes a telephone number.\n-----Input-----\nThe first line contains one integer $t$ ($1 \\le t \\le 100$) \u2014 the number of test cases.\nThe first line of each test case contains one integer $n$ ($1 \\le n \\le 100$) \u2014 the length of string $s$.\nThe second line of each test case contains the string $s$ ($|s| = n$) consisting of digits.\n-----Output-----\nFor each test print one line.\nIf there is a sequence of operations, after which $s$ becomes a telephone number, print YES.\nOtherwise, print NO.\n-----Example-----\nInput\n2\n13\n7818005553535\n11\n31415926535\nOutput\nYES\nNO\n-----Note-----\nIn the first test case you need to delete the first and the third digits. Then the string 7818005553535 becomes 88005553535.\n\ndef",
        "answer": "def is_telephone_number(s):\n    if len(s)!= 11:\n        return False\n    if s[0]!= '8':\n        return False\n    for i in range(1, len(s)):\n        if not s[i].isdigit():\n            return False\n    return True",
        "difficulty": "interview"
    },
    {
        "task_id": 2413,
        "prompt": "Complete the Python function given the prompt below:Nikolay lives in a two-storied house. There are $n$ rooms on each floor, arranged in a row and numbered from one from left to right. So each room can be represented by the number of the floor and the number of the room on this floor (room number is an integer between $1$ and $n$). \nIf Nikolay is currently in some room, he can move to any of the neighbouring rooms (if they exist). Rooms with numbers $i$ and $i+1$ on each floor are neighbouring, for all $1 \\leq i \\leq n - 1$. There may also be staircases that connect two rooms from different floors having the same numbers. If there is a staircase connecting the room $x$ on the first floor and the room $x$ on the second floor, then Nikolay can use it to move from one room to another.\n $\\text{floor}$  The picture illustrates a house with $n = 4$. There is a staircase between the room $2$ on the first floor and the room $2$ on the second floor, and another staircase between the room $4$ on the first floor and the room $4$ on the second floor. The arrows denote possible directions in which Nikolay can move. The picture corresponds to the string \"0101\" in the input. \n \nNikolay wants to move through some rooms in his house. To do this, he firstly chooses any room where he starts. Then Nikolay moves between rooms according to the aforementioned rules. Nikolay never visits the same room twice (he won't enter a room where he has already been). \nCalculate the maximum number of rooms Nikolay can visit during his tour, if:\n  he can start in any room on any floor of his choice,  and he won't visit the same room twice. \n-----Input-----\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 100$) \u2014 the number of test cases in the input. Then test cases follow. Each test case consists of two lines.\nThe first line contains one integer $n$ $(1 \\le n \\le 1\\,000)$ \u2014 the number of rooms on each floor.\nThe second line contains one string consisting of $n$ characters, each character is either a '0' or a '1'. If the $i$-th character is a '1', then there is a staircase between the room $i$ on the first floor and the room $i$ on the second floor. If the $i$-th character is a '0', then there is no staircase between the room $i$ on the first floor and the room $i$ on the second floor.\nIn hacks it is allowed to use only one test case in the input, so $t = 1$ should be satisfied.\n-----Output-----\nFor each test case print one integer \u2014 the maximum number of rooms Nikolay can visit during his tour, if he can start in any room on any floor, and he won't visit the same room twice.\n-----Example-----\nInput\n4\n5\n00100\n8\n00000000\n5\n11111\n3\n110\nOutput\n6\n8\n10\n6\n-----Note-----\nIn the first test case Nikolay may start in the first room of the first floor. Then he moves to the second room on the first floor, and then \u2014 to the third room on the first floor. Then he uses a staircase to get to the third room on the second floor. Then he goes to the fourth room on the second floor, and then \u2014 to the fifth room on the second floor. So, Nikolay visits $6$ rooms.\nThere are no staircases in the second test case, so Nikolay can only visit all rooms on the same floor (if he starts in the leftmost or in the rightmost room).\nIn the third test case it is possible to visit all rooms: first floor, first room $\\rightarrow$ second floor, first room $\\rightarrow$ second floor, second room $\\rightarrow$ first floor, second room $\\rightarrow$ first floor, third room $\\rightarrow$ second floor, third room $\\rightarrow$ second floor, fourth room $\\rightarrow$ first floor, fourth room $\\rightarrow$ first floor, fifth room $\\rightarrow$ second floor, fifth room.\nIn the fourth test case it is also possible to visit all rooms: second floor, third room $\\rightarrow$ second floor, second room $\\rightarrow$ second floor, first room $\\rightarrow$ first floor, first room $\\rightarrow$ first floor, second room $\\rightarrow$ first floor, third room.\n\ndef",
        "answer": "def dfs(graph, start, visited=None):\n    if visited is None:\n        visited = set()\n    visited.add(start)\n    for next in graph[start] - visited:\n        dfs(graph, next, visited)\n    return visited",
        "difficulty": "interview"
    },
    {
        "task_id": 2414,
        "prompt": "Complete the Python function given the prompt below:You are given two integers $a$ and $b$. Print $a+b$.\n-----Input-----\nThe first line contains an integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases in the input. Then $t$ test cases follow.\nEach test case is given as a line of two integers $a$ and $b$ ($-1000 \\le a, b \\le 1000$).\n-----Output-----\nPrint $t$ integers \u2014 the required numbers $a+b$.\n-----Example-----\nInput\n4\n1 5\n314 15\n-99 99\n123 987\nOutput\n6\n329\n0\n1110\n\ndef",
        "answer": "def sum_of_two_numbers(a, b):\n    return a + b",
        "difficulty": "interview"
    },
    {
        "task_id": 2415,
        "prompt": "Complete the Python function given the prompt below:-----Input-----\nThe input consists of a single string of uppercase letters A-Z. The length of the string is between 1 and 10 characters, inclusive.\n-----Output-----\nOutput \"YES\" or \"NO\".\n-----Examples-----\nInput\nGENIUS\nOutput\nYES\nInput\nDOCTOR\nOutput\nNO\nInput\nIRENE\nOutput\nYES\nInput\nMARY\nOutput\nNO\nInput\nSMARTPHONE\nOutput\nNO\nInput\nREVOLVER\nOutput\nYES\nInput\nHOLMES\nOutput\nNO\nInput\nWATSON\nOutput\nYES\n\ndef",
        "answer": "def is_palindrome(s):\n    return s == s[::-1]",
        "difficulty": "interview"
    },
    {
        "task_id": 2416,
        "prompt": "Complete the Python function given the prompt below:Ksenia has an array $a$ consisting of $n$ positive integers $a_1, a_2, \\ldots, a_n$. \nIn one operation she can do the following:   choose three distinct indices $i$, $j$, $k$, and then  change all of $a_i, a_j, a_k$ to $a_i \\oplus a_j \\oplus a_k$ simultaneously, where $\\oplus$ denotes the bitwise XOR operation. \nShe wants to make all $a_i$ equal in at most $n$ operations, or to determine that it is impossible to do so. She wouldn't ask for your help, but please, help her!\n-----Input-----\nThe first line contains one integer $n$ ($3 \\leq n \\leq 10^5$)\u00a0\u2014 the length of $a$.\nThe second line contains $n$ integers, $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 10^9$)\u00a0\u2014 elements of $a$.\n-----Output-----\nPrint YES or NO in the first line depending on whether it is possible to make all elements equal in at most $n$ operations.\nIf it is possible, print an integer $m$ ($0 \\leq m \\leq n$), which denotes the number of operations you do.\nIn each of the next $m$ lines, print three distinct integers $i, j, k$, representing one operation. \nIf there are many such operation sequences possible, print any. Note that you do not have to minimize the number of operations.\n-----Examples-----\nInput\n5\n4 2 1 7 2\nOutput\nYES\n1\n1 3 4\nInput\n4\n10 4 49 22\nOutput\nNO\n-----Note-----\nIn the first example, the array becomes $[4 \\oplus 1 \\oplus 7, 2, 4 \\oplus 1 \\oplus 7, 4 \\oplus 1 \\oplus 7, 2] = [2, 2, 2, 2, 2]$.\n\ndef",
        "answer": "def XOR(a, b):\n    return a ^ b",
        "difficulty": "interview"
    },
    {
        "task_id": 2417,
        "prompt": "Complete the Python function given the prompt below:Consider a tunnel on a one-way road. During a particular day, $n$ cars numbered from $1$ to $n$ entered and exited the tunnel exactly once. All the cars passed through the tunnel at constant speeds.\nA traffic enforcement camera is mounted at the tunnel entrance. Another traffic enforcement camera is mounted at the tunnel exit. Perfectly balanced.\nThanks to the cameras, the order in which the cars entered and exited the tunnel is known. No two cars entered or exited at the same time.\nTraffic regulations prohibit overtaking inside the tunnel. If car $i$ overtakes any other car $j$ inside the tunnel, car $i$ must be fined. However, each car can be fined at most once.\nFormally, let's say that car $i$ definitely overtook car $j$ if car $i$ entered the tunnel later than car $j$ and exited the tunnel earlier than car $j$. Then, car $i$ must be fined if and only if it definitely overtook at least one other car.\nFind the number of cars that must be fined. \n-----Input-----\nThe first line contains a single integer $n$ ($2 \\le n \\le 10^5$), denoting the number of cars.\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le n$), denoting the ids of cars in order of entering the tunnel. All $a_i$ are pairwise distinct.\nThe third line contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($1 \\le b_i \\le n$), denoting the ids of cars in order of exiting the tunnel. All $b_i$ are pairwise distinct.\n-----Output-----\nOutput the number of cars to be fined.\n-----Examples-----\nInput\n5\n3 5 2 1 4\n4 3 2 5 1\nOutput\n2\nInput\n7\n5 2 3 6 7 1 4\n2 3 6 7 1 4 5\nOutput\n6\nInput\n2\n1 2\n1 2\nOutput\n0\n-----Note-----\nThe first example is depicted below:\n[Image]\nCar $2$ definitely overtook car $5$, while car $4$ definitely overtook cars $1$, $2$, $3$ and $5$. Cars $2$ and $4$ must be fined.\nIn the second example car $5$ was definitely overtaken by all other cars.\nIn the third example no car must be fined.\n\ndef",
        "answer": "def cars(n, a, b):\n    a.sort()\n    b.sort()\n    count = 0\n    for i in range(n):\n        if a[i] > b[i]:\n            count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 2418,
        "prompt": "Complete the Python function given the prompt below:You are given a sequence of $n$ integers $a_1, a_2, \\ldots, a_n$.\nYou have to construct two sequences of integers $b$ and $c$ with length $n$ that satisfy:  for every $i$ ($1\\leq i\\leq n$) $b_i+c_i=a_i$  $b$ is non-decreasing, which means that for every $1<i\\leq n$, $b_i\\geq b_{i-1}$ must hold  $c$ is non-increasing, which means that for every $1<i\\leq n$, $c_i\\leq c_{i-1}$ must hold \nYou have to minimize $\\max(b_i,c_i)$. In other words, you have to minimize the maximum number in sequences $b$ and $c$.\nAlso there will be $q$ changes, the $i$-th change is described by three integers $l,r,x$. You should add $x$ to $a_l,a_{l+1}, \\ldots, a_r$. \nYou have to find the minimum possible value of $\\max(b_i,c_i)$ for the initial sequence and for sequence after each change.\n-----Input-----\nThe first line contains an integer $n$ ($1\\leq n\\leq 10^5$).\nThe secound line contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($1\\leq i\\leq n$, $-10^9\\leq a_i\\leq 10^9$).\nThe third line contains an integer $q$ ($1\\leq q\\leq 10^5$).\nEach of the next $q$ lines contains three integers $l,r,x$ ($1\\leq l\\leq r\\leq n,-10^9\\leq x\\leq 10^9$), desribing the next change. \n-----Output-----\nPrint $q+1$ lines.\nOn the $i$-th ($1 \\leq i \\leq q+1$) line, print the answer to the problem for the sequence after $i-1$ changes.\n-----Examples-----\nInput\n4\n2 -1 7 3\n2\n2 4 -3\n3 4 2\nOutput\n5\n5\n6\nInput\n6\n-9 -10 -9 -6 -5 4\n3\n2 6 -9\n1 2 -10\n4 6 -3\nOutput\n3\n3\n3\n1\nInput\n1\n0\n2\n1 1 -1\n1 1 -1\nOutput\n0\n0\n-1\n-----Note-----\nIn the first test:  The initial sequence $a = (2, -1, 7, 3)$. Two sequences $b=(-3,-3,5,5),c=(5,2,2,-2)$ is a possible choice.  After the first change $a = (2, -4, 4, 0)$. Two sequences $b=(-3,-3,5,5),c=(5,-1,-1,-5)$ is a possible choice.  After the second change $a = (2, -4, 6, 2)$. Two sequences $b=(-4,-4,6,6),c=(6,0,0,-4)$ is a possible choice.\n\ndef",
        "answer": "def min_max_sequence(a, n, q):\n    b = [0] * n\n    c = [0] * n\n    for i in range(q):\n        l, r, x = map(int, input().split())\n        for j in range(l - 1, r):\n            b[j] += x\n            c[j] -= x\n    return max(max(b), max(c))",
        "difficulty": "interview"
    },
    {
        "task_id": 2419,
        "prompt": "Complete the Python function given the prompt below:You are given two integers $a$ and $b$. You can perform a sequence of operations: during the first operation you choose one of these numbers and increase it by $1$; during the second operation you choose one of these numbers and increase it by $2$, and so on. You choose the number of these operations yourself.\nFor example, if $a = 1$ and $b = 3$, you can perform the following sequence of three operations:   add $1$ to $a$, then $a = 2$ and $b = 3$;  add $2$ to $b$, then $a = 2$ and $b = 5$;  add $3$ to $a$, then $a = 5$ and $b = 5$. \nCalculate the minimum number of operations required to make $a$ and $b$ equal. \n-----Input-----\nThe first line contains one integer $t$ ($1 \\le t \\le 100$) \u2014 the number of test cases.\nThe only line of each test case contains two integers $a$ and $b$ ($1 \\le a, b \\le 10^9$).\n-----Output-----\nFor each test case print one integer \u2014 the minimum numbers of operations required to make $a$ and $b$ equal. \n-----Example-----\nInput\n3\n1 3\n11 11\n30 20\nOutput\n3\n0\n4\n-----Note-----\nFirst test case considered in the statement.\nIn the second test case integers $a$ and $b$ are already equal, so you don't need to perform any operations.\nIn the third test case you have to apply the first, the second, the third and the fourth operation to $b$ ($b$ turns into $20 + 1 + 2 + 3 + 4 = 30$).\n\ndef",
        "answer": "def operations(a, b):\n    count = 0\n    while a!= b:\n        if a > b:\n            a -= b\n            count += 1\n        else:\n            b -= a\n            count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 2420,
        "prompt": "Complete the Python function given the prompt below:The Cybermen solved that first test much quicker than the Daleks. Luckily for us, the Daleks were angry (shocking!) and they destroyed some of the Cybermen.\nAfter the fighting stopped, Heidi gave them another task to waste their time on.\nThere are $n$ points on a plane. Given a radius $r$, find the maximum number of points that can be covered by an $L^1$-ball with radius $r$.\nAn $L^1$-ball with radius $r$ and center $(x_0, y_0)$ in a 2D-plane is defined as the set of points $(x, y)$ such that the Manhattan distance between $(x_0, y_0)$ and $(x, y)$ is at most $r$.\nManhattan distance between $(x_0, y_0)$ and $(x, y)$ is defined as $|x - x_0| + |y - y_0|$.\n-----Input-----\nThe first line contains two integers $n, r$ ($1 \\le n \\le 300\\,000, 1 \\le r \\le 10^6$), the number of points and the radius of the ball, respectively. \nEach of the next $n$ lines contains integers $x_i, y_i$ ($-10^6 \\leq x_i, y_i \\leq 10^6$), describing the coordinates of the $i$-th point.\nIt is guaranteed, that all points are distinct.\n-----Output-----\nPrint one integer\u00a0\u2014 the maximum number points that an $L^1$-ball with radius $r$ can cover.\n-----Examples-----\nInput\n5 1\n1 1\n1 -1\n-1 1\n-1 -1\n2 0\nOutput\n3\nInput\n5 2\n1 1\n1 -1\n-1 1\n-1 -1\n2 0\nOutput\n5\n-----Note-----\nIn the first example, a ball centered at $(1, 0)$ covers the points $(1, 1)$, $(1, -1)$, $(2, 0)$.\nIn the second example, a ball centered at $(0, 0)$ covers all the points.\nNote that $x_0$ and $y_0$ need not be integer.\n\ndef",
        "answer": "def solve(n, r):\n    return n * (n + 1) // 2 - (n - r + 1) * (n - r) // 2",
        "difficulty": "interview"
    },
    {
        "task_id": 2421,
        "prompt": "Complete the Python function given the prompt below:Lindsey Buckingham told Stevie Nicks \"Go your own way\". Nicks is now sad and wants to go away as quickly as possible, but she lives in a 2D hexagonal world.\nConsider a hexagonal tiling of the plane as on the picture below. [Image] \nNicks wishes to go from the cell marked $(0, 0)$ to a certain cell given by the coordinates. She may go from a hexagon to any of its six neighbors you want, but there is a cost associated with each of them. The costs depend only on the direction in which you travel. Going from $(0, 0)$ to $(1, 1)$ will take the exact same cost as going from $(-2, -1)$ to $(-1, 0)$. The costs are given in the input in the order $c_1$, $c_2$, $c_3$, $c_4$, $c_5$, $c_6$ as in the picture below. [Image] \nPrint the smallest cost of a path from the origin which has coordinates $(0, 0)$ to the given cell.\n-----Input-----\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^{4}$). Description of the test cases follows.\nThe first line of each test case contains two integers $x$ and $y$ ($-10^{9} \\le x, y \\le 10^{9}$) representing the coordinates of the target hexagon.\nThe second line of each test case contains six integers $c_1$, $c_2$, $c_3$, $c_4$, $c_5$, $c_6$ ($1 \\le c_1, c_2, c_3, c_4, c_5, c_6 \\le 10^{9}$) representing the six costs of the making one step in a particular direction (refer to the picture above to see which edge is for each value).\n-----Output-----\nFor each testcase output the smallest cost of a path from the origin to the given cell.\n-----Example-----\nInput\n2\n-3 1\n1 3 5 7 9 11\n1000000000 1000000000\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\nOutput\n18\n1000000000000000000\n-----Note-----\nThe picture below shows the solution for the first sample. The cost $18$ is reached by taking $c_3$ 3 times and $c_2$ once, amounting to $5+5+5+3=18$. [Image]\n\ndef",
        "answer": "def hex_tour(x, y, c):\n    return min(c[0] + hex_tour(x + 1, y + 1, c[1:]),\n               c[1] + hex_tour(x + 1, y, c[2:]),\n               c[2] + hex_tour(x, y + 1, c[3:]),\n               c[3] + hex_tour(x - 1, y + 1, c[4:]),\n               c[4] + hex_tour(x - 1, y, c[5:]),\n               c[5] + hex_tour(x, y - 1, c[6:]))",
        "difficulty": "interview"
    },
    {
        "task_id": 2422,
        "prompt": "Complete the Python function given the prompt below:Recently a new building with a new layout was constructed in Monocarp's hometown. According to this new layout, the building consists of three types of apartments: three-room, five-room, and seven-room apartments. It's also known that each room of each apartment has exactly one window. In other words, a three-room apartment has three windows, a five-room\u00a0\u2014 five windows, and a seven-room\u00a0\u2014 seven windows.\nMonocarp went around the building and counted $n$ windows. Now he is wondering, how many apartments of each type the building may have.\nUnfortunately, Monocarp only recently has learned to count, so he is asking you to help him to calculate the possible quantities of three-room, five-room, and seven-room apartments in the building that has $n$ windows. If there are multiple answers, you can print any of them.\nHere are some examples:\n  if Monocarp has counted $30$ windows, there could have been $2$ three-room apartments, $2$ five-room apartments and $2$ seven-room apartments, since $2 \\cdot 3 + 2 \\cdot 5 + 2 \\cdot 7 = 30$;  if Monocarp has counted $67$ windows, there could have been $7$ three-room apartments, $5$ five-room apartments and $3$ seven-room apartments, since $7 \\cdot 3 + 5 \\cdot 5 + 3 \\cdot 7 = 67$;  if Monocarp has counted $4$ windows, he should have mistaken since no building with the aforementioned layout can have $4$ windows. \n-----Input-----\nTh first line contains one integer $t$ ($1 \\le t \\le 1000$)\u00a0\u2014 the number of test cases.\nThe only line of each test case contains one integer $n$ ($1 \\le n \\le 1000$)\u00a0\u2014 the number of windows in the building.\n-----Output-----\nFor each test case, if a building with the new layout and the given number of windows just can't exist, print $-1$.\nOtherwise, print three non-negative integers\u00a0\u2014 the possible number of three-room, five-room, and seven-room apartments. If there are multiple answers, print any of them.\n-----Example-----\nInput\n4\n30\n67\n4\n14\nOutput\n2 2 2\n7 5 3\n-1\n0 0 2\n\ndef",
        "answer": "def count_apartments(n):\n    if n % 3 == 0:\n        return n // 3\n    elif n % 5 == 0:\n        return n // 5\n    elif n % 7 == 0:\n        return n // 7\n    else:\n        return -1",
        "difficulty": "interview"
    },
    {
        "task_id": 2423,
        "prompt": "Complete the Python function given the prompt below:The Resistance is trying to take control over all planets in a particular solar system. This solar system is shaped like a tree. More precisely, some planets are connected by bidirectional hyperspace tunnels in such a way that there is a path between every pair of the planets, but removing any tunnel would disconnect some of them.\nThe Resistance already has measures in place that will, when the time is right, enable them to control every planet that is not remote. A planet is considered to be remote if it is connected to the rest of the planets only via a single hyperspace tunnel.\nHow much work is there left to be done: that is, how many remote planets are there?\n-----Input-----\nThe first line of the input contains an integer N (2 \u2264 N \u2264 1000) \u2013 the number of planets in the galaxy.\nThe next N - 1 lines describe the hyperspace tunnels between the planets. Each of the N - 1 lines contains two space-separated integers u and v (1 \u2264 u, v \u2264 N) indicating that there is a bidirectional hyperspace tunnel between the planets u and v. It is guaranteed that every two planets are connected by a path of tunnels, and that each tunnel connects a different pair of planets.\n-----Output-----\nA single integer denoting the number of remote planets.\n-----Examples-----\nInput\n5\n4 1\n4 2\n1 3\n1 5\nOutput\n3\nInput\n4\n1 2\n4 3\n1 4\nOutput\n2\n-----Note-----\nIn the first example, only planets 2, 3 and 5 are connected by a single tunnel.\nIn the second example, the remote planets are 2 and 3.\nNote that this problem has only two versions \u2013 easy and medium.\n\ndef",
        "answer": "def find_paths(graph, start, end, path=[]):\n    path = path + [start]\n    if start == end:\n        return [path]\n    if start not in graph:\n        return []\n    paths = []\n    for node in graph[start]:\n        if node not in path:\n            newpaths = find_paths(graph, node, end, path)\n            for newpath in newpaths:\n                paths.append(newpath)\n    return paths",
        "difficulty": "interview"
    },
    {
        "task_id": 2424,
        "prompt": "Complete the Python function given the prompt below:Santa Claus has received letters from $n$ different kids throughout this year. Of course, each kid wants to get some presents from Santa: in particular, the $i$-th kid asked Santa to give them one of $k_i$ different items as a present. Some items could have been asked by multiple kids.\nSanta is really busy, so he wants the New Year Bot to choose the presents for all children. Unfortunately, the Bot's algorithm of choosing presents is bugged. To choose a present for some kid, the Bot does the following:\n  choose one kid $x$ equiprobably among all $n$ kids;  choose some item $y$ equiprobably among all $k_x$ items kid $x$ wants;  choose a kid $z$ who will receive the present equipropably among all $n$ kids (this choice is independent of choosing $x$ and $y$); the resulting triple $(x, y, z)$ is called the decision of the Bot. \nIf kid $z$ listed item $y$ as an item they want to receive, then the decision valid. Otherwise, the Bot's choice is invalid.\nSanta is aware of the bug, but he can't estimate if this bug is really severe. To do so, he wants to know the probability that one decision generated according to the aforementioned algorithm is valid. Can you help him?\n-----Input-----\nThe first line contains one integer $n$ ($1 \\le n \\le 10^6$) \u2014 the number of kids who wrote their letters to Santa.\nThen $n$ lines follow, the $i$-th of them contains a list of items wanted by the $i$-th kid in the following format: $k_i$ $a_{i, 1}$ $a_{i, 2}$... $a_{i, k_i}$ ($1 \\le k_i, a_{i, j} \\le 10^6$), where $k_i$ is the number of items wanted by the $i$-th kid, and $a_{i, j}$ are the items themselves. No item is contained in the same list more than once.\nIt is guaranteed that $\\sum \\limits_{i = 1}^{n} k_i \\le 10^6$.\n-----Output-----\nPrint the probatility that the Bot produces a valid decision as follows:\nLet this probability be represented as an irreducible fraction $\\frac{x}{y}$. You have to print $x \\cdot y^{-1} \\mod 998244353$, where $y^{-1}$ is the inverse element of $y$ modulo $998244353$ (such integer that $y \\cdot y^{-1}$ has remainder $1$ modulo $998244353$). \n-----Examples-----\nInput\n2\n2 2 1\n1 1\nOutput\n124780545\nInput\n5\n2 1 2\n2 3 1\n3 2 4 3\n2 1 4\n3 4 3 2\nOutput\n798595483\n\ndef",
        "answer": "def santa_claus(n, k, a):\n    # your code here\n    # print(n, k, a)\n    # print(n, k, a)\n    # print(n, k, a)\n    # print(n, k, a)\n    # print(n, k, a)\n    # print(n, k, a)\n    # print(n, k, a)\n    # print(n, k, a)\n    # print(n, k, a)\n    # print(n, k, a)\n    # print(n, k, a)\n    # print(n, k, a)\n    # print(n, k, a)\n    # print(n, k, a)\n    # print(n, k, a)\n    # print(n, k, a)\n    # print(n, k, a)\n    # print(n, k, a)\n    # print(n, k, a)\n    # print(n, k, a)\n    # print(n, k, a)\n    # print(n, k, a)\n    # print(n, k, a)\n    # print(n, k, a)\n    # print(n, k, a)\n    # print(n, k, a)\n    # print(n, k, a)\n    # print(n, k, a)\n    # print(n, k, a)\n    # print(n, k, a)\n    # print(n, k, a)\n    # print(n, k, a)\n    # print(n, k, a)\n    # print(n, k, a)\n    # print(n, k",
        "difficulty": "interview"
    },
    {
        "task_id": 2425,
        "prompt": "Complete the Python function given the prompt below:Can the greatest common divisor and bitwise operations have anything in common? It is time to answer this question.\nSuppose you are given a positive integer $a$. You want to choose some integer $b$ from $1$ to $a - 1$ inclusive in such a way that the greatest common divisor (GCD) of integers $a \\oplus b$ and $a \\> \\& \\> b$ is as large as possible. In other words, you'd like to compute the following function:\n$$f(a) = \\max_{0 < b < a}{gcd(a \\oplus b, a \\> \\& \\> b)}.$$\nHere $\\oplus$ denotes the bitwise XOR operation, and $\\&$ denotes the bitwise AND operation.\nThe greatest common divisor of two integers $x$ and $y$ is the largest integer $g$ such that both $x$ and $y$ are divided by $g$ without remainder.\nYou are given $q$ integers $a_1, a_2, \\ldots, a_q$. For each of these integers compute the largest possible value of the greatest common divisor (when $b$ is chosen optimally). \n-----Input-----\nThe first line contains an integer $q$ ($1 \\le q \\le 10^3$)\u00a0\u2014 the number of integers you need to compute the answer for.\nAfter that $q$ integers are given, one per line: $a_1, a_2, \\ldots, a_q$ ($2 \\le a_i \\le 2^{25} - 1$)\u00a0\u2014 the integers you need to compute the answer for. \n-----Output-----\nFor each integer, print the answer in the same order as the integers are given in input.\n-----Example-----\nInput\n3\n2\n3\n5\nOutput\n3\n1\n7\n-----Note-----\nFor the first integer the optimal choice is $b = 1$, then $a \\oplus b = 3$, $a \\> \\& \\> b = 0$, and the greatest common divisor of $3$ and $0$ is $3$.\nFor the second integer one optimal choice is $b = 2$, then $a \\oplus b = 1$, $a \\> \\& \\> b = 2$, and the greatest common divisor of $1$ and $2$ is $1$.\nFor the third integer the optimal choice is $b = 2$, then $a \\oplus b = 7$, $a \\> \\& \\> b = 0$, and the greatest common divisor of $7$ and $0$ is $7$.\n\ndef",
        "answer": "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)",
        "difficulty": "interview"
    },
    {
        "task_id": 2426,
        "prompt": "Complete the Python function given the prompt below:You are given an array $a$ consisting of $n$ positive integers. Find a non-empty subset of its elements such that their sum is even (i.e. divisible by $2$) or determine that there is no such subset.\nBoth the given array and required subset may contain equal values.\n-----Input-----\nThe first line contains a single integer $t$ ($1 \\leq t \\leq 100$), number of test cases to solve. Descriptions of $t$ test cases follow.\nA description of each test case consists of two lines. The first line contains a single integer $n$ ($1 \\leq n \\leq 100$), length of array $a$.\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 100$), elements of $a$. The given array $a$ can contain equal values (duplicates).\n-----Output-----\nFor each test case output $-1$ if there is no such subset of elements. Otherwise output positive integer $k$, number of elements in the required subset. Then output $k$ distinct integers ($1 \\leq p_i \\leq n$), indexes of the chosen elements. If there are multiple solutions output any of them.\n-----Example-----\nInput\n3\n3\n1 4 3\n1\n15\n2\n3 5\nOutput\n1\n2\n-1\n2\n1 2\n-----Note-----\nThere are three test cases in the example.\nIn the first test case, you can choose the subset consisting of only the second element. Its sum is $4$ and it is even.\nIn the second test case, there is only one non-empty subset of elements consisting of the first element, however sum in it is odd, so there is no solution.\nIn the third test case, the subset consisting of all array's elements has even sum.\n\ndef",
        "answer": "def even_sum(a, n):\n    s = sum(a)\n    if s % 2 == 0:\n        return s // 2\n    else:\n        return -1",
        "difficulty": "interview"
    },
    {
        "task_id": 2427,
        "prompt": "Complete the Python function given the prompt below:Yurii is sure he can do everything. Can he solve this task, though?\nHe has an array $a$ consisting of $n$ positive integers. Let's call a subarray $a[l...r]$ good if the following conditions are simultaneously satisfied:   $l+1 \\leq r-1$, i.\u00a0e. the subarray has length at least $3$;  $(a_l \\oplus a_r) = (a_{l+1}+a_{l+2}+\\ldots+a_{r-2}+a_{r-1})$, where $\\oplus$ denotes the bitwise XOR operation. \nIn other words, a subarray is good if the bitwise XOR of the two border elements is equal to the sum of the rest of the elements. \nYurii wants to calculate the total number of good subarrays. What is it equal to?\nAn array $c$ is a subarray of an array $d$ if $c$ can be obtained from $d$ by deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n-----Input-----\nThe first line contains a single integer $n$ ($3 \\leq n \\leq 2\\cdot 10^5$)\u00a0\u2014 the length of $a$. \nThe second line contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($1 \\leq a_i \\lt 2^{30}$)\u00a0\u2014 elements of $a$. \n-----Output-----\nOutput a single integer\u00a0\u2014 the number of good subarrays. \n-----Examples-----\nInput\n8\n3 1 2 3 1 2 3 15\nOutput\n6\nInput\n10\n997230370 58052053 240970544 715275815 250707702 156801523 44100666 64791577 43523002 480196854\nOutput\n2\n-----Note-----\nThere are $6$ good subarrays in the example:   $[3,1,2]$ (twice) because $(3 \\oplus 2) = 1$;  $[1,2,3]$ (twice) because $(1 \\oplus 3) = 2$;  $[2,3,1]$ because $(2 \\oplus 1) = 3$;  $[3,1,2,3,1,2,3,15]$ because $(3 \\oplus 15) = (1+2+3+1+2+3)$.\n\ndef",
        "answer": "def solution(a):\n    # write your code in Python 3.6\n    n = len(a)\n    good = 0\n    for i in range(n):\n        for j in range(i+3, n):\n            if (a[i] ^ a[j]) == (a[i+1] ^ a[i+2] ^ a[i+3]):\n                good += 1\n    return good\n",
        "difficulty": "interview"
    },
    {
        "task_id": 2428,
        "prompt": "Complete the Python function given the prompt below:You are given a string $s$. You can build new string $p$ from $s$ using the following operation no more than two times:   choose any subsequence $s_{i_1}, s_{i_2}, \\dots, s_{i_k}$ where $1 \\le i_1 < i_2 < \\dots < i_k \\le |s|$;  erase the chosen subsequence from $s$ ($s$ can become empty);  concatenate chosen subsequence to the right of the string $p$ (in other words, $p = p + s_{i_1}s_{i_2}\\dots s_{i_k}$). \nOf course, initially the string $p$ is empty. \nFor example, let $s = \\text{ababcd}$. At first, let's choose subsequence $s_1 s_4 s_5 = \\text{abc}$ \u2014 we will get $s = \\text{bad}$ and $p = \\text{abc}$. At second, let's choose $s_1 s_2 = \\text{ba}$ \u2014 we will get $s = \\text{d}$ and $p = \\text{abcba}$. So we can build $\\text{abcba}$ from $\\text{ababcd}$.\nCan you build a given string $t$ using the algorithm above?\n-----Input-----\nThe first line contains the single integer $T$ ($1 \\le T \\le 100$) \u2014 the number of test cases.\nNext $2T$ lines contain test cases \u2014 two per test case. The first line contains string $s$ consisting of lowercase Latin letters ($1 \\le |s| \\le 400$) \u2014 the initial string.\nThe second line contains string $t$ consisting of lowercase Latin letters ($1 \\le |t| \\le |s|$) \u2014 the string you'd like to build.\nIt's guaranteed that the total length of strings $s$ doesn't exceed $400$.\n-----Output-----\nPrint $T$ answers \u2014 one per test case. Print YES (case insensitive) if it's possible to build $t$ and NO (case insensitive) otherwise.\n-----Example-----\nInput\n4\nababcd\nabcba\na\nb\ndefi\nfed\nxyz\nx\nOutput\nYES\nNO\nNO\nYES\n\ndef",
        "answer": "def main():\n    t = int(input())\n    for i in range(t):\n        s = input()\n        t = input()\n        if is_possible(s, t):\n            print('YES')\n        else:\n            print('NO')",
        "difficulty": "interview"
    },
    {
        "task_id": 2429,
        "prompt": "Complete the Python function given the prompt below:Phoenix has $n$ coins with weights $2^1, 2^2, \\dots, 2^n$. He knows that $n$ is even.\nHe wants to split the coins into two piles such that each pile has exactly $\\frac{n}{2}$ coins and the difference of weights between the two piles is minimized. Formally, let $a$ denote the sum of weights in the first pile, and $b$ denote the sum of weights in the second pile. Help Phoenix minimize $|a-b|$, the absolute value of $a-b$.\n-----Input-----\nThe input consists of multiple test cases. The first line contains an integer $t$ ($1 \\le t \\le 100$)\u00a0\u2014 the number of test cases.\nThe first line of each test case contains an integer $n$ ($2 \\le n \\le 30$; $n$ is even)\u00a0\u2014 the number of coins that Phoenix has. \n-----Output-----\nFor each test case, output one integer\u00a0\u2014 the minimum possible difference of weights between the two piles.\n-----Example-----\nInput\n2\n2\n4\nOutput\n2\n6\n-----Note-----\nIn the first test case, Phoenix has two coins with weights $2$ and $4$. No matter how he divides the coins, the difference will be $4-2=2$.\nIn the second test case, Phoenix has four coins of weight $2$, $4$, $8$, and $16$. It is optimal for Phoenix to place coins with weights $2$ and $16$ in one pile, and coins with weights $4$ and $8$ in another pile. The difference is $(2+16)-(4+8)=6$.\n\ndef",
        "answer": "def split_coins(n):\n    return int(n/2)",
        "difficulty": "interview"
    },
    {
        "task_id": 2430,
        "prompt": "Complete the Python function given the prompt below:Squirrel Liss loves nuts. There are n trees (numbered 1 to n from west to east) along a street and there is a delicious nut on the top of each tree. The height of the tree i is h_{i}. Liss wants to eat all nuts.\nNow Liss is on the root of the tree with the number 1. In one second Liss can perform one of the following actions:  Walk up or down one unit on a tree.  Eat a nut on the top of the current tree.  Jump to the next tree. In this action the height of Liss doesn't change. More formally, when Liss is at height h of the tree i (1 \u2264 i \u2264 n - 1), she jumps to height h of the tree i + 1. This action can't be performed if h > h_{i} + 1. \nCompute the minimal time (in seconds) required to eat all nuts.\n-----Input-----\nThe first line contains an integer n (1  \u2264  n \u2264 10^5) \u2014 the number of trees.\nNext n lines contains the height of trees: i-th line contains an integer h_{i} (1 \u2264 h_{i} \u2264 10^4) \u2014 the height of the tree with the number i.\n-----Output-----\nPrint a single integer \u2014 the minimal time required to eat all nuts in seconds.\n-----Examples-----\nInput\n2\n1\n2\nOutput\n5\nInput\n5\n2\n1\n2\n1\n1\nOutput\n14\n\ndef",
        "answer": "def squirrel_liss(n):\n    h = [0] * n\n    for i in range(n):\n        h[i] = int(input())\n    h.sort()\n    h.reverse()\n    h.append(0)\n    h.reverse()\n    h.append(0)\n    h.reverse()\n    h.append(0)\n    h.reverse()\n    h.append(0)\n    h.reverse()\n    h.append(0)\n    h.reverse()\n    h.append(0)\n    h.reverse()\n    h.append(0)\n    h.reverse()\n    h.append(0)\n    h.reverse()\n    h.append(0)\n    h.reverse()\n    h.append(0)\n    h.reverse()\n    h.append(0)\n    h.reverse()\n    h.append(0)\n    h.reverse()\n    h.append(0)\n    h.reverse()\n    h.append(0)\n    h.reverse()\n    h.append(0)\n    h.reverse()\n    h.append(0)\n    h.reverse()\n    h.append(0)\n    h.reverse()\n    h.append(0)\n    h.reverse()\n    h.append(0)\n    h.reverse()\n    h.append(0)\n    h.reverse()\n    h.append(0)\n    h.reverse()\n    h.append(0)\n    h.reverse()\n    h.append(0)\n    h.reverse()\n    h.append(0)\n    h.reverse()\n    h.append(0)\n    h.reverse()\n    ",
        "difficulty": "interview"
    },
    {
        "task_id": 2431,
        "prompt": "Complete the Python function given the prompt below:The Red Kingdom is attacked by the White King and the Black King!\nThe Kingdom is guarded by $n$ castles, the $i$-th castle is defended by $a_i$ soldiers. To conquer the Red Kingdom, the Kings have to eliminate all the defenders. \nEach day the White King launches an attack on one of the castles. Then, at night, the forces of the Black King attack a castle (possibly the same one). Then the White King attacks a castle, then the Black King, and so on. The first attack is performed by the White King.\nEach attack must target a castle with at least one alive defender in it. There are three types of attacks:\n  a mixed attack decreases the number of defenders in the targeted castle by $x$ (or sets it to $0$ if there are already less than $x$ defenders);  an infantry attack decreases the number of defenders in the targeted castle by $y$ (or sets it to $0$ if there are already less than $y$ defenders);  a cavalry attack decreases the number of defenders in the targeted castle by $z$ (or sets it to $0$ if there are already less than $z$ defenders). \nThe mixed attack can be launched at any valid target (at any castle with at least one soldier). However, the infantry attack cannot be launched if the previous attack on the targeted castle had the same type, no matter when and by whom it was launched. The same applies to the cavalry attack. A castle that was not attacked at all can be targeted by any type of attack.\nThe King who launches the last attack will be glorified as the conqueror of the Red Kingdom, so both Kings want to launch the last attack (and they are wise enough to find a strategy that allows them to do it no matter what are the actions of their opponent, if such strategy exists). The White King is leading his first attack, and you are responsible for planning it. Can you calculate the number of possible options for the first attack that allow the White King to launch the last attack? Each option for the first attack is represented by the targeted castle and the type of attack, and two options are different if the targeted castles or the types of attack are different.\n-----Input-----\nThe first line contains one integer $t$ ($1 \\le t \\le 1000$) \u2014 the number of test cases.\nThen, the test cases follow. Each test case is represented by two lines. \nThe first line contains four integers $n$, $x$, $y$ and $z$ ($1 \\le n \\le 3 \\cdot 10^5$, $1 \\le x, y, z \\le 5$). \nThe second line contains $n$ integers $a_1$, $a_2$,..., $a_n$ ($1 \\le a_i \\le 10^{18}$).\nIt is guaranteed that the sum of values of $n$ over all test cases in the input does not exceed $3 \\cdot 10^5$.\n-----Output-----\nFor each test case, print the answer to it: the number of possible options for the first attack of the White King (or $0$, if the Black King can launch the last attack no matter how the White King acts).\n-----Examples-----\nInput\n3\n2 1 3 4\n7 6\n1 1 2 3\n1\n1 1 2 2\n3\nOutput\n2\n3\n0\nInput\n10\n6 5 4 5\n2 3 2 3 1 3\n1 5 2 3\n10\n4 4 2 3\n8 10 8 5\n2 2 1 4\n8 5\n3 5 3 5\n9 2 10\n4 5 5 5\n2 10 4 2\n2 3 1 4\n1 10\n3 1 5 3\n9 8 7\n2 5 4 5\n8 8\n3 5 1 4\n5 5 10\nOutput\n0\n2\n1\n2\n5\n12\n5\n0\n0\n2\n\ndef",
        "answer": "def get_options(n, x, y, z):\n    options = 0\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                if i!= j and j!= k and i!= k:\n                    if x == 1:\n                        if j == i or j == k:\n                            options += 1\n                    elif x == 2:\n                        if j == i or j == k:\n                            options += 1\n                    elif x == 3:\n                        if j == i or j == k:\n                            options += 1\n                    elif x == 4:\n                        if j == i or j == k:\n                            options += 1\n                    elif x == 5:\n                        if j == i or j == k:\n                            options += 1\n                    elif x == 6:\n                        if j == i or j == k:\n                            options += 1\n                    elif x == 7:\n                        if j == i or j == k:\n                            options += 1\n                    elif x == 8:\n                        if j == i or j == k:\n                            options += 1\n                    elif x == 9:\n                        if j == i or j == k:\n                            options += 1\n                    elif x == 10:\n                        if j == i or j == k:\n                            options += 1\n                    elif x == 11:\n                        if j == i or j == k:\n                            options += 1\n                    elif x == 12:\n                        if j == i or j == k:\n                            options += 1\n                    elif x == 13:\n                        if j == i or j == k:\n                            options += 1\n                    elif x == 14:\n                        if j == i or j == k:\n                            options += 1\n                    elif x ==",
        "difficulty": "interview"
    },
    {
        "task_id": 2432,
        "prompt": "Complete the Python function given the prompt below:-----Input-----\nThe input contains a single integer $a$ ($0 \\le a \\le 63$).\n-----Output-----\nOutput a single number.\n-----Examples-----\nInput\n2\nOutput\n2\nInput\n5\nOutput\n24\nInput\n35\nOutput\n50\n\ndef",
        "answer": "def solution(a):\n    # write your code in Python 3.6\n    if a == 0:\n        return 0\n    elif a == 1:\n        return 1\n    elif a == 2:\n        return 2\n    elif a == 3:\n        return 4\n    elif a == 4:\n        return 5\n    elif a == 5:\n        return 7\n    elif a == 6:\n        return 8\n    elif a == 7:\n        return 9\n    elif a == 8:\n        return 11\n    elif a == 9:\n        return 12\n    elif a == 10:\n        return 14\n    elif a == 11:\n        return 16\n    elif a == 12:\n        return 17\n    elif a == 13:\n        return 19\n    elif a == 14:\n        return 21\n    elif a == 15:\n        return 22\n    elif a == 16:\n        return 24\n    elif a == 17:\n        return 25\n    elif a == 18:\n        return 27\n    elif a == 19:\n        return 28\n    elif a == 20:\n        return 30\n    elif a == 21:\n        return 31\n    elif a == 22:\n        return 33\n    elif a == 23:\n        return 34\n    elif a == 24:\n        return 36\n    elif a == 25:\n        return 37\n    elif a == 26:\n        return 39\n    elif a == 27:\n        return 40\n    elif a == 28:\n        return 42\n    elif a == 29:\n        return 43\n    elif a == 30:\n        return 45\n    elif a == 31:\n        return 46\n    ",
        "difficulty": "interview"
    },
    {
        "task_id": 2433,
        "prompt": "Complete the Python function given the prompt below:There are two types of burgers in your restaurant \u2014 hamburgers and chicken burgers! To assemble a hamburger you need two buns and a beef patty. To assemble a chicken burger you need two buns and a chicken cutlet. \nYou have $b$ buns, $p$ beef patties and $f$ chicken cutlets in your restaurant. You can sell one hamburger for $h$ dollars and one chicken burger for $c$ dollars. Calculate the maximum profit you can achieve.\nYou have to answer $t$ independent queries.\n-----Input-----\nThe first line contains one integer $t$ ($1 \\le t \\le 100$) \u2013 the number of queries.\nThe first line of each query contains three integers $b$, $p$ and $f$ ($1 \\le b, ~p, ~f \\le 100$) \u2014 the number of buns, beef patties and chicken cutlets in your restaurant.\nThe second line of each query contains two integers $h$ and $c$ ($1 \\le h, ~c \\le 100$) \u2014 the hamburger and chicken burger prices in your restaurant.\n-----Output-----\nFor each query print one integer \u2014 the maximum profit you can achieve.\n-----Example-----\nInput\n3\n15 2 3\n5 10\n7 5 2\n10 12\n1 100 100\n100 100\nOutput\n40\n34\n0\n-----Note-----\nIn first query you have to sell two hamburgers and three chicken burgers. Your income is $2 \\cdot 5 + 3 \\cdot 10 = 40$.\nIn second query you have to ell one hamburgers and two chicken burgers. Your income is $1 \\cdot 10 + 2 \\cdot 12 = 34$.\nIn third query you can not create any type of burgers because because you have only one bun. So your income is zero.\n\ndef",
        "answer": "def solve(b, p, f, h, c):\n    return max(b * h + p * c, b * h + p * c + f * c)",
        "difficulty": "interview"
    },
    {
        "task_id": 2434,
        "prompt": "Complete the Python function given the prompt below:You are given two integers $n$ and $m$ ($m < n$). Consider a convex regular polygon of $n$ vertices. Recall that a regular polygon is a polygon that is equiangular (all angles are equal in measure) and equilateral (all sides have the same length). [Image] Examples of convex regular polygons \nYour task is to say if it is possible to build another convex regular polygon with $m$ vertices such that its center coincides with the center of the initial polygon and each of its vertices is some vertex of the initial polygon.\nYou have to answer $t$ independent test cases.\n-----Input-----\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases.\nThe next $t$ lines describe test cases. Each test case is given as two space-separated integers $n$ and $m$ ($3 \\le m < n \\le 100$) \u2014 the number of vertices in the initial polygon and the number of vertices in the polygon you want to build.\n-----Output-----\nFor each test case, print the answer \u2014 \"YES\" (without quotes), if it is possible to build another convex regular polygon with $m$ vertices such that its center coincides with the center of the initial polygon and each of its vertices is some vertex of the initial polygon and \"NO\" otherwise.\n-----Example-----\nInput\n2\n6 3\n7 3\nOutput\nYES\nNO\n-----Note----- $0$ The first test case of the example \nIt can be shown that the answer for the second test case of the example is \"NO\".\n\ndef",
        "answer": "def is_convex(n, m):\n    if m == n:\n        return \"YES\"\n    if m < n:\n        return \"NO\"\n    if m % n == 0:\n        return \"YES\"\n    if m % n == 1:\n        return \"NO\"\n    if m % n == 2:\n        return \"YES\"\n    if m % n == 3:\n        return \"NO\"\n    if m % n == 4:\n        return \"YES\"\n    if m % n == 5:\n        return \"NO\"\n    if m % n == 6:\n        return \"YES\"\n    if m % n == 7:\n        return \"NO\"\n    if m % n == 8:\n        return \"YES\"\n    if m % n == 9:\n        return \"NO\"\n    if m % n == 10:\n        return \"YES\"\n    if m % n == 11:\n        return \"NO\"\n    if m % n == 12:\n        return \"YES\"\n    if m % n == 13:\n        return \"NO\"\n    if m % n == 14:\n        return \"YES\"\n    if m % n == 15:\n        return \"NO\"\n    if m % n == 16:\n        return \"YES\"\n    if m % n == 17:\n        return \"NO\"\n    if m % n == 18:\n        return \"YES\"\n    if m % n == 19:\n        return \"NO\"\n    if m % n == 20:\n        return \"YES\"\n    if m % n == 21:\n        return \"NO\"\n    if m % n == 22:\n        return \"YES\"\n    if m % n == 23:\n        return \"NO\"\n    if m",
        "difficulty": "interview"
    },
    {
        "task_id": 2435,
        "prompt": "Complete the Python function given the prompt below:You are given an array consisting of $n$ integers $a_1$, $a_2$,..., $a_n$. Initially $a_x = 1$, all other elements are equal to $0$.\nYou have to perform $m$ operations. During the $i$-th operation, you choose two indices $c$ and $d$ such that $l_i \\le c, d \\le r_i$, and swap $a_c$ and $a_d$.\nCalculate the number of indices $k$ such that it is possible to choose the operations so that $a_k = 1$ in the end.\n-----Input-----\nThe first line contains a single integer $t$ ($1 \\le t \\le 100$)\u00a0\u2014 the number of test cases. Then the description of $t$ testcases follow.\nThe first line of each test case contains three integers $n$, $x$ and $m$ ($1 \\le n \\le 10^9$; $1 \\le m \\le 100$; $1 \\le x \\le n$).\nEach of next $m$ lines contains the descriptions of the operations; the $i$-th line contains two integers $l_i$ and $r_i$ ($1 \\le l_i \\le r_i \\le n$).\n-----Output-----\nFor each test case print one integer \u2014 the number of indices $k$ such that it is possible to choose the operations so that $a_k = 1$ in the end.\n-----Example-----\nInput\n3\n6 4 3\n1 6\n2 3\n5 5\n4 1 2\n2 4\n1 2\n3 3 2\n2 3\n1 2\nOutput\n6\n2\n3\n-----Note-----\nIn the first test case, it is possible to achieve $a_k = 1$ for every $k$. To do so, you may use the following operations:  swap $a_k$ and $a_4$;  swap $a_2$ and $a_2$;  swap $a_5$ and $a_5$. \nIn the second test case, only $k = 1$ and $k = 2$ are possible answers. To achieve $a_1 = 1$, you have to swap $a_1$ and $a_1$ during the second operation. To achieve $a_2 = 1$, you have to swap $a_1$ and $a_2$ during the second operation.\n\ndef",
        "answer": "def swap(a, b):\n    a, b = b, a\n    return a, b",
        "difficulty": "interview"
    },
    {
        "task_id": 2436,
        "prompt": "Complete the Python function given the prompt below:Maria is the most active old lady in her house. She was tired of sitting at home. She decided to organize a ceremony against the coronavirus.\nShe has $n$ friends who are also grannies (Maria is not included in this number). The $i$-th granny is ready to attend the ceremony, provided that at the time of her appearance in the courtyard there will be at least $a_i$ other grannies there. Note that grannies can come into the courtyard at the same time. Formally, the granny $i$ agrees to come if the number of other grannies who came earlier or at the same time with her is greater than or equal to $a_i$.\nGrannies gather in the courtyard like that.  Initially, only Maria is in the courtyard (that is, the initial number of grannies in the courtyard is $1$). All the remaining $n$ grannies are still sitting at home. On each step Maria selects a subset of grannies, none of whom have yet to enter the courtyard. She promises each of them that at the time of her appearance there will be at least $a_i$ other grannies (including Maria) in the courtyard. Maria can call several grannies at once. In this case, the selected grannies will go out into the courtyard at the same moment of time. She cannot deceive grannies, that is, the situation when the $i$-th granny in the moment of appearing in the courtyard, finds that now there are strictly less than $a_i$ other grannies (except herself, but including Maria), is prohibited. Please note that if several grannies appeared in the yard at the same time, then each of them sees others at the time of appearance. \nYour task is to find what maximum number of grannies (including herself) Maria can collect in the courtyard for the ceremony. After all, the more people in one place during quarantine, the more effective the ceremony!\nConsider an example: if $n=6$ and $a=[1,5,4,5,1,9]$, then:  at the first step Maria can call grannies with numbers $1$ and $5$, each of them will see two grannies at the moment of going out into the yard (note that $a_1=1 \\le 2$ and $a_5=1 \\le 2$);  at the second step, Maria can call grannies with numbers $2$, $3$ and $4$, each of them will see five grannies at the moment of going out into the yard (note that $a_2=5 \\le 5$, $a_3=4 \\le 5$ and $a_4=5 \\le 5$);  the $6$-th granny cannot be called into the yard \u00a0\u2014 therefore, the answer is $6$ (Maria herself and another $5$ grannies). \n-----Input-----\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases in the input. Then test cases follow.\nThe first line of a test case contains a single integer $n$ ($1 \\le n \\le 10^5$) \u2014 the number of grannies (Maria is not included in this number).\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 2\\cdot10^5$).\nIt is guaranteed that the sum of the values $n$ over all test cases of the input does not exceed $10^5$.\n-----Output-----\nFor each test case, print a single integer $k$ ($1 \\le k \\le n + 1$) \u2014 the maximum possible number of grannies in the courtyard.\n-----Example-----\nInput\n4\n5\n1 1 2 2 1\n6\n2 3 4 5 6 7\n6\n1 5 4 5 1 9\n5\n1 2 3 5 6\nOutput\n6\n1\n6\n4\n-----Note-----\nIn the first test case in the example, on the first step Maria can call all the grannies. Then each of them will see five grannies when they come out. Therefore, Maria and five other grannies will be in the yard.\nIn the second test case in the example, no one can be in the yard, so Maria will remain there alone.\nThe third test case in the example is described in the details above.\nIn the fourth test case in the example, on the first step Maria can call grannies with numbers $1$, $2$ and $3$. If on the second step Maria calls $4$ or $5$ (one of them), then when a granny appears in the yard, she will see only four grannies (but it is forbidden). It means that Maria can't call the $4$-th granny or the $5$-th granny separately (one of them). If she calls both: $4$ and $5$, then when they appear, they will see $4+1=5$ grannies. Despite the fact that it is enough for the $4$-th granny, the $5$-th granny is not satisfied. So, Maria cannot call both the $4$-th granny and the $5$-th granny at the same time. That is, Maria and three grannies from the first step will be in the yard in total.\n\ndef",
        "answer": "def grannies(n, a):\n    a.sort()\n    count = 0\n    for i in range(n):\n        if a[i] > i + 1:\n            count += a[i] - (i + 1)\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 2437,
        "prompt": "Complete the Python function given the prompt below:Kuroni is very angry at the other setters for using him as a theme! As a punishment, he forced them to solve the following problem:\nYou have an array $a$ consisting of $n$ positive integers. An operation consists of choosing an element and either adding $1$ to it or subtracting $1$ from it, such that the element remains positive. We say the array is good if the greatest common divisor of all its elements is not $1$. Find the minimum number of operations needed to make the array good.\nUnable to match Kuroni's intellect, the setters failed to solve the problem. Help them escape from Kuroni's punishment!\n-----Input-----\nThe first line contains an integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$) \u00a0\u2014 the number of elements in the array.\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$. ($1 \\le a_i \\le 10^{12}$) \u00a0\u2014 the elements of the array.\n-----Output-----\nPrint a single integer \u00a0\u2014 the minimum number of operations required to make the array good.\n-----Examples-----\nInput\n3\n6 2 4\nOutput\n0\nInput\n5\n9 8 7 3 1\nOutput\n4\n-----Note-----\nIn the first example, the first array is already good, since the greatest common divisor of all the elements is $2$.\nIn the second example, we may apply the following operations:\n  Add $1$ to the second element, making it equal to $9$.  Subtract $1$ from the third element, making it equal to $6$.  Add $1$ to the fifth element, making it equal to $2$.  Add $1$ to the fifth element again, making it equal to $3$. \nThe greatest common divisor of all elements will then be equal to $3$, so the array will be good. It can be shown that no sequence of three or less operations can make the array good.\n\ndef",
        "answer": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)",
        "difficulty": "interview"
    },
    {
        "task_id": 2438,
        "prompt": "Complete the Python function given the prompt below:The string $t_1t_2 \\dots t_k$ is good if each letter of this string belongs to at least one palindrome of length greater than 1.\nA palindrome is a string that reads the same backward as forward. For example, the strings A, BAB, ABBA, BAABBBAAB are palindromes, but the strings AB, ABBBAA, BBBA are not.\nHere are some examples of good strings:   $t$ = AABBB (letters $t_1$, $t_2$ belong to palindrome $t_1 \\dots t_2$ and letters $t_3$, $t_4$, $t_5$ belong to palindrome $t_3 \\dots t_5$);  $t$ = ABAA (letters $t_1$, $t_2$, $t_3$ belong to palindrome $t_1 \\dots t_3$ and letter $t_4$ belongs to palindrome $t_3 \\dots t_4$);  $t$ = AAAAA (all letters belong to palindrome $t_1 \\dots t_5$); \nYou are given a string $s$ of length $n$, consisting of only letters A and B.\nYou have to calculate the number of good substrings of string $s$.\n-----Input-----\nThe first line contains one integer $n$ ($1 \\le n \\le 3 \\cdot 10^5$) \u2014 the length of the string $s$.\nThe second line contains the string $s$, consisting of letters A and B.\n-----Output-----\nPrint one integer \u2014 the number of good substrings of string $s$.\n-----Examples-----\nInput\n5\nAABBB\nOutput\n6\nInput\n3\nAAA\nOutput\n3\nInput\n7\nAAABABB\nOutput\n15\n-----Note-----\nIn the first test case there are six good substrings: $s_1 \\dots s_2$, $s_1 \\dots s_4$, $s_1 \\dots s_5$, $s_3 \\dots s_4$, $s_3 \\dots s_5$ and $s_4 \\dots s_5$.\nIn the second test case there are three good substrings: $s_1 \\dots s_2$, $s_1 \\dots s_3$ and $s_2 \\dots s_3$.\n\ndef",
        "answer": "def is_palindrome(s):\n    return s == s[::-1]",
        "difficulty": "interview"
    },
    {
        "task_id": 2439,
        "prompt": "Complete the Python function given the prompt below:You are given an array of $n$ integers $a_1,a_2,\\dots,a_n$.\nYou have to create an array of $n$ integers $b_1,b_2,\\dots,b_n$ such that:   The array $b$ is a rearrangement of the array $a$, that is, it contains the same values and each value appears the same number of times in the two arrays. In other words, the multisets $\\{a_1,a_2,\\dots,a_n\\}$ and $\\{b_1,b_2,\\dots,b_n\\}$ are equal.\nFor example, if $a=[1,-1,0,1]$, then $b=[-1,1,1,0]$ and $b=[0,1,-1,1]$ are rearrangements of $a$, but $b=[1,-1,-1,0]$ and $b=[1,0,2,-3]$ are not rearrangements of $a$.  For all $k=1,2,\\dots,n$ the sum of the first $k$ elements of $b$ is nonzero. Formally, for all $k=1,2,\\dots,n$, it must hold $$b_1+b_2+\\cdots+b_k\\not=0\\,.$$ \nIf an array $b_1,b_2,\\dots, b_n$ with the required properties does not exist, you have to print NO.\n-----Input-----\nEach test contains multiple test cases. The first line contains an integer $t$ ($1\\le t \\le 1000$) \u2014 the number of test cases. The description of the test cases follows.\nThe first line of each testcase contains one integer $n$ ($1\\le n\\le 50$) \u00a0\u2014 the length of the array $a$.\nThe second line of each testcase contains $n$ integers $a_1,a_2,\\dots, a_n$ ($-50\\le a_i\\le 50$) \u00a0\u2014 the elements of $a$.\n-----Output-----\nFor each testcase, if there is not an array $b_1,b_2,\\dots,b_n$ with the required properties, print a single line with the word NO.\nOtherwise print a line with the word YES, followed by a line with the $n$ integers $b_1,b_2,\\dots,b_n$. \nIf there is more than one array $b_1,b_2,\\dots,b_n$ satisfying the required properties, you can print any of them.\n-----Example-----\nInput\n4\n4\n1 -2 3 -4\n3\n0 0 0\n5\n1 -1 1 -1 1\n6\n40 -31 -9 0 13 -40\nOutput\nYES\n1 -2 3 -4\nNO\nYES\n1 1 -1 1 -1\nYES\n-40 13 40 0 -9 -31\n-----Note-----\nExplanation of the first testcase: An array with the desired properties is $b=[1,-2,3,-4]$. For this array, it holds:   The first element of $b$ is $1$.  The sum of the first two elements of $b$ is $-1$.  The sum of the first three elements of $b$ is $2$.  The sum of the first four elements of $b$ is $-2$. \nExplanation of the second testcase: Since all values in $a$ are $0$, any rearrangement $b$ of $a$ will have all elements equal to $0$ and therefore it clearly cannot satisfy the second property described in the statement (for example because $b_1=0$). Hence in this case the answer is NO.\nExplanation of the third testcase: An array with the desired properties is $b=[1, 1, -1, 1, -1]$. For this array, it holds:   The first element of $b$ is $1$.  The sum of the first two elements of $b$ is $2$.  The sum of the first three elements of $b$ is $1$.  The sum of the first four elements of $b$ is $2$.  The sum of the first five elements of $b$ is $1$. \nExplanation of the fourth testcase: An array with the desired properties is $b=[-40,13,40,0,-9,-31]$. For this array, it holds:   The first element of $b$ is $-40$.  The sum of the first two elements of $b$ is $-27$.  The sum of the first three elements of $b$ is $13$.  The sum of the first four elements of $b$ is $13$.  The sum of the first five elements of $b$ is $4$.  The sum of the first six elements of $b$ is $-27$.\n\ndef",
        "answer": "def rearrange(a):\n    n = len(a)\n    b = [0] * n\n    for i in range(n):\n        b[a[i] % n] += 1\n    for i in range(1, n):\n        if b[i]!= b[0]:\n            return False\n    return True",
        "difficulty": "interview"
    },
    {
        "task_id": 2440,
        "prompt": "Complete the Python function given the prompt below:Gildong was hiking a mountain, walking by millions of trees. Inspired by them, he suddenly came up with an interesting idea for trees in data structures: What if we add another edge in a tree?\nThen he found that such tree-like graphs are called 1-trees. Since Gildong was bored of solving too many tree problems, he wanted to see if similar techniques in trees can be used in 1-trees as well. Instead of solving it by himself, he's going to test you by providing queries on 1-trees.\nFirst, he'll provide you a tree (not 1-tree) with $n$ vertices, then he will ask you $q$ queries. Each query contains $5$ integers: $x$, $y$, $a$, $b$, and $k$. This means you're asked to determine if there exists a path from vertex $a$ to $b$ that contains exactly $k$ edges after adding a bidirectional edge between vertices $x$ and $y$. A path can contain the same vertices and same edges multiple times. All queries are independent of each other; i.e. the added edge in a query is removed in the next query.\n-----Input-----\nThe first line contains an integer $n$ ($3 \\le n \\le 10^5$), the number of vertices of the tree.\nNext $n-1$ lines contain two integers $u$ and $v$ ($1 \\le u,v \\le n$, $u \\ne v$) each, which means there is an edge between vertex $u$ and $v$. All edges are bidirectional and distinct.\nNext line contains an integer $q$ ($1 \\le q \\le 10^5$), the number of queries Gildong wants to ask.\nNext $q$ lines contain five integers $x$, $y$, $a$, $b$, and $k$ each ($1 \\le x,y,a,b \\le n$, $x \\ne y$, $1 \\le k \\le 10^9$) \u2013 the integers explained in the description. It is guaranteed that the edge between $x$ and $y$ does not exist in the original tree.\n-----Output-----\nFor each query, print \"YES\" if there exists a path that contains exactly $k$ edges from vertex $a$ to $b$ after adding an edge between vertices $x$ and $y$. Otherwise, print \"NO\".\nYou can print each letter in any case (upper or lower).\n-----Example-----\nInput\n5\n1 2\n2 3\n3 4\n4 5\n5\n1 3 1 2 2\n1 4 1 3 2\n1 4 1 3 3\n4 2 3 3 9\n5 2 3 3 9\nOutput\nYES\nYES\nNO\nYES\nNO\n-----Note-----\nThe image below describes the tree (circles and solid lines) and the added edges for each query (dotted lines). [Image] \nPossible paths for the queries with \"YES\" answers are:   $1$-st query: $1$ \u2013 $3$ \u2013 $2$  $2$-nd query: $1$ \u2013 $2$ \u2013 $3$  $4$-th query: $3$ \u2013 $4$ \u2013 $2$ \u2013 $3$ \u2013 $4$ \u2013 $2$ \u2013 $3$ \u2013 $4$ \u2013 $2$ \u2013 $3$\n\ndef",
        "answer": "def dfs(graph, start, end, path=[]):\n    path = path + [start]\n    if start == end:\n        return path\n    for node in graph[start]:\n        if node not in path:\n            newpath = dfs(graph, node, end, path)\n            if newpath: return newpath\n    return None",
        "difficulty": "interview"
    },
    {
        "task_id": 2441,
        "prompt": "Complete the Python function given the prompt below:Your city has n junctions. There are m one-way roads between the junctions. As a mayor of the city, you have to ensure the security of all the junctions.\nTo ensure the security, you have to build some police checkposts. Checkposts can only be built in a junction. A checkpost at junction i can protect junction j if either i = j or the police patrol car can go to j from i and then come back to i.\nBuilding checkposts costs some money. As some areas of the city are more expensive than others, building checkpost at some junctions might cost more money than other junctions.\nYou have to determine the minimum possible money needed to ensure the security of all the junctions. Also you have to find the number of ways to ensure the security in minimum price and in addition in minimum number of checkposts. Two ways are different if any of the junctions contains a checkpost in one of them and do not contain in the other.\n-----Input-----\nIn the first line, you will be given an integer n, number of junctions (1 \u2264 n \u2264 10^5). In the next line, n space-separated integers will be given. The i^{th} integer is the cost of building checkpost at the i^{th} junction (costs will be non-negative and will not exceed 10^9).\nThe next line will contain an integer m\u00a0(0 \u2264 m \u2264 3\u00b710^5). And each of the next m lines contains two integers u_{i} and v_{i}\u00a0(1 \u2264 u_{i}, v_{i} \u2264 n;\u00a0u \u2260 v). A pair u_{i}, v_{i} means, that there is a one-way road which goes from u_{i} to v_{i}. There will not be more than one road between two nodes in the same direction.\n-----Output-----\nPrint two integers separated by spaces. The first one is the minimum possible money needed to ensure the security of all the junctions. And the second one is the number of ways you can ensure the security modulo 1000000007 (10^9 + 7).\n-----Examples-----\nInput\n3\n1 2 3\n3\n1 2\n2 3\n3 2\nOutput\n3 1\nInput\n5\n2 8 0 6 0\n6\n1 4\n1 3\n2 4\n3 4\n4 5\n5 1\nOutput\n8 2\nInput\n10\n1 3 2 2 1 3 1 4 10 10\n12\n1 2\n2 3\n3 1\n3 4\n4 5\n5 6\n5 7\n6 4\n7 3\n8 9\n9 10\n10 9\nOutput\n15 6\nInput\n2\n7 91\n2\n1 2\n2 1\nOutput\n7 1\n\ndef",
        "answer": "def solve(n, roads):\n    roads = sorted(roads, key=lambda x: x[1])\n    dp = [0] * n\n    dp[0] = roads[0][0]\n    for i in range(1, n):\n        dp[i] = roads[i][0] + dp[roads[i][1]]\n    return dp",
        "difficulty": "interview"
    },
    {
        "task_id": 2442,
        "prompt": "Complete the Python function given the prompt below:Given a set of integers (it can contain equal elements).\nYou have to split it into two subsets $A$ and $B$ (both of them can contain equal elements or be empty). You have to maximize the value of $mex(A)+mex(B)$.\nHere $mex$ of a set denotes the smallest non-negative integer that doesn't exist in the set. For example:   $mex(\\{1,4,0,2,2,1\\})=3$  $mex(\\{3,3,2,1,3,0,0\\})=4$  $mex(\\varnothing)=0$ ($mex$ for empty set) \nThe set is splitted into two subsets $A$ and $B$ if for any integer number $x$ the number of occurrences of $x$ into this set is equal to the sum of the number of occurrences of $x$ into $A$ and the number of occurrences of $x$ into $B$.\n-----Input-----\nThe input consists of multiple test cases. The first line contains an integer $t$ ($1\\leq t\\leq 100$) \u2014 the number of test cases. The description of the test cases follows.\nThe first line of each test case contains an integer $n$ ($1\\leq n\\leq 100$) \u2014 the size of the set.\nThe second line of each testcase contains $n$ integers $a_1,a_2,\\dots a_n$ ($0\\leq a_i\\leq 100$) \u2014 the numbers in the set.\n-----Output-----\nFor each test case, print the maximum value of $mex(A)+mex(B)$.\n-----Example-----\nInput\n4\n6\n0 2 1 5 0 1\n3\n0 1 2\n4\n0 2 0 1\n6\n1 2 3 4 5 6\nOutput\n5\n3\n4\n0\n-----Note-----\nIn the first test case, $A=\\left\\{0,1,2\\right\\},B=\\left\\{0,1,5\\right\\}$ is a possible choice.\nIn the second test case, $A=\\left\\{0,1,2\\right\\},B=\\varnothing$ is a possible choice.\nIn the third test case, $A=\\left\\{0,1,2\\right\\},B=\\left\\{0\\right\\}$ is a possible choice.\nIn the fourth test case, $A=\\left\\{1,3,5\\right\\},B=\\left\\{2,4,6\\right\\}$ is a possible choice.\n\ndef",
        "answer": "def mex(s):\n    s = list(s)\n    s.sort()\n    mex = 0\n    for i in range(len(s)):\n        if s[i] > mex:\n            mex = s[i]\n    return mex",
        "difficulty": "interview"
    },
    {
        "task_id": 2443,
        "prompt": "Complete the Python function given the prompt below:You are given an integer m, and a list of n distinct integers between 0 and m - 1.\nYou would like to construct a sequence satisfying the properties:  Each element is an integer between 0 and m - 1, inclusive.  All prefix products of the sequence modulo m are distinct.  No prefix product modulo m appears as an element of the input list.  The length of the sequence is maximized. \nConstruct any sequence satisfying the properties above.\n-----Input-----\nThe first line of input contains two integers n and m (0 \u2264 n < m \u2264 200 000)\u00a0\u2014 the number of forbidden prefix products and the modulus.\nIf n is non-zero, the next line of input contains n distinct integers between 0 and m - 1, the forbidden prefix products. If n is zero, this line doesn't exist.\n-----Output-----\nOn the first line, print the number k, denoting the length of your sequence.\nOn the second line, print k space separated integers, denoting your sequence.\n-----Examples-----\nInput\n0 5\nOutput\n5\n1 2 4 3 0\nInput\n3 10\n2 9 1\nOutput\n6\n3 9 2 9 8 0\n-----Note-----\nFor the first case, the prefix products of this sequence modulo m are [1, 2, 3, 4, 0].\nFor the second case, the prefix products of this sequence modulo m are [3, 7, 4, 6, 8, 0].\n\ndef",
        "answer": "def prefix_products(n, m, forbidden):\n    # Write your code here\n    forbidden = set(forbidden)\n    for i in range(n):\n        if i in forbidden:\n            continue\n        for j in range(i):\n            if j in forbidden:\n                continue\n            if (i * j) % m in forbidden:\n                continue\n            forbidden.add(i * j % m)\n    for i in range(n):\n        if i in forbidden:\n            continue\n        print(i, end=\" \")",
        "difficulty": "interview"
    },
    {
        "task_id": 2444,
        "prompt": "Complete the Python function given the prompt below:There are $n$ seats in the train's car and there is exactly one passenger occupying every seat. The seats are numbered from $1$ to $n$ from left to right. The trip is long, so each passenger will become hungry at some moment of time and will go to take boiled water for his noodles. The person at seat $i$ ($1 \\leq i \\leq n$) will decide to go for boiled water at minute $t_i$.\nTank with a boiled water is located to the left of the $1$-st seat. In case too many passengers will go for boiled water simultaneously, they will form a queue, since there can be only one passenger using the tank at each particular moment of time. Each passenger uses the tank for exactly $p$ minutes. We assume that the time it takes passengers to go from their seat to the tank is negligibly small. \nNobody likes to stand in a queue. So when the passenger occupying the $i$-th seat wants to go for a boiled water, he will first take a look on all seats from $1$ to $i - 1$. In case at least one of those seats is empty, he assumes that those people are standing in a queue right now, so he would be better seating for the time being. However, at the very first moment he observes that all seats with numbers smaller than $i$ are busy, he will go to the tank.\nThere is an unspoken rule, that in case at some moment several people can go to the tank, than only the leftmost of them (that is, seating on the seat with smallest number) will go to the tank, while all others will wait for the next moment.\nYour goal is to find for each passenger, when he will receive the boiled water for his noodles.\n-----Input-----\nThe first line contains integers $n$ and $p$ ($1 \\leq n \\leq 100\\,000$, $1 \\leq p \\leq 10^9$)\u00a0\u2014 the number of people and the amount of time one person uses the tank.\nThe second line contains $n$ integers $t_1, t_2, \\dots, t_n$ ($0 \\leq t_i \\leq 10^9$)\u00a0\u2014 the moments when the corresponding passenger will go for the boiled water.\n-----Output-----\nPrint $n$ integers, where $i$-th of them is the time moment the passenger on $i$-th seat will receive his boiled water.\n-----Example-----\nInput\n5 314\n0 310 942 628 0\nOutput\n314 628 1256 942 1570 \n-----Note-----\nConsider the example.\nAt the $0$-th minute there were two passengers willing to go for a water, passenger $1$ and $5$, so the first passenger has gone first, and returned at the $314$-th minute. At this moment the passenger $2$ was already willing to go for the water, so the passenger $2$ has gone next, and so on. In the end, $5$-th passenger was last to receive the boiled water.\n\ndef",
        "answer": "def solution(n, p, t):\n    t.sort()\n    res = [0] * n\n    for i in range(n):\n        for j in range(i):\n            if t[i] >= t[j] and res[j] + p > res[i]:\n                res[i] = res[j] + p\n    return res",
        "difficulty": "interview"
    },
    {
        "task_id": 2445,
        "prompt": "Complete the Python function given the prompt below:One evening Rainbow Dash and Fluttershy have come up with a game. Since the ponies are friends, they have decided not to compete in the game but to pursue a common goal. \nThe game starts on a square flat grid, which initially has the outline borders built up. Rainbow Dash and Fluttershy have flat square blocks with size $1\\times1$, Rainbow Dash has an infinite amount of light blue blocks, Fluttershy has an infinite amount of yellow blocks. \nThe blocks are placed according to the following rule: each newly placed block must touch the built on the previous turns figure by a side (note that the outline borders of the grid are built initially). At each turn, one pony can place any number of blocks of her color according to the game rules.\nRainbow and Fluttershy have found out that they can build patterns on the grid of the game that way. They have decided to start with something simple, so they made up their mind to place the blocks to form a chess coloring. Rainbow Dash is well-known for her speed, so she is interested in the minimum number of turns she and Fluttershy need to do to get a chess coloring, covering the whole grid with blocks. Please help her find that number!\nSince the ponies can play many times on different boards, Rainbow Dash asks you to find the minimum numbers of turns for several grids of the games.\nThe chess coloring in two colors is the one in which each square is neighbor by side only with squares of different colors.\n-----Input-----\nThe first line contains a single integer $T$ ($1 \\le T \\le 100$): the number of grids of the games. \nEach of the next $T$ lines contains a single integer $n$ ($1 \\le n \\le 10^9$): the size of the side of the grid of the game. \n-----Output-----\nFor each grid of the game print the minimum number of turns required to build a chess coloring pattern out of blocks on it.\n-----Example-----\nInput\n2\n3\n4\nOutput\n2\n3\n-----Note-----\nFor $3\\times3$ grid ponies can make two following moves: [Image]\n\ndef",
        "answer": "def chess_coloring(n):\n    return n",
        "difficulty": "interview"
    },
    {
        "task_id": 2446,
        "prompt": "Complete the Python function given the prompt below:Given a sequence of integers a_1,..., a_{n} and q queries x_1,..., x_{q} on it. For each query x_{i} you have to count the number of pairs (l, r) such that 1 \u2264 l \u2264 r \u2264 n and gcd(a_{l}, a_{l} + 1,..., a_{r}) = x_{i}.\n$\\operatorname{gcd}(v_{1}, v_{2}, \\ldots, v_{n})$ is a greatest common divisor of v_1, v_2,..., v_{n}, that is equal to a largest positive integer that divides all v_{i}.\n-----Input-----\nThe first line of the input contains integer n, (1 \u2264 n \u2264 10^5), denoting the length of the sequence. The next line contains n space separated integers a_1,..., a_{n}, (1 \u2264 a_{i} \u2264 10^9).\nThe third line of the input contains integer q, (1 \u2264 q \u2264 3 \u00d7 10^5), denoting the number of queries. Then follows q lines, each contain an integer x_{i}, (1 \u2264 x_{i} \u2264 10^9).\n-----Output-----\nFor each query print the result in a separate line.\n-----Examples-----\nInput\n3\n2 6 3\n5\n1\n2\n3\n4\n6\nOutput\n1\n2\n2\n0\n1\nInput\n7\n10 20 3 15 1000 60 16\n10\n1\n2\n3\n4\n5\n6\n10\n20\n60\n1000\nOutput\n14\n0\n2\n2\n2\n0\n2\n2\n1\n1\n\ndef",
        "answer": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)",
        "difficulty": "interview"
    },
    {
        "task_id": 2447,
        "prompt": "Complete the Python function given the prompt below:Shubham has a binary string $s$. A binary string is a string containing only characters \"0\" and \"1\".\nHe can perform the following operation on the string any amount of times:   Select an index of the string, and flip the character at that index. This means, if the character was \"0\", it becomes \"1\", and vice versa. \nA string is called good if it does not contain \"010\" or \"101\" as a subsequence \u00a0\u2014 for instance, \"1001\" contains \"101\" as a subsequence, hence it is not a good string, while \"1000\" doesn't contain neither \"010\" nor \"101\" as subsequences, so it is a good string.\nWhat is the minimum number of operations he will have to perform, so that the string becomes good? It can be shown that with these operations we can make any string good.\nA string $a$ is a subsequence of a string $b$ if $a$ can be obtained from $b$ by deletion of several (possibly, zero or all) characters.\n-----Input-----\nThe first line of the input contains a single integer $t$ $(1\\le t \\le 100)$\u00a0\u2014 the number of test cases.\nEach of the next $t$ lines contains a binary string $s$ $(1 \\le |s| \\le 1000)$.\n-----Output-----\nFor every string, output the minimum number of operations required to make it good.\n-----Example-----\nInput\n7\n001\n100\n101\n010\n0\n1\n001100\nOutput\n0\n0\n1\n1\n0\n0\n2\n-----Note-----\nIn test cases $1$, $2$, $5$, $6$ no operations are required since they are already good strings.\nFor the $3$rd test case: \"001\" can be achieved by flipping the first character \u00a0\u2014 and is one of the possible ways to get a good string.\nFor the $4$th test case: \"000\" can be achieved by flipping the second character \u00a0\u2014 and is one of the possible ways to get a good string.\nFor the $7$th test case: \"000000\" can be achieved by flipping the third and fourth characters \u00a0\u2014 and is one of the possible ways to get a good string.\n\ndef",
        "answer": "def flip(s,i):\n    if s[i]=='0':\n        s[i]='1'\n    else:\n        s[i]='0'\n    return s",
        "difficulty": "interview"
    },
    {
        "task_id": 2448,
        "prompt": "Complete the Python function given the prompt below:Let $n$ be a positive integer. Let $a, b, c$ be nonnegative integers such that $a + b + c = n$.\nAlice and Bob are gonna play rock-paper-scissors $n$ times. Alice knows the sequences of hands that Bob will play. However, Alice has to play rock $a$ times, paper $b$ times, and scissors $c$ times.\nAlice wins if she beats Bob in at least $\\lceil \\frac{n}{2} \\rceil$ ($\\frac{n}{2}$ rounded up to the nearest integer) hands, otherwise Alice loses.\nNote that in rock-paper-scissors:\n  rock beats scissors;  paper beats rock;  scissors beat paper. \nThe task is, given the sequence of hands that Bob will play, and the numbers $a, b, c$, determine whether or not Alice can win. And if so, find any possible sequence of hands that Alice can use to win.\nIf there are multiple answers, print any of them.\n-----Input-----\nThe first line contains a single integer $t$ ($1 \\le t \\le 100$) \u2014 the number of test cases.\nThen, $t$ testcases follow, each consisting of three lines:   The first line contains a single integer $n$ ($1 \\le n \\le 100$).  The second line contains three integers, $a, b, c$ ($0 \\le a, b, c \\le n$). It is guaranteed that $a + b + c = n$.  The third line contains a string $s$ of length $n$. $s$ is made up of only 'R', 'P', and 'S'. The $i$-th character is 'R' if for his $i$-th Bob plays rock, 'P' if paper, and 'S' if scissors. \n-----Output-----\nFor each testcase:   If Alice cannot win, print \"NO\" (without the quotes).  Otherwise, print \"YES\" (without the quotes). Also, print a string $t$ of length $n$ made up of only 'R', 'P', and 'S' \u2014 a sequence of hands that Alice can use to win. $t$ must contain exactly $a$ 'R's, $b$ 'P's, and $c$ 'S's.  If there are multiple answers, print any of them. \nThe \"YES\" / \"NO\" part of the output is case-insensitive (i.e. \"yEs\", \"no\" or \"YEs\" are all valid answers). Note that 'R', 'P' and 'S' are case-sensitive.\n-----Example-----\nInput\n2\n3\n1 1 1\nRPS\n3\n3 0 0\nRPS\nOutput\nYES\nPSR\nNO\n-----Note-----\nIn the first testcase, in the first hand, Alice plays paper and Bob plays rock, so Alice beats Bob. In the second hand, Alice plays scissors and Bob plays paper, so Alice beats Bob. In the third hand, Alice plays rock and Bob plays scissors, so Alice beats Bob. Alice beat Bob 3 times, and $3 \\ge \\lceil \\frac{3}{2} \\rceil = 2$, so Alice wins.\nIn the second testcase, the only sequence of hands that Alice can play is \"RRR\". Alice beats Bob only in the last hand, so Alice can't win. $1 < \\lceil \\frac{3}{2} \\rceil = 2$.\n\ndef",
        "answer": "def rock_paper_scissors(n, a, b, c, s):\n    if n % 2 == 0:\n        return \"NO\"\n    else:\n        if a == 0:\n            if s[0] == \"R\":\n                return \"YES\"\n            else:\n                return \"NO\"\n        elif b == 0:\n            if s[0] == \"P\":\n                return \"YES\"\n            else:\n                return \"NO\"\n        elif c == 0:\n            if s[0] == \"S\":\n                return \"YES\"\n            else:\n                return \"NO\"\n        else:\n            if s[0] == \"R\":\n                return \"YES\"\n            elif s[0] == \"P\":\n                return \"NO\"\n            else:\n                return \"YES\"",
        "difficulty": "interview"
    },
    {
        "task_id": 2449,
        "prompt": "Complete the Python function given the prompt below:You are given an integer m.\nLet M = 2^{m} - 1.\nYou are also given a set of n integers denoted as the set T. The integers will be provided in base 2 as n binary strings of length m.\nA set of integers S is called \"good\" if the following hold.   If $a \\in S$, then [Image].  If $a, b \\in S$, then $a \\text{AND} b \\in S$  $T \\subseteq S$  All elements of S are less than or equal to M. \nHere, $XOR$ and $\\text{AND}$ refer to the bitwise XOR and bitwise AND operators, respectively.\nCount the number of good sets S, modulo 10^9 + 7.\n-----Input-----\nThe first line will contain two integers m and n (1 \u2264 m \u2264 1 000, 1 \u2264 n \u2264 min(2^{m}, 50)).\nThe next n lines will contain the elements of T. Each line will contain exactly m zeros and ones. Elements of T will be distinct.\n-----Output-----\nPrint a single integer, the number of good sets modulo 10^9 + 7. \n-----Examples-----\nInput\n5 3\n11010\n00101\n11000\nOutput\n4\nInput\n30 2\n010101010101010010101010101010\n110110110110110011011011011011\nOutput\n860616440\n-----Note-----\nAn example of a valid set S is {00000, 00101, 00010, 00111, 11000, 11010, 11101, 11111}.\n\ndef",
        "answer": "def countGoodSets(m, n):\n    # Write your code here\n    M = 2**m - 1\n    count = 0\n    for i in range(n):\n        s = 0\n        for j in range(m):\n            s = (s << 1) | int(input())\n        if s <= M:\n            count += 1\n    return count % (10**9 + 7)\n",
        "difficulty": "interview"
    },
    {
        "task_id": 2450,
        "prompt": "Complete the Python function given the prompt below:You might have remembered Theatre square from the problem 1A. Now it's finally getting repaved.\nThe square still has a rectangular shape of $n \\times m$ meters. However, the picture is about to get more complicated now. Let $a_{i,j}$ be the $j$-th square in the $i$-th row of the pavement.\nYou are given the picture of the squares:  if $a_{i,j} = $ \"*\", then the $j$-th square in the $i$-th row should be black;  if $a_{i,j} = $ \".\", then the $j$-th square in the $i$-th row should be white. \nThe black squares are paved already. You have to pave the white squares. There are two options for pavement tiles:  $1 \\times 1$ tiles\u00a0\u2014 each tile costs $x$ burles and covers exactly $1$ square;  $1 \\times 2$ tiles\u00a0\u2014 each tile costs $y$ burles and covers exactly $2$ adjacent squares of the same row. Note that you are not allowed to rotate these tiles or cut them into $1 \\times 1$ tiles. \nYou should cover all the white squares, no two tiles should overlap and no black squares should be covered by tiles.\nWhat is the smallest total price of the tiles needed to cover all the white squares?\n-----Input-----\nThe first line contains a single integer $t$ ($1 \\le t \\le 500$)\u00a0\u2014 the number of testcases. Then the description of $t$ testcases follow.\nThe first line of each testcase contains four integers $n$, $m$, $x$ and $y$ ($1 \\le n \\le 100$; $1 \\le m \\le 1000$; $1 \\le x, y \\le 1000$)\u00a0\u2014 the size of the Theatre square, the price of the $1 \\times 1$ tile and the price of the $1 \\times 2$ tile.\nEach of the next $n$ lines contains $m$ characters. The $j$-th character in the $i$-th line is $a_{i,j}$. If $a_{i,j} = $ \"*\", then the $j$-th square in the $i$-th row should be black, and if $a_{i,j} = $ \".\", then the $j$-th square in the $i$-th row should be white.\nIt's guaranteed that the sum of $n \\times m$ over all testcases doesn't exceed $10^5$.\n-----Output-----\nFor each testcase print a single integer\u00a0\u2014 the smallest total price of the tiles needed to cover all the white squares in burles.\n-----Example-----\nInput\n4\n1 1 10 1\n.\n1 2 10 1\n..\n2 1 10 1\n.\n.\n3 3 3 7\n..*\n*..\n.*.\nOutput\n10\n1\n20\n18\n-----Note-----\nIn the first testcase you are required to use a single $1 \\times 1$ tile, even though $1 \\times 2$ tile is cheaper. So the total price is $10$ burles.\nIn the second testcase you can either use two $1 \\times 1$ tiles and spend $20$ burles or use a single $1 \\times 2$ tile and spend $1$ burle. The second option is cheaper, thus the answer is $1$.\nThe third testcase shows that you can't rotate $1 \\times 2$ tiles. You still have to use two $1 \\times 1$ tiles for the total price of $20$.\nIn the fourth testcase the cheapest way is to use $1 \\times 1$ tiles everywhere. The total cost is $6 \\cdot 3 = 18$.\n\ndef",
        "answer": "def Theatre(n, m, x, y):\n    if n == 1:\n        return x\n    if m == 1:\n        return y\n    return min(Theatre(n - 1, m, x, y) + x, Theatre(n, m - 1, x, y) + y)",
        "difficulty": "interview"
    },
    {
        "task_id": 2451,
        "prompt": "Complete the Python function given the prompt below:You are looking at the floor plan of the Summer Informatics School's new building. You were tasked with SIS logistics, so you really care about travel time between different locations: it is important to know how long it would take to get from the lecture room to the canteen, or from the gym to the server room.\nThe building consists of n towers, h floors each, where the towers are labeled from 1 to n, the floors are labeled from 1 to h. There is a passage between any two adjacent towers (two towers i and i + 1 for all i: 1 \u2264 i \u2264 n - 1) on every floor x, where a \u2264 x \u2264 b. It takes exactly one minute to walk between any two adjacent floors of a tower, as well as between any two adjacent towers, provided that there is a passage on that floor. It is not permitted to leave the building.\n [Image]\nThe picture illustrates the first example. \nYou have given k pairs of locations (t_{a}, f_{a}), (t_{b}, f_{b}): floor f_{a} of tower t_{a} and floor f_{b} of tower t_{b}. For each pair you need to determine the minimum walking time between these locations.\n-----Input-----\nThe first line of the input contains following integers:\n  n: the number of towers in the building (1 \u2264 n \u2264 10^8),  h: the number of floors in each tower (1 \u2264 h \u2264 10^8),  a and b: the lowest and highest floor where it's possible to move between adjacent towers (1 \u2264 a \u2264 b \u2264 h),  k: total number of queries (1 \u2264 k \u2264 10^4). \nNext k lines contain description of the queries. Each description consists of four integers t_{a}, f_{a}, t_{b}, f_{b} (1 \u2264 t_{a}, t_{b} \u2264 n, 1 \u2264 f_{a}, f_{b} \u2264 h). This corresponds to a query to find the minimum travel time between f_{a}-th floor of the t_{a}-th tower and f_{b}-th floor of the t_{b}-th tower.\n-----Output-----\nFor each query print a single integer: the minimum walking time between the locations in minutes.\n-----Example-----\nInput\n3 6 2 3 3\n1 2 1 3\n1 4 3 4\n1 2 2 3\nOutput\n1\n4\n2\n\ndef",
        "answer": "def min_time(n, h, a, b, queries):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2452,
        "prompt": "Complete the Python function given the prompt below:A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array) and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\nFor a positive integer $n$, we call a permutation $p$ of length $n$ good if the following condition holds for every pair $i$ and $j$ ($1 \\le i \\le j \\le n$)\u00a0\u2014   $(p_i \\text{ OR } p_{i+1} \\text{ OR } \\ldots \\text{ OR } p_{j-1} \\text{ OR } p_{j}) \\ge j-i+1$, where $\\text{OR}$ denotes the bitwise OR operation. \nIn other words, a permutation $p$ is good if for every subarray of $p$, the $\\text{OR}$ of all elements in it is not less than the number of elements in that subarray. \nGiven a positive integer $n$, output any good permutation of length $n$. We can show that for the given constraints such a permutation always exists.\n-----Input-----\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 100$). Description of the test cases follows.\nThe first and only line of every test case contains a single integer $n$ ($1 \\le n \\le 100$).\n-----Output-----\nFor every test, output any good permutation of length $n$ on a separate line. \n-----Example-----\nInput\n3\n1\n3\n7\nOutput\n1\n3 1 2\n4 3 5 2 7 1 6\n-----Note-----\nFor $n = 3$, $[3,1,2]$ is a good permutation. Some of the subarrays are listed below.   $3\\text{ OR }1 = 3 \\geq 2$ $(i = 1,j = 2)$  $3\\text{ OR }1\\text{ OR }2 = 3 \\geq 3$ $(i = 1,j = 3)$  $1\\text{ OR }2 = 3 \\geq 2$ $(i = 2,j = 3)$  $1 \\geq 1$ $(i = 2,j = 2)$ \nSimilarly, you can verify that $[4,3,5,2,7,1,6]$ is also good.\n\ndef",
        "answer": "def good_permutation(n):\n    # Write your code here\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1,2,3]\n    if n == 3:\n        return [1,3,2]\n    if n == 4:\n        return [1,4,3,2]\n    if n == 5:\n        return [1,5,4,3,2]\n    if n == 6:\n        return [1,6,5,4,3,2]\n    if n == 7:\n        return [1,7,6,5,4,3,2]\n    if n == 8:\n        return [1,8,7,6,5,4,3,2]\n    if n == 9:\n        return [1,9,8,7,6,5,4,3,2]\n    if n == 10:\n        return [1,10,9,8,7,6,5,4,3,2]\n    if n == 11:\n        return [1,11,10,9,8,7,6,5,4,3,2]\n    if n == 12:\n        return [1,12,11,10,9,8,7,6,5,4,3,2]\n    if n == 13:\n        return [1,13,12,11,10,9,8,7,6,5,4,3,2]\n    if n == 14:\n        return [1,14,13,12,11,10,9,8,7,6,5,4,3,2]\n    if n == 15:\n        return [1,15,14,13,12",
        "difficulty": "interview"
    },
    {
        "task_id": 2453,
        "prompt": "Complete the Python function given the prompt below:You are given $n$ segments on a coordinate line; each endpoint of every segment has integer coordinates. Some segments can degenerate to points. Segments can intersect with each other, be nested in each other or even coincide.\nYour task is the following: for every $k \\in [1..n]$, calculate the number of points with integer coordinates such that the number of segments that cover these points equals $k$. A segment with endpoints $l_i$ and $r_i$ covers point $x$ if and only if $l_i \\le x \\le r_i$.\n-----Input-----\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of segments.\nThe next $n$ lines contain segments. The $i$-th line contains a pair of integers $l_i, r_i$ ($0 \\le l_i \\le r_i \\le 10^{18}$) \u2014 the endpoints of the $i$-th segment.\n-----Output-----\nPrint $n$ space separated integers $cnt_1, cnt_2, \\dots, cnt_n$, where $cnt_i$ is equal to the number of points such that the number of segments that cover these points equals to $i$.\n-----Examples-----\nInput\n3\n0 3\n1 3\n3 8\nOutput\n6 2 1 \nInput\n3\n1 3\n2 4\n5 7\nOutput\n5 2 0 \n-----Note-----\nThe picture describing the first example:\n[Image]\nPoints with coordinates $[0, 4, 5, 6, 7, 8]$ are covered by one segment, points $[1, 2]$ are covered by two segments and point $[3]$ is covered by three segments.\nThe picture describing the second example:\n[Image]\nPoints $[1, 4, 5, 6, 7]$ are covered by one segment, points $[2, 3]$ are covered by two segments and there are no points covered by three segments.\n\ndef",
        "answer": "def cover(segments):\n    segments.sort(key=lambda x: x[1])\n    points = [segments[0][1]]\n    for i in range(1, len(segments)):\n        if segments[i][0] > points[-1]:\n            points.append(segments[i][1])\n    return len(points)",
        "difficulty": "interview"
    },
    {
        "task_id": 2454,
        "prompt": "Complete the Python function given the prompt below:John has just bought a new car and is planning a journey around the country. Country has N cities, some of which are connected by bidirectional roads. There are N - 1 roads and every city is reachable from any other city. Cities are labeled from 1 to N.\nJohn first has to select from which city he will start his journey. After that, he spends one day in a city and then travels to a randomly choosen city which is directly connected to his current one and which he has not yet visited. He does this until he can't continue obeying these rules.\nTo select the starting city, he calls his friend Jack for advice. Jack is also starting a big casino business and wants to open casinos in some of the cities (max 1 per city, maybe nowhere). Jack knows John well and he knows that if he visits a city with a casino, he will gamble exactly once before continuing his journey.\nHe also knows that if John enters a casino in a good mood, he will leave it in a bad mood and vice versa. Since he is John's friend, he wants him to be in a good mood at the moment when he finishes his journey. John is in a good mood before starting the journey.\nIn how many ways can Jack select a starting city for John and cities where he will build casinos such that no matter how John travels, he will be in a good mood at the end? Print answer modulo 10^9 + 7.\n-----Input-----\nIn the first line, a positive integer N (1 \u2264 N \u2264 100000), the number of cities. \nIn the next N - 1 lines, two numbers a,  b (1 \u2264 a, b \u2264 N) separated by a single space meaning that cities a and b are connected by a bidirectional road.\n-----Output-----\nOutput one number, the answer to the problem modulo 10^9 + 7.\n-----Examples-----\nInput\n2\n1 2\nOutput\n4\nInput\n3\n1 2\n2 3\nOutput\n10\n-----Note-----\nExample 1: If Jack selects city 1 as John's starting city, he can either build 0 casinos, so John will be happy all the time, or build a casino in both cities, so John would visit a casino in city 1, become unhappy, then go to city 2, visit a casino there and become happy and his journey ends there because he can't go back to city 1. If Jack selects city 2 for start, everything is symmetrical, so the answer is 4.\nExample 2: If Jack tells John to start from city 1, he can either build casinos in 0 or 2 cities (total 4 possibilities). If he tells him to start from city 2, then John's journey will either contain cities 2 and 1 or 2 and 3. Therefore, Jack will either have to build no casinos, or build them in all three cities. With other options, he risks John ending his journey unhappy. Starting from 3 is symmetric to starting from 1, so in total we have 4 + 2 + 4 = 10 options.\n\ndef",
        "answer": "def f(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 4\n    return f(n - 1) + 2 * f(n - 2)",
        "difficulty": "interview"
    },
    {
        "task_id": 2455,
        "prompt": "Complete the Python function given the prompt below:There always is something to choose from! And now, instead of \"Noughts and Crosses\", Inna choose a very unusual upgrade of this game. The rules of the game are given below:\nThere is one person playing the game. Before the beginning of the game he puts 12 cards in a row on the table. Each card contains a character: \"X\" or \"O\". Then the player chooses two positive integers a and b (a\u00b7b = 12), after that he makes a table of size a \u00d7 b from the cards he put on the table as follows: the first b cards form the first row of the table, the second b cards form the second row of the table and so on, the last b cards form the last (number a) row of the table. The player wins if some column of the table contain characters \"X\" on all cards. Otherwise, the player loses.\nInna has already put 12 cards on the table in a row. But unfortunately, she doesn't know what numbers a and b to choose. Help her win the game: print to her all the possible ways of numbers a, b that she can choose and win.\n-----Input-----\nThe first line of the input contains integer t (1 \u2264 t \u2264 100). This value shows the number of sets of test data in the input. Next follows the description of each of the t tests on a separate line.\nThe description of each test is a string consisting of 12 characters, each character is either \"X\", or \"O\". The i-th character of the string shows the character that is written on the i-th card from the start.\n-----Output-----\nFor each test, print the answer to the test on a single line. The first number in the line must represent the number of distinct ways to choose the pair a, b. Next, print on this line the pairs in the format axb. Print the pairs in the order of increasing first parameter (a). Separate the pairs in the line by whitespaces.\n-----Examples-----\nInput\n4\nOXXXOXOOXOOX\nOXOXOXOXOXOX\nXXXXXXXXXXXX\nOOOOOOOOOOOO\nOutput\n3 1x12 2x6 4x3\n4 1x12 2x6 3x4 6x2\n6 1x12 2x6 3x4 4x3 6x2 12x1\n0\n\ndef",
        "answer": "def win_numbers(numbers):\n    numbers = list(numbers)\n    numbers.sort()\n    numbers = list(set(numbers))\n    numbers.sort()\n    numbers = list(map(str, numbers))\n    numbers =''.join(numbers)\n    return numbers",
        "difficulty": "interview"
    },
    {
        "task_id": 2456,
        "prompt": "Complete the Python function given the prompt below:A competitive eater, Alice is scheduling some practices for an eating contest on a magical calendar. The calendar is unusual because a week contains not necessarily $7$ days!\nIn detail, she can choose any integer $k$ which satisfies $1 \\leq k \\leq r$, and set $k$ days as the number of days in a week.\nAlice is going to paint some $n$ consecutive days on this calendar. On this calendar, dates are written from the left cell to the right cell in a week. If a date reaches the last day of a week, the next day's cell is the leftmost cell in the next (under) row.\nShe wants to make all of the painted cells to be connected by side. It means, that for any two painted cells there should exist at least one sequence of painted cells, started in one of these cells, and ended in another, such that any two consecutive cells in this sequence are connected by side.\nAlice is considering the shape of the painted cells. Two shapes are the same if there exists a way to make them exactly overlapped using only parallel moves, parallel to the calendar's sides.\nFor example, in the picture, a week has $4$ days and Alice paints $5$ consecutive days. [1] and [2] are different shapes, but [1] and [3] are equal shapes. [Image] \nAlice wants to know how many possible shapes exists if she set how many days a week has and choose consecutive $n$ days and paints them in calendar started in one of the days of the week. As was said before, she considers only shapes, there all cells are connected by side.\n-----Input-----\nThe input consists of multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 1000$)\u00a0\u2014 the number of test cases. Next $t$ lines contain descriptions of test cases.\nFor each test case, the only line contains two integers $n$, $r$ ($1 \\le n \\le 10^9, 1 \\le r \\le 10^9$).\n-----Output-----\nFor each test case, print a single integer \u00a0\u2014 the answer to the problem.\nPlease note, that the answer for some test cases won't fit into $32$-bit integer type, so you should use at least $64$-bit integer type in your programming language.\n-----Example-----\nInput\n5\n3 4\n3 2\n3 1\n13 7\n1010000 9999999\nOutput\n4\n3\n1\n28\n510049495001\n-----Note-----\nIn the first test case, Alice can set $1,2,3$ or $4$ days as the number of days in a week.\nThere are $6$ possible paintings shown in the picture, but there are only $4$ different shapes. So, the answer is $4$. Notice that the last example in the picture is an invalid painting because all cells are not connected by sides. [Image] \nIn the last test case, be careful with the overflow issue, described in the output format.\n\ndef",
        "answer": "def count_shapes(n, r):\n    if n == 1:\n        return r\n    return count_shapes(n - 1, r) * r",
        "difficulty": "interview"
    },
    {
        "task_id": 2457,
        "prompt": "Complete the Python function given the prompt below:Nastya just made a huge mistake and dropped a whole package of rice on the floor. Mom will come soon. If she sees this, then Nastya will be punished.\nIn total, Nastya dropped $n$ grains. Nastya read that each grain weighs some integer number of grams from $a - b$ to $a + b$, inclusive (numbers $a$ and $b$ are known), and the whole package of $n$ grains weighs from $c - d$ to $c + d$ grams, inclusive (numbers $c$ and $d$ are known). The weight of the package is the sum of the weights of all $n$ grains in it.\nHelp Nastya understand if this information can be correct. In other words, check whether each grain can have such a mass that the $i$-th grain weighs some integer number $x_i$ $(a - b \\leq x_i \\leq a + b)$, and in total they weigh from $c - d$ to $c + d$, inclusive ($c - d \\leq \\sum\\limits_{i=1}^{n}{x_i} \\leq c + d$).\n-----Input-----\nThe input consists of multiple test cases. The first line contains a single integer $t$ $(1 \\leq t \\leq 1000)$ \u00a0\u2014 the number of test cases. \nThe next $t$ lines contain descriptions of the test cases, each line contains $5$ integers: $n$ $(1 \\leq n \\leq 1000)$ \u00a0\u2014 the number of grains that Nastya counted and $a, b, c, d$ $(0 \\leq b < a \\leq 1000, 0 \\leq d < c \\leq 1000)$ \u00a0\u2014 numbers that determine the possible weight of one grain of rice (from $a - b$ to $a + b$) and the possible total weight of the package (from $c - d$ to $c + d$).\n-----Output-----\nFor each test case given in the input print \"Yes\", if the information about the weights is not inconsistent, and print \"No\" if $n$ grains with masses from $a - b$ to $a + b$ cannot make a package with a total mass from $c - d$ to $c + d$.\n-----Example-----\nInput\n5\n7 20 3 101 18\n11 11 10 234 2\n8 9 7 250 122\n19 41 21 321 10\n3 10 8 6 1\nOutput\nYes\nNo\nYes\nNo\nYes\n-----Note-----\nIn the first test case of the example, we can assume that each grain weighs $17$ grams, and a pack $119$ grams, then really Nastya could collect the whole pack.\nIn the third test case of the example, we can assume that each grain weighs $16$ grams, and a pack $128$ grams, then really Nastya could collect the whole pack.\nIn the fifth test case of the example, we can be assumed that $3$ grains of rice weigh $2$, $2$, and $3$ grams, and a pack is $7$ grams, then really Nastya could collect the whole pack.\nIn the second and fourth test cases of the example, we can prove that it is impossible to determine the correct weight of all grains of rice and the weight of the pack so that the weight of the pack is equal to the total weight of all collected grains.\n\ndef",
        "answer": "def check(a, b, c, d):\n    for i in range(n):\n        if a - b <= x_i <= a + b and c - d <= sum_x_i <= c + d:\n            return True\n    return False",
        "difficulty": "interview"
    },
    {
        "task_id": 2458,
        "prompt": "Complete the Python function given the prompt below:We saw the little game Marmot made for Mole's lunch. Now it's Marmot's dinner time and, as we all know, Marmot eats flowers. At every dinner he eats some red and white flowers. Therefore a dinner can be represented as a sequence of several flowers, some of them white and some of them red.\nBut, for a dinner to be tasty, there is a rule: Marmot wants to eat white flowers only in groups of size k.\nNow Marmot wonders in how many ways he can eat between a and b flowers. As the number of ways could be very large, print it modulo 1000000007 (10^9 + 7).\n-----Input-----\nInput contains several test cases.\nThe first line contains two integers t and k (1 \u2264 t, k \u2264 10^5), where t represents the number of test cases.\nThe next t lines contain two integers a_{i} and b_{i} (1 \u2264 a_{i} \u2264 b_{i} \u2264 10^5), describing the i-th test.\n-----Output-----\nPrint t lines to the standard output. The i-th line should contain the number of ways in which Marmot can eat between a_{i} and b_{i} flowers at dinner modulo 1000000007 (10^9 + 7).\n-----Examples-----\nInput\n3 2\n1 3\n2 3\n4 4\nOutput\n6\n5\n5\n-----Note-----  For K = 2 and length 1 Marmot can eat (R).  For K = 2 and length 2 Marmot can eat (RR) and (WW).  For K = 2 and length 3 Marmot can eat (RRR), (RWW) and (WWR).  For K = 2 and length 4 Marmot can eat, for example, (WWWW) or (RWWR), but for example he can't eat (WWWR).\n\ndef",
        "answer": "def Marmot(a, b, k):\n    if a == b:\n        return 1\n    if a > b:\n        return 0\n    if k == 1:\n        return b - a + 1\n    if k == 2:\n        return (b - a + 1) * (b - a + 2) // 2\n    if k == 3:\n        return (b - a + 1) * (b - a + 2) * (b - a + 3) // 6\n    if k == 4:\n        return (b - a + 1) * (b - a + 2) * (b - a + 3) * (b - a + 4) // 24\n    if k == 5:\n        return (b - a + 1) * (b - a + 2) * (b - a + 3) * (b - a + 4) * (b - a + 5) // 120\n    if k == 6:\n        return (b - a + 1) * (b - a + 2) * (b - a + 3) * (b - a + 4) * (b - a + 5) * (b - a + 6) // 720\n    if k == 7:\n        return (b - a + 1) * (b - a + 2) * (b - a + 3) * (b - a + 4) * (b - a + 5) * (b - a + 6) * (b - a + 7) // 5040\n    if k == 8:\n        return (b - a + 1) * (b - a + 2) * (b - a + 3) * (b - a + 4) * (b - a + 5) * (b - a + 6) * (b - a + 7) * (b - a +",
        "difficulty": "interview"
    },
    {
        "task_id": 2459,
        "prompt": "Complete the Python function given the prompt below:You are given an array a of size n, and q queries to it. There are queries of two types:   1 l_{i} r_{i} \u2014 perform a cyclic shift of the segment [l_{i}, r_{i}] to the right. That is, for every x such that l_{i} \u2264 x < r_{i} new value of a_{x} + 1 becomes equal to old value of a_{x}, and new value of a_{l}_{i} becomes equal to old value of a_{r}_{i};  2 l_{i} r_{i} \u2014 reverse the segment [l_{i}, r_{i}].  \nThere are m important indices in the array b_1, b_2,..., b_{m}. For each i such that 1 \u2264 i \u2264 m you have to output the number that will have index b_{i} in the array after all queries are performed.\n-----Input-----\nThe first line contains three integer numbers n, q and m (1 \u2264 n, q \u2264 2\u00b710^5, 1 \u2264 m \u2264 100). \nThe second line contains n integer numbers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^9). \nThen q lines follow. i-th of them contains three integer numbers t_{i}, l_{i}, r_{i}, where t_{i} is the type of i-th query, and [l_{i}, r_{i}] is the segment where this query is performed (1 \u2264 t_{i} \u2264 2, 1 \u2264 l_{i} \u2264 r_{i} \u2264 n). \nThe last line contains m integer numbers b_1, b_2,..., b_{m} (1 \u2264 b_{i} \u2264 n) \u2014 important indices of the array. \n-----Output-----\nPrint m numbers, i-th of which is equal to the number at index b_{i} after all queries are done.\n-----Example-----\nInput\n6 3 5\n1 2 3 4 5 6\n2 1 3\n2 3 6\n1 1 6\n2 2 1 5 3\nOutput\n3 3 1 5 2\n\ndef",
        "answer": "def arrayManipulation(n, queries):\n    arr = [0] * n\n    for i in queries:\n        arr[i[0] - 1] += i[2]\n        if i[1]!= len(arr):\n            arr[i[1]] -= i[2]\n    max_value = 0\n    running_sum = 0\n    for i in arr:\n        running_sum += i\n        if running_sum > max_value:\n            max_value = running_sum\n    return max_value",
        "difficulty": "interview"
    },
    {
        "task_id": 2460,
        "prompt": "Complete the Python function given the prompt below:Palo Alto is an unusual city because it is an endless coordinate line. It is also known for the office of Lyft Level 5.\nLyft has become so popular so that it is now used by all $m$ taxi drivers in the city, who every day transport the rest of the city residents\u00a0\u2014 $n$ riders.\nEach resident (including taxi drivers) of Palo-Alto lives in its unique location (there is no such pair of residents that their coordinates are the same).\nThe Lyft system is very clever: when a rider calls a taxi, his call does not go to all taxi drivers, but only to the one that is the closest to that person. If there are multiple ones with the same distance, then to taxi driver with a smaller coordinate is selected.\nBut one morning the taxi drivers wondered: how many riders are there that would call the given taxi driver if they were the first to order a taxi on that day? In other words, you need to find for each taxi driver $i$ the number $a_{i}$\u00a0\u2014 the number of riders that would call the $i$-th taxi driver when all drivers and riders are at their home?\nThe taxi driver can neither transport himself nor other taxi drivers.\n-----Input-----\nThe first line contains two integers $n$ and $m$ ($1 \\le n,m \\le 10^5$)\u00a0\u2014 number of riders and taxi drivers.\nThe second line contains $n + m$ integers $x_1, x_2, \\ldots, x_{n+m}$ ($1 \\le x_1 < x_2 < \\ldots < x_{n+m} \\le 10^9$), where $x_i$ is the coordinate where the $i$-th resident lives. \nThe third line contains $n + m$ integers $t_1, t_2, \\ldots, t_{n+m}$ ($0 \\le t_i \\le 1$). If $t_i = 1$, then the $i$-th resident is a taxi driver, otherwise $t_i = 0$.\nIt is guaranteed that the number of $i$ such that $t_i = 1$ is equal to $m$.\n-----Output-----\nPrint $m$ integers $a_1, a_2, \\ldots, a_{m}$, where $a_i$ is the answer for the $i$-th taxi driver. The taxi driver has the number $i$ if among all the taxi drivers he lives in the $i$-th smallest coordinate (see examples for better understanding).\n-----Examples-----\nInput\n3 1\n1 2 3 10\n0 0 1 0\nOutput\n3 \nInput\n3 2\n2 3 4 5 6\n1 0 0 0 1\nOutput\n2 1 \nInput\n1 4\n2 4 6 10 15\n1 1 1 1 0\nOutput\n0 0 0 1 \n-----Note-----\nIn the first example, we have only one taxi driver, which means an order from any of $n$ riders will go to him.\nIn the second example, the first taxi driver lives at the point with the coordinate $2$, and the second one lives at the point with the coordinate $6$. Obviously, the nearest taxi driver to the rider who lives on the $3$ coordinate is the first one, and to the rider who lives on the coordinate $5$ is the second one. The rider who lives on the $4$ coordinate has the same distance to the first and the second taxi drivers, but since the first taxi driver has a smaller coordinate, the call from this rider will go to the first taxi driver.\nIn the third example, we have one rider and the taxi driver nearest to him is the fourth one.\n\ndef",
        "answer": "def taxi_driver(n, m, x, t):\n    x.sort()\n    t.sort()\n    res = [0] * m\n    for i in range(n + m):\n        if t[i] == 1:\n            res[i] = 1\n    for i in range(n + m):\n        for j in range(i + 1, n + m):\n            if x[i] == x[j]:\n                res[i] += 1\n    return res",
        "difficulty": "interview"
    },
    {
        "task_id": 2461,
        "prompt": "Complete the Python function given the prompt below:Ilya is very fond of graphs, especially trees. During his last trip to the forest Ilya found a very interesting tree rooted at vertex 1. There is an integer number written on each vertex of the tree; the number written on vertex i is equal to a_{i}.\nIlya believes that the beauty of the vertex x is the greatest common divisor of all numbers written on the vertices on the path from the root to x, including this vertex itself. In addition, Ilya can change the number in one arbitrary vertex to 0 or leave all vertices unchanged. Now for each vertex Ilya wants to know the maximum possible beauty it can have.\nFor each vertex the answer must be considered independently.\nThe beauty of the root equals to number written on it.\n-----Input-----\nFirst line contains one integer number n\u00a0\u2014 the number of vertices in tree (1 \u2264 n \u2264 2\u00b710^5).\nNext line contains n integer numbers a_{i} (1 \u2264 i \u2264 n, 1 \u2264 a_{i} \u2264 2\u00b710^5).\nEach of next n - 1 lines contains two integer numbers x and y (1 \u2264 x, y \u2264 n, x \u2260 y), which means that there is an edge (x, y) in the tree.\n-----Output-----\nOutput n numbers separated by spaces, where i-th number equals to maximum possible beauty of vertex i.\n-----Examples-----\nInput\n2\n6 2\n1 2\nOutput\n6 6 \nInput\n3\n6 2 3\n1 2\n1 3\nOutput\n6 6 6 \nInput\n1\n10\nOutput\n10\n\ndef",
        "answer": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)",
        "difficulty": "interview"
    },
    {
        "task_id": 2462,
        "prompt": "Complete the Python function given the prompt below:Despite his bad reputation, Captain Flint is a friendly person (at least, friendly to animals). Now Captain Flint is searching worthy sailors to join his new crew (solely for peaceful purposes). A sailor is considered as worthy if he can solve Flint's task.\nRecently, out of blue Captain Flint has been interested in math and even defined a new class of integers. Let's define a positive integer $x$ as nearly prime if it can be represented as $p \\cdot q$, where $1 < p < q$ and $p$ and $q$ are prime numbers. For example, integers $6$ and $10$ are nearly primes (since $2 \\cdot 3 = 6$ and $2 \\cdot 5 = 10$), but integers $1$, $3$, $4$, $16$, $17$ or $44$ are not.\nCaptain Flint guessed an integer $n$ and asked you: can you represent it as the sum of $4$ different positive integers where at least $3$ of them should be nearly prime.\nUncle Bogdan easily solved the task and joined the crew. Can you do the same?\n-----Input-----\nThe first line contains a single integer $t$ ($1 \\le t \\le 1000$)\u00a0\u2014 the number of test cases.\nNext $t$ lines contain test cases\u00a0\u2014 one per line. The first and only line of each test case contains the single integer $n$ $(1 \\le n \\le 2 \\cdot 10^5)$\u00a0\u2014 the number Flint guessed.\n-----Output-----\nFor each test case print:   YES and $4$ different positive integers such that at least $3$ of them are nearly prime and their sum is equal to $n$ (if there are multiple answers print any of them);  NO if there is no way to represent $n$ as the sum of $4$ different positive integers where at least $3$ of them are nearly prime.  You can print each character of YES or NO in any case.\n-----Example-----\nInput\n7\n7\n23\n31\n36\n44\n100\n258\nOutput\nNO\nNO\nYES\n14 10 6 1\nYES\n5 6 10 15\nYES\n6 7 10 21\nYES\n2 10 33 55\nYES\n10 21 221 6\n-----Note-----\nIn the first and second test cases, it can be proven that there are no four different positive integers such that at least three of them are nearly prime.\nIn the third test case, $n=31=2 \\cdot 7 + 2 \\cdot 5 + 2 \\cdot 3 + 1$: integers $14$, $10$, $6$ are nearly prime.\nIn the fourth test case, $n=36=5 + 2 \\cdot 3 + 2 \\cdot 5 + 3 \\cdot 5$: integers $6$, $10$, $15$ are nearly prime.\nIn the fifth test case, $n=44=2 \\cdot 3 + 7 + 2 \\cdot 5 + 3 \\cdot 7$: integers $6$, $10$, $21$ are nearly prime.\nIn the sixth test case, $n=100=2 + 2 \\cdot 5 + 3 \\cdot 11 + 5 \\cdot 11$: integers $10$, $33$, $55$ are nearly prime.\nIn the seventh test case, $n=258=2 \\cdot 5 + 3 \\cdot 7 + 13 \\cdot 17 + 2 \\cdot 3$: integers $10$, $21$, $221$, $6$ are nearly prime.\n\ndef",
        "answer": "def is_nearly_prime(n):\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "difficulty": "interview"
    },
    {
        "task_id": 2463,
        "prompt": "Complete the Python function given the prompt below:This is the easy version of the problem. The difference between the versions is that in the easy version all prices $a_i$ are different. You can make hacks if and only if you solved both versions of the problem.\nToday is Sage's birthday, and she will go shopping to buy ice spheres. All $n$ ice spheres are placed in a row and they are numbered from $1$ to $n$ from left to right. Each ice sphere has a positive integer price. In this version all prices are different.\nAn ice sphere is cheap if it costs strictly less than two neighboring ice spheres: the nearest to the left and the nearest to the right. The leftmost and the rightmost ice spheres are not cheap. Sage will choose all cheap ice spheres and then buy only them.\nYou can visit the shop before Sage and reorder the ice spheres as you wish. Find out the maximum number of ice spheres that Sage can buy, and show how the ice spheres should be reordered.\n-----Input-----\nThe first line contains a single integer $n$ $(1 \\le n \\le 10^5)$\u00a0\u2014 the number of ice spheres in the shop.\nThe second line contains $n$ different integers $a_1, a_2, \\dots, a_n$ $(1 \\le a_i \\le 10^9)$\u00a0\u2014 the prices of ice spheres.\n-----Output-----\nIn the first line print the maximum number of ice spheres that Sage can buy.\nIn the second line print the prices of ice spheres in the optimal order. If there are several correct answers, you can print any of them.\n-----Example-----\nInput\n5\n1 2 3 4 5\nOutput\n2\n3 1 4 2 5 \n-----Note-----\nIn the example it's not possible to place ice spheres in any order so that Sage would buy $3$ of them. If the ice spheres are placed like this $(3, 1, 4, 2, 5)$, then Sage will buy two spheres: one for $1$ and one for $2$, because they are cheap.\n\ndef",
        "answer": "def ice_spheres(arr):\n    n = len(arr)\n    left = [0] * n\n    right = [0] * n\n    left[0] = arr[0]\n    right[n - 1] = arr[n - 1]\n    for i in range(1, n):\n        left[i] = max(left[i - 1], arr[i])\n    for i in range(n - 2, -1, -1):\n        right[i] = max(right[i + 1], arr[i])\n    res = 0\n    for i in range(n):\n        res = max(res, min(left[i], right[i]))\n    return res",
        "difficulty": "interview"
    },
    {
        "task_id": 2464,
        "prompt": "Complete the Python function given the prompt below:You are given a tree (an undirected connected acyclic graph) consisting of $n$ vertices and $n - 1$ edges. A number is written on each edge, each number is either $0$ (let's call such edges $0$-edges) or $1$ (those are $1$-edges).\nLet's call an ordered pair of vertices $(x, y)$ ($x \\ne y$) valid if, while traversing the simple path from $x$ to $y$, we never go through a $0$-edge after going through a $1$-edge. Your task is to calculate the number of valid pairs in the tree.\n-----Input-----\nThe first line contains one integer $n$ ($2 \\le n \\le 200000$) \u2014 the number of vertices in the tree.\nThen $n - 1$ lines follow, each denoting an edge of the tree. Each edge is represented by three integers $x_i$, $y_i$ and $c_i$ ($1 \\le x_i, y_i \\le n$, $0 \\le c_i \\le 1$, $x_i \\ne y_i$) \u2014 the vertices connected by this edge and the number written on it, respectively.\nIt is guaranteed that the given edges form a tree.\n-----Output-----\nPrint one integer \u2014 the number of valid pairs of vertices.\n-----Example-----\nInput\n7\n2 1 1\n3 2 0\n4 2 1\n5 2 0\n6 7 1\n7 2 1\nOutput\n34\n-----Note-----\nThe picture corresponding to the first example:\n[Image]\n\ndef",
        "answer": "def pairs(n, edges):\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    ",
        "difficulty": "interview"
    },
    {
        "task_id": 2465,
        "prompt": "Complete the Python function given the prompt below:You are given an angle $\\text{ang}$. \nThe Jury asks You to find such regular $n$-gon (regular polygon with $n$ vertices) that it has three vertices $a$, $b$ and $c$ (they can be non-consecutive) with $\\angle{abc} = \\text{ang}$ or report that there is no such $n$-gon. [Image] \nIf there are several answers, print the minimal one. It is guarantied that if answer exists then it doesn't exceed $998244353$.\n-----Input-----\nThe first line contains single integer $T$ ($1 \\le T \\le 180$) \u2014 the number of queries. \nEach of the next $T$ lines contains one integer $\\text{ang}$ ($1 \\le \\text{ang} < 180$) \u2014 the angle measured in degrees. \n-----Output-----\nFor each query print single integer $n$ ($3 \\le n \\le 998244353$) \u2014 minimal possible number of vertices in the regular $n$-gon or $-1$ if there is no such $n$.\n-----Example-----\nInput\n4\n54\n50\n2\n178\nOutput\n10\n18\n90\n180\n-----Note-----\nThe answer for the first query is on the picture above.\nThe answer for the second query is reached on a regular $18$-gon. For example, $\\angle{v_2 v_1 v_6} = 50^{\\circ}$.\nThe example angle for the third query is $\\angle{v_{11} v_{10} v_{12}} = 2^{\\circ}$.\nIn the fourth query, minimal possible $n$ is $180$ (not $90$).\n\ndef",
        "answer": "def polygon(ang):\n    n = 1\n    while True:\n        if (360 - ang * n) % 180 == 0:\n            return n\n        n += 1",
        "difficulty": "interview"
    },
    {
        "task_id": 2466,
        "prompt": "Complete the Python function given the prompt below:Given a collection of distinct integers, return all possible permutations.\nExample:\nInput: [1,2,3]\nOutput:\n[\n  [1,2,3],\n  [1,3,2],\n  [2,1,3],\n  [2,3,1],\n  [3,1,2],\n  [3,2,1]\n]\n\ndef",
        "answer": "def permute(nums):\n  # Fill this in.",
        "difficulty": "interview"
    },
    {
        "task_id": 2467,
        "prompt": "Complete the Python function given the prompt below:Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.\nNote:\n       All numbers will be positive integers.\n       The solution set must not contain duplicate combinations.\nExample 1:\nInput: k = 3, n = 7\nOutput: [[1,2,4]]\nExample 2:\nInput: k = 3, n = 9\nOutput: [[1,2,6], [1,3,5], [2,3,4]]\n\ndef",
        "answer": "def combinations_sum_k(k, n):\n    result = []\n    def backtrack(remain, comb, next_start):\n        if remain == 0 and comb not in result:\n            result.append(comb)\n        elif remain < 0:\n            return\n        for i in range(next_start, 10):\n            backtrack(remain - i, comb + [i], i + 1)\n    backtrack(n, [], 1)\n    return result",
        "difficulty": "interview"
    },
    {
        "task_id": 2468,
        "prompt": "Complete the Python function given the prompt below:Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.\n\u00a0\nExample 1:\nInput: s = \"(()\"\nOutput: 2\nExplanation: The longest valid parentheses substring is \"()\".\nExample 2:\nInput: s = \")()())\"\nOutput: 4\nExplanation: The longest valid parentheses substring is \"()()\".\nExample 3:\nInput: s = \"\"\nOutput: 0\n\u00a0\nConstraints:\n0 <= s.length <= 3 * 104\ns[i] is '(', or ')'.\n\ndef",
        "answer": "def longestValidParentheses(self, s: str) -> int:\n    stack = []\n    max_len = 0\n    for i in range(len(s)):\n        if s[i] == '(':\n            stack.append(i)\n        else:\n            if stack:\n                stack.pop()\n                if stack:\n                    max_len = max(max_len, i - stack[-1])\n                else:\n                    stack.append(i)\n    return max_len",
        "difficulty": "interview"
    },
    {
        "task_id": 2469,
        "prompt": "Complete the Python function given the prompt below:Given an integer array of size n, find all elements that appear more than \u230a n/3 \u230b times.\nNote: The algorithm should run in linear time and in O(1) space.\nExample 1:\nInput: [3,2,3]\nOutput: [3]\nExample 2:\nInput: [1,1,1,3,3,2,2,2]\nOutput: [1,2]\n\ndef",
        "answer": "def majorityElement(nums):\n    # Write your code here\n    n = len(nums)\n    if n == 1:\n        return nums[0]\n    nums.sort()\n    return nums[n//3]",
        "difficulty": "interview"
    },
    {
        "task_id": 2470,
        "prompt": "Complete the Python function given the prompt below:Given two integer arrays\u00a0arr1 and arr2, return the minimum number of operations (possibly zero) needed\u00a0to make arr1 strictly increasing.\nIn one operation, you can choose two indices\u00a00 <=\u00a0i < arr1.length\u00a0and\u00a00 <= j < arr2.length\u00a0and do the assignment\u00a0arr1[i] = arr2[j].\nIf there is no way to make\u00a0arr1\u00a0strictly increasing,\u00a0return\u00a0-1.\n\u00a0\nExample 1:\nInput: arr1 = [1,5,3,6,7], arr2 = [1,3,2,4]\nOutput: 1\nExplanation: Replace 5 with 2, then arr1 = [1, 2, 3, 6, 7].\nExample 2:\nInput: arr1 = [1,5,3,6,7], arr2 = [4,3,1]\nOutput: 2\nExplanation: Replace 5 with 3 and then replace 3 with 4. arr1 = [1, 3, 4, 6, 7].\nExample 3:\nInput: arr1 = [1,5,3,6,7], arr2 = [1,6,3,3]\nOutput: -1\nExplanation: You can't make arr1 strictly increasing.\n\u00a0\nConstraints:\n1 <= arr1.length, arr2.length <= 2000\n0 <= arr1[i], arr2[i] <= 10^9\n\ndef",
        "answer": "def minOperations(self, arr1, arr2):\n        \"\"\"\n        :type arr1: List[int]\n        :type arr2: List[int]\n        :rtype: int\n        \"\"\"\n        arr1.sort()\n        arr2.sort()\n        i, j = 0, 0\n        res = 0\n        while i < len(arr1) and j < len(arr2):\n            if arr1[i] < arr2[j]:\n                i += 1\n            elif arr1[i] > arr2[j]:\n                j += 1\n            else:\n                res += 1\n                i += 1\n                j += 1\n        return res\n",
        "difficulty": "interview"
    },
    {
        "task_id": 2471,
        "prompt": "Complete the Python function given the prompt below:We have a grid with H rows and W columns. At first, all cells were painted white.\nSnuke painted N of these cells. The i-th ( 1 \\leq i \\leq N ) cell he painted is the cell at the a_i-th row and b_i-th column.\nCompute the following:\n - For each integer j ( 0 \\leq j \\leq 9 ), how many subrectangles of size 3\u00d73 of the grid contains exactly j black cells, after Snuke painted N cells?\n-----Constraints-----\n - 3 \\leq H \\leq 10^9\n - 3 \\leq W \\leq 10^9\n - 0 \\leq N \\leq min(10^5,H\u00d7W)\n - 1 \\leq a_i \\leq H (1 \\leq i \\leq N)\n - 1 \\leq b_i \\leq W (1 \\leq i \\leq N)\n - (a_i, b_i) \\neq (a_j, b_j) (i \\neq j)\n-----Input-----\nThe input is given from Standard Input in the following format:\nH W N\na_1 b_1\n:\na_N b_N\n-----Output-----\nPrint 10 lines.\nThe (j+1)-th ( 0 \\leq j \\leq 9 ) line should contain the number of the subrectangles of size 3\u00d73 of the grid that contains exactly j black cells.\n-----Sample Input-----\n4 5 8\n1 1\n1 4\n1 5\n2 3\n3 1\n3 2\n3 4\n4 4\n-----Sample Output-----\n0\n0\n0\n2\n4\n0\n0\n0\n0\n0\nThere are six subrectangles of size 3\u00d73. Two of them contain three black cells each, and the remaining four contain four black cells each.\n\ndef",
        "answer": "def count_subrectangles(H, W, N):\n    # Write your code here\n    count = [0] * 10\n    for _ in range(N):\n        a, b = map(int, input().split())\n        for i in range(a, a+3):\n            for j in range(b, b+3):\n                count[grid[i][j]] += 1\n    return '\\n'.join(map(str, count))\n",
        "difficulty": "interview"
    },
    {
        "task_id": 2472,
        "prompt": "Complete the Python function given the prompt below:Kizahashi, who was appointed as the administrator of ABC at National Problem Workshop in the Kingdom of AtCoder, got too excited and took on too many jobs.\nLet the current time be time 0. Kizahashi has N jobs numbered 1 to N.\nIt takes A_i units of time for Kizahashi to complete Job i. The deadline for Job i is time B_i, and he must complete the job before or at this time.\nKizahashi cannot work on two or more jobs simultaneously, but when he completes a job, he can start working on another immediately.\nCan Kizahashi complete all the jobs in time? If he can, print Yes; if he cannot, print No.\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 2 \\times 10^5\n - 1 \\leq A_i, B_i \\leq 10^9 (1 \\leq i \\leq N)\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 B_1\n.\n.\n.\nA_N B_N\n-----Output-----\nIf Kizahashi can complete all the jobs in time, print Yes; if he cannot, print No.\n-----Sample Input-----\n5\n2 4\n1 9\n1 8\n4 9\n3 12\n-----Sample Output-----\nYes\nHe can complete all the jobs in time by, for example, doing them in the following order:\n - Do Job 2 from time 0 to 1.\n - Do Job 1 from time 1 to 3.\n - Do Job 4 from time 3 to 7.\n - Do Job 3 from time 7 to 8.\n - Do Job 5 from time 8 to 11.\nNote that it is fine to complete Job 3 exactly at the deadline, time 8.\n\ndef",
        "answer": "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort()\n    b.sort()\n    if a[0] > b[0]:\n        print(\"No\")\n    else:\n        print(\"Yes\")",
        "difficulty": "interview"
    },
    {
        "task_id": 2473,
        "prompt": "Complete the Python function given the prompt below:We have N points in a two-dimensional plane.\nThe coordinates of the i-th point (1 \\leq i \\leq N) are (x_i,y_i).\nLet us consider a rectangle whose sides are parallel to the coordinate axes that contains K or more of the N points in its interior.\nHere, points on the sides of the rectangle are considered to be in the interior.\nFind the minimum possible area of such a rectangle.  \n-----Constraints-----\n - 2 \\leq K \\leq N \\leq 50 \n - -10^9 \\leq x_i,y_i \\leq 10^9 (1 \\leq i \\leq N) \n - x_i\u2260x_j (1 \\leq i<j \\leq N) \n - y_i\u2260y_j (1 \\leq i<j \\leq N) \n - All input values are integers. (Added at 21:50 JST)  \n-----Input-----\nInput is given from Standard Input in the following format:  \nN K  \nx_1 y_1\n:  \nx_{N} y_{N}\n-----Output-----\nPrint the minimum possible area of a rectangle that satisfies the condition.  \n-----Sample Input-----\n4 4\n1 4\n3 3\n6 2\n8 1\n-----Sample Output-----\n21\nOne rectangle that satisfies the condition with the minimum possible area has the following vertices: (1,1), (8,1), (1,4) and (8,4).\nIts area is (8-1) \u00d7 (4-1) = 21.\n\ndef",
        "answer": "def rectangle(n,k,arr):\n    arr.sort()\n    x_min = arr[0][0]\n    x_max = arr[-1][0]\n    y_min = arr[0][1]\n    y_max = arr[-1][1]\n    x_min_max = x_max - x_min\n    y_min_max = y_max - y_min\n    if x_min_max < y_min_max:\n        return x_min_max * y_min_max\n    else:\n        return x_min_max * y_min_max",
        "difficulty": "interview"
    },
    {
        "task_id": 2474,
        "prompt": "Complete the Python function given the prompt below:For two sequences S and T of length N consisting of 0 and 1, let us define f(S, T) as follows:\n - Consider repeating the following operation on S so that S will be equal to T. f(S, T) is the minimum possible total cost of those operations.\n - Change S_i (from 0 to 1 or vice versa). The cost of this operation is D \\times C_i, where D is the number of integers j such that S_j \\neq T_j (1 \\leq j \\leq N) just before this change.\nThere are 2^N \\times (2^N - 1) pairs (S, T) of different sequences of length N consisting of 0 and 1. Compute the sum of f(S, T) over all of those pairs, modulo (10^9+7).\n-----Constraints-----\n - 1 \\leq N \\leq 2 \\times 10^5\n - 1 \\leq C_i \\leq 10^9\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nC_1 C_2 \\cdots C_N\n-----Output-----\nPrint the sum of f(S, T), modulo (10^9+7).\n-----Sample Input-----\n1\n1000000000\n-----Sample Output-----\n999999993\nThere are two pairs (S, T) of different sequences of length 2 consisting of 0 and 1, as follows:\n - S = (0), T = (1): by changing S_1 to 1, we can have S = T at the cost of 1000000000, so f(S, T) = 1000000000.\n - S = (1), T = (0): by changing S_1 to 0, we can have S = T at the cost of 1000000000, so f(S, T) = 1000000000.\nThe sum of these is 2000000000, and we should print it modulo (10^9+7), that is, 999999993.\n\ndef",
        "answer": "def f(S, T):\n    return sum(D * C for D, C in zip(S, T)) % (10 ** 9 + 7)",
        "difficulty": "interview"
    },
    {
        "task_id": 2475,
        "prompt": "Complete the Python function given the prompt below:There is an infinitely large pond, which we consider as a number line.\nIn this pond, there are N lotuses floating at coordinates 0, 1, 2,..., N-2 and N-1.\nOn the lotus at coordinate i, an integer s_i is written.\nYou are standing on the lotus at coordinate 0. You will play a game that proceeds as follows:\n - 1. Choose positive integers A and B. Your score is initially 0.\n - 2. Let x be your current coordinate, and y = x+A. The lotus at coordinate x disappears, and you move to coordinate y.\n - If y = N-1, the game ends.\n - If y \\neq N-1 and there is a lotus floating at coordinate y, your score increases by s_y.\n - If y \\neq N-1 and there is no lotus floating at coordinate y, you drown. Your score decreases by 10^{100} points, and the game ends.\n - 3. Let x be your current coordinate, and y = x-B. The lotus at coordinate x disappears, and you move to coordinate y.\n - If y = N-1, the game ends.\n - If y \\neq N-1 and there is a lotus floating at coordinate y, your score increases by s_y.\n - If y \\neq N-1 and there is no lotus floating at coordinate y, you drown. Your score decreases by 10^{100} points, and the game ends.\n - 4. Go back to step 2.\nYou want to end the game with as high a score as possible.\nWhat is the score obtained by the optimal choice of A and B?\n-----Constraints-----\n - 3 \\leq N \\leq 10^5\n - -10^9 \\leq s_i \\leq 10^9\n - s_0=s_{N-1}=0\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\ns_0 s_1...... s_{N-1}\n-----Output-----\nPrint the score obtained by the optimal choice of A and B.\n-----Sample Input-----\n5\n0 2 5 1 0\n-----Sample Output-----\n3\nIf you choose A = 3 and B = 2, the game proceeds as follows:\n - Move to coordinate 0 + 3 = 3. Your score increases by s_3 = 1.\n - Move to coordinate 3 - 2 = 1. Your score increases by s_1 = 2.\n - Move to coordinate 1 + 3 = 4. The game ends with a score of 3.\nThere is no way to end the game with a score of 4 or higher, so the answer is 3. Note that you cannot land the lotus at coordinate 2 without drowning later.\n\ndef",
        "answer": "def lotus_game(N, s):\n    dp = [0] * N\n    dp[0] = s[0]\n    dp[1] = max(s[0], s[1])\n    for i in range(2, N):\n        dp[i] = max(dp[i - 1], dp[i - 2] + s[i])\n    return dp[-1]",
        "difficulty": "interview"
    },
    {
        "task_id": 2476,
        "prompt": "Complete the Python function given the prompt below:Takahashi has N cards. The i-th of these cards has an integer A_i written on it.\nTakahashi will choose an integer K, and then repeat the following operation some number of times:\n - Choose exactly K cards such that the integers written on them are all different, and eat those cards. (The eaten cards disappear.)\nFor each K = 1,2, \\ldots, N, find the maximum number of times Takahashi can do the operation.\n-----Constraints-----\n -  1 \\le N \\le 3 \\times 10^5 \n -  1 \\le A_i \\le N \n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 A_2 \\ldots A_N\n-----Output-----\nPrint N integers.\nThe t-th (1 \\le t \\le N) of them should be the answer for the case K=t.\n-----Sample Input-----\n3\n2 1 2\n-----Sample Output-----\n3\n1\n0\nFor K = 1, we can do the operation as follows:\n - Choose the first card to eat.\n - Choose the second card to eat.\n - Choose the third card to eat.\nFor K = 2, we can do the operation as follows:\n - Choose the first and second cards to eat.\nFor K = 3, we cannot do the operation at all. Note that we cannot choose the first and third cards at the same time.\n\ndef",
        "answer": "def solve(A):\n    A.sort()\n    n = len(A)\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n):\n        for j in range(i):\n            if A[i] > A[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)",
        "difficulty": "interview"
    },
    {
        "task_id": 2477,
        "prompt": "Complete the Python function given the prompt below:We have N logs of lengths A_1,A_2,\\cdots A_N.\nWe can cut these logs at most K times in total. When a log of length L is cut at a point whose distance from an end of the log is t (0<t<L), it becomes two logs of lengths t and L-t.\nFind the shortest possible length of the longest log after at most K cuts, and print it after rounding up to an integer.\n-----Constraints-----\n - 1 \\leq N \\leq 2 \\times 10^5\n - 0 \\leq K \\leq 10^9\n - 1 \\leq A_i \\leq 10^9\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\nA_1 A_2 \\cdots A_N\n-----Output-----\nPrint an integer representing the answer.\n-----Sample Input-----\n2 3\n7 9\n-----Sample Output-----\n4\n - First, we will cut the log of length 7 at a point whose distance from an end of the log is 3.5, resulting in two logs of length 3.5 each.\n - Next, we will cut the log of length 9 at a point whose distance from an end of the log is 3, resulting in two logs of length 3 and 6.\n - Lastly, we will cut the log of length 6 at a point whose distance from an end of the log is 3.3, resulting in two logs of length 3.3 and 2.7.\nIn this case, the longest length of a log will be 3.5, which is the shortest possible result. After rounding up to an integer, the output should be 4.\n\ndef",
        "answer": "def cut_logs(logs, k):\n    logs.sort()\n    if k >= logs[-1]:\n        return logs[-1]\n    elif k == 0:\n        return 0\n    else:\n        return logs[-1] - k + 1",
        "difficulty": "interview"
    },
    {
        "task_id": 2478,
        "prompt": "Complete the Python function given the prompt below:You are given a string S of length N consisting of ( and ). Your task is to insert some number of ( and ) into S to obtain a correct bracket sequence.\nHere, a correct bracket sequence is defined as follows:  \n - () is a correct bracket sequence.\n - If X is a correct bracket sequence, the concatenation of (, X and ) in this order is also a correct bracket sequence.\n - If X and Y are correct bracket sequences, the concatenation of X and Y in this order is also a correct bracket sequence.\n - Every correct bracket sequence can be derived from the rules above.\nFind the shortest correct bracket sequence that can be obtained. If there is more than one such sequence, find the lexicographically smallest one.\n-----Constraints-----\n - The length of S is N.\n - 1 \u2264 N \u2264 100\n - S consists of ( and ).\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nS\n-----Output-----\nPrint the lexicographically smallest string among the shortest correct bracket sequences that can be obtained by inserting some number of ( and ) into S.\n-----Sample Input-----\n3\n())\n-----Sample Output-----\n(())\n\n\ndef",
        "answer": "def bracket_sequence(s):\n    if len(s) == 0:\n        return \"\"\n    if len(s) == 1:\n        return s\n    if s[0] == \")\" and s[1] == \")\":\n        return bracket_sequence(s[2:])\n    if s[0] == \"(\" and s[1] == \")\":\n        return bracket_sequence(s[2:])\n    if s[0] == \")\" and s[1] == \"(\":\n        return bracket_sequence(s[2:])\n    if s[0] == \"(\" and s[1] == \"(\":\n        return bracket_sequence(s[2:])\n    if s[0] == \")\" and s[1] == \"(\":\n        return bracket_sequence(s[2:])\n    if s[0] == \"(\" and s[1] == \")\":\n        return \"(\" + bracket_sequence(s[2:]) + \")\"\n    if s[0] == \")\" and s[1] == \"(\":\n        return \"(\" + bracket_sequence(s[2:]) + \")\"\n    if s[0] == \"(\" and s[1] == \")\":\n        return \"(\" + bracket_sequence(s[2:]) + \")\"\n    if s[0] == \"(\" and s[1] == \"(\":\n        return \"(\" + bracket_sequence(s[2:]) + \")\"\n    if s[0] == \")\" and s[1] == \")\":\n        return \"(\" + bracket_sequence(s[2:]) + \")\"\n    if s[0] == \"(\" and s[1] == \")\":\n        return \"(\" + bracket_sequence(s[",
        "difficulty": "interview"
    },
    {
        "task_id": 2479,
        "prompt": "Complete the Python function given the prompt below:There is a grid with N rows and N columns of squares. Let (i, j) be the square at the i-th row from the top and the j-th column from the left.\nEach of the central (N-2) \\times (N-2) squares in the grid has a black stone on it.\nEach of the 2N - 1 squares on the bottom side and the right side has a white stone on it.\nQ queries are given. We ask you to process them in order.\nThere are two kinds of queries. Their input format and description are as follows:\n - 1 x: Place a white stone on (1, x). After that, for each black stone between (1, x) and the first white stone you hit if you go down from (1, x), replace it with a white stone.\n - 2 x: Place a white stone on (x, 1). After that, for each black stone between (x, 1) and the first white stone you hit if you go right from (x, 1), replace it with a white stone.\nHow many black stones are there on the grid after processing all Q queries?\n-----Constraints-----\n - 3 \\leq N \\leq 2\\times 10^5\n - 0 \\leq Q \\leq \\min(2N-4,2\\times 10^5)\n - 2 \\leq x \\leq N-1\n - Queries are pairwise distinct.\n-----Input-----\nInput is given from Standard Input in the following format:\nN Q\nQuery_1\n\\vdots\nQuery_Q\n-----Output-----\nPrint how many black stones there are on the grid after processing all Q queries.\n-----Sample Input-----\n5 5\n1 3\n2 3\n1 4\n2 2\n1 2\n-----Sample Output-----\n1\nAfter each query, the grid changes in the following way:\n\ndef",
        "answer": "def stones(n, q):\n    grid = [[0] * n for _ in range(n)]\n    for i in range(n):\n        grid[i][0] = 1\n        grid[i][n - 1] = 1\n    for i in range(n - 2):\n        grid[0][i + 1] = 1\n        grid[n - 1][i + 1] = 1\n    for i in range(q):\n        if queries[i][0] == 1:\n            x, y = queries[i][1], queries[i][2]\n            for j in range(x, y + 1):\n                for k in range(n):\n                    if grid[k][j] == 1:\n                        grid[k][j] = 0\n        else:\n            x, y = queries[i][1], queries[i][2]\n            for j in range(x, y + 1):\n                for k in range(n):\n                    if grid[k][j] == 1:\n                        grid[k][j] = 1\n    return sum(sum(row) for row in grid)",
        "difficulty": "interview"
    },
    {
        "task_id": 2480,
        "prompt": "Complete the Python function given the prompt below:Given are a sequence of N positive integers A_1, A_2, \\ldots, A_N, and a positive integer K.\nFind the number of non-empty contiguous subsequences in A such that the remainder when dividing the sum of its elements by K is equal to the number of its elements. We consider two subsequences different if they are taken from different positions, even if they are equal sequences.\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 2\\times 10^5\n - 1 \\leq K \\leq 10^9\n - 1 \\leq A_i \\leq 10^9\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\nA_1 A_2 \\cdots A_N\n-----Output-----\nPrint the number of subsequences that satisfy the condition.\n-----Sample Input-----\n5 4\n1 4 2 3 5\n-----Sample Output-----\n4\nFour sequences satisfy the condition: (1), (4,2), (1,4,2), and (5).\n\ndef",
        "answer": "def count_subsequences(n, k, arr):\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if (arr[j] - arr[i]) % k == 0:\n                count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 2481,
        "prompt": "Complete the Python function given the prompt below:Joisino the magical girl has decided to turn every single digit that exists on this world into 1.\nRewriting a digit i with j (0\u2264i,j\u22649) costs c_{i,j} MP (Magic Points).\nShe is now standing before a wall. The wall is divided into HW squares in H rows and W columns, and at least one square contains a digit between 0 and 9 (inclusive).\nYou are given A_{i,j} that describes the square at the i-th row from the top and j-th column from the left, as follows:\n - If A_{i,j}\u2260-1, the square contains a digit A_{i,j}.\n - If A_{i,j}=-1, the square does not contain a digit.\nFind the minimum total amount of MP required to turn every digit on this wall into 1 in the end.\n-----Constraints-----\n - 1\u2264H,W\u2264200\n - 1\u2264c_{i,j}\u226410^3 (i\u2260j)\n - c_{i,j}=0 (i=j)\n - -1\u2264A_{i,j}\u22649\n - All input values are integers.\n - There is at least one digit on the wall.\n-----Input-----\nInput is given from Standard Input in the following format:\nH W\nc_{0,0}... c_{0,9}\n:\nc_{9,0}... c_{9,9}\nA_{1,1}... A_{1,W}\n:\nA_{H,1}... A_{H,W}\n-----Output-----\nPrint the minimum total amount of MP required to turn every digit on the wall into 1 in the end.\n-----Sample Input-----\n2 4\n0 9 9 9 9 9 9 9 9 9\n9 0 9 9 9 9 9 9 9 9\n9 9 0 9 9 9 9 9 9 9\n9 9 9 0 9 9 9 9 9 9\n9 9 9 9 0 9 9 9 9 2\n9 9 9 9 9 0 9 9 9 9\n9 9 9 9 9 9 0 9 9 9\n9 9 9 9 9 9 9 0 9 9\n9 9 9 9 2 9 9 9 0 9\n9 2 9 9 9 9 9 9 9 0\n-1 -1 -1 -1\n8 1 1 8\n-----Sample Output-----\n12\nTo turn a single 8 into 1, it is optimal to first turn 8 into 4, then turn 4 into 9, and finally turn 9 into 1, costing 6 MP.\nThe wall contains two 8s, so the minimum total MP required is 6\u00d72=12.\n\ndef",
        "answer": "def min_mp(h, w, mp_cost, grid):\n    dp = [[0 for _ in range(w)] for _ in range(h)]\n    dp[0][0] = mp_cost[0][0]\n    for i in range(1, h):\n        dp[i][0] = dp[i-1][0] + mp_cost[i][0]\n    for j in range(1, w):\n        dp[0][j] = dp[0][j-1] + mp_cost[0][j]\n    for i in range(1, h):\n        for j in range(1, w):\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + mp_cost[i][j]\n    return dp[h-1][w-1]",
        "difficulty": "interview"
    },
    {
        "task_id": 2482,
        "prompt": "Complete the Python function given the prompt below:There are N cities. There are also K roads and L railways, extending between the cities.\nThe i-th road bidirectionally connects the p_i-th and q_i-th cities, and the i-th railway bidirectionally connects the r_i-th and s_i-th cities.\nNo two roads connect the same pair of cities. Similarly, no two railways connect the same pair of cities.\nWe will say city A and B are connected by roads if city B is reachable from city A by traversing some number of roads. Here, any city is considered to be connected to itself by roads.\nWe will also define connectivity by railways similarly.\nFor each city, find the number of the cities connected to that city by both roads and railways.\n-----Constraints-----\n - 2 \u2266 N \u2266 2*10^5\n - 1 \u2266 K, L\u2266 10^5\n - 1 \u2266 p_i, q_i, r_i, s_i \u2266 N\n - p_i < q_i\n - r_i < s_i\n - When i \u2260 j, (p_i, q_i) \u2260 (p_j, q_j)\n - When i \u2260 j, (r_i, s_i) \u2260 (r_j, s_j)\n-----Input-----\nThe input is given from Standard Input in the following format:\nN K L\np_1 q_1\n:\np_K q_K\nr_1 s_1\n:\nr_L s_L\n-----Output-----\nPrint N integers. The i-th of them should represent the number of the cities connected to the i-th city by both roads and railways.\n-----Sample Input-----\n4 3 1\n1 2\n2 3\n3 4\n2 3\n-----Sample Output-----\n1 2 2 1\nAll the four cities are connected to each other by roads.\nBy railways, only the second and third cities are connected. Thus, the answers for the cities are 1, 2, 2 and 1, respectively.\n\ndef",
        "answer": "def roadsAndLibraries(n, c_lib, c_road, cities):\n    if c_lib < c_road:\n        return c_lib * n\n    else:\n        return c_road * n",
        "difficulty": "interview"
    },
    {
        "task_id": 2483,
        "prompt": "Complete the Python function given the prompt below:Joisino is planning to record N TV programs with recorders.\nThe TV can receive C channels numbered 1 through C.\nThe i-th program that she wants to record will be broadcast from time s_i to time t_i (including time s_i but not t_i) on Channel c_i.\nHere, there will never be more than one program that are broadcast on the same channel at the same time.\nWhen the recorder is recording a channel from time S to time T (including time S but not T), it cannot record other channels from time S-0.5 to time T (including time S-0.5 but not T).\nFind the minimum number of recorders required to record the channels so that all the N programs are completely recorded.\n-----Constraints-----\n - 1\u2264N\u226410^5\n - 1\u2264C\u226430\n - 1\u2264s_i<t_i\u226410^5\n - 1\u2264c_i\u2264C\n - If c_i=c_j and i\u2260j, either t_i\u2264s_j or s_i\u2265t_j.\n - All input values are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN C\ns_1 t_1 c_1\n:\ns_N t_N c_N\n-----Output-----\nWhen the minimum required number of recorders is x, print the value of x.\n-----Sample Input-----\n3 2\n1 7 2\n7 8 1\n8 12 1\n-----Sample Output-----\n2\nTwo recorders can record all the programs, for example, as follows:\n - With the first recorder, record Channel 2 from time 1 to time 7. The first program will be recorded. Note that this recorder will be unable to record other channels from time 0.5 to time 7.\n - With the second recorder, record Channel 1 from time 7 to time 12. The second and third programs will be recorded. Note that this recorder will be unable to record other channels from time 6.5 to time 12.\n\ndef",
        "answer": "def solve(N, C, S):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2484,
        "prompt": "Complete the Python function given the prompt below:There is an integer sequence A of length N.\nFind the number of the pairs of integers l and r (1 \\leq l \\leq r \\leq N) that satisfy the following condition:\n - A_l\\ xor\\ A_{l+1}\\ xor\\...\\ xor\\ A_r = A_l\\ +\\ A_{l+1}\\ +\\...\\ +\\ A_r\nHere, xor denotes the bitwise exclusive OR.\nDefinition of XOR\nThe XOR of integers c_1, c_2,..., c_m is defined as follows:\n - Let the XOR be X. In the binary representation of X, the digit in the 2^k's place (0 \\leq k; k is an integer) is 1 if there are an odd number of integers among c_1, c_2,...c_m whose binary representation has 1 in the 2^k's place, and 0 if that number is even.\nFor example, let us compute the XOR of 3 and 5. The binary representation of 3 is 011, and the binary representation of 5 is 101, thus the XOR has the binary representation 110, that is, the XOR is 6.\n-----Constraints-----\n - 1 \\leq N \\leq 2 \\times 10^5\n - 0 \\leq A_i < 2^{20}\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 A_2... A_N\n-----Output-----\nPrint the number of the pairs of integers l and r (1 \\leq l \\leq r \\leq N) that satisfy the condition.\n-----Sample Input-----\n4\n2 5 4 6\n-----Sample Output-----\n5\n(l,r)=(1,1),(2,2),(3,3),(4,4) clearly satisfy the condition.\n(l,r)=(1,2) also satisfies the condition, since A_1\\ xor\\ A_2 = A_1\\ +\\ A_2 = 7.\nThere are no other pairs that satisfy the condition, so the answer is 5.\n\ndef",
        "answer": "def XOR(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if A[i]^A[j] == sum(A[i:j+1]):\n                count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 2485,
        "prompt": "Complete the Python function given the prompt below:We have a two-dimensional grid with H \\times W squares. There are M targets to destroy in this grid - the position of the i-th target is \\left(h_i, w_i \\right).\nTakahashi will choose one square in this grid, place a bomb there, and ignite it. The bomb will destroy all targets that are in the row or the column where the bomb is placed. It is possible to place the bomb at a square with a target.\nTakahashi is trying to maximize the number of targets to destroy. Find the maximum number of targets that can be destroyed.\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq H, W \\leq 3 \\times 10^5\n - 1 \\leq M \\leq \\min\\left(H\\times W, 3 \\times 10^5\\right)\n - 1 \\leq h_i \\leq H\n - 1 \\leq w_i \\leq W\n - \\left(h_i, w_i\\right) \\neq \\left(h_j, w_j\\right) \\left(i \\neq j\\right)\n-----Input-----\nInput is given from Standard Input in the following format:\nH W M\nh_1 w_1\n\\vdots\nh_M w_M\n-----Output-----\nPrint the answer.\n-----Sample Input-----\n2 3 3\n2 2\n1 1\n1 3\n-----Sample Output-----\n3\nWe can destroy all the targets by placing the bomb at \\left(1, 2\\right).\n\ndef",
        "answer": "def destroy_targets(H, W, M, targets):\n    # Write your code here\n    targets = sorted(targets, key=lambda x: x[0])\n    targets = sorted(targets, key=lambda x: x[1])\n    targets = sorted(targets, key=lambda x: x[0] * 100 + x[1])\n    targets = sorted(targets, key=lambda x: x[0] * 100 + x[1])\n    targets = sorted(targets, key=lambda x: x[0] * 100 + x[1])\n    targets = sorted(targets, key=lambda x: x[0] * 100 + x[1])\n    targets = sorted(targets, key=lambda x: x[0] * 100 + x[1])\n    targets = sorted(targets, key=lambda x: x[0] * 100 + x[1])\n    targets = sorted(targets, key=lambda x: x[0] * 100 + x[1])\n    targets = sorted(targets, key=lambda x: x[0] * 100 + x[1])\n    targets = sorted(targets, key=lambda x: x[0] * 100 + x[1])\n    targets = sorted(targets, key=lambda x: x[0] * 100 + x[1])\n    targets = sorted(targets, key=lambda x: x[0] * 100 + x[1])\n    targets = sorted(targets, key=lambda x: x[0] * 100 + x[1])\n",
        "difficulty": "interview"
    },
    {
        "task_id": 2486,
        "prompt": "Complete the Python function given the prompt below:AtCoDeer the deer has N cards with positive integers written on them. The number on the i-th card (1\u2264i\u2264N) is a_i.\nBecause he loves big numbers, he calls a subset of the cards good when the sum of the numbers written on the cards in the subset, is K or greater.\nThen, for each card i, he judges whether it is unnecessary or not, as follows:\n - If, for any good subset of the cards containing card i, the set that can be obtained by eliminating card i from the subset is also good, card i is unnecessary.\n - Otherwise, card i is NOT unnecessary.\nFind the number of the unnecessary cards. Here, he judges each card independently, and he does not throw away cards that turn out to be unnecessary.\n-----Constraints-----\n - All input values are integers.\n - 1\u2264N\u22645000\n - 1\u2264K\u22645000\n - 1\u2264a_i\u226410^9 (1\u2264i\u2264N)\n-----Partial Score-----\n - 300 points will be awarded for passing the test set satisfying N,K\u2264400.\n-----Input-----\nThe input is given from Standard Input in the following format:\nN K\na_1 a_2... a_N\n-----Output-----\nPrint the number of the unnecessary cards.\n-----Sample Input-----\n3 6\n1 4 3\n-----Sample Output-----\n1\nThere are two good sets: {2,3} and {1,2,3}.\nCard 1 is only contained in {1,2,3}, and this set without card 1, {2,3}, is also good. Thus, card 1 is unnecessary.\nFor card 2, a good set {2,3} without card 2, {3}, is not good. Thus, card 2 is NOT unnecessary.\nNeither is card 3 for a similar reason, hence the answer is 1.\n\ndef",
        "answer": "def main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    good = 0\n    for i in range(n):\n        if a[i] >= k:\n            good += 1\n    print(good)",
        "difficulty": "interview"
    },
    {
        "task_id": 2487,
        "prompt": "Complete the Python function given the prompt below:We have a tree with N vertices and N-1 edges, respectively numbered 1, 2,\\cdots, N and 1, 2, \\cdots, N-1. Edge i connects Vertex u_i and v_i.\nFor integers L, R (1 \\leq L \\leq R \\leq N), let us define a function f(L, R) as follows:\n - Let S be the set of the vertices numbered L through R. f(L, R) represents the number of connected components in the subgraph formed only from the vertex set S and the edges whose endpoints both belong to S.\nCompute \\sum_{L=1}^{N} \\sum_{R=L}^{N} f(L, R).\n-----Constraints-----\n - 1 \\leq N \\leq 2 \\times 10^5\n - 1 \\leq u_i, v_i \\leq N\n - The given graph is a tree.\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nu_1 v_1\nu_2 v_2\n:\nu_{N-1} v_{N-1}\n-----Output-----\nPrint \\sum_{L=1}^{N} \\sum_{R=L}^{N} f(L, R).\n-----Sample Input-----\n3\n1 3\n2 3\n-----Sample Output-----\n7\nWe have six possible pairs (L, R) as follows:\n - For L = 1, R = 1, S = \\{1\\} and we have 1 connected component.\n - For L = 1, R = 2, S = \\{1, 2\\} and we have 2 connected components.\n - For L = 1, R = 3, S = \\{1, 2, 3\\} and we have 1 connected component, since S contains both endpoints of each of the edges 1, 2.\n - For L = 2, R = 2, S = \\{2\\} and we have 1 connected component.\n - For L = 2, R = 3, S = \\{2, 3\\} and we have 1 connected component, since S contains both endpoints of Edge 2.\n - For L = 3, R = 3, S = \\{3\\} and we have 1 connected component.\nThe sum of these is 7.\n\ndef",
        "answer": "def f(L, R):\n    if L == R:\n        return 1\n    else:\n        return f(L, R - 1) + f(L + 1, R)",
        "difficulty": "interview"
    },
    {
        "task_id": 2488,
        "prompt": "Complete the Python function given the prompt below:Silver Fox is fighting with N monsters.\nThe monsters are standing in a row, and we can assume them to be standing on a number line. The i-th monster, standing at the coordinate X_i, has the health of H_i.\nSilver Fox can use bombs to attack the monsters.\nUsing a bomb at the coordinate x decreases the healths of all monsters between the coordinates x-D and x+D (inclusive) by A.\nThere is no way other than bombs to decrease the monster's health.\nSilver Fox wins when all the monsters' healths become 0 or below.\nFind the minimum number of bombs needed to win.\n-----Constraints-----\n - 1 \\leq N \\leq 2 \\times 10^5\n - 0 \\leq D \\leq 10^9\n - 1 \\leq A \\leq 10^9\n - 0 \\leq X_i \\leq 10^9\n - 1 \\leq H_i \\leq 10^9\n - X_i are distinct.\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN D A\nX_1 H_1\n:\nX_N H_N\n-----Output-----\nPrint the minimum number of bombs needed to win.\n-----Sample Input-----\n3 3 2\n1 2\n5 4\n9 2\n-----Sample Output-----\n2\nFirst, let us use a bomb at the coordinate 4 to decrease the first and second monsters' health by 2.\nThen, use a bomb at the coordinate 6 to decrease the second and third monsters' health by 2.\nNow, all the monsters' healths are 0.\nWe cannot make all the monsters' health drop to 0 or below with just one bomb.\n\ndef",
        "answer": "def min_bombs(n, d, a, x):\n    bombs = 0\n    for i in range(n):\n        if x[i] - d <= 0:\n            bombs += 1\n        else:\n            x[i] -= d\n            if x[i] - a <= 0:\n                bombs += 1\n    return bombs",
        "difficulty": "interview"
    },
    {
        "task_id": 2489,
        "prompt": "Complete the Python function given the prompt below:Given is a number sequence A of length N.\nFind the number of integers i \\left(1 \\leq i \\leq N\\right) with the following property:\n - For every integer j \\left(1 \\leq j \\leq N\\right) such that i \\neq j, A_j does not divide A_i.\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 2 \\times 10^5\n - 1 \\leq A_i \\leq 10^6\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 A_2 \\cdots A_N\n-----Output-----\nPrint the answer.\n-----Sample Input-----\n5\n24 11 8 3 16\n-----Sample Output-----\n3\nThe integers with the property are 2, 3, and 4.\n\ndef",
        "answer": "def count_integers(n, a):\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if i!= j and a[j] % a[i]!= 0:\n                count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 2490,
        "prompt": "Complete the Python function given the prompt below:In the Kingdom of AtCoder, only banknotes are used as currency. There are 10^{100}+1 kinds of banknotes, with the values of 1, 10, 10^2, 10^3, \\dots, 10^{(10^{100})}. You have come shopping at a mall and are now buying a takoyaki machine with a value of N. (Takoyaki is the name of a Japanese snack.)\nTo make the payment, you will choose some amount of money which is at least N and give it to the clerk. Then, the clerk gives you back the change, which is the amount of money you give minus N.\nWhat will be the minimum possible number of total banknotes used by you and the clerk, when both choose the combination of banknotes to minimize this count?\nAssume that you have sufficient numbers of banknotes, and so does the clerk.\n-----Constraints-----\n - N is an integer between 1 and 10^{1,000,000} (inclusive).\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n-----Output-----\nPrint the minimum possible number of total banknotes used by you and the clerk.\n-----Sample Input-----\n36\n-----Sample Output-----\n8\nIf you give four banknotes of value 10 each, and the clerk gives you back four banknotes of value 1 each, a total of eight banknotes are used.\nThe payment cannot be made with less than eight banknotes in total, so the answer is 8.\n\ndef",
        "answer": "def main():\n    n = int(input())\n    print(n - n % 10)",
        "difficulty": "interview"
    },
    {
        "task_id": 2491,
        "prompt": "Complete the Python function given the prompt below:There is a directed graph with N vertices and M edges.\nThe i-th edge (1\u2264i\u2264M) points from vertex a_i to vertex b_i, and has a weight c_i.\nWe will play the following single-player game using this graph and a piece.\nInitially, the piece is placed at vertex 1, and the score of the player is set to 0.\nThe player can move the piece as follows:\n - When the piece is placed at vertex a_i, move the piece along the i-th edge to vertex b_i. After this move, the score of the player is increased by c_i.\nThe player can end the game only when the piece is placed at vertex N.\nThe given graph guarantees that it is possible to traverse from vertex 1 to vertex N.\nWhen the player acts optimally to maximize the score at the end of the game, what will the score be?\nIf it is possible to increase the score indefinitely, print inf.\n-----Constraints-----\n - 2\u2264N\u22641000 \n - 1\u2264M\u2264min(N(N-1),2000) \n - 1\u2264a_i,b_i\u2264N (1\u2264i\u2264M) \n - a_i\u2260b_i (1\u2264i\u2264M) \n - a_i\u2260a_j or b_i\u2260b_j (1\u2264i<j\u2264M) \n - -10^9\u2264c_i\u226410^9 (1\u2264i\u2264M)\n - c_i is an integer.\n - In the given graph, there exists a path from vertex 1 to vertex N.\n-----Input-----\nInput is given from Standard Input in the following format:  \nN M  \na_1 b_1 c_1  \na_2 b_2 c_2\n:  \na_M b_M c_M  \n-----Output-----\nPrint the maximum possible score at the end of the game, if it is finite. If it is possible to increase the score indefinitely, print inf.  \n-----Sample Input-----\n3 3\n1 2 4\n2 3 3\n1 3 5\n-----Sample Output-----\n7\nThere are two ways to move the piece to vertex N=3:\n - vertex 1 \u2192 vertex 2 \u2192 vertex 3 : score 4+3=7\n - vertex 1 \u2192 vertex 3 : score 5\nThus, the maximum possible score at the end of the game is 7.\n\ndef",
        "answer": "def game(n, m, a, b, c):\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(m):\n        dp[a[i]-1][b[i]-1] = c[i]\n    for i in range(n):\n        dp[i][i] = -1\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                if dp[j][k] > dp[j][i] + dp[i][k]:\n                    dp[j][k] = dp[j][i] + dp[i][k]\n    return max(dp[0])",
        "difficulty": "interview"
    },
    {
        "task_id": 2492,
        "prompt": "Complete the Python function given the prompt below:We have N integers A_1, A_2,..., A_N.\nThere are \\frac{N(N-1)}{2} ways to choose two of them and form a pair. If we compute the product of each of those pairs and sort the results in ascending order, what will be the K-th number in that list?\n-----Constraints-----\n - All values in input are integers.\n - 2 \\leq N \\leq 2 \\times 10^5\n - 1 \\leq K \\leq \\frac{N(N-1)}{2}\n - -10^9 \\leq A_i \\leq 10^9\\ (1 \\leq i \\leq N)\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\nA_1 A_2 \\dots A_N\n-----Output-----\nPrint the answer.\n-----Sample Input-----\n4 3\n3 3 -4 -2\n-----Sample Output-----\n-6\nThere are six ways to form a pair. The products of those pairs are 9, -12, -6, -12, -6, 8.\nSorting those numbers in ascending order, we have -12, -12, -6, -6, 8, 9. The third number in this list is -6.\n\ndef",
        "answer": "def product_of_pair(arr, k):\n    arr.sort()\n    return arr[k-1]",
        "difficulty": "interview"
    },
    {
        "task_id": 2493,
        "prompt": "Complete the Python function given the prompt below:You are given an integer sequence of length n+1, a_1,a_2,...,a_{n+1}, which consists of the n integers 1,...,n.\nIt is known that each of the n integers 1,...,n appears at least once in this sequence.\nFor each integer k=1,...,n+1, find the number of the different subsequences (not necessarily contiguous) of the given sequence with length k, modulo 10^9+7.\n-----Notes-----\n - If the contents of two subsequences are the same, they are not separately counted even if they originate from different positions in the original sequence.\n - A subsequence of a sequence a with length k is a sequence obtained by selecting k of the elements of a and arranging them without changing their relative order. For example, the sequences 1,3,5 and 1,2,3 are subsequences of 1,2,3,4,5, while 3,1,2 and 1,10,100 are not.\n-----Constraints-----\n - 1 \\leq n \\leq 10^5\n - 1 \\leq a_i \\leq n\n - Each of the integers 1,...,n appears in the sequence.\n - n and a_i are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nn\na_1 a_2... a_{n+1}\n-----Output-----\nPrint n+1 lines.\nThe k-th line should contain the number of the different subsequences of the given sequence with length k, modulo 10^9+7.\n-----Sample Input-----\n3\n1 2 1 3\n-----Sample Output-----\n3\n5\n4\n1\nThere are three subsequences with length 1: 1 and 2 and 3.\nThere are five subsequences with length 2: 1,1 and 1,2 and 1,3 and 2,1 and 2,3.\nThere are four subsequences with length 3: 1,1,3 and 1,2,1 and 1,2,3 and 2,1,3.\nThere is one subsequence with length 4: 1,2,1,3.\n\ndef",
        "answer": "def subsequences(n, a):\n    # Write your code here\n    dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    dp[0][0] = 1\n    for i in range(1, n+1):\n        dp[i][0] = 1\n        for j in range(1, n+1):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    res = 0\n    for i in range(1, n+1):\n        res += dp[n][i]\n    return res % (10**9+7)",
        "difficulty": "interview"
    },
    {
        "task_id": 2494,
        "prompt": "Complete the Python function given the prompt below:Find the smallest possible sum of the digits in the decimal notation of a positive multiple of K.\n-----Constraints-----\n - 2 \\leq K \\leq 10^5\n - K is an integer.\n-----Input-----\nInput is given from Standard Input in the following format:\nK\n-----Output-----\nPrint the smallest possible sum of the digits in the decimal notation of a positive multiple of K.\n-----Sample Input-----\n6\n-----Sample Output-----\n3\n12=6\u00d72 yields the smallest sum.\n\ndef",
        "answer": "def sum_of_digits(k):\n    sum = 0\n    while k > 0:\n        sum += k % 10\n        k //= 10\n    return sum",
        "difficulty": "interview"
    },
    {
        "task_id": 2495,
        "prompt": "Complete the Python function given the prompt below:You are given an integer sequence of length N. The i-th term in the sequence is a_i.\nIn one operation, you can select a term and either increment or decrement it by one.\nAt least how many operations are necessary to satisfy the following conditions?\n - For every i (1\u2264i\u2264n), the sum of the terms from the 1-st through i-th term is not zero.\n - For every i (1\u2264i\u2264n-1), the sign of the sum of the terms from the 1-st through i-th term, is different from the sign of the sum of the terms from the 1-st through (i+1)-th term.\n-----Constraints-----\n - 2 \u2264 n \u2264 10^5\n - |a_i| \u2264 10^9\n - Each a_i is an integer.\n-----Input-----\nInput is given from Standard Input in the following format:\nn\na_1 a_2... a_n\n-----Output-----\nPrint the minimum necessary count of operations.\n-----Sample Input-----\n4\n1 -3 1 0\n-----Sample Output-----\n4\nFor example, the given sequence can be transformed into 1, -2, 2, -2 by four operations. The sums of the first one, two, three and four terms are 1, -1, 1 and -1, respectively, which satisfy the conditions.\n\ndef",
        "answer": "def count_operations(n, a):\n    count = 0\n    for i in range(n):\n        if a[i] < 0:\n            count += 1\n        for j in range(i + 1, n):\n            if a[i] + a[j] < 0:\n                count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 2496,
        "prompt": "Complete the Python function given the prompt below:We have N integers. The i-th number is A_i.\n\\{A_i\\} is said to be pairwise coprime when GCD(A_i,A_j)=1 holds for every pair (i, j) such that 1\\leq i < j \\leq N.\n\\{A_i\\} is said to be setwise coprime when \\{A_i\\} is not pairwise coprime but GCD(A_1,\\ldots,A_N)=1.\nDetermine if \\{A_i\\} is pairwise coprime, setwise coprime, or neither.\nHere, GCD(\\ldots) denotes greatest common divisor.\n-----Constraints-----\n - 2 \\leq N \\leq 10^6\n - 1 \\leq A_i\\leq 10^6\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 \\ldots A_N\n-----Output-----\nIf \\{A_i\\} is pairwise coprime, print pairwise coprime; if \\{A_i\\} is setwise coprime, print setwise coprime; if neither, print not coprime.\n-----Sample Input-----\n3\n3 4 5\n-----Sample Output-----\npairwise coprime\nGCD(3,4)=GCD(3,5)=GCD(4,5)=1, so they are pairwise coprime.\n\ndef",
        "answer": "def coprime(n):\n    for i in range(1,n):\n        if gcd(n,i)==1:\n            print(\"pairwise coprime\")\n        else:\n            print(\"not coprime\")",
        "difficulty": "interview"
    },
    {
        "task_id": 2497,
        "prompt": "Complete the Python function given the prompt below:There are N points in a two-dimensional plane. The initial coordinates of the i-th point are (x_i, y_i). Now, each point starts moving at a speed of 1 per second, in a direction parallel to the x- or y- axis. You are given a character d_i that represents the specific direction in which the i-th point moves, as follows:\n - If d_i = R, the i-th point moves in the positive x direction;\n - If d_i = L, the i-th point moves in the negative x direction;\n - If d_i = U, the i-th point moves in the positive y direction;\n - If d_i = D, the i-th point moves in the negative y direction.\nYou can stop all the points at some moment of your choice after they start moving (including the moment they start moving).\nThen, let x_{max} and x_{min} be the maximum and minimum among the x-coordinates of the N points, respectively. Similarly, let y_{max} and y_{min} be the maximum and minimum among the y-coordinates of the N points, respectively.\nFind the minimum possible value of (x_{max} - x_{min}) \\times (y_{max} - y_{min}) and print it.\n-----Constraints-----\n - 1 \\leq N \\leq 10^5\n - -10^8 \\leq x_i,\\ y_i \\leq 10^8\n - x_i and y_i are integers.\n - d_i is R, L, U, or D.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nx_1 y_1 d_1\nx_2 y_2 d_2\n.\n.\n.\nx_N y_N d_N\n-----Output-----\nPrint the minimum possible value of (x_{max} - x_{min}) \\times (y_{max} - y_{min}).\nThe output will be considered correct when its absolute or relative error from the judge's output is at most 10^{-9}.\n-----Sample Input-----\n2\n0 3 D\n3 0 L\n-----Sample Output-----\n0\nAfter three seconds, the two points will meet at the origin. The value in question will be 0 at that moment.\n\ndef",
        "answer": "def min_time(points):\n    x_max = 0\n    x_min = 0\n    y_max = 0\n    y_min = 0\n    for i in range(len(points)):\n        if points[i][2] == 'R':\n            x_max = max(x_max, points[i][0])\n        elif points[i][2] == 'L':\n            x_min = min(x_min, points[i][0])\n        elif points[i][2] == 'U':\n            y_max = max(y_max, points[i][1])\n        elif points[i][2] == 'D':\n            y_min = min(y_min, points[i][1])\n    return (x_max - x_min) * (y_max - y_min)",
        "difficulty": "interview"
    },
    {
        "task_id": 2498,
        "prompt": "Complete the Python function given the prompt below:Given are a sequence A= {a_1,a_2,......a_N} of N positive even numbers, and an integer M.\nLet a semi-common multiple of A be a positive integer X that satisfies the following condition for every k (1 \\leq k \\leq N):\n - There exists a non-negative integer p such that X= a_k \\times (p+0.5).\nFind the number of semi-common multiples of A among the integers between 1 and M (inclusive).\n-----Constraints-----\n - 1 \\leq N \\leq 10^5\n - 1 \\leq M \\leq 10^9\n - 2 \\leq a_i \\leq 10^9\n - a_i is an even number.\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\na_1 a_2... a_N\n-----Output-----\nPrint the number of semi-common multiples of A among the integers between 1 and M (inclusive).\n-----Sample Input-----\n2 50\n6 10\n-----Sample Output-----\n2\n - 15 = 6  \\times 2.5 \n - 15 = 10 \\times 1.5 \n - 45 = 6  \\times 7.5 \n - 45 = 10 \\times 4.5 \nThus, 15 and 45 are semi-common multiples of A. There are no other semi-common multiples of A between 1 and 50, so the answer is 2.\n\ndef",
        "answer": "def semi_common_multiples(A, M):\n  count = 0\n  for i in range(1, M+1):\n    if i % 2 == 0:\n      for j in range(len(A)):\n        if i % A[j] == 0:\n          count += 1\n          break\n  return count",
        "difficulty": "interview"
    },
    {
        "task_id": 2499,
        "prompt": "Complete the Python function given the prompt below:We have N non-negative integers: A_1, A_2,..., A_N.\nConsider painting at least one and at most N-1 integers among them in red, and painting the rest in blue.\nLet the beauty of the painting be the \\mbox{XOR} of the integers painted in red, plus the \\mbox{XOR} of the integers painted in blue.\nFind the maximum possible beauty of the painting.What is \\mbox{XOR}?\nThe bitwise \\mbox{XOR} x_1 \\oplus x_2 \\oplus \\ldots \\oplus x_n of n non-negative integers x_1, x_2, \\ldots, x_n is defined as follows:\n -  When x_1 \\oplus x_2 \\oplus \\ldots \\oplus x_n is written in base two, the digit in the 2^k's place (k \\geq 0) is 1 if the number of integers among x_1, x_2, \\ldots, x_n whose binary representations have 1 in the 2^k's place is odd, and 0 if that count is even. \nFor example, 3 \\oplus 5 = 6.\n-----Constraints-----\n - All values in input are integers.\n - 2 \\leq N \\leq 10^5\n - 0 \\leq A_i < 2^{60}\\ (1 \\leq i \\leq N)\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 A_2... A_N\n-----Output-----\nPrint the maximum possible beauty of the painting.\n-----Sample Input-----\n3\n3 6 5\n-----Sample Output-----\n12\nIf we paint 3, 6, 5 in blue, red, blue, respectively, the beauty will be (6) + (3 \\oplus 5) = 12.\nThere is no way to paint the integers resulting in greater beauty than 12, so the answer is 12.\n\ndef",
        "answer": "def max_beauty(n, a):\n    # Write your code here\n    a.sort()\n    max_beauty = 0\n    for i in range(n-1):\n        max_beauty += a[i] ^ a[i+1]\n    return max_beauty",
        "difficulty": "interview"
    }
]