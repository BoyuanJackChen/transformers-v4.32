[
    {
        "task_id": 900,
        "prompt": "Complete the Python function given the prompt below:Given is a string S. Each character in S is either a digit (0,..., 9) or?.\nAmong the integers obtained by replacing each occurrence of? with a digit, how many have a remainder of 5 when divided by 13? An integer may begin with 0.\nSince the answer can be enormous, print the count modulo 10^9+7.\n-----Constraints-----\n - S is a string consisting of digits (0,..., 9) and?.\n - 1 \\leq |S| \\leq 10^5\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n-----Output-----\nPrint the number of integers satisfying the condition, modulo 10^9+7.\n-----Sample Input-----\n??2??5\n-----Sample Output-----\n768\nFor example, 482305, 002865, and 972665 satisfy the condition.\n\ndef",
        "answer": "def solve(S):\n    count = 0\n    for i in range(len(S)):\n        if S[i] == '?':\n            count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 901,
        "prompt": "Complete the Python function given the prompt below:Since the giant heads have appeared in the sky all humanity is in danger, so all Ricks and Mortys from all parallel universes are gathering in groups to find a solution to get rid of them. \nThere are n parallel universes participating in this event (n Ricks and n Mortys). I. e. each of n universes has one Rick and one Morty. They're gathering in m groups. Each person can be in many groups and a group can contain an arbitrary number of members.\nRicks and Mortys have registered online in these groups. So, a person can have joined a group more than once (developer of this website hadn't considered this possibility). [Image] \nSummer from universe #1 knows that in each parallel universe (including hers) exactly one of Rick and Morty from that universe is a traitor and is loyal, but no one knows which one. She knows that we are doomed if there's a group such that every member in that group is a traitor (they will plan and destroy the world). \nSummer knows that if there's a possibility that world ends (there's a group where all members are traitors) she should immediately cancel this event. So she wants to know if she should cancel the event. You have to tell her yes if and only if there's at least one scenario (among all 2^{n} possible scenarios, 2 possible scenarios for who a traitor in each universe) such that in that scenario the world will end.\n-----Input-----\nThe first line of input contains two integers n and m (1 \u2264 n, m \u2264 10^4) \u2014 number of universes and number of groups respectively.\nThe next m lines contain the information about the groups. i-th of them first contains an integer k (number of times someone joined i-th group, k > 0) followed by k integers v_{i}, 1, v_{i}, 2,..., v_{i}, k. If v_{i}, j is negative, it means that Rick from universe number  - v_{i}, j has joined this group and otherwise it means that Morty from universe number v_{i}, j has joined it.\nSum of k for all groups does not exceed 10^4.\n-----Output-----\nIn a single line print the answer to Summer's question. Print \"YES\" if she should cancel the event and \"NO\" otherwise.\n-----Examples-----\nInput\n4 2\n1 -3\n4 -2 3 2 -3\nOutput\nYES\nInput\n5 2\n5 3 -2 1 -1 5\n3 -5 2 5\nOutput\nNO\nInput\n7 2\n3 -1 6 7\n7 -5 4 2 4 7 -3 4\nOutput\nYES\n-----Note-----\nIn the first sample testcase, 1st group only contains the Rick from universe number 3, so in case he's a traitor, then all members of this group are traitors and so Summer should cancel the event.\n\ndef",
        "answer": "def is_traitor(group):\n    traitors = set()\n    for member in group:\n        if member < 0:\n            traitors.add(abs(member))\n    return len(traitors) == len(group)",
        "difficulty": "interview"
    },
    {
        "task_id": 902,
        "prompt": "Complete the Python function given the prompt below:n people are standing in a line to play table tennis. At first, the first two players in the line play a game. Then the loser goes to the end of the line, and the winner plays with the next person from the line, and so on. They play until someone wins k games in a row. This player becomes the winner.\nFor each of the participants, you know the power to play table tennis, and for all players these values are different. In a game the player with greater power always wins. Determine who will be the winner.\n-----Input-----\nThe first line contains two integers: n and k (2 \u2264 n \u2264 500, 2 \u2264 k \u2264 10^12)\u00a0\u2014 the number of people and the number of wins.\nThe second line contains n integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 n) \u2014 powers of the player. It's guaranteed that this line contains a valid permutation, i.e. all a_{i} are distinct.\n-----Output-----\nOutput a single integer \u2014 power of the winner.\n-----Examples-----\nInput\n2 2\n1 2\nOutput\n2 \nInput\n4 2\n3 1 2 4\nOutput\n3 \nInput\n6 2\n6 5 3 1 2 4\nOutput\n6 \nInput\n2 10000000000\n2 1\nOutput\n2\n-----Note-----\nGames in the second sample:\n3 plays with 1. 3 wins. 1 goes to the end of the line.\n3 plays with 2. 3 wins. He wins twice in a row. He becomes the winner.\n\ndef",
        "answer": "def tennis_game(n, k):\n    if n == 1:\n        return 1\n    if k == 1:\n        return n\n    return tennis_game(n-1, k) + tennis_game(n-1, k-1)",
        "difficulty": "interview"
    },
    {
        "task_id": 903,
        "prompt": "Complete the Python function given the prompt below:You are given an array $a$ of $n$ integers, where $n$ is odd. You can make the following operation with it:  Choose one of the elements of the array (for example $a_i$) and increase it by $1$ (that is, replace it with $a_i + 1$). \nYou want to make the median of the array the largest possible using at most $k$ operations.\nThe median of the odd-sized array is the middle element after the array is sorted in non-decreasing order. For example, the median of the array $[1, 5, 2, 3, 5]$ is $3$.\n-----Input-----\nThe first line contains two integers $n$ and $k$ ($1 \\le n \\le 2 \\cdot 10^5$, $n$ is odd, $1 \\le k \\le 10^9$)\u00a0\u2014 the number of elements in the array and the largest number of operations you can make.\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$).\n-----Output-----\nPrint a single integer\u00a0\u2014 the maximum possible median after the operations.\n-----Examples-----\nInput\n3 2\n1 3 5\nOutput\n5\nInput\n5 5\n1 2 1 1 1\nOutput\n3\nInput\n7 7\n4 1 2 4 3 4 4\nOutput\n5\n-----Note-----\nIn the first example, you can increase the second element twice. Than array will be $[1, 5, 5]$ and it's median is $5$.\nIn the second example, it is optimal to increase the second number and than increase third and fifth. This way the answer is $3$.\nIn the third example, you can make four operations: increase first, fourth, sixth, seventh element. This way the array will be $[5, 1, 2, 5, 3, 5, 5]$ and the median will be $5$.\n\ndef",
        "answer": "def median(a, n, k):\n    a.sort()\n    if k % 2 == 0:\n        return (a[n//2] + a[n//2 - 1]) / 2\n    else:\n        return a[n//2]",
        "difficulty": "interview"
    },
    {
        "task_id": 904,
        "prompt": "Complete the Python function given the prompt below:You are given a text of single-space separated words, consisting of small and capital Latin letters.\nVolume of the word is number of capital letters in the word. Volume of the text is maximum volume of all words in the text.\nCalculate the volume of the given text.\n-----Input-----\nThe first line contains one integer number n (1 \u2264 n \u2264 200) \u2014 length of the text.\nThe second line contains text of single-space separated words s_1, s_2,..., s_{i}, consisting only of small and capital Latin letters.\n-----Output-----\nPrint one integer number \u2014 volume of text.\n-----Examples-----\nInput\n7\nNonZERO\nOutput\n5\nInput\n24\nthis is zero answer text\nOutput\n0\nInput\n24\nHarbour Space University\nOutput\n1\n-----Note-----\nIn the first example there is only one word, there are 5 capital letters in it.\nIn the second example all of the words contain 0 capital letters.\n\ndef",
        "answer": "def volume_of_text(text):\n    text = text.split()\n    max_volume = 0\n    for word in text:\n        volume = 0\n        for letter in word:\n            if letter.isupper():\n                volume += 1\n        if volume > max_volume:\n            max_volume = volume\n    return max_volume",
        "difficulty": "interview"
    },
    {
        "task_id": 905,
        "prompt": "Complete the Python function given the prompt below:Caisa is going to have a party and he needs to buy the ingredients for a big chocolate cake. For that he is going to the biggest supermarket in town.\nUnfortunately, he has just s dollars for sugar. But that's not a reason to be sad, because there are n types of sugar in the supermarket, maybe he able to buy one. But that's not all. The supermarket has very unusual exchange politics: instead of cents the sellers give sweets to a buyer as a change. Of course, the number of given sweets always doesn't exceed 99, because each seller maximizes the number of dollars in the change (100 cents can be replaced with a dollar).\nCaisa wants to buy only one type of sugar, also he wants to maximize the number of sweets in the change. What is the maximum number of sweets he can get? Note, that Caisa doesn't want to minimize the cost of the sugar, he only wants to get maximum number of sweets as change. \n-----Input-----\nThe first line contains two space-separated integers n, s (1 \u2264 n, s \u2264 100).\nThe i-th of the next n lines contains two integers x_{i}, y_{i} (1 \u2264 x_{i} \u2264 100;\u00a00 \u2264 y_{i} < 100), where x_{i} represents the number of dollars and y_{i} the number of cents needed in order to buy the i-th type of sugar.\n-----Output-----\nPrint a single integer representing the maximum number of sweets he can buy, or -1 if he can't buy any type of sugar.\n-----Examples-----\nInput\n5 10\n3 90\n12 0\n9 70\n5 50\n7 0\nOutput\n50\nInput\n5 5\n10 10\n20 20\n30 30\n40 40\n50 50\nOutput\n-1\n-----Note-----\nIn the first test sample Caisa can buy the fourth type of sugar, in such a case he will take 50 sweets as a change.\n\ndef",
        "answer": "def sweets(n, s):\n    if n == 1:\n        return s\n    else:\n        return sweets(n-1, s) + max(0, s//100)",
        "difficulty": "interview"
    },
    {
        "task_id": 906,
        "prompt": "Complete the Python function given the prompt below:Ralph has a magic field which is divided into n \u00d7 m blocks. That is to say, there are n rows and m columns on the field. Ralph can put an integer in each block. However, the magic field doesn't always work properly. It works only if the product of integers in each row and each column equals to k, where k is either 1 or -1.\nNow Ralph wants you to figure out the number of ways to put numbers in each block in such a way that the magic field works properly. Two ways are considered different if and only if there exists at least one block where the numbers in the first way and in the second way are different. You are asked to output the answer modulo 1000000007 = 10^9 + 7.\nNote that there is no range of the numbers to put in the blocks, but we can prove that the answer is not infinity.\n-----Input-----\nThe only line contains three integers n, m and k (1 \u2264 n, m \u2264 10^18, k is either 1 or -1).\n-----Output-----\nPrint a single number denoting the answer modulo 1000000007.\n-----Examples-----\nInput\n1 1 -1\nOutput\n1\nInput\n1 3 1\nOutput\n1\nInput\n3 3 -1\nOutput\n16\n-----Note-----\nIn the first example the only way is to put -1 into the only block.\nIn the second example the only way is to put 1 into every block.\n\ndef",
        "answer": "def magic_field(n, m, k):\n    if n == 1 and m == 1:\n        return 1\n    if n == 1:\n        return k\n    if m == 1:\n        return k\n    return (magic_field(n - 1, m, k) + magic_field(n, m - 1, k)) % 1000000007",
        "difficulty": "interview"
    },
    {
        "task_id": 907,
        "prompt": "Complete the Python function given the prompt below:Toad Ivan has $m$ pairs of integers, each integer is between $1$ and $n$, inclusive. The pairs are $(a_1, b_1), (a_2, b_2), \\ldots, (a_m, b_m)$. \nHe asks you to check if there exist two integers $x$ and $y$ ($1 \\leq x < y \\leq n$) such that in each given pair at least one integer is equal to $x$ or $y$.\n-----Input-----\nThe first line contains two space-separated integers $n$ and $m$ ($2 \\leq n \\leq 300\\,000$, $1 \\leq m \\leq 300\\,000$)\u00a0\u2014 the upper bound on the values of integers in the pairs, and the number of given pairs.\nThe next $m$ lines contain two integers each, the $i$-th of them contains two space-separated integers $a_i$ and $b_i$ ($1 \\leq a_i, b_i \\leq n, a_i \\neq b_i$)\u00a0\u2014 the integers in the $i$-th pair.\n-----Output-----\nOutput \"YES\" if there exist two integers $x$ and $y$ ($1 \\leq x < y \\leq n$) such that in each given pair at least one integer is equal to $x$ or $y$. Otherwise, print \"NO\". You can print each letter in any case (upper or lower).\n-----Examples-----\nInput\n4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\nOutput\nNO\nInput\n5 4\n1 2\n2 3\n3 4\n4 5\nOutput\nYES\nInput\n300000 5\n1 2\n1 2\n1 2\n1 2\n1 2\nOutput\nYES\n-----Note-----\nIn the first example, you can't choose any $x$, $y$ because for each such pair you can find a given pair where both numbers are different from chosen integers.\nIn the second example, you can choose $x=2$ and $y=4$.\nIn the third example, you can choose $x=1$ and $y=2$.\n\ndef",
        "answer": "def check(n, m, a):\n    for i in range(m):\n        if a[i][0] == a[i][1]:\n            return \"YES\"\n    return \"NO\"",
        "difficulty": "interview"
    },
    {
        "task_id": 908,
        "prompt": "Complete the Python function given the prompt below:Vasiliy is fond of solving different tasks. Today he found one he wasn't able to solve himself, so he asks you to help.\nVasiliy is given n strings consisting of lowercase English letters. He wants them to be sorted in lexicographical order (as in the dictionary), but he is not allowed to swap any of them. The only operation he is allowed to do is to reverse any of them (first character becomes last, second becomes one before last and so on).\nTo reverse the i-th string Vasiliy has to spent c_{i} units of energy. He is interested in the minimum amount of energy he has to spent in order to have strings sorted in lexicographical order.\nString A is lexicographically smaller than string B if it is shorter than B (|A| < |B|) and is its prefix, or if none of them is a prefix of the other and at the first position where they differ character in A is smaller than the character in B.\nFor the purpose of this problem, two equal strings nearby do not break the condition of sequence being sorted lexicographically.\n-----Input-----\nThe first line of the input contains a single integer n (2 \u2264 n \u2264 100 000)\u00a0\u2014 the number of strings.\nThe second line contains n integers c_{i} (0 \u2264 c_{i} \u2264 10^9), the i-th of them is equal to the amount of energy Vasiliy has to spent in order to reverse the i-th string. \nThen follow n lines, each containing a string consisting of lowercase English letters. The total length of these strings doesn't exceed 100 000.\n-----Output-----\nIf it is impossible to reverse some of the strings such that they will be located in lexicographical order, print  - 1. Otherwise, print the minimum total amount of energy Vasiliy has to spent.\n-----Examples-----\nInput\n2\n1 2\nba\nac\nOutput\n1\nInput\n3\n1 3 1\naa\nba\nac\nOutput\n1\nInput\n2\n5 5\nbbb\naaa\nOutput\n-1\nInput\n2\n3 3\naaa\naa\nOutput\n-1\n-----Note-----\nIn the second sample one has to reverse string 2 or string 3. To amount of energy required to reverse the string 3 is smaller.\nIn the third sample, both strings do not change after reverse and they go in the wrong order, so the answer is  - 1.\nIn the fourth sample, both strings consists of characters 'a' only, but in the sorted order string \"aa\" should go before string \"aaa\", thus the answer is  - 1.\n\ndef",
        "answer": "def sort_strings(strings):\n    # Write your code here\n    strings.sort(key=lambda x: x[::-1])\n    return strings",
        "difficulty": "interview"
    },
    {
        "task_id": 909,
        "prompt": "Complete the Python function given the prompt below:Petya studies in a school and he adores Maths. His class has been studying arithmetic expressions. On the last class the teacher wrote three positive integers a, b, c on the blackboard. The task was to insert signs of operations '+' and '*', and probably brackets between the numbers so that the value of the resulting expression is as large as possible. Let's consider an example: assume that the teacher wrote numbers 1, 2 and 3 on the blackboard. Here are some ways of placing signs and brackets:  1+2*3=7  1*(2+3)=5  1*2*3=6  (1+2)*3=9 \nNote that you can insert operation signs only between a and b, and between b and c, that is, you cannot swap integers. For instance, in the given sample you cannot get expression (1+3)*2.\nIt's easy to see that the maximum value that you can obtain is 9.\nYour task is: given a, b and c print the maximum value that you can get.\n-----Input-----\nThe input contains three integers a, b and c, each on a single line (1 \u2264 a, b, c \u2264 10).\n-----Output-----\nPrint the maximum value of the expression that you can obtain.\n-----Examples-----\nInput\n1\n2\n3\nOutput\n9\nInput\n2\n10\n3\nOutput\n60\n\ndef",
        "answer": "def max_value(a, b, c):\n    return max(a+b*c, a*(b+c), a*b*c)",
        "difficulty": "interview"
    },
    {
        "task_id": 910,
        "prompt": "Complete the Python function given the prompt below:There are n parliamentarians in Berland. They are numbered with integers from 1 to n. It happened that all parliamentarians with odd indices are Democrats and all parliamentarians with even indices are Republicans.\nNew parliament assembly hall is a rectangle consisting of a \u00d7 b chairs\u00a0\u2014 a rows of b chairs each. Two chairs are considered neighbouring if they share as side. For example, chair number 5 in row number 2 is neighbouring to chairs number 4 and 6 in this row and chairs with number 5 in rows 1 and 3. Thus, chairs have four neighbours in general, except for the chairs on the border of the hall\nWe know that if two parliamentarians from one political party (that is two Democrats or two Republicans) seat nearby they spent all time discussing internal party issues.\nWrite the program that given the number of parliamentarians and the sizes of the hall determine if there is a way to find a seat for any parliamentarian, such that no two members of the same party share neighbouring seats.\n-----Input-----\nThe first line of the input contains three integers n, a and b (1 \u2264 n \u2264 10 000, 1 \u2264 a, b \u2264 100)\u00a0\u2014 the number of parliamentarians, the number of rows in the assembly hall and the number of seats in each row, respectively.\n-----Output-----\nIf there is no way to assigns seats to parliamentarians in a proper way print -1.\nOtherwise print the solution in a lines, each containing b integers. The j-th integer of the i-th line should be equal to the index of parliamentarian occupying this seat, or 0 if this seat should remain empty. If there are multiple possible solution, you may print any of them.\n-----Examples-----\nInput\n3 2 2\nOutput\n0 3\n1 2\nInput\n8 4 3\nOutput\n7 8 3\n0 1 4\n6 0 5\n0 2 0\nInput\n10 2 2\nOutput\n-1\n-----Note-----\nIn the first sample there are many other possible solutions. For example, 3 2\n0 1\nand 2 1\n3 0\nThe following assignment 3 2\n1 0\nis incorrect, because parliamentarians 1 and 3 are both from Democrats party but will occupy neighbouring seats.\n\ndef",
        "answer": "def parliament(n, a, b):\n    if n % 2 == 0:\n        return -1\n    if n == 1:\n        return 0\n    if a == 1:\n        return 0\n    if b == 1:\n        return 0\n    if a == b:\n        return 0\n    if a == 1:\n        return 1\n    if b == 1:\n        return 1\n    if a == 2:\n        return 2\n    if b == 2:\n        return 2\n    if a == 3:\n        return 3\n    if b == 3:\n        return 3\n    if a == 4:\n        return 4\n    if b == 4:\n        return 4\n    if a == 5:\n        return 5\n    if b == 5:\n        return 5\n    if a == 6:\n        return 6\n    if b == 6:\n        return 6\n    if a == 7:\n        return 7\n    if b == 7:\n        return 7\n    if a == 8:\n        return 8\n    if b == 8:\n        return 8\n    if a == 9:\n        return 9\n    if b == 9:\n        return 9\n    if a == 10:\n        return 10\n    if b == 10:\n        return 10\n    if a == 11:\n        return 11\n    if b == 11:\n        return 11\n    if a == 12:\n        return 12\n    if b == 12:\n        return 12\n    if a == 13:\n        return 13\n    if b == 13:\n        return 13\n    if a == 14:\n        return 14\n    if b == 14:\n        return 14\n    if a == 15:\n        return 15\n    if b == 15:\n        return 15\n    if a",
        "difficulty": "interview"
    },
    {
        "task_id": 911,
        "prompt": "Complete the Python function given the prompt below:Limak and Radewoosh are going to compete against each other in the upcoming algorithmic contest. They are equally skilled but they won't solve problems in the same order.\nThere will be n problems. The i-th problem has initial score p_{i} and it takes exactly t_{i} minutes to solve it. Problems are sorted by difficulty\u00a0\u2014 it's guaranteed that p_{i} < p_{i} + 1 and t_{i} < t_{i} + 1.\nA constant c is given too, representing the speed of loosing points. Then, submitting the i-th problem at time x (x minutes after the start of the contest) gives max(0,  p_{i} - c\u00b7x) points.\nLimak is going to solve problems in order 1, 2,..., n (sorted increasingly by p_{i}). Radewoosh is going to solve them in order n, n - 1,..., 1 (sorted decreasingly by p_{i}). Your task is to predict the outcome\u00a0\u2014 print the name of the winner (person who gets more points at the end) or a word \"Tie\" in case of a tie.\nYou may assume that the duration of the competition is greater or equal than the sum of all t_{i}. That means both Limak and Radewoosh will accept all n problems.\n-----Input-----\nThe first line contains two integers n and c (1 \u2264 n \u2264 50, 1 \u2264 c \u2264 1000)\u00a0\u2014 the number of problems and the constant representing the speed of loosing points.\nThe second line contains n integers p_1, p_2,..., p_{n} (1 \u2264 p_{i} \u2264 1000, p_{i} < p_{i} + 1)\u00a0\u2014 initial scores.\nThe third line contains n integers t_1, t_2,..., t_{n} (1 \u2264 t_{i} \u2264 1000, t_{i} < t_{i} + 1) where t_{i} denotes the number of minutes one needs to solve the i-th problem.\n-----Output-----\nPrint \"Limak\" (without quotes) if Limak will get more points in total. Print \"Radewoosh\" (without quotes) if Radewoosh will get more points in total. Print \"Tie\" (without quotes) if Limak and Radewoosh will get the same total number of points.\n-----Examples-----\nInput\n3 2\n50 85 250\n10 15 25\nOutput\nLimak\nInput\n3 6\n50 85 250\n10 15 25\nOutput\nRadewoosh\nInput\n8 1\n10 20 30 40 50 60 70 80\n8 10 58 63 71 72 75 76\nOutput\nTie\n-----Note-----\nIn the first sample, there are 3 problems. Limak solves them as follows:\n  Limak spends 10 minutes on the 1-st problem and he gets 50 - c\u00b710 = 50 - 2\u00b710 = 30 points.  Limak spends 15 minutes on the 2-nd problem so he submits it 10 + 15 = 25 minutes after the start of the contest. For the 2-nd problem he gets 85 - 2\u00b725 = 35 points.  He spends 25 minutes on the 3-rd problem so he submits it 10 + 15 + 25 = 50 minutes after the start. For this problem he gets 250 - 2\u00b750 = 150 points. \nSo, Limak got 30 + 35 + 150 = 215 points.\nRadewoosh solves problem in the reversed order:\n  Radewoosh solves 3-rd problem after 25 minutes so he gets 250 - 2\u00b725 = 200 points.  He spends 15 minutes on the 2-nd problem so he submits it 25 + 15 = 40 minutes after the start. He gets 85 - 2\u00b740 = 5 points for this problem.  He spends 10 minutes on the 1-st problem so he submits it 25 + 15 + 10 = 50 minutes after the start. He gets max(0, 50 - 2\u00b750) = max(0,  - 50) = 0 points. \nRadewoosh got 200 + 5 + 0 = 205 points in total. Limak has 215 points so Limak wins.\nIn the second sample, Limak will get 0 points for each problem and Radewoosh will first solve the hardest problem and he will get 250 - 6\u00b725 = 100 points for that. Radewoosh will get 0 points for other two problems but he is the winner anyway.\nIn the third sample, Limak will get 2 points for the 1-st problem and 2 points for the 2-nd problem. Radewoosh will get 4 points for the 8-th problem. They won't get points for other problems and thus there is a tie because 2 + 2 = 4.\n\ndef",
        "answer": "def solve(n, c, p, t):\n    p.sort()\n    t.sort(reverse=True)\n    res = 0\n    for i in range(n):\n        res += max(0, p[i] - c * (t[i] - i))\n    if res > 0:\n        return \"Limak\"\n    elif res < 0:\n        return \"Radewoosh\"\n    else:\n        return \"Tie\"",
        "difficulty": "interview"
    },
    {
        "task_id": 912,
        "prompt": "Complete the Python function given the prompt below:Sakuzyo - Imprinting\nA.R.C. Markland-N is a tall building with $n$ floors numbered from $1$ to $n$. Between each two adjacent floors in the building, there is a staircase connecting them.\nIt's lunchtime for our sensei Colin \"ConneR\" Neumann Jr, and he's planning for a location to enjoy his meal.\nConneR's office is at floor $s$ of the building. On each floor (including floor $s$, of course), there is a restaurant offering meals. However, due to renovations being in progress, $k$ of the restaurants are currently closed, and as a result, ConneR can't enjoy his lunch there.\nCooneR wants to reach a restaurant as quickly as possible to save time. What is the minimum number of staircases he needs to walk to reach a closest currently open restaurant.\nPlease answer him quickly, and you might earn his praise and even enjoy the lunch with him in the elegant Neumanns' way!\n-----Input-----\nThe first line contains one integer $t$ ($1 \\le t \\le 1000$)\u00a0\u2014 the number of test cases in the test. Then the descriptions of $t$ test cases follow.\nThe first line of a test case contains three integers $n$, $s$ and $k$ ($2 \\le n \\le 10^9$, $1 \\le s \\le n$, $1 \\le k \\le \\min(n-1, 1000)$)\u00a0\u2014 respectively the number of floors of A.R.C. Markland-N, the floor where ConneR is in, and the number of closed restaurants.\nThe second line of a test case contains $k$ distinct integers $a_1, a_2, \\ldots, a_k$ ($1 \\le a_i \\le n$)\u00a0\u2014 the floor numbers of the currently closed restaurants.\nIt is guaranteed that the sum of $k$ over all test cases does not exceed $1000$.\n-----Output-----\nFor each test case print a single integer\u00a0\u2014 the minimum number of staircases required for ConneR to walk from the floor $s$ to a floor with an open restaurant.\n-----Example-----\nInput\n5\n5 2 3\n1 2 3\n4 3 3\n4 1 2\n10 2 6\n1 2 3 4 5 7\n2 1 1\n2\n100 76 8\n76 75 36 67 41 74 10 77\nOutput\n2\n0\n4\n0\n2\n-----Note-----\nIn the first example test case, the nearest floor with an open restaurant would be the floor $4$.\nIn the second example test case, the floor with ConneR's office still has an open restaurant, so Sensei won't have to go anywhere.\nIn the third example test case, the closest open restaurant is on the $6$-th floor.\n\ndef",
        "answer": "def staircase(n, s, k):\n    if n == s:\n        return 0\n    if n == 1:\n        return 1\n    if k == 1:\n        return n - s\n    return min(staircase(n - 1, s, k - 1), staircase(n - 1, s - 1, k)) + 1",
        "difficulty": "interview"
    },
    {
        "task_id": 913,
        "prompt": "Complete the Python function given the prompt below:Polycarp is preparing the first programming contest for robots. There are $n$ problems in it, and a lot of robots are going to participate in it. Each robot solving the problem $i$ gets $p_i$ points, and the score of each robot in the competition is calculated as the sum of $p_i$ over all problems $i$ solved by it. For each problem, $p_i$ is an integer not less than $1$.\nTwo corporations specializing in problem-solving robot manufacturing, \"Robo-Coder Inc.\" and \"BionicSolver Industries\", are going to register two robots (one for each corporation) for participation as well. Polycarp knows the advantages and flaws of robots produced by these companies, so, for each problem, he knows precisely whether each robot will solve it during the competition. Knowing this, he can try predicting the results \u2014 or manipulating them. \nFor some reason (which absolutely cannot involve bribing), Polycarp wants the \"Robo-Coder Inc.\" robot to outperform the \"BionicSolver Industries\" robot in the competition. Polycarp wants to set the values of $p_i$ in such a way that the \"Robo-Coder Inc.\" robot gets strictly more points than the \"BionicSolver Industries\" robot. However, if the values of $p_i$ will be large, it may look very suspicious \u2014 so Polycarp wants to minimize the maximum value of $p_i$ over all problems. Can you help Polycarp to determine the minimum possible upper bound on the number of points given for solving the problems?\n-----Input-----\nThe first line contains one integer $n$ ($1 \\le n \\le 100$) \u2014 the number of problems.\nThe second line contains $n$ integers $r_1$, $r_2$,..., $r_n$ ($0 \\le r_i \\le 1$). $r_i = 1$ means that the \"Robo-Coder Inc.\" robot will solve the $i$-th problem, $r_i = 0$ means that it won't solve the $i$-th problem.\nThe third line contains $n$ integers $b_1$, $b_2$,..., $b_n$ ($0 \\le b_i \\le 1$). $b_i = 1$ means that the \"BionicSolver Industries\" robot will solve the $i$-th problem, $b_i = 0$ means that it won't solve the $i$-th problem.\n-----Output-----\nIf \"Robo-Coder Inc.\" robot cannot outperform the \"BionicSolver Industries\" robot by any means, print one integer $-1$.\nOtherwise, print the minimum possible value of $\\max \\limits_{i = 1}^{n} p_i$, if all values of $p_i$ are set in such a way that the \"Robo-Coder Inc.\" robot gets strictly more points than the \"BionicSolver Industries\" robot.\n-----Examples-----\nInput\n5\n1 1 1 0 0\n0 1 1 1 1\nOutput\n3\nInput\n3\n0 0 0\n0 0 0\nOutput\n-1\nInput\n4\n1 1 1 1\n1 1 1 1\nOutput\n-1\nInput\n9\n1 0 0 0 0 0 0 0 1\n0 1 1 0 1 1 1 1 0\nOutput\n4\n-----Note-----\nIn the first example, one of the valid score assignments is $p = [3, 1, 3, 1, 1]$. Then the \"Robo-Coder\" gets $7$ points, the \"BionicSolver\" \u2014 $6$ points.\nIn the second example, both robots get $0$ points, and the score distribution does not matter.\nIn the third example, both robots solve all problems, so their points are equal.\n\ndef",
        "answer": "def solve(n, r, b):\n    r_max = 0\n    b_max = 0\n    for i in range(n):\n        if r[i] == 1:\n            r_max += p[i]\n        if b[i] == 1:\n            b_max += p[i]\n    if r_max > b_max:\n        return r_max\n    else:\n        return b_max",
        "difficulty": "interview"
    },
    {
        "task_id": 914,
        "prompt": "Complete the Python function given the prompt below:Piegirl is buying stickers for a project. Stickers come on sheets, and each sheet of stickers contains exactly n stickers. Each sticker has exactly one character printed on it, so a sheet of stickers can be described by a string of length n. Piegirl wants to create a string s using stickers. She may buy as many sheets of stickers as she wants, and may specify any string of length n for the sheets, but all the sheets must be identical, so the string is the same for all sheets. Once she attains the sheets of stickers, she will take some of the stickers from the sheets and arrange (in any order) them to form s. Determine the minimum number of sheets she has to buy, and provide a string describing a possible sheet of stickers she should buy.\n-----Input-----\nThe first line contains string s (1 \u2264 |s| \u2264 1000), consisting of lowercase English characters only. The second line contains an integer n (1 \u2264 n \u2264 1000).\n-----Output-----\nOn the first line, print the minimum number of sheets Piegirl has to buy. On the second line, print a string consisting of n lower case English characters. This string should describe a sheet of stickers that Piegirl can buy in order to minimize the number of sheets. If Piegirl cannot possibly form the string s, print instead a single line with the number -1.\n-----Examples-----\nInput\nbanana\n4\nOutput\n2\nbaan\nInput\nbanana\n3\nOutput\n3\nnab\nInput\nbanana\n2\nOutput\n-1\n-----Note-----\nIn the second example, Piegirl can order 3 sheets of stickers with the characters \"nab\". She can take characters \"nab\" from the first sheet, \"na\" from the second, and \"a\" from the third, and arrange them to from \"banana\".\n\ndef",
        "answer": "def min_sheets(s, n):\n    if len(s) == n:\n        return 1\n    if len(s) > n:\n        return -1\n    return min_sheets(s + 'a', n) + min_sheets(s + 'b', n) + min_sheets(s + 'c', n)",
        "difficulty": "interview"
    },
    {
        "task_id": 915,
        "prompt": "Complete the Python function given the prompt below:Karl likes Codeforces and subsequences. He wants to find a string of lowercase English letters that contains at least $k$ subsequences codeforces. Out of all possible strings, Karl wants to find a shortest one.\nFormally, a codeforces subsequence of a string $s$ is a subset of ten characters of $s$ that read codeforces from left to right. For example, codeforces contains codeforces a single time, while codeforcesisawesome contains codeforces four times: codeforcesisawesome, codeforcesisawesome, codeforcesisawesome, codeforcesisawesome.\nHelp Karl find any shortest string that contains at least $k$ codeforces subsequences.\n-----Input-----\nThe only line contains a single integer $k$ ($1 \\leq k \\leq 10^{16})$.\n-----Output-----\nPrint a shortest string of lowercase English letters that contains at least $k$ codeforces subsequences. If there are several such strings, print any of them.\n-----Examples-----\nInput\n1\nOutput\ncodeforces\nInput\n3\nOutput\ncodeforcesss\n\ndef",
        "answer": "def find_k_subsequences(k):\n    return",
        "difficulty": "interview"
    },
    {
        "task_id": 916,
        "prompt": "Complete the Python function given the prompt below:Sagheer is playing a game with his best friend Soliman. He brought a tree with n nodes numbered from 1 to n and rooted at node 1. The i-th node has a_{i} apples. This tree has a special property: the lengths of all paths from the root to any leaf have the same parity (i.e. all paths have even length or all paths have odd length).\nSagheer and Soliman will take turns to play. Soliman will make the first move. The player who can't make a move loses.\nIn each move, the current player will pick a single node, take a non-empty subset of apples from it and do one of the following two things:  eat the apples, if the node is a leaf.  move the apples to one of the children, if the node is non-leaf. \nBefore Soliman comes to start playing, Sagheer will make exactly one change to the tree. He will pick two different nodes u and v and swap the apples of u with the apples of v.\nCan you help Sagheer count the number of ways to make the swap (i.e. to choose u and v) after which he will win the game if both players play optimally? (u, v) and (v, u) are considered to be the same pair.\n-----Input-----\nThe first line will contain one integer n (2 \u2264 n \u2264 10^5) \u2014 the number of nodes in the apple tree.\nThe second line will contain n integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^7) \u2014 the number of apples on each node of the tree.\nThe third line will contain n - 1 integers p_2, p_3,..., p_{n} (1 \u2264 p_{i} \u2264 n) \u2014 the parent of each node of the tree. Node i has parent p_{i} (for 2 \u2264 i \u2264 n). Node 1 is the root of the tree.\nIt is guaranteed that the input describes a valid tree, and the lengths of all paths from the root to any leaf will have the same parity.\n-----Output-----\nOn a single line, print the number of different pairs of nodes (u, v), u \u2260 v such that if they start playing after swapping the apples of both nodes, Sagheer will win the game. (u, v) and (v, u) are considered to be the same pair.\n-----Examples-----\nInput\n3\n2 2 3\n1 1\nOutput\n1\nInput\n3\n1 2 3\n1 1\nOutput\n0\nInput\n8\n7 2 2 5 4 3 1 1\n1 1 1 4 4 5 6\nOutput\n4\n-----Note-----\nIn the first sample, Sagheer can only win if he swapped node 1 with node 3. In this case, both leaves will have 2 apples. If Soliman makes a move in a leaf node, Sagheer can make the same move in the other leaf. If Soliman moved some apples from a root to a leaf, Sagheer will eat those moved apples. Eventually, Soliman will not find a move.\nIn the second sample, There is no swap that will make Sagheer win the game.\nNote that Sagheer must make the swap even if he can win with the initial tree.\n\ndef",
        "answer": "def count_swaps(n, a, p):\n    swaps = 0\n    for i in range(n):\n        if p[i] == i + 1:\n            continue\n        swaps += 1\n        swap_apples(i, p[i], a)\n    return swaps",
        "difficulty": "interview"
    },
    {
        "task_id": 917,
        "prompt": "Complete the Python function given the prompt below:You are planning to build housing on a street. There are $n$ spots available on the street on which you can build a house. The spots are labeled from $1$ to $n$ from left to right. In each spot, you can build a house with an integer height between $0$ and $h$.\nIn each spot, if a house has height $a$, you will gain $a^2$ dollars from it.\nThe city has $m$ zoning restrictions. The $i$-th restriction says that the tallest house from spots $l_i$ to $r_i$ (inclusive) must be at most $x_i$.\nYou would like to build houses to maximize your profit. Determine the maximum profit possible.\n-----Input-----\nThe first line contains three integers $n$, $h$, and $m$ ($1 \\leq n,h,m \\leq 50$)\u00a0\u2014 the number of spots, the maximum height, and the number of restrictions.\nEach of the next $m$ lines contains three integers $l_i$, $r_i$, and $x_i$ ($1 \\leq l_i \\leq r_i \\leq n$, $0 \\leq x_i \\leq h$)\u00a0\u2014 left and right limits (inclusive) of the $i$-th restriction and the maximum possible height in that range.\n-----Output-----\nPrint a single integer, the maximum profit you can make.\n-----Examples-----\nInput\n3 3 3\n1 1 1\n2 2 3\n3 3 2\nOutput\n14\nInput\n4 10 2\n2 3 8\n3 4 7\nOutput\n262\n-----Note-----\nIn the first example, there are $3$ houses, the maximum height of a house is $3$, and there are $3$ restrictions. The first restriction says the tallest house between $1$ and $1$ must be at most $1$. The second restriction says the tallest house between $2$ and $2$ must be at most $3$. The third restriction says the tallest house between $3$ and $3$ must be at most $2$.\nIn this case, it is optimal to build houses with heights $[1, 3, 2]$. This fits within all the restrictions. The total profit in this case is $1^2 + 3^2 + 2^2 = 14$.\nIn the second example, there are $4$ houses, the maximum height of a house is $10$, and there are $2$ restrictions. The first restriction says the tallest house from $2$ to $3$ must be at most $8$. The second restriction says the tallest house from $3$ to $4$ must be at most $7$.\nIn this case, it's optimal to build houses with heights $[10, 8, 7, 7]$. We get a profit of $10^2+8^2+7^2+7^2 = 262$. Note that there are two restrictions on house $3$ and both of them must be satisfied. Also, note that even though there isn't any explicit restrictions on house $1$, we must still limit its height to be at most $10$ ($h=10$).\n\ndef",
        "answer": "def house_robber(houses, max_height, num_restrictions):\n    houses.sort()\n    houses.reverse()\n    max_profit = 0\n    for house in houses:\n        if house > max_height:\n            break\n        max_profit += house ** 2\n    return max_profit",
        "difficulty": "interview"
    },
    {
        "task_id": 918,
        "prompt": "Complete the Python function given the prompt below:Very soon Berland will hold a School Team Programming Olympiad. From each of the m Berland regions a team of two people is invited to participate in the olympiad. The qualifying contest to form teams was held and it was attended by n Berland students. There were at least two schoolboys participating from each of the m regions of Berland. The result of each of the participants of the qualifying competition is an integer score from 0 to 800 inclusive.\nThe team of each region is formed from two such members of the qualifying competition of the region, that none of them can be replaced by a schoolboy of the same region, not included in the team and who received a greater number of points. There may be a situation where a team of some region can not be formed uniquely, that is, there is more than one school team that meets the properties described above. In this case, the region needs to undertake an additional contest. The two teams in the region are considered to be different if there is at least one schoolboy who is included in one team and is not included in the other team. It is guaranteed that for each region at least two its representatives participated in the qualifying contest.\nYour task is, given the results of the qualifying competition, to identify the team from each region, or to announce that in this region its formation requires additional contests.\n-----Input-----\nThe first line of the input contains two integers n and m (2 \u2264 n \u2264 100 000, 1 \u2264 m \u2264 10 000, n \u2265 2m)\u00a0\u2014 the number of participants of the qualifying contest and the number of regions in Berland.\nNext n lines contain the description of the participants of the qualifying contest in the following format: Surname (a string of length from 1 to 10 characters and consisting of large and small English letters), region number (integer from 1 to m) and the number of points scored by the participant (integer from 0 to 800, inclusive).\nIt is guaranteed that all surnames of all the participants are distinct and at least two people participated from each of the m regions. The surnames that only differ in letter cases, should be considered distinct.\n-----Output-----\nPrint m lines. On the i-th line print the team of the i-th region\u00a0\u2014 the surnames of the two team members in an arbitrary order, or a single character \"?\" (without the quotes) if you need to spend further qualifying contests in the region.\n-----Examples-----\nInput\n5 2\nIvanov 1 763\nAndreev 2 800\nPetrov 1 595\nSidorov 1 790\nSemenov 2 503\nOutput\nSidorov Ivanov\nAndreev Semenov\nInput\n5 2\nIvanov 1 800\nAndreev 2 763\nPetrov 1 800\nSidorov 1 800\nSemenov 2 503\nOutput\n?\nAndreev Semenov\n-----Note-----\nIn the first sample region teams are uniquely determined.\nIn the second sample the team from region 2 is uniquely determined and the team from region 1 can have three teams: \"Petrov\"-\"Sidorov\", \"Ivanov\"-\"Sidorov\", \"Ivanov\" -\"Petrov\", so it is impossible to determine a team uniquely.\n\ndef",
        "answer": "def teams(n, m):\n    # your code here\n    # n - number of participants\n    # m - number of regions\n    # n >= 2m\n    # m >= 1\n    # n >= 2m\n    # m >= 1\n    # n >= 2m\n    # m >= 1\n    # n >= 2m\n    # m >= 1\n    # n >= 2m\n    # m >= 1\n    # n >= 2m\n    # m >= 1\n    # n >= 2m\n    # m >= 1\n    # n >= 2m\n    # m >= 1\n    # n >= 2m\n    # m >= 1\n    # n >= 2m\n    # m >= 1\n    # n >= 2m\n    # m >= 1\n    # n >= 2m\n    # m >= 1\n    # n >= 2m\n    # m >= 1\n    # n >= 2m\n    # m >= 1\n    # n >= 2m\n    # m >= 1\n    # n >= 2m\n    # m >= 1\n    # n >= 2m\n    # m >= 1\n    # n >= 2m\n    # m >= 1\n    # n >= 2m\n    # m >= 1\n    # n >= 2m\n    # m >= 1\n    # n >= 2m\n    # m >= 1\n    # n >= 2m\n    # m >= 1\n    # n >= 2m\n    # m >= 1\n    # n >= 2m\n    # m >= 1\n    # n >= 2m\n    # m >= 1\n    # n >= 2m\n    # m >= 1\n    # n >= 2m\n    # m >= 1\n    # n >= 2m\n    # m >= 1\n    # n >= 2m\n",
        "difficulty": "interview"
    },
    {
        "task_id": 919,
        "prompt": "Complete the Python function given the prompt below:Natasha is going to fly to Mars. She needs to build a rocket, which consists of several stages in some order. Each of the stages is defined by a lowercase Latin letter. This way, the rocket can be described by the string\u00a0\u2014 concatenation of letters, which correspond to the stages.\nThere are $n$ stages available. The rocket must contain exactly $k$ of them. Stages in the rocket should be ordered by their weight. So, after the stage with some letter can go only stage with a letter, which is at least two positions after in the alphabet (skipping one letter in between, or even more). For example, after letter 'c' can't go letters 'a', 'b', 'c' and 'd', but can go letters 'e', 'f',..., 'z'.\nFor the rocket to fly as far as possible, its weight should be minimal. The weight of the rocket is equal to the sum of the weights of its stages. The weight of the stage is the number of its letter in the alphabet. For example, the stage 'a 'weighs one ton,' b 'weighs two tons, and' z'\u00a0\u2014 $26$ tons.\nBuild the rocket with the minimal weight or determine, that it is impossible to build a rocket at all. Each stage can be used at most once.\n-----Input-----\nThe first line of input contains two integers\u00a0\u2014 $n$ and $k$ ($1 \\le k \\le n \\le 50$)\u00a0\u2013 the number of available stages and the number of stages to use in the rocket.\nThe second line contains string $s$, which consists of exactly $n$ lowercase Latin letters. Each letter defines a new stage, which can be used to build the rocket. Each stage can be used at most once.\n-----Output-----\nPrint a single integer\u00a0\u2014 the minimal total weight of the rocket or -1, if it is impossible to build the rocket at all.\n-----Examples-----\nInput\n5 3\nxyabd\nOutput\n29\nInput\n7 4\nproblem\nOutput\n34\nInput\n2 2\nab\nOutput\n-1\nInput\n12 1\nabaabbaaabbb\nOutput\n1\n-----Note-----\nIn the first example, the following rockets satisfy the condition:\n \"adx\" (weight is $1+4+24=29$);\n \"ady\" (weight is $1+4+25=30$);\n \"bdx\" (weight is $2+4+24=30$);\n \"bdy\" (weight is $2+4+25=31$).\nRocket \"adx\" has the minimal weight, so the answer is $29$.\nIn the second example, target rocket is \"belo\". Its weight is $2+5+12+15=34$.\nIn the third example, $n=k=2$, so the rocket must have both stages: 'a' and 'b'. This rocket doesn't satisfy the condition, because these letters are adjacent in the alphabet. Answer is -1.\n\ndef",
        "answer": "def rocket_weight(n, k, s):\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(",
        "difficulty": "interview"
    },
    {
        "task_id": 920,
        "prompt": "Complete the Python function given the prompt below:Nothing has changed since the last round. Dima and Inna still love each other and want to be together. They've made a deal with Seryozha and now they need to make a deal with the dorm guards...\nThere are four guardposts in Dima's dorm. Each post contains two guards (in Russia they are usually elderly women). You can bribe a guard by a chocolate bar or a box of juice. For each guard you know the minimum price of the chocolate bar she can accept as a gift and the minimum price of the box of juice she can accept as a gift. If a chocolate bar for some guard costs less than the minimum chocolate bar price for this guard is, or if a box of juice for some guard costs less than the minimum box of juice price for this guard is, then the guard doesn't accept such a gift.\nIn order to pass through a guardpost, one needs to bribe both guards.\nThe shop has an unlimited amount of juice and chocolate of any price starting with 1. Dima wants to choose some guardpost, buy one gift for each guard from the guardpost and spend exactly n rubles on it.\nHelp him choose a post through which he can safely sneak Inna or otherwise say that this is impossible. Mind you, Inna would be very sorry to hear that!\n-----Input-----\nThe first line of the input contains integer n\u00a0(1 \u2264 n \u2264 10^5) \u2014 the money Dima wants to spend. Then follow four lines describing the guardposts. Each line contains four integers a, b, c, d\u00a0(1 \u2264 a, b, c, d \u2264 10^5) \u2014 the minimum price of the chocolate and the minimum price of the juice for the first guard and the minimum price of the chocolate and the minimum price of the juice for the second guard, correspondingly.\n-----Output-----\nIn a single line of the output print three space-separated integers: the number of the guardpost, the cost of the first present and the cost of the second present. If there is no guardpost Dima can sneak Inna through at such conditions, print -1 in a single line. \nThe guardposts are numbered from 1 to 4 according to the order given in the input.\nIf there are multiple solutions, you can print any of them.\n-----Examples-----\nInput\n10\n5 6 5 6\n6 6 7 7\n5 8 6 6\n9 9 9 9\nOutput\n1 5 5\nInput\n10\n6 6 6 6\n7 7 7 7\n4 4 4 4\n8 8 8 8\nOutput\n3 4 6\nInput\n5\n3 3 3 3\n3 3 3 3\n3 3 3 3\n3 3 3 3\nOutput\n-1\n-----Note-----\nExplanation of the first example.\nThe only way to spend 10 rubles to buy the gifts that won't be less than the minimum prices is to buy two 5 ruble chocolates to both guards from the first guardpost.\nExplanation of the second example.\nDima needs 12 rubles for the first guardpost, 14 for the second one, 16 for the fourth one. So the only guardpost we can sneak through is the third one. So, Dima can buy 4 ruble chocolate for the first guard and 6 ruble juice of the second guard.\n\ndef",
        "answer": "def guard_post(n, a, b, c, d):\n    if n < a + b + c + d:\n        return -1\n    if n % 2 == 0:\n        return -1\n    return n // 2",
        "difficulty": "interview"
    },
    {
        "task_id": 921,
        "prompt": "Complete the Python function given the prompt below:Polycarp invited all his friends to the tea party to celebrate the holiday. He has n cups, one for each of his n friends, with volumes a_1, a_2,..., a_{n}. His teapot stores w milliliters of tea (w \u2264 a_1 + a_2 +... + a_{n}). Polycarp wants to pour tea in cups in such a way that:  Every cup will contain tea for at least half of its volume  Every cup will contain integer number of milliliters of tea  All the tea from the teapot will be poured into cups  All friends will be satisfied. \nFriend with cup i won't be satisfied, if there exists such cup j that cup i contains less tea than cup j but a_{i} > a_{j}.\nFor each cup output how many milliliters of tea should be poured in it. If it's impossible to pour all the tea and satisfy all conditions then output -1.\n-----Input-----\nThe first line contains two integer numbers n and w (1 \u2264 n \u2264 100, $1 \\leq w \\leq \\sum_{i = 1}^{n} a_{i}$).\nThe second line contains n numbers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 100).\n-----Output-----\nOutput how many milliliters of tea every cup should contain. If there are multiple answers, print any of them.\nIf it's impossible to pour all the tea and satisfy all conditions then output -1.\n-----Examples-----\nInput\n2 10\n8 7\nOutput\n6 4 \nInput\n4 4\n1 1 1 1\nOutput\n1 1 1 1 \nInput\n3 10\n9 8 10\nOutput\n-1\n-----Note-----\nIn the third example you should pour to the first cup at least 5 milliliters, to the second one at least 4, to the third one at least 5. It sums up to 14, which is greater than 10 milliliters available.\n\ndef",
        "answer": "def tea_party(n, w, a):\n    a.sort()\n    tea = 0\n    for i in range(n):\n        if a[i] > w:\n            return -1\n        tea += a[i]\n        w -= a[i]\n    return tea",
        "difficulty": "interview"
    },
    {
        "task_id": 922,
        "prompt": "Complete the Python function given the prompt below:Polycarp has n dice d_1, d_2,..., d_{n}. The i-th dice shows numbers from 1 to d_{i}. Polycarp rolled all the dice and the sum of numbers they showed is A. Agrippina didn't see which dice showed what number, she knows only the sum A and the values d_1, d_2,..., d_{n}. However, she finds it enough to make a series of statements of the following type: dice i couldn't show number r. For example, if Polycarp had two six-faced dice and the total sum is A = 11, then Agrippina can state that each of the two dice couldn't show a value less than five (otherwise, the remaining dice must have a value of at least seven, which is impossible).\nFor each dice find the number of values for which it can be guaranteed that the dice couldn't show these values if the sum of the shown values is A.\n-----Input-----\nThe first line contains two integers n, A (1 \u2264 n \u2264 2\u00b710^5, n \u2264 A \u2264 s) \u2014 the number of dice and the sum of shown values where s = d_1 + d_2 +... + d_{n}.\nThe second line contains n integers d_1, d_2,..., d_{n} (1 \u2264 d_{i} \u2264 10^6), where d_{i} is the maximum value that the i-th dice can show.\n-----Output-----\nPrint n integers b_1, b_2,..., b_{n}, where b_{i} is the number of values for which it is guaranteed that the i-th dice couldn't show them.\n-----Examples-----\nInput\n2 8\n4 4\nOutput\n3 3 \nInput\n1 3\n5\nOutput\n4 \nInput\n2 3\n2 3\nOutput\n0 1 \n-----Note-----\nIn the first sample from the statement A equal to 8 could be obtained in the only case when both the first and the second dice show 4. Correspondingly, both dice couldn't show values 1, 2 or 3.\nIn the second sample from the statement A equal to 3 could be obtained when the single dice shows 3. Correspondingly, it couldn't show 1, 2, 4 or 5.\nIn the third sample from the statement A equal to 3 could be obtained when one dice shows 1 and the other dice shows 2. That's why the first dice doesn't have any values it couldn't show and the second dice couldn't show 3.\n\ndef",
        "answer": "def dice_prob(n, A):\n    d = {}\n    for i in range(1, n+1):\n        d[i] = 0\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            if A - j < 0:\n                break\n            d[i] += 1\n    return d",
        "difficulty": "interview"
    },
    {
        "task_id": 923,
        "prompt": "Complete the Python function given the prompt below:Andrewid the Android is a galaxy-famous detective. He is now investigating a case of frauds who make fake copies of the famous Stolp's gears, puzzles that are as famous as the Rubik's cube once was.\nIts most important components are a button and a line of n similar gears. Each gear has n teeth containing all numbers from 0 to n - 1 in the counter-clockwise order. When you push a button, the first gear rotates clockwise, then the second gear rotates counter-clockwise, the the third gear rotates clockwise an so on.\nBesides, each gear has exactly one active tooth. When a gear turns, a new active tooth is the one following after the current active tooth according to the direction of the rotation. For example, if n = 5, and the active tooth is the one containing number 0, then clockwise rotation makes the tooth with number 1 active, or the counter-clockwise rotating makes the tooth number 4 active.\nAndrewid remembers that the real puzzle has the following property: you can push the button multiple times in such a way that in the end the numbers on the active teeth of the gears from first to last form sequence 0, 1, 2,..., n - 1. Write a program that determines whether the given puzzle is real or fake.\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 1000) \u2014 the number of gears.\nThe second line contains n digits a_1, a_2,..., a_{n} (0 \u2264 a_{i} \u2264 n - 1) \u2014 the sequence of active teeth: the active tooth of the i-th gear contains number a_{i}.\n-----Output-----\nIn a single line print \"Yes\" (without the quotes), if the given Stolp's gears puzzle is real, and \"No\" (without the quotes) otherwise.\n-----Examples-----\nInput\n3\n1 0 0\nOutput\nYes\nInput\n5\n4 2 1 4 3\nOutput\nYes\nInput\n4\n0 2 3 1\nOutput\nNo\n-----Note-----\nIn the first sample test when you push the button for the first time, the sequence of active teeth will be 2 2 1, when you push it for the second time, you get 0 1 2.\n\ndef",
        "answer": "def is_puzzle_real(n, seq):\n    seq = [int(i) for i in seq]\n    for i in range(n):\n        if seq[i]!= i:\n            return False\n    return True",
        "difficulty": "interview"
    },
    {
        "task_id": 924,
        "prompt": "Complete the Python function given the prompt below:Bob and Alice are often participating in various programming competitions. Like many competitive programmers, Alice and Bob have good and bad days. They noticed, that their lucky and unlucky days are repeating with some period. For example, for Alice days $[l_a; r_a]$ are lucky, then there are some unlucky days: $[r_a + 1; l_a + t_a - 1]$, and then there are lucky days again: $[l_a + t_a; r_a + t_a]$ and so on. In other words, the day is lucky for Alice if it lies in the segment $[l_a + k t_a; r_a + k t_a]$ for some non-negative integer $k$.\nThe Bob's lucky day have similar structure, however the parameters of his sequence are different: $l_b$, $r_b$, $t_b$. So a day is a lucky for Bob if it lies in a segment $[l_b + k t_b; r_b + k t_b]$, for some non-negative integer $k$.\nAlice and Bob want to participate in team competitions together and so they want to find out what is the largest possible number of consecutive days, which are lucky for both Alice and Bob.\n-----Input-----\nThe first line contains three integers $l_a$, $r_a$, $t_a$ ($0 \\le l_a \\le r_a \\le t_a - 1, 2 \\le t_a \\le 10^9$) and describes Alice's lucky days.\nThe second line contains three integers $l_b$, $r_b$, $t_b$ ($0 \\le l_b \\le r_b \\le t_b - 1, 2 \\le t_b \\le 10^9$) and describes Bob's lucky days.\nIt is guaranteed that both Alice and Bob have some unlucky days.\n-----Output-----\nPrint one integer: the maximum number of days in the row that are lucky for both Alice and Bob.\n-----Examples-----\nInput\n0 2 5\n1 3 5\nOutput\n2\nInput\n0 1 3\n2 3 6\nOutput\n1\n-----Note-----\nThe graphs below correspond to the two sample tests and show the lucky and unlucky days of Alice and Bob as well as the possible solutions for these tests.\n[Image]\n[Image]\n\ndef",
        "answer": "def lucky_days(l_a, r_a, t_a, l_b, r_b, t_b):\n    # Fill this in.\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 925,
        "prompt": "Complete the Python function given the prompt below:Malek lives in an apartment block with 100 floors numbered from 0 to 99. The apartment has an elevator with a digital counter showing the floor that the elevator is currently on. The elevator shows each digit of a number with 7 light sticks by turning them on or off. The picture below shows how the elevator shows each digit.[Image]\nOne day when Malek wanted to go from floor 88 to floor 0 using the elevator he noticed that the counter shows number 89 instead of 88. Then when the elevator started moving the number on the counter changed to 87. After a little thinking Malek came to the conclusion that there is only one explanation for this: One of the sticks of the counter was broken. Later that day Malek was thinking about the broken stick and suddenly he came up with the following problem.\nSuppose the digital counter is showing number n. Malek calls an integer x (0 \u2264 x \u2264 99) good if it's possible that the digital counter was supposed to show x but because of some(possibly none) broken sticks it's showing n instead. Malek wants to know number of good integers for a specific n. So you must write a program that calculates this number. Please note that the counter always shows two digits.\n-----Input-----\nThe only line of input contains exactly two digits representing number n (0 \u2264 n \u2264 99). Note that n may have a leading zero.\n-----Output-----\nIn the only line of the output print the number of good integers.\n-----Examples-----\nInput\n89\nOutput\n2\nInput\n00\nOutput\n4\nInput\n73\nOutput\n15\n-----Note-----\nIn the first sample the counter may be supposed to show 88 or 89.\nIn the second sample the good integers are 00, 08, 80 and 88.\nIn the third sample the good integers are 03, 08, 09, 33, 38, 39, 73, 78, 79, 83, 88, 89, 93, 98, 99.\n\ndef",
        "answer": "def countGoodNumbers(n):\n    # Write your code here\n    if n < 10:\n        return 2\n    elif n < 20:\n        return 3\n    elif n < 30:\n        return 4\n    elif n < 40:\n        return 5\n    elif n < 50:\n        return 6\n    elif n < 60:\n        return 7\n    elif n < 70:\n        return 8\n    elif n < 80:\n        return 9\n    elif n < 90:\n        return 10\n    elif n < 100:\n        return 11\n    else:\n        return 12",
        "difficulty": "interview"
    },
    {
        "task_id": 926,
        "prompt": "Complete the Python function given the prompt below:Kostya is a genial sculptor, he has an idea: to carve a marble sculpture in the shape of a sphere. Kostya has a friend Zahar who works at a career. Zahar knows about Kostya's idea and wants to present him a rectangular parallelepiped of marble from which he can carve the sphere. \nZahar has n stones which are rectangular parallelepipeds. The edges sizes of the i-th of them are a_{i}, b_{i} and c_{i}. He can take no more than two stones and present them to Kostya. \nIf Zahar takes two stones, he should glue them together on one of the faces in order to get a new piece of rectangular parallelepiped of marble. Thus, it is possible to glue a pair of stones together if and only if two faces on which they are glued together match as rectangles. In such gluing it is allowed to rotate and flip the stones in any way. \nHelp Zahar choose such a present so that Kostya can carve a sphere of the maximum possible volume and present it to Zahar.\n-----Input-----\nThe first line contains the integer n (1 \u2264 n \u2264 10^5).\nn lines follow, in the i-th of which there are three integers a_{i}, b_{i} and c_{i} (1 \u2264 a_{i}, b_{i}, c_{i} \u2264 10^9)\u00a0\u2014 the lengths of edges of the i-th stone. Note, that two stones may have exactly the same sizes, but they still will be considered two different stones.\n-----Output-----\nIn the first line print k (1 \u2264 k \u2264 2) the number of stones which Zahar has chosen. In the second line print k distinct integers from 1 to n\u00a0\u2014 the numbers of stones which Zahar needs to choose. Consider that stones are numbered from 1 to n in the order as they are given in the input data.\nYou can print the stones in arbitrary order. If there are several answers print any of them. \n-----Examples-----\nInput\n6\n5 5 5\n3 2 4\n1 4 1\n2 1 3\n3 2 4\n3 3 4\nOutput\n1\n1\nInput\n7\n10 7 8\n5 10 3\n4 2 6\n5 5 5\n10 2 8\n4 2 1\n7 7 7\nOutput\n2\n1 5\n-----Note-----\nIn the first example we can connect the pairs of stones:  2 and 4, the size of the parallelepiped: 3 \u00d7 2 \u00d7 5, the radius of the inscribed sphere 1  2 and 5, the size of the parallelepiped: 3 \u00d7 2 \u00d7 8 or 6 \u00d7 2 \u00d7 4 or 3 \u00d7 4 \u00d7 4, the radius of the inscribed sphere 1, or 1, or 1.5 respectively.  2 and 6, the size of the parallelepiped: 3 \u00d7 5 \u00d7 4, the radius of the inscribed sphere 1.5  4 and 5, the size of the parallelepiped: 3 \u00d7 2 \u00d7 5, the radius of the inscribed sphere 1  5 and 6, the size of the parallelepiped: 3 \u00d7 4 \u00d7 5, the radius of the inscribed sphere 1.5 \nOr take only one stone:  1 the size of the parallelepiped: 5 \u00d7 5 \u00d7 5, the radius of the inscribed sphere 2.5  2 the size of the parallelepiped: 3 \u00d7 2 \u00d7 4, the radius of the inscribed sphere 1  3 the size of the parallelepiped: 1 \u00d7 4 \u00d7 1, the radius of the inscribed sphere 0.5  4 the size of the parallelepiped: 2 \u00d7 1 \u00d7 3, the radius of the inscribed sphere 0.5  5 the size of the parallelepiped: 3 \u00d7 2 \u00d7 4, the radius of the inscribed sphere 1  6 the size of the parallelepiped: 3 \u00d7 3 \u00d7 4, the radius of the inscribed sphere 1.5 \nIt is most profitable to take only the first stone.\n\ndef",
        "answer": "def solution(n, a, b, c):\n    a.sort()\n    b.sort()\n    c.sort()\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    a.append(0)\n    b.",
        "difficulty": "interview"
    },
    {
        "task_id": 927,
        "prompt": "Complete the Python function given the prompt below:Find the largest integer that can be formed with exactly N matchsticks, under the following conditions:\n - Every digit in the integer must be one of the digits A_1, A_2,..., A_M (1 \\leq A_i \\leq 9).\n - The number of matchsticks used to form digits 1, 2, 3, 4, 5, 6, 7, 8, 9 should be 2, 5, 5, 4, 5, 6, 3, 7, 6, respectively.\n-----Constraints-----\n - All values in input are integers.\n - 2 \\leq N \\leq 10^4\n - 1 \\leq M \\leq 9\n - 1 \\leq A_i \\leq 9\n - A_i are all different.\n - There exists an integer that can be formed by exactly N matchsticks under the conditions.\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\nA_1 A_2... A_M\n-----Output-----\nPrint the largest integer that can be formed with exactly N matchsticks under the conditions in the problem statement.\n-----Sample Input-----\n20 4\n3 7 8 4\n-----Sample Output-----\n777773\nThe integer 777773 can be formed with 3 + 3 + 3 + 3 + 3 + 5 = 20 matchsticks, and this is the largest integer that can be formed by 20 matchsticks under the conditions.\n\ndef",
        "answer": "def matchsticks(n, m):\n    if n == 0:\n        return 0\n    if n == 1:\n        return m\n    if n == 2:\n        return m * 9\n    if n == 3:\n        return m * 9 * 9\n    if n == 4:\n        return m * 9 * 9 * 9\n    if n == 5:\n        return m * 9 * 9 * 9 * 9\n    if n == 6:\n        return m * 9 * 9 * 9 * 9 * 9\n    if n == 7:\n        return m * 9 * 9 * 9 * 9 * 9 * 9\n    if n == 8:\n        return m * 9 * 9 * 9 * 9 * 9 * 9 * 9\n    if n == 9:\n        return m * 9 * 9 * 9 * 9 * 9 * 9 * 9 * 9\n    if n == 10:\n        return m * 9 * 9 * 9 * 9 * 9 * 9 * 9 * 9 * 9\n    if n == 11:\n        return m * 9 * 9 * 9 * 9 * 9 * 9 * 9 * 9 * 9 * 9\n    if n == 12:\n        return m * 9 * 9 * 9 * 9 * 9 * 9 * 9 * 9 * 9 * 9 * 9\n    if n == 13:\n        return m * 9 * 9 * 9 * 9 * 9 * 9 * 9 * 9 * 9 * 9 * 9 * 9\n    if n == 14:\n        return m * 9 * 9 * 9 * 9 * 9 * 9 * 9 * 9 * 9 * 9 * 9 * 9 * 9\n    if n == 15:\n        return m * 9 * 9 * 9 * 9 * 9 * 9 * 9 * 9 * 9 * 9 * 9 * 9 * 9 * 9\n    if n == 16:",
        "difficulty": "interview"
    },
    {
        "task_id": 928,
        "prompt": "Complete the Python function given the prompt below:You are given a sequence of positive integers of length N, A=a_1,a_2,\u2026,a_{N}, and an integer K.\nHow many contiguous subsequences of A satisfy the following condition?\n - (Condition) The sum of the elements in the contiguous subsequence is at least K.\nWe consider two contiguous subsequences different if they derive from different positions in A, even if they are the same in content.\nNote that the answer may not fit into a 32-bit integer type.\n-----Constraints-----\n - 1 \\leq a_i \\leq 10^5\n - 1 \\leq N \\leq 10^5\n - 1 \\leq K \\leq 10^{10}\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\na_1 a_2... a_N\n-----Output-----\nPrint the number of contiguous subsequences of A that satisfy the condition.\n-----Sample Input-----\n4 10\n6 1 2 7\n-----Sample Output-----\n2\nThe following two contiguous subsequences satisfy the condition:\n - A[1..4]=a_1,a_2,a_3,a_4, with the sum of 16\n - A[2..4]=a_2,a_3,a_4, with the sum of 10\n\ndef",
        "answer": "def count_subsequences(a, k):\n    count = 0\n    for i in range(len(a)):\n        for j in range(i, len(a)):\n            if sum(a[i:j+1]) >= k:\n                count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 929,
        "prompt": "Complete the Python function given the prompt below:There is a grid of square cells with H horizontal rows and W vertical columns. The cell at the i-th row and the j-th column will be denoted as Cell (i, j).\nIn Cell (i, j), a_{ij} coins are placed.\nYou can perform the following operation any number of times:\nOperation: Choose a cell that was not chosen before and contains one or more coins, then move one of those coins to a vertically or horizontally adjacent cell.\nMaximize the number of cells containing an even number of coins.\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq H, W \\leq 500\n - 0 \\leq a_{ij} \\leq 9\n-----Input-----\nInput is given from Standard Input in the following format:\nH W\na_{11} a_{12}... a_{1W}\na_{21} a_{22}... a_{2W}\n:\na_{H1} a_{H2}... a_{HW}\n-----Output-----\nPrint a sequence of operations that maximizes the number of cells containing an even number of coins, in the following format:\nN\ny_1 x_1 y_1' x_1'\ny_2 x_2 y_2' x_2'\n:\ny_N x_N y_N' x_N'\nThat is, in the first line, print an integer N between 0 and H \\times W (inclusive), representing the number of operations.\nIn the (i+1)-th line (1 \\leq i \\leq N), print four integers y_i, x_i, y_i' and x_i' (1 \\leq y_i, y_i' \\leq H and 1 \\leq x_i, x_i' \\leq W), representing the i-th operation. These four integers represents the operation of moving one of the coins placed in Cell (y_i, x_i) to a vertically or horizontally adjacent cell, (y_i', x_i').\nNote that if the specified operation violates the specification in the problem statement or the output format is invalid, it will result in Wrong Answer.\n-----Sample Input-----\n2 3\n1 2 3\n0 1 1\n-----Sample Output-----\n3\n2 2 2 3\n1 1 1 2\n1 3 1 2\nEvery cell contains an even number of coins after the following sequence of operations:\n - Move the coin in Cell (2, 2) to Cell (2, 3).\n - Move the coin in Cell (1, 1) to Cell (1, 2).\n - Move one of the coins in Cell (1, 3) to Cell (1, 2).\n\ndef",
        "answer": "def solve(H, W, A):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 930,
        "prompt": "Complete the Python function given the prompt below:There is a building with n rooms, numbered 1 to n.\nWe can move from any room to any other room in the building.\nLet us call the following event a move: a person in some room i goes to another room j~ (i \\neq j).\nInitially, there was one person in each room in the building.\nAfter that, we know that there were exactly k moves happened up to now.\nWe are interested in the number of people in each of the n rooms now. How many combinations of numbers of people in the n rooms are possible?\nFind the count modulo (10^9 + 7).\n-----Constraints-----\n - All values in input are integers.\n - 3 \\leq n \\leq 2 \\times 10^5\n - 2 \\leq k \\leq 10^9\n-----Input-----\nInput is given from Standard Input in the following format:\nn k\n-----Output-----\nPrint the number of possible combinations of numbers of people in the n rooms now, modulo (10^9 + 7).\n-----Sample Input-----\n3 2\n-----Sample Output-----\n10\nLet c_1, c_2, and c_3 be the number of people in Room 1, 2, and 3 now, respectively. There are 10 possible combination of (c_1, c_2, c_3):\n - (0, 0, 3)\n - (0, 1, 2)\n - (0, 2, 1)\n - (0, 3, 0)\n - (1, 0, 2)\n - (1, 1, 1)\n - (1, 2, 0)\n - (2, 0, 1)\n - (2, 1, 0)\n - (3, 0, 0)\nFor example, (c_1, c_2, c_3) will be (0, 1, 2) if the person in Room 1 goes to Room 2 and then one of the persons in Room 2 goes to Room 3.\n\ndef",
        "answer": "def solve(n, k):\n    # Write your code here\n    if n == 1:\n        return 1\n    if n == 2:\n        return k\n    if n == 3:\n        return k * k\n    if n == 4:\n        return k * k * k\n    if n == 5:\n        return k * k * k * k\n    if n == 6:\n        return k * k * k * k * k\n    if n == 7:\n        return k * k * k * k * k * k\n    if n == 8:\n        return k * k * k * k * k * k * k\n    if n == 9:\n        return k * k * k * k * k * k * k * k\n    if n == 10:\n        return k * k * k * k * k * k * k * k * k\n    if n == 11:\n        return k * k * k * k * k * k * k * k * k * k\n    if n == 12:\n        return k * k * k * k * k * k * k * k * k * k * k\n    if n == 13:\n        return k * k * k * k * k * k * k * k * k * k * k * k\n    if n == 14:\n        return k * k * k * k * k * k * k * k * k * k * k * k * k\n    if n == 15:\n        return k * k * k * k * k * k * k * k * k * k * k * k * k * k\n    if n == 16:\n        return k * k * k * k * k * k * k * k * k * k * k * k * k * k * k\n",
        "difficulty": "interview"
    },
    {
        "task_id": 931,
        "prompt": "Complete the Python function given the prompt below:Inna and Dima decided to surprise Sereja. They brought a really huge candy matrix, it's big even for Sereja! Let's number the rows of the giant matrix from 1 to n from top to bottom and the columns \u2014 from 1 to m, from left to right. We'll represent the cell on the intersection of the i-th row and j-th column as (i, j). Just as is expected, some cells of the giant candy matrix contain candies. Overall the matrix has p candies: the k-th candy is at cell (x_{k}, y_{k}).\nThe time moved closer to dinner and Inna was already going to eat p of her favourite sweets from the matrix, when suddenly Sereja (for the reason he didn't share with anyone) rotated the matrix x times clockwise by 90 degrees. Then he performed the horizontal rotate of the matrix y times. And then he rotated the matrix z times counterclockwise by 90 degrees. The figure below shows how the rotates of the matrix looks like. [Image] \nInna got really upset, but Duma suddenly understood two things: the candies didn't get damaged and he remembered which cells contained Inna's favourite sweets before Sereja's strange actions. Help guys to find the new coordinates in the candy matrix after the transformation Sereja made!\n-----Input-----\nThe first line of the input contains fix integers n, m, x, y, z, p (1 \u2264 n, m \u2264 10^9;\u00a00 \u2264 x, y, z \u2264 10^9;\u00a01 \u2264 p \u2264 10^5).\nEach of the following p lines contains two integers x_{k}, y_{k} (1 \u2264 x_{k} \u2264 n;\u00a01 \u2264 y_{k} \u2264 m) \u2014 the initial coordinates of the k-th candy. Two candies can lie on the same cell.\n-----Output-----\nFor each of the p candies, print on a single line its space-separated new coordinates.\n-----Examples-----\nInput\n3 3 3 1 1 9\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n3 1\n3 2\n3 3\nOutput\n1 3\n1 2\n1 1\n2 3\n2 2\n2 1\n3 3\n3 2\n3 1\n-----Note-----\nJust for clarity. Horizontal rotating is like a mirroring of the matrix. For matrix:\nQWER      REWQ \nASDF  ->  FDSA\nZXCV      VCXZ\n\ndef",
        "answer": "def rotate(matrix):\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i, n):\n            matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n    for i in range(n):\n        for j in range(n//2):\n            matrix[i][j], matrix[i][n-j-1] = matrix[i][n-j-1], matrix[i][j]\n    return matrix",
        "difficulty": "interview"
    },
    {
        "task_id": 932,
        "prompt": "Complete the Python function given the prompt below:Let's define logical OR as an operation on two logical values (i. e. values that belong to the set {0, 1}) that is equal to 1 if either or both of the logical values is set to 1, otherwise it is 0. We can define logical OR of three or more logical values in the same manner:\n$a_{1} OR a_{2} OR \\ldots OR a_{k}$ where $a_{i} \\in \\{0,1 \\}$ is equal to 1 if some a_{i} = 1, otherwise it is equal to 0.\nNam has a matrix A consisting of m rows and n columns. The rows are numbered from 1 to m, columns are numbered from 1 to n. Element at row i (1 \u2264 i \u2264 m) and column j (1 \u2264 j \u2264 n) is denoted as A_{ij}. All elements of A are either 0 or 1. From matrix A, Nam creates another matrix B of the same size using formula:\n[Image].\n(B_{ij} is OR of all elements in row i and column j of matrix A)\nNam gives you matrix B and challenges you to guess matrix A. Although Nam is smart, he could probably make a mistake while calculating matrix B, since size of A can be large.\n-----Input-----\nThe first line contains two integer m and n (1 \u2264 m, n \u2264 100), number of rows and number of columns of matrices respectively.\nThe next m lines each contain n integers separated by spaces describing rows of matrix B (each element of B is either 0 or 1).\n-----Output-----\nIn the first line, print \"NO\" if Nam has made a mistake when calculating B, otherwise print \"YES\". If the first line is \"YES\", then also print m rows consisting of n integers representing matrix A that can produce given matrix B. If there are several solutions print any one.\n-----Examples-----\nInput\n2 2\n1 0\n0 0\nOutput\nNO\nInput\n2 3\n1 1 1\n1 1 1\nOutput\nYES\n1 1 1\n1 1 1\nInput\n2 3\n0 1 0\n1 1 1\nOutput\nYES\n0 0 0\n0 1 0\n\ndef",
        "answer": "def logical_or(a, b):\n    return a or b",
        "difficulty": "interview"
    },
    {
        "task_id": 933,
        "prompt": "Complete the Python function given the prompt below:Many modern text editors automatically check the spelling of the user's text. Some editors even suggest how to correct typos.\nIn this problem your task to implement a small functionality to correct two types of typos in a word. We will assume that three identical letters together is a typo (for example, word \"helllo\" contains a typo). Besides, a couple of identical letters immediately followed by another couple of identical letters is a typo too (for example, words \"helloo\" and \"wwaatt\" contain typos).\nWrite a code that deletes the minimum number of letters from a word, correcting described typos in the word. You are allowed to delete letters from both ends and from the middle of the word.\n-----Input-----\nThe single line of the input contains word s, its length is from 1 to 200000 characters. The given word s consists of lowercase English letters.\n-----Output-----\nPrint such word t that it doesn't contain any typos described in the problem statement and is obtained from s by deleting the least number of letters.\nIf there are multiple solutions, print any of them.\n-----Examples-----\nInput\nhelloo\nOutput\nhello\nInput\nwoooooow\nOutput\nwoow\n-----Note-----\nThe second valid answer to the test from the statement is \"heloo\".\n\ndef",
        "answer": "def delete_typos(s):\n    s = list(s)\n    for i in range(len(s)):\n        if s[i] == s[i+1]:\n            s.pop(i)\n            s.pop(i)\n            break\n    return ''.join(s)",
        "difficulty": "interview"
    },
    {
        "task_id": 934,
        "prompt": "Complete the Python function given the prompt below:Gennady owns a small hotel in the countryside where he lives a peaceful life. He loves to take long walks, watch sunsets and play cards with tourists staying in his hotel. His favorite game is called \"Mau-Mau\".\nTo play Mau-Mau, you need a pack of $52$ cards. Each card has a suit (Diamonds \u2014 D, Clubs \u2014 C, Spades \u2014 S, or Hearts \u2014 H), and a rank (2, 3, 4, 5, 6, 7, 8, 9, T, J, Q, K, or A).\nAt the start of the game, there is one card on the table and you have five cards in your hand. You can play a card from your hand if and only if it has the same rank or the same suit as the card on the table.\nIn order to check if you'd be a good playing partner, Gennady has prepared a task for you. Given the card on the table and five cards in your hand, check if you can play at least one card.\n-----Input-----\nThe first line of the input contains one string which describes the card on the table. The second line contains five strings which describe the cards in your hand.\nEach string is two characters long. The first character denotes the rank and belongs to the set $\\{{\\tt 2}, {\\tt 3}, {\\tt 4}, {\\tt 5}, {\\tt 6}, {\\tt 7}, {\\tt 8}, {\\tt 9}, {\\tt T}, {\\tt J}, {\\tt Q}, {\\tt K}, {\\tt A}\\}$. The second character denotes the suit and belongs to the set $\\{{\\tt D}, {\\tt C}, {\\tt S}, {\\tt H}\\}$.\nAll the cards in the input are different.\n-----Output-----\nIf it is possible to play a card from your hand, print one word \"YES\". Otherwise, print \"NO\".\nYou can print each letter in any case (upper or lower).\n-----Examples-----\nInput\nAS\n2H 4C TH JH AD\nOutput\nYES\nInput\n2H\n3D 4C AC KD AS\nOutput\nNO\nInput\n4D\nAS AC AD AH 5H\nOutput\nYES\n-----Note-----\nIn the first example, there is an Ace of Spades (AS) on the table. You can play an Ace of Diamonds (AD) because both of them are Aces.\nIn the second example, you cannot play any card.\nIn the third example, you can play an Ace of Diamonds (AD) because it has the same suit as a Four of Diamonds (4D), which lies on the table.\n\ndef",
        "answer": "def mau_mau(table, hand):\n    return 'YES' if any(table[0][0] == card[0] or table[0][1] == card[1] for card in hand) else 'NO'",
        "difficulty": "interview"
    },
    {
        "task_id": 935,
        "prompt": "Complete the Python function given the prompt below:After winning gold and silver in IOI 2014, Akshat and Malvika want to have some fun. Now they are playing a game on a grid made of n horizontal and m vertical sticks.\nAn intersection point is any point on the grid which is formed by the intersection of one horizontal stick and one vertical stick.\nIn the grid shown below, n = 3 and m = 3. There are n + m = 6 sticks in total (horizontal sticks are shown in red and vertical sticks are shown in green). There are n\u00b7m = 9 intersection points, numbered from 1 to 9.\n [Image] \nThe rules of the game are very simple. The players move in turns. Akshat won gold, so he makes the first move. During his/her move, a player must choose any remaining intersection point and remove from the grid all sticks which pass through this point. A player will lose the game if he/she cannot make a move (i.e. there are no intersection points remaining on the grid at his/her move).\nAssume that both players play optimally. Who will win the game?\n-----Input-----\nThe first line of input contains two space-separated integers, n and m (1 \u2264 n, m \u2264 100).\n-----Output-----\nPrint a single line containing \"Akshat\" or \"Malvika\" (without the quotes), depending on the winner of the game.\n-----Examples-----\nInput\n2 2\nOutput\nMalvika\nInput\n2 3\nOutput\nMalvika\nInput\n3 3\nOutput\nAkshat\n-----Note-----\nExplanation of the first sample:\nThe grid has four intersection points, numbered from 1 to 4.\n [Image] \nIf Akshat chooses intersection point 1, then he will remove two sticks (1 - 2 and 1 - 3). The resulting grid will look like this.\n [Image] \nNow there is only one remaining intersection point (i.e. 4). Malvika must choose it and remove both remaining sticks. After her move the grid will be empty.\nIn the empty grid, Akshat cannot make any move, hence he will lose.\nSince all 4 intersection points of the grid are equivalent, Akshat will lose no matter which one he picks.\n\ndef",
        "answer": "def intersection(lst1, lst2): \n    lst3 = [value for value in lst1 if value in lst2] \n    return lst3 ",
        "difficulty": "interview"
    },
    {
        "task_id": 936,
        "prompt": "Complete the Python function given the prompt below:After celebrating the midcourse the students of one of the faculties of the Berland State University decided to conduct a vote for the best photo. They published the photos in the social network and agreed on the rules to choose a winner: the photo which gets most likes wins. If multiple photoes get most likes, the winner is the photo that gets this number first.\nHelp guys determine the winner photo by the records of likes.\n-----Input-----\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 1000) \u2014 the total likes to the published photoes. \nThe second line contains n positive integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 1 000 000), where a_{i} is the identifier of the photo which got the i-th like.\n-----Output-----\nPrint the identifier of the photo which won the elections.\n-----Examples-----\nInput\n5\n1 3 2 2 1\nOutput\n2\nInput\n9\n100 200 300 200 100 300 300 100 200\nOutput\n300\n-----Note-----\nIn the first test sample the photo with id 1 got two likes (first and fifth), photo with id 2 got two likes (third and fourth), and photo with id 3 got one like (second). \nThus, the winner is the photo with identifier 2, as it got:  more likes than the photo with id 3;  as many likes as the photo with id 1, but the photo with the identifier 2 got its second like earlier.\n\ndef",
        "answer": "def find_winner(likes):\n    max_likes = 0\n    winner = 0\n    for i in range(len(likes)):\n        if likes[i] > max_likes:\n            max_likes = likes[i]\n            winner = i + 1\n    return winner",
        "difficulty": "interview"
    },
    {
        "task_id": 937,
        "prompt": "Complete the Python function given the prompt below:Your friend Mishka and you attend a calculus lecture. Lecture lasts n minutes. Lecturer tells a_{i} theorems during the i-th minute.\nMishka is really interested in calculus, though it is so hard to stay awake for all the time of lecture. You are given an array t of Mishka's behavior. If Mishka is asleep during the i-th minute of the lecture then t_{i} will be equal to 0, otherwise it will be equal to 1. When Mishka is awake he writes down all the theorems he is being told \u2014 a_{i} during the i-th minute. Otherwise he writes nothing.\nYou know some secret technique to keep Mishka awake for k minutes straight. However you can use it only once. You can start using it at the beginning of any minute between 1 and n - k + 1. If you use it on some minute i then Mishka will be awake during minutes j such that $j \\in [ i, i + k - 1 ]$ and will write down all the theorems lecturer tells.\nYou task is to calculate the maximum number of theorems Mishka will be able to write down if you use your technique only once to wake him up.\n-----Input-----\nThe first line of the input contains two integer numbers n and k (1 \u2264 k \u2264 n \u2264 10^5) \u2014 the duration of the lecture in minutes and the number of minutes you can keep Mishka awake.\nThe second line of the input contains n integer numbers a_1, a_2,... a_{n} (1 \u2264 a_{i} \u2264 10^4) \u2014 the number of theorems lecturer tells during the i-th minute.\nThe third line of the input contains n integer numbers t_1, t_2,... t_{n} (0 \u2264 t_{i} \u2264 1) \u2014 type of Mishka's behavior at the i-th minute of the lecture.\n-----Output-----\nPrint only one integer \u2014 the maximum number of theorems Mishka will be able to write down if you use your technique only once to wake him up.\n-----Example-----\nInput\n6 3\n1 3 5 2 5 4\n1 1 0 1 0 0\nOutput\n16\n-----Note-----\nIn the sample case the better way is to use the secret technique at the beginning of the third minute. Then the number of theorems Mishka will be able to write down will be equal to 16.\n\ndef",
        "answer": "def max_theorems(n, k, a):\n    max_theorems = 0\n    for i in range(k):\n        if a[i] == 1:\n            max_theorems += 1\n    for i in range(k, n):\n        if a[i] == 1:\n            max_theorems += 1\n        else:\n            max_theorems -= 1\n        if max_theorems < 0:\n            max_theorems = 0\n    return max_theorems",
        "difficulty": "interview"
    },
    {
        "task_id": 938,
        "prompt": "Complete the Python function given the prompt below:In a galaxy far, far away Lesha the student has just got to know that he has an exam in two days. As always, he hasn't attended any single class during the previous year, so he decided to spend the remaining time wisely.\nLesha knows that today he can study for at most $a$ hours, and he will have $b$ hours to study tomorrow. Note that it is possible that on his planet there are more hours in a day than on Earth. Lesha knows that the quality of his knowledge will only depend on the number of lecture notes he will read. He has access to an infinite number of notes that are enumerated with positive integers, but he knows that he can read the first note in one hour, the second note in two hours and so on. In other words, Lesha can read the note with number $k$ in $k$ hours. Lesha can read the notes in arbitrary order, however, he can't start reading a note in the first day and finish its reading in the second day.\nThus, the student has to fully read several lecture notes today, spending at most $a$ hours in total, and fully read several lecture notes tomorrow, spending at most $b$ hours in total. What is the maximum number of notes Lesha can read in the remaining time? Which notes should he read in the first day, and which\u00a0\u2014 in the second?\n-----Input-----\nThe only line of input contains two integers $a$ and $b$ ($0 \\leq a, b \\leq 10^{9}$)\u00a0\u2014 the number of hours Lesha has today and the number of hours Lesha has tomorrow.\n-----Output-----\nIn the first line print a single integer $n$ ($0 \\leq n \\leq a$)\u00a0\u2014 the number of lecture notes Lesha has to read in the first day. In the second line print $n$ distinct integers $p_1, p_2, \\ldots, p_n$ ($1 \\leq p_i \\leq a$), the sum of all $p_i$ should not exceed $a$.\nIn the third line print a single integer $m$ ($0 \\leq m \\leq b$)\u00a0\u2014 the number of lecture notes Lesha has to read in the second day. In the fourth line print $m$ distinct integers $q_1, q_2, \\ldots, q_m$ ($1 \\leq q_i \\leq b$), the sum of all $q_i$ should not exceed $b$.\nAll integers $p_i$ and $q_i$ should be distinct. The sum $n + m$ should be largest possible.\n-----Examples-----\nInput\n3 3\nOutput\n1\n3 \n2\n2 1 \nInput\n9 12\nOutput\n2\n3 6\n4\n1 2 4 5\n-----Note-----\nIn the first example Lesha can read the third note in $3$ hours in the first day, and the first and the second notes in one and two hours correspondingly in the second day, spending $3$ hours as well. Note that Lesha can make it the other way round, reading the first and the second notes in the first day and the third note in the second day.\nIn the second example Lesha should read the third and the sixth notes in the first day, spending $9$ hours in total. In the second day Lesha should read the first, second fourth and fifth notes, spending $12$ hours in total.\n\ndef",
        "answer": "def read_notes(a, b):\n    n = 0\n    m = 0\n    p = []\n    q = []\n    for i in range(1, a + 1):\n        if i <= b:\n            n += 1\n            p.append(i)\n        else:\n            break\n    for i in range(1, b + 1):\n        if i <= a:\n            m += 1\n            q.append(i)\n        else:\n            break\n    return n, p, m, q",
        "difficulty": "interview"
    },
    {
        "task_id": 939,
        "prompt": "Complete the Python function given the prompt below:In Berland, there is the national holiday coming \u2014 the Flag Day. In the honor of this event the president of the country decided to make a big dance party and asked your agency to organize it. He has several conditions:  overall, there must be m dances; exactly three people must take part in each dance; each dance must have one dancer in white clothes, one dancer in red clothes and one dancer in blue clothes (these are the colors of the national flag of Berland). \nThe agency has n dancers, and their number can be less than 3m. That is, some dancers will probably have to dance in more than one dance. All of your dancers must dance on the party. However, if some dance has two or more dancers from a previous dance, then the current dance stops being spectacular. Your agency cannot allow that to happen, so each dance has at most one dancer who has danced in some previous dance. \nYou considered all the criteria and made the plan for the m dances: each dance had three dancers participating in it. Your task is to determine the clothes color for each of the n dancers so that the President's third condition fulfilled: each dance must have a dancer in white, a dancer in red and a dancer in blue. The dancers cannot change clothes between the dances.\n-----Input-----\nThe first line contains two space-separated integers n (3 \u2264 n \u2264 10^5) and m (1 \u2264 m \u2264 10^5) \u2014 the number of dancers and the number of dances, correspondingly. Then m lines follow, describing the dances in the order of dancing them. The i-th line contains three distinct integers \u2014 the numbers of the dancers that take part in the i-th dance. The dancers are numbered from 1 to n. Each dancer takes part in at least one dance.\n-----Output-----\nPrint n space-separated integers: the i-th number must represent the color of the i-th dancer's clothes (1 for white, 2 for red, 3 for blue). If there are multiple valid solutions, print any of them. It is guaranteed that at least one solution exists.\n-----Examples-----\nInput\n7 3\n1 2 3\n1 4 5\n4 6 7\nOutput\n1 2 3 3 2 2 1 \nInput\n9 3\n3 6 9\n2 5 8\n1 4 7\nOutput\n1 1 1 2 2 2 3 3 3 \nInput\n5 2\n4 1 5\n3 1 2\nOutput\n2 3 1 1 3\n\ndef",
        "answer": "def dance(n, m, dancers):\n    dancers = sorted(dancers)\n    dancers = [dancers[i:i+3] for i in range(0, len(dancers), 3)]\n    dancers = sorted(dancers, key=lambda x: x[0])\n    dancers = sorted(dancers, key=lambda x: x[1])\n    dancers = sorted(dancers, key=lambda x: x[2])\n    dancers = [dancers[i:i+3] for i in range(0, len(dancers), 3)]\n    dancers = sorted(dancers, key=lambda x: x[0])\n    dancers = sorted(dancers, key=lambda x: x[1])\n    dancers = sorted(dancers, key=lambda x: x[2])\n    dancers = [dancers[i:i+3] for i in range(0, len(dancers), 3)]\n    dancers = sorted(dancers, key=lambda x: x[0])\n    dancers = sorted(dancers, key=lambda x: x[1])\n    dancers = sorted(dancers, key=lambda x: x[2])\n    dancers = [dancers[i:i+3] for i in range(0, len(dancers), 3)]\n    dancers = sorted(dancers, key=lambda x: x[0])\n    dancers = sorted(dancers, key=lambda x: x[1])\n    dancers = sorted(dancers, key=lambda x: x[2])\n    dancers = [dancers[i:i+3] for i in range(0, len(dancers), 3)]\n    dancers = sorted(dancers",
        "difficulty": "interview"
    },
    {
        "task_id": 940,
        "prompt": "Complete the Python function given the prompt below:Masha has three sticks of length $a$, $b$ and $c$ centimeters respectively. In one minute Masha can pick one arbitrary stick and increase its length by one centimeter. She is not allowed to break sticks.\nWhat is the minimum number of minutes she needs to spend increasing the stick's length in order to be able to assemble a triangle of positive area. Sticks should be used as triangle's sides (one stick for one side) and their endpoints should be located at triangle's vertices.\n-----Input-----\nThe only line contains tree integers $a$, $b$ and $c$ ($1 \\leq a, b, c \\leq 100$)\u00a0\u2014 the lengths of sticks Masha possesses.\n-----Output-----\nPrint a single integer\u00a0\u2014 the minimum number of minutes that Masha needs to spend in order to be able to make the triangle of positive area from her sticks.\n-----Examples-----\nInput\n3 4 5\nOutput\n0\nInput\n2 5 3\nOutput\n1\nInput\n100 10 10\nOutput\n81\n-----Note-----\nIn the first example, Masha can make a triangle from the sticks without increasing the length of any of them.\nIn the second example, Masha can't make a triangle of positive area from the sticks she has at the beginning, but she can spend one minute to increase the length $2$ centimeter stick by one and after that form a triangle with sides $3$, $3$ and $5$ centimeters.\nIn the third example, Masha can take $33$ minutes to increase one of the $10$ centimeters sticks by $33$ centimeters, and after that take $48$ minutes to increase another $10$ centimeters stick by $48$ centimeters. This way she can form a triangle with lengths $43$, $58$ and $100$ centimeters in $81$ minutes. One can show that it is impossible to get a valid triangle faster.\n\ndef",
        "answer": "def triangle(a, b, c):\n    return min(a + b, b + c, a + c) - max(a, b, c)",
        "difficulty": "interview"
    },
    {
        "task_id": 941,
        "prompt": "Complete the Python function given the prompt below:You are given an integer $n$ ($n \\ge 0$) represented with $k$ digits in base (radix) $b$. So,\n$$n = a_1 \\cdot b^{k-1} + a_2 \\cdot b^{k-2} + \\ldots a_{k-1} \\cdot b + a_k.$$\nFor example, if $b=17, k=3$ and $a=[11, 15, 7]$ then $n=11\\cdot17^2+15\\cdot17+7=3179+255+7=3441$.\nDetermine whether $n$ is even or odd.\n-----Input-----\nThe first line contains two integers $b$ and $k$ ($2\\le b\\le 100$, $1\\le k\\le 10^5$)\u00a0\u2014 the base of the number and the number of digits.\nThe second line contains $k$ integers $a_1, a_2, \\ldots, a_k$ ($0\\le a_i < b$)\u00a0\u2014 the digits of $n$.\nThe representation of $n$ contains no unnecessary leading zero. That is, $a_1$ can be equal to $0$ only if $k = 1$.\n-----Output-----\nPrint \"even\" if $n$ is even, otherwise print \"odd\".\nYou can print each letter in any case (upper or lower).\n-----Examples-----\nInput\n13 3\n3 2 7\nOutput\neven\nInput\n10 9\n1 2 3 4 5 6 7 8 9\nOutput\nodd\nInput\n99 5\n32 92 85 74 4\nOutput\nodd\nInput\n2 2\n1 0\nOutput\neven\n-----Note-----\nIn the first example, $n = 3 \\cdot 13^2 + 2 \\cdot 13 + 7 = 540$, which is even.\nIn the second example, $n = 123456789$ is odd.\nIn the third example, $n = 32 \\cdot 99^4 + 92 \\cdot 99^3 + 85 \\cdot 99^2 + 74 \\cdot 99 + 4 = 3164015155$ is odd.\nIn the fourth example $n = 2$.\n\ndef",
        "answer": "def is_even(n, b):\n    return n % 2 == 0",
        "difficulty": "interview"
    },
    {
        "task_id": 942,
        "prompt": "Complete the Python function given the prompt below:Chouti and his classmates are going to the university soon. To say goodbye to each other, the class has planned a big farewell party in which classmates, teachers and parents sang and danced.\nChouti remembered that $n$ persons took part in that party. To make the party funnier, each person wore one hat among $n$ kinds of weird hats numbered $1, 2, \\ldots n$. It is possible that several persons wore hats of the same kind. Some kinds of hats can remain unclaimed by anyone.\nAfter the party, the $i$-th person said that there were $a_i$ persons wearing a hat differing from his own.\nIt has been some days, so Chouti forgot all about others' hats, but he is curious about that. Let $b_i$ be the number of hat type the $i$-th person was wearing, Chouti wants you to find any possible $b_1, b_2, \\ldots, b_n$ that doesn't contradict with any person's statement. Because some persons might have a poor memory, there could be no solution at all.\n-----Input-----\nThe first line contains a single integer $n$ ($1 \\le n \\le 10^5$), the number of persons in the party.\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i \\le n-1$), the statements of people.\n-----Output-----\nIf there is no solution, print a single line \"Impossible\".\nOtherwise, print \"Possible\" and then $n$ integers $b_1, b_2, \\ldots, b_n$ ($1 \\le b_i \\le n$).\nIf there are multiple answers, print any of them.\n-----Examples-----\nInput\n3\n0 0 0\nOutput\nPossible\n1 1 1 \nInput\n5\n3 3 2 2 2\nOutput\nPossible\n1 1 2 2 2 \nInput\n4\n0 1 2 3\nOutput\nImpossible\n-----Note-----\nIn the answer to the first example, all hats are the same, so every person will say that there were no persons wearing a hat different from kind $1$.\nIn the answer to the second example, the first and the second person wore the hat with type $1$ and all other wore a hat of type $2$.\nSo the first two persons will say there were three persons with hats differing from their own. Similarly, three last persons will say there were two persons wearing a hat different from their own.\nIn the third example, it can be shown that no solution exists.\nIn the first and the second example, other possible configurations are possible.\n\ndef",
        "answer": "def hats(n, a):\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 1]\n    if n == 3:\n        return [1, 2, 2]\n    if n == 4:\n        return [1, 1, 2, 2]\n    if n == 5:\n        return [1, 1, 2, 2, 2]\n    if n == 6:\n        return [1, 1, 2, 2, 2, 2]\n    if n == 7:\n        return [1, 1, 2, 2, 2, 2, 2]\n    if n == 8:\n        return [1, 1, 2, 2, 2, 2, 2, 2]\n    if n == 9:\n        return [1, 1, 2, 2, 2, 2, 2, 2, 2]\n    if n == 10:\n        return [1, 1, 2, 2, 2, 2, 2, 2, 2, 2]\n    if n == 11:\n        return [1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n    if n == 12:\n        return [1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n    if n == 13:\n        return [1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n    if n == 14:\n        return [1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n    if n == 15:\n        return [1, 1, 2, 2, 2, 2, 2, 2, 2, 2",
        "difficulty": "interview"
    },
    {
        "task_id": 943,
        "prompt": "Complete the Python function given the prompt below:Today, Wet Shark is given n integers. Using any of these integers no more than once, Wet Shark wants to get maximum possible even (divisible by 2) sum. Please, calculate this value for Wet Shark. \nNote, that if Wet Shark uses no integers from the n integers, the sum is an even integer 0.\n-----Input-----\nThe first line of the input contains one integer, n (1 \u2264 n \u2264 100 000). The next line contains n space separated integers given to Wet Shark. Each of these integers is in range from 1 to 10^9, inclusive. \n-----Output-----\nPrint the maximum possible even sum that can be obtained if we use some of the given integers. \n-----Examples-----\nInput\n3\n1 2 3\nOutput\n6\nInput\n5\n999999999 999999999 999999999 999999999 999999999\nOutput\n3999999996\n-----Note-----\nIn the first sample, we can simply take all three integers for a total sum of 6.\nIn the second sample Wet Shark should take any four out of five integers 999 999 999.\n\ndef",
        "answer": "def maxEvenSum(n, arr):\n    even_sum = 0\n    for i in arr:\n        if i % 2 == 0:\n            even_sum += i\n    return even_sum",
        "difficulty": "interview"
    },
    {
        "task_id": 944,
        "prompt": "Complete the Python function given the prompt below:In Berland there are n cities and n - 1 bidirectional roads. Each road connects some pair of cities, from any city you can get to any other one using only the given roads.\nIn each city there is exactly one repair brigade. To repair some road, you need two teams based in the cities connected by the road to work simultaneously for one day. Both brigades repair one road for the whole day and cannot take part in repairing other roads on that day. But the repair brigade can do nothing on that day.\nDetermine the minimum number of days needed to repair all the roads. The brigades cannot change the cities where they initially are.\n-----Input-----\nThe first line of the input contains a positive integer n (2 \u2264 n \u2264 200 000)\u00a0\u2014 the number of cities in Berland.\nEach of the next n - 1 lines contains two numbers u_{i}, v_{i}, meaning that the i-th road connects city u_{i} and city v_{i} (1 \u2264 u_{i}, v_{i} \u2264 n, u_{i} \u2260 v_{i}).\n-----Output-----\nFirst print number k\u00a0\u2014 the minimum number of days needed to repair all the roads in Berland.\nIn next k lines print the description of the roads that should be repaired on each of the k days. On the i-th line print first number d_{i} \u2014 the number of roads that should be repaired on the i-th day, and then d_{i} space-separated integers \u2014 the numbers of the roads that should be repaired on the i-th day. The roads are numbered according to the order in the input, starting from one.\nIf there are multiple variants, you can print any of them.\n-----Examples-----\nInput\n4\n1 2\n3 4\n3 2\nOutput\n2\n2 2 1\n1 3\nInput\n6\n3 4\n5 4\n3 2\n1 3\n4 6\nOutput\n3\n1 1 \n2 2 3 \n2 4 5 \n-----Note-----\nIn the first sample you can repair all the roads in two days, for example, if you repair roads 1 and 2 on the first day and road 3 \u2014 on the second day.\n\ndef",
        "answer": "def roads(roads):\n    n = len(roads)\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x",
        "difficulty": "interview"
    },
    {
        "task_id": 945,
        "prompt": "Complete the Python function given the prompt below:Dima and Seryozha live in an ordinary dormitory room for two. One day Dima had a date with his girl and he asked Seryozha to leave the room. As a compensation, Seryozha made Dima do his homework.\nThe teacher gave Seryozha the coordinates of n distinct points on the abscissa axis and asked to consecutively connect them by semi-circus in a certain order: first connect the first point with the second one, then connect the second point with the third one, then the third one with the fourth one and so on to the n-th point. Two points with coordinates (x_1, 0) and (x_2, 0) should be connected by a semi-circle that passes above the abscissa axis with the diameter that coincides with the segment between points. Seryozha needs to find out if the line on the picture intersects itself. For clarifications, see the picture Seryozha showed to Dima (the left picture has self-intersections, the right picture doesn't have any). [Image] \nSeryozha is not a small boy, so the coordinates of the points can be rather large. Help Dima cope with the problem.\n-----Input-----\nThe first line contains a single integer n (1 \u2264 n \u2264 10^3). The second line contains n distinct integers x_1, x_2,..., x_{n} ( - 10^6 \u2264 x_{i} \u2264 10^6) \u2014 the i-th point has coordinates (x_{i}, 0). The points are not necessarily sorted by their x coordinate.\n-----Output-----\nIn the single line print \"yes\" (without the quotes), if the line has self-intersections. Otherwise, print \"no\" (without the quotes).\n-----Examples-----\nInput\n4\n0 10 5 15\nOutput\nyes\nInput\n4\n0 15 5 10\nOutput\nno\n-----Note-----\nThe first test from the statement is on the picture to the left, the second test is on the picture to the right.\n\ndef",
        "answer": "def check_intersection(x1, y1, x2, y2, x3, y3, x4, y4):\n    if (x1 == x2 and y1 == y2) or (x3 == x4 and y3 == y4):\n        return False\n    if (x1 == x2 and y1 == y2) or (x3 == x4 and y3 == y4):\n        return False\n    if (x1 == x2 and y1 == y2) or (x3 == x4 and y3 == y4):\n        return False\n    if (x1 == x2 and y1 == y2) or (x3 == x4 and y3 == y4):\n        return False\n    if (x1 == x2 and y1 == y2) or (x3 == x4 and y3 == y4):\n        return False\n    if (x1 == x2 and y1 == y2) or (x3 == x4 and y3 == y4):\n        return False\n    if (x1 == x2 and y1 == y2) or (x3 == x4 and y3 == y4):\n        return False\n    if (x1 == x2 and y1 == y2) or (x3 == x4 and y3 == y4):\n        return False\n    if (x1 == x2 and y1 == y2) or (x3 == x4 and y3 == y4):\n        return False\n    if (x1 == x2 and y1 == y2) or (x3 == x4 and y3 == y4):\n        return False\n    if (x1 == x2 and y1 == y2) or (x3 == x4 and y3 == y4):\n",
        "difficulty": "interview"
    },
    {
        "task_id": 946,
        "prompt": "Complete the Python function given the prompt below:When preparing a tournament, Codeforces coordinators try treir best to make the first problem as easy as possible. This time the coordinator had chosen some problem and asked $n$ people about their opinions. Each person answered whether this problem is easy or hard.\nIf at least one of these $n$ people has answered that the problem is hard, the coordinator decides to change the problem. For the given responses, check if the problem is easy enough.\n-----Input-----\nThe first line contains a single integer $n$ ($1 \\le n \\le 100$) \u2014 the number of people who were asked to give their opinions.\nThe second line contains $n$ integers, each integer is either $0$ or $1$. If $i$-th integer is $0$, then $i$-th person thinks that the problem is easy; if it is $1$, then $i$-th person thinks that the problem is hard.\n-----Output-----\nPrint one word: \"EASY\" if the problem is easy according to all responses, or \"HARD\" if there is at least one person who thinks the problem is hard. \nYou may print every letter in any register: \"EASY\", \"easy\", \"EaSY\" and \"eAsY\" all will be processed correctly.\n-----Examples-----\nInput\n3\n0 0 1\nOutput\nHARD\nInput\n1\n0\nOutput\nEASY\n-----Note-----\nIn the first example the third person says it's a hard problem, so it should be replaced.\nIn the second example the problem easy for the only person, so it doesn't have to be replaced.\n\ndef",
        "answer": "def easy_or_hard(n, l):\n    if 0 in l:\n        return \"HARD\"\n    else:\n        return \"EASY\"",
        "difficulty": "interview"
    },
    {
        "task_id": 947,
        "prompt": "Complete the Python function given the prompt below:In Omkar's last class of math, he learned about the least common multiple, or $LCM$. $LCM(a, b)$ is the smallest positive integer $x$ which is divisible by both $a$ and $b$.\nOmkar, having a laudably curious mind, immediately thought of a problem involving the $LCM$ operation: given an integer $n$, find positive integers $a$ and $b$ such that $a + b = n$ and $LCM(a, b)$ is the minimum value possible.\nCan you help Omkar solve his ludicrously challenging math problem?\n-----Input-----\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\leq t \\leq 10$). Description of the test cases follows.\nEach test case consists of a single integer $n$ ($2 \\leq n \\leq 10^{9}$).\n-----Output-----\nFor each test case, output two positive integers $a$ and $b$, such that $a + b = n$ and $LCM(a, b)$ is the minimum possible.\n-----Example-----\nInput\n3\n4\n6\n9\nOutput\n2 2\n3 3\n3 6\n-----Note-----\nFor the first test case, the numbers we can choose are $1, 3$ or $2, 2$. $LCM(1, 3) = 3$ and $LCM(2, 2) = 2$, so we output $2 \\ 2$.\nFor the second test case, the numbers we can choose are $1, 5$, $2, 4$, or $3, 3$. $LCM(1, 5) = 5$, $LCM(2, 4) = 4$, and $LCM(3, 3) = 3$, so we output $3 \\ 3$.\nFor the third test case, $LCM(3, 6) = 6$. It can be shown that there are no other pairs of numbers which sum to $9$ that have a lower $LCM$.\n\ndef",
        "answer": "def lcm(a, b):\n    return a * b // gcd(a, b)",
        "difficulty": "interview"
    },
    {
        "task_id": 948,
        "prompt": "Complete the Python function given the prompt below:The developers of Looksery have to write an efficient algorithm that detects faces on a picture. Unfortunately, they are currently busy preparing a contest for you, so you will have to do it for them. \nIn this problem an image is a rectangular table that consists of lowercase Latin letters. A face on the image is a 2 \u00d7 2 square, such that from the four letters of this square you can make word \"face\". \nYou need to write a program that determines the number of faces on the image. The squares that correspond to the faces can overlap.\n-----Input-----\nThe first line contains two space-separated integers, n and m (1 \u2264 n, m \u2264 50) \u2014 the height and the width of the image, respectively.\nNext n lines define the image. Each line contains m lowercase Latin letters.\n-----Output-----\nIn the single line print the number of faces on the image.\n-----Examples-----\nInput\n4 4\nxxxx\nxfax\nxcex\nxxxx\nOutput\n1\nInput\n4 2\nxx\ncf\nae\nxx\nOutput\n1\nInput\n2 3\nfac\ncef\nOutput\n2\nInput\n1 4\nface\nOutput\n0\n-----Note-----\nIn the first sample the image contains a single face, located in a square with the upper left corner at the second line and the second column:  [Image] \nIn the second sample the image also contains exactly one face, its upper left corner is at the second row and the first column.\nIn the third sample two faces are shown:  $\\text{fac}$ \nIn the fourth sample the image has no faces on it.\n\ndef",
        "answer": "def count_faces(n, m, image):\n    faces = 0\n    for i in range(n):\n        for j in range(m):\n            if image[i][j] == image[i][j+1] == image[i+1][j] == image[i+1][j+1]:\n                faces += 1\n    return faces",
        "difficulty": "interview"
    },
    {
        "task_id": 949,
        "prompt": "Complete the Python function given the prompt below:Greatest common divisor GCD(a, b) of two positive integers a and b is equal to the biggest integer d such that both integers a and b are divisible by d. There are many efficient algorithms to find greatest common divisor GCD(a, b), for example, Euclid algorithm. \nFormally, find the biggest integer d, such that all integers a, a + 1, a + 2,..., b are divisible by d. To make the problem even more complicated we allow a and b to be up to googol, 10^100\u00a0\u2014 such number do not fit even in 64-bit integer type!\n-----Input-----\nThe only line of the input contains two integers a and b (1 \u2264 a \u2264 b \u2264 10^100).\n-----Output-----\nOutput one integer\u00a0\u2014 greatest common divisor of all integers from a to b inclusive.\n-----Examples-----\nInput\n1 2\nOutput\n1\nInput\n61803398874989484820458683436563811772030917980576 61803398874989484820458683436563811772030917980576\nOutput\n61803398874989484820458683436563811772030917980576\n\ndef",
        "answer": "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)",
        "difficulty": "interview"
    },
    {
        "task_id": 950,
        "prompt": "Complete the Python function given the prompt below:After overcoming the stairs Dasha came to classes. She needed to write a password to begin her classes. The password is a string of length n which satisfies the following requirements:  There is at least one digit in the string,  There is at least one lowercase (small) letter of the Latin alphabet in the string,  There is at least one of three listed symbols in the string: '#', '*', '&'.  [Image] \nConsidering that these are programming classes it is not easy to write the password.\nFor each character of the password we have a fixed string of length m, on each of these n strings there is a pointer on some character. The i-th character displayed on the screen is the pointed character in the i-th string. Initially, all pointers are on characters with indexes 1 in the corresponding strings (all positions are numbered starting from one).\nDuring one operation Dasha can move a pointer in one string one character to the left or to the right. Strings are cyclic, it means that when we move the pointer which is on the character with index 1 to the left, it moves to the character with the index m, and when we move it to the right from the position m it moves to the position 1.\nYou need to determine the minimum number of operations necessary to make the string displayed on the screen a valid password. \n-----Input-----\nThe first line contains two integers n, m (3 \u2264 n \u2264 50, 1 \u2264 m \u2264 50) \u2014 the length of the password and the length of strings which are assigned to password symbols. \nEach of the next n lines contains the string which is assigned to the i-th symbol of the password string. Its length is m, it consists of digits, lowercase English letters, and characters '#', '*' or '&'.\nYou have such input data that you can always get a valid password.\n-----Output-----\nPrint one integer \u2014 the minimum number of operations which is necessary to make the string, which is displayed on the screen, a valid password. \n-----Examples-----\nInput\n3 4\n1**2\na3*0\nc4**\nOutput\n1\nInput\n5 5\n#*&#*\n*a1c&\n&q2w*\n#a3c#\n*&#*&\nOutput\n3\n-----Note-----\nIn the first test it is necessary to move the pointer of the third string to one left to get the optimal answer.  [Image] \nIn the second test one of possible algorithms will be:   to move the pointer of the second symbol once to the right.  to move the pointer of the third symbol twice to the right.  [Image]\n\ndef",
        "answer": "def password_cracker(n, m, arr):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 951,
        "prompt": "Complete the Python function given the prompt below:Some natural number was written on the board. Its sum of digits was not less than k. But you were distracted a bit, and someone changed this number to n, replacing some digits with others. It's known that the length of the number didn't change.\nYou have to find the minimum number of digits in which these two numbers can differ.\n-----Input-----\nThe first line contains integer k (1 \u2264 k \u2264 10^9).\nThe second line contains integer n (1 \u2264 n < 10^100000).\nThere are no leading zeros in n. It's guaranteed that this situation is possible.\n-----Output-----\nPrint the minimum number of digits in which the initial number and n can differ.\n-----Examples-----\nInput\n3\n11\nOutput\n1\nInput\n3\n99\nOutput\n0\n-----Note-----\nIn the first example, the initial number could be 12.\nIn the second example the sum of the digits of n is not less than k. The initial number could be equal to n.\n\ndef",
        "answer": "def sum_of_digits(n):\n    return sum(int(i) for i in str(n))",
        "difficulty": "interview"
    },
    {
        "task_id": 952,
        "prompt": "Complete the Python function given the prompt below:Andrew prefers taxi to other means of transport, but recently most taxi drivers have been acting inappropriately. In order to earn more money, taxi drivers started to drive in circles. Roads in Andrew's city are one-way, and people are not necessary able to travel from one part to another, but it pales in comparison to insidious taxi drivers.\nThe mayor of the city decided to change the direction of certain roads so that the taxi drivers wouldn't be able to increase the cost of the trip endlessly. More formally, if the taxi driver is on a certain crossroads, they wouldn't be able to reach it again if he performs a nonzero trip. \nTraffic controllers are needed in order to change the direction the road goes. For every road it is known how many traffic controllers are needed to change the direction of the road to the opposite one. It is allowed to change the directions of roads one by one, meaning that each traffic controller can participate in reversing two or more roads.\nYou need to calculate the minimum number of traffic controllers that you need to hire to perform the task and the list of the roads that need to be reversed.\n-----Input-----\nThe first line contains two integers $n$ and $m$ ($2 \\leq n \\leq 100\\,000$, $1 \\leq m \\leq 100\\,000$)\u00a0\u2014 the number of crossroads and the number of roads in the city, respectively.\nEach of the following $m$ lines contain three integers $u_{i}$, $v_{i}$ and $c_{i}$ ($1 \\leq u_{i}, v_{i} \\leq n$, $1 \\leq c_{i} \\leq 10^9$, $u_{i} \\ne v_{i}$)\u00a0\u2014 the crossroads the road starts at, the crossroads the road ends at and the number of traffic controllers required to reverse this road.\n-----Output-----\nIn the first line output two integers the minimal amount of traffic controllers required to complete the task and amount of roads $k$ which should be reversed. $k$ should not be minimized.\nIn the next line output $k$ integers separated by spaces \u2014 numbers of roads, the directions of which should be reversed. The roads are numerated from $1$ in the order they are written in the input. If there are many solutions, print any of them.\n-----Examples-----\nInput\n5 6\n2 1 1\n5 2 6\n2 3 2\n3 4 3\n4 5 5\n1 5 4\nOutput\n2 2\n1 3 \nInput\n5 7\n2 1 5\n3 2 3\n1 3 3\n2 4 1\n4 3 5\n5 4 1\n1 5 3\nOutput\n3 3\n3 4 7 \n-----Note-----\nThere are two simple cycles in the first example: $1 \\rightarrow 5 \\rightarrow 2 \\rightarrow 1$ and $2 \\rightarrow 3 \\rightarrow 4 \\rightarrow 5 \\rightarrow 2$. One traffic controller can only reverse the road $2 \\rightarrow 1$ and he can't destroy the second cycle by himself. Two traffic controllers can reverse roads $2 \\rightarrow 1$ and $2 \\rightarrow 3$ which would satisfy the condition.\nIn the second example one traffic controller can't destroy the cycle $ 1 \\rightarrow 3 \\rightarrow 2 \\rightarrow 1 $. With the help of three controllers we can, for example, reverse roads $1 \\rightarrow 3$,$ 2 \\rightarrow 4$, $1 \\rightarrow 5$.\n\ndef",
        "answer": "def find_path(graph, start, end, path=[]):\n    path = path + [start]\n    if start == end:\n        return path\n    if not graph.has_key(start):\n        return None\n    for node in graph[start]:\n        if node not in path:\n            newpath = find_path(graph, node, end, path)\n            if newpath: return newpath\n    return None",
        "difficulty": "interview"
    },
    {
        "task_id": 953,
        "prompt": "Complete the Python function given the prompt below:User ainta has a permutation p_1, p_2,..., p_{n}. As the New Year is coming, he wants to make his permutation as pretty as possible.\nPermutation a_1, a_2,..., a_{n} is prettier than permutation b_1, b_2,..., b_{n}, if and only if there exists an integer k (1 \u2264 k \u2264 n) where a_1 = b_1, a_2 = b_2,..., a_{k} - 1 = b_{k} - 1 and a_{k} < b_{k} all holds.\nAs known, permutation p is so sensitive that it could be only modified by swapping two distinct elements. But swapping two elements is harder than you think. Given an n \u00d7 n binary matrix A, user ainta can swap the values of p_{i} and p_{j} (1 \u2264 i, j \u2264 n, i \u2260 j) if and only if A_{i}, j = 1.\nGiven the permutation p and the matrix A, user ainta wants to know the prettiest permutation that he can obtain.\n-----Input-----\nThe first line contains an integer n (1 \u2264 n \u2264 300) \u2014 the size of the permutation p.\nThe second line contains n space-separated integers p_1, p_2,..., p_{n} \u2014 the permutation p that user ainta has. Each integer between 1 and n occurs exactly once in the given permutation.\nNext n lines describe the matrix A. The i-th line contains n characters '0' or '1' and describes the i-th row of A. The j-th character of the i-th line A_{i}, j is the element on the intersection of the i-th row and the j-th column of A. It is guaranteed that, for all integers i, j where 1 \u2264 i < j \u2264 n, A_{i}, j = A_{j}, i holds. Also, for all integers i where 1 \u2264 i \u2264 n, A_{i}, i = 0 holds.\n-----Output-----\nIn the first and only line, print n space-separated integers, describing the prettiest permutation that can be obtained.\n-----Examples-----\nInput\n7\n5 2 4 3 6 7 1\n0001001\n0000000\n0000010\n1000001\n0000000\n0010000\n1001000\nOutput\n1 2 4 3 6 7 5\nInput\n5\n4 2 1 5 3\n00100\n00011\n10010\n01101\n01010\nOutput\n1 2 3 4 5\n-----Note-----\nIn the first sample, the swap needed to obtain the prettiest permutation is: (p_1, p_7).\nIn the second sample, the swaps needed to obtain the prettiest permutation is (p_1, p_3), (p_4, p_5), (p_3, p_4).  [Image] \nA permutation p is a sequence of integers p_1, p_2,..., p_{n}, consisting of n distinct positive integers, each of them doesn't exceed n. The i-th element of the permutation p is denoted as p_{i}. The size of the permutation p is denoted as n.\n\ndef",
        "answer": "def swap(p, i, j):\n    p[i], p[j] = p[j], p[i]",
        "difficulty": "interview"
    },
    {
        "task_id": 954,
        "prompt": "Complete the Python function given the prompt below:Hongcow is learning to spell! One day, his teacher gives him a word that he needs to learn to spell. Being a dutiful student, he immediately learns how to spell the word.\nHongcow has decided to try to make new words from this one. He starts by taking the word he just learned how to spell, and moves the last character of the word to the beginning of the word. He calls this a cyclic shift. He can apply cyclic shift many times. For example, consecutively applying cyclic shift operation to the word \"abracadabra\" Hongcow will get words \"aabracadabr\", \"raabracadab\" and so on.\nHongcow is now wondering how many distinct words he can generate by doing the cyclic shift arbitrarily many times. The initial string is also counted.\n-----Input-----\nThe first line of input will be a single string s (1 \u2264 |s| \u2264 50), the word Hongcow initially learns how to spell. The string s consists only of lowercase English letters ('a'\u2013'z').\n-----Output-----\nOutput a single integer equal to the number of distinct strings that Hongcow can obtain by applying the cyclic shift arbitrarily many times to the given string.\n-----Examples-----\nInput\nabcd\nOutput\n4\nInput\nbbb\nOutput\n1\nInput\nyzyz\nOutput\n2\n-----Note-----\nFor the first sample, the strings Hongcow can generate are \"abcd\", \"dabc\", \"cdab\", and \"bcda\".\nFor the second sample, no matter how many times Hongcow does the cyclic shift, Hongcow can only generate \"bbb\".\nFor the third sample, the two strings Hongcow can generate are \"yzyz\" and \"zyzy\".\n\ndef",
        "answer": "def count_strings(s):\n    if len(s) == 1:\n        return 1\n    else:\n        return count_strings(s[1:]) + count_strings(s[:-1])",
        "difficulty": "interview"
    },
    {
        "task_id": 955,
        "prompt": "Complete the Python function given the prompt below:Berland shop sells $n$ kinds of juices. Each juice has its price $c_i$. Each juice includes some set of vitamins in it. There are three types of vitamins: vitamin \"A\", vitamin \"B\" and vitamin \"C\". Each juice can contain one, two or all three types of vitamins in it.\nPetya knows that he needs all three types of vitamins to stay healthy. What is the minimum total price of juices that Petya has to buy to obtain all three vitamins? Petya obtains some vitamin if he buys at least one juice containing it and drinks it.\n-----Input-----\nThe first line contains a single integer $n$ $(1 \\le n \\le 1\\,000)$ \u2014 the number of juices.\nEach of the next $n$ lines contains an integer $c_i$ $(1 \\le c_i \\le 100\\,000)$ and a string $s_i$ \u2014 the price of the $i$-th juice and the vitamins it contains. String $s_i$ contains from $1$ to $3$ characters, and the only possible characters are \"A\", \"B\" and \"C\". It is guaranteed that each letter appears no more than once in each string $s_i$. The order of letters in strings $s_i$ is arbitrary.\n-----Output-----\nPrint -1 if there is no way to obtain all three vitamins. Otherwise print the minimum total price of juices that Petya has to buy to obtain all three vitamins.\n-----Examples-----\nInput\n4\n5 C\n6 B\n16 BAC\n4 A\nOutput\n15\nInput\n2\n10 AB\n15 BA\nOutput\n-1\nInput\n5\n10 A\n9 BC\n11 CA\n4 A\n5 B\nOutput\n13\nInput\n6\n100 A\n355 BCA\n150 BC\n160 AC\n180 B\n190 CA\nOutput\n250\nInput\n2\n5 BA\n11 CB\nOutput\n16\n-----Note-----\nIn the first example Petya buys the first, the second and the fourth juice. He spends $5 + 6 + 4 = 15$ and obtains all three vitamins. He can also buy just the third juice and obtain three vitamins, but its cost is $16$, which isn't optimal.\nIn the second example Petya can't obtain all three vitamins, as no juice contains vitamin \"C\".\n\ndef",
        "answer": "def min_cost(n, juices):\n    cost = 0\n    for i in range(n):\n        if juices[i][0] == \"A\":\n            cost += juices[i][1]\n        elif juices[i][0] == \"B\":\n            cost += juices[i][1] * 2\n        elif juices[i][0] == \"C\":\n            cost += juices[i][1] * 3\n    return cost",
        "difficulty": "interview"
    },
    {
        "task_id": 957,
        "prompt": "Complete the Python function given the prompt below:As it's the first of April, Heidi is suspecting that the news she reads today are fake, and she does not want to look silly in front of all the contestants. She knows that a newspiece is fake if it contains heidi as a subsequence. Help Heidi assess whether the given piece is true, but please be discreet about it...\n-----Input-----\nThe first and only line of input contains a single nonempty string s of length at most 1000 composed of lowercase letters (a-z).\n-----Output-----\nOutput YES if the string s contains heidi as a subsequence and NO otherwise.\n-----Examples-----\nInput\nabcheaibcdi\nOutput\nYES\nInput\nhiedi\nOutput\nNO\n-----Note-----\nA string s contains another string p as a subsequence if it is possible to delete some characters from s and obtain p.\n\ndef",
        "answer": "def is_subsequence(s, p):\n    for i in range(len(s)):\n        if s[i] == p[0]:\n            if s[i:i+len(p)] == p:\n                return True\n    return False",
        "difficulty": "interview"
    },
    {
        "task_id": 958,
        "prompt": "Complete the Python function given the prompt below:Limak is a little polar bear. He likes nice strings \u2014 strings of length n, consisting of lowercase English letters only.\nThe distance between two letters is defined as the difference between their positions in the alphabet. For example, $\\operatorname{dist}(c, e) = \\operatorname{dist}(e, c) = 2$, and $\\operatorname{dist}(a, z) = \\operatorname{dist}(z, a) = 25$.\nAlso, the distance between two nice strings is defined as the sum of distances of corresponding letters. For example, $\\operatorname{dist}(a f, d b) = \\operatorname{dist}(a, d) + \\operatorname{dist}(f, b) = 3 + 4 = 7$, and $\\text{dist(bear, roar)} = 16 + 10 + 0 + 0 = 26$.\nLimak gives you a nice string s and an integer k. He challenges you to find any nice string s' that $\\operatorname{dist}(s, s^{\\prime}) = k$. Find any s' satisfying the given conditions, or print \"-1\" if it's impossible to do so.\nAs input/output can reach huge size it is recommended to use fast input/output methods: for example, prefer to use gets/scanf/printf instead of getline/cin/cout in C++, prefer to use BufferedReader/PrintWriter instead of Scanner/System.out in Java.\n-----Input-----\nThe first line contains two integers n and k (1 \u2264 n \u2264 10^5, 0 \u2264 k \u2264 10^6).\nThe second line contains a string s of length n, consisting of lowercase English letters.\n-----Output-----\nIf there is no string satisfying the given conditions then print \"-1\" (without the quotes).\nOtherwise, print any nice string s' that $\\operatorname{dist}(s, s^{\\prime}) = k$.\n-----Examples-----\nInput\n4 26\nbear\nOutput\nroar\nInput\n2 7\naf\nOutput\ndb\nInput\n3 1000\nhey\nOutput\n-1\n\ndef",
        "answer": "def dist(s1, s2):\n    return sum([abs(ord(s1[i]) - ord(s2[i])) for i in range(len(s1))])",
        "difficulty": "interview"
    },
    {
        "task_id": 959,
        "prompt": "Complete the Python function given the prompt below:An n \u00d7 n square matrix is special, if:  it is binary, that is, each cell contains either a 0, or a 1;  the number of ones in each row and column equals 2. \nYou are given n and the first m rows of the matrix. Print the number of special n \u00d7 n matrices, such that the first m rows coincide with the given ones.\nAs the required value can be rather large, print the remainder after dividing the value by the given number mod.\n-----Input-----\nThe first line of the input contains three integers n, m, mod (2 \u2264 n \u2264 500, 0 \u2264 m \u2264 n, 2 \u2264 mod \u2264 10^9). Then m lines follow, each of them contains n characters \u2014 the first rows of the required special matrices. Each of these lines contains exactly two characters '1', the rest characters are '0'. Each column of the given m \u00d7 n table contains at most two numbers one.\n-----Output-----\nPrint the remainder after dividing the required value by number mod.\n-----Examples-----\nInput\n3 1 1000\n011\nOutput\n2\nInput\n4 4 100500\n0110\n1010\n0101\n1001\nOutput\n1\n-----Note-----\nFor the first test the required matrices are: \n011\n101\n110\n011\n110\n101\nIn the second test the required matrix is already fully given, so the answer is 1.\n\ndef",
        "answer": "def check_special(matrix):\n    n = len(matrix)\n    m = len(matrix[0])\n    count = 0\n    for i in range(m):\n        if matrix[0][i] == '1':\n            count += 1\n        if matrix[n-1][i] == '1':\n            count += 1\n    for i in range(n):\n        if matrix[i][0] == '1':\n            count += 1\n        if matrix[i][m-1] == '1':\n            count += 1\n    if count == 2*m:\n        return True\n    return False",
        "difficulty": "interview"
    },
    {
        "task_id": 960,
        "prompt": "Complete the Python function given the prompt below:Vasya likes to solve equations. Today he wants to solve $(x~\\mathrm{div}~k) \\cdot (x \\bmod k) = n$, where $\\mathrm{div}$ and $\\mathrm{mod}$ stand for integer division and modulo operations (refer to the Notes below for exact definition). In this equation, $k$ and $n$ are positive integer parameters, and $x$ is a positive integer unknown. If there are several solutions, Vasya wants to find the smallest possible $x$. Can you help him?\n-----Input-----\nThe first line contains two integers $n$ and $k$ ($1 \\leq n \\leq 10^6$, $2 \\leq k \\leq 1000$).\n-----Output-----\nPrint a single integer $x$\u00a0\u2014 the smallest positive integer solution to $(x~\\mathrm{div}~k) \\cdot (x \\bmod k) = n$. It is guaranteed that this equation has at least one positive integer solution.\n-----Examples-----\nInput\n6 3\nOutput\n11\nInput\n1 2\nOutput\n3\nInput\n4 6\nOutput\n10\n-----Note-----\nThe result of integer division $a~\\mathrm{div}~b$ is equal to the largest integer $c$ such that $b \\cdot c \\leq a$. $a$ modulo $b$ (shortened $a \\bmod b$) is the only integer $c$ such that $0 \\leq c < b$, and $a - c$ is divisible by $b$.\nIn the first sample, $11~\\mathrm{div}~3 = 3$ and $11 \\bmod 3 = 2$. Since $3 \\cdot 2 = 6$, then $x = 11$ is a solution to $(x~\\mathrm{div}~3) \\cdot (x \\bmod 3) = 6$. One can see that $19$ is the only other positive integer solution, hence $11$ is the smallest one.\n\ndef",
        "answer": "def solve(n, k):\n    return n * k - (n - 1) * (k - 1)",
        "difficulty": "interview"
    },
    {
        "task_id": 961,
        "prompt": "Complete the Python function given the prompt below:Vladik often travels by trains. He remembered some of his trips especially well and I would like to tell you about one of these trips:\nVladik is at initial train station, and now n people (including Vladik) want to get on the train. They are already lined up in some order, and for each of them the city code a_{i} is known (the code of the city in which they are going to).\nTrain chief selects some number of disjoint segments of the original sequence of people (covering entire sequence by segments is not necessary). People who are in the same segment will be in the same train carriage. The segments are selected in such way that if at least one person travels to the city x, then all people who are going to city x should be in the same railway carriage. This means that they can\u2019t belong to different segments. Note, that all people who travel to the city x, either go to it and in the same railway carriage, or do not go anywhere at all.\nComfort of a train trip with people on segment from position l to position r is equal to XOR of all distinct codes of cities for people on the segment from position l to position r. XOR operation also known as exclusive OR.\nTotal comfort of a train trip is equal to sum of comfort for each segment.\nHelp Vladik to know maximal possible total comfort.\n-----Input-----\nFirst line contains single integer n (1 \u2264 n \u2264 5000)\u00a0\u2014 number of people.\nSecond line contains n space-separated integers a_1, a_2,..., a_{n} (0 \u2264 a_{i} \u2264 5000), where a_{i} denotes code of the city to which i-th person is going.\n-----Output-----\nThe output should contain a single integer\u00a0\u2014 maximal possible total comfort.\n-----Examples-----\nInput\n6\n4 4 2 5 2 3\nOutput\n14\nInput\n9\n5 1 3 1 5 2 4 2 5\nOutput\n9\n-----Note-----\nIn the first test case best partition into segments is: [4, 4] [2, 5, 2] [3], answer is calculated as follows: 4 + (2 xor 5) + 3 = 4 + 7 + 3 = 14\nIn the second test case best partition into segments is: 5 1 [3] 1 5 [2, 4, 2] 5, answer calculated as follows: 3 + (2 xor 4) = 3 + 6 = 9.\n\ndef",
        "answer": "def XOR(a, b):\n    return a ^ b",
        "difficulty": "interview"
    },
    {
        "task_id": 962,
        "prompt": "Complete the Python function given the prompt below:Given is a directed graph G with N vertices and M edges.\nThe vertices are numbered 1 to N, and the i-th edge is directed from Vertex A_i to Vertex B_i.\nIt is guaranteed that the graph contains no self-loops or multiple edges.\nDetermine whether there exists an induced subgraph (see Notes) of G such that the in-degree and out-degree of every vertex are both 1. If the answer is yes, show one such subgraph.\nHere the null graph is not considered as a subgraph.\n-----Notes-----\nFor a directed graph G = (V, E), we call a directed graph G' = (V', E') satisfying the following conditions an induced subgraph of G:\n - V' is a (non-empty) subset of V.\n - E' is the set of all the edges in E that have both endpoints in V'.\n-----Constraints-----\n - 1 \\leq N \\leq 1000\n - 0 \\leq M \\leq 2000\n - 1 \\leq A_i,B_i \\leq N\n - A_i \\neq B_i\n - All pairs (A_i, B_i) are distinct.\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\nA_1 B_1\nA_2 B_2\n:\nA_M B_M\n-----Output-----\nIf there is no induced subgraph of G that satisfies the condition, print -1.\nOtherwise, print an induced subgraph of G that satisfies the condition, in the following format:\nK\nv_1\nv_2\n:\nv_K\nThis represents the induced subgraph of G with K vertices whose vertex set is \\{v_1, v_2, \\ldots, v_K\\}. (The order of v_1, v_2, \\ldots, v_K does not matter.)\nIf there are multiple subgraphs of G that satisfy the condition, printing any of them is accepted.\n-----Sample Input-----\n4 5\n1 2\n2 3\n2 4\n4 1\n4 3\n-----Sample Output-----\n3\n1\n2\n4\nThe induced subgraph of G whose vertex set is \\{1, 2, 4\\} has the edge set \\{(1, 2), (2, 4), (4, 1)\\}. The in-degree and out-degree of every vertex in this graph are both 1.\n\ndef",
        "answer": "def check_subgraph(graph):\n    n = len(graph)\n    m = len(graph[0])\n    for i in range(n):\n        for j in range(m):\n            if graph[i][j] == 1:\n                if i == j:\n                    return False\n                if i in graph[j]:\n                    return False\n    return True",
        "difficulty": "interview"
    },
    {
        "task_id": 963,
        "prompt": "Complete the Python function given the prompt below:There are N cells arranged in a row, numbered 1, 2, \\ldots, N from left to right.\nTak lives in these cells and is currently on Cell 1. He is trying to reach Cell N by using the procedure described below.\nYou are given an integer K that is less than or equal to 10, and K non-intersecting segments [L_1, R_1], [L_2, R_2], \\ldots, [L_K, R_K].\nLet S be the union of these K segments.\nHere, the segment [l, r] denotes the set consisting of all integers i that satisfy l \\leq i \\leq r.\n - When you are on Cell i, pick an integer d from S and move to Cell i + d. You cannot move out of the cells.\nTo help Tak, find the number of ways to go to Cell N, modulo 998244353.\n-----Constraints-----\n - 2 \\leq N \\leq 2 \\times 10^5\n - 1\u00a0\\leq K \\leq \\min(N, 10)\n - 1 \\leq L_i \\leq R_i \\leq N\n - [L_i, R_i] and [L_j, R_j] do not intersect (i \\neq j) \n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\nL_1 R_1\nL_2 R_2\n:\nL_K R_K\n-----Output-----\nPrint the number of ways for Tak to go from Cell 1 to Cell N, modulo 998244353.\n-----Sample Input-----\n5 2\n1 1\n3 4\n-----Sample Output-----\n4\nThe set S is the union of the segment [1, 1] and the segment [3, 4], therefore S = \\{ 1, 3, 4 \\} holds.\nThere are 4 possible ways to get to Cell 5:\n - 1 \\to 2 \\to 3 \\to 4 \\to 5,\n - 1 \\to 2 \\to 5,\n - 1 \\to 4 \\to 5 and\n - 1 \\to 5.\n\ndef",
        "answer": "def solve(N, K, L, R):\n    # Write your code here\n    mod = 998244353\n    dp = [[0 for _ in range(N+1)] for _ in range(K+1)]\n    dp[0][0] = 1\n    for i in range(1, K+1):\n        for j in range(N+1):\n            dp[i][j] = dp[i-1][j]\n            if j-L[i-1] >= 0:\n                dp[i][j] = (dp[i][j] + dp[i-1][j-L[i-1]]) % mod\n            if j+R[i-1] <= N:\n                dp[i][j] = (dp[i][j] + dp[i-1][j+R[i-1]]) % mod\n    return dp[K][N]",
        "difficulty": "interview"
    },
    {
        "task_id": 964,
        "prompt": "Complete the Python function given the prompt below:Three companies decided to order a billboard with pictures of their logos. A billboard is a big square board. A logo of each company is a rectangle of a non-zero area. \nAdvertisers will put up the ad only if it is possible to place all three logos on the billboard so that they do not overlap and the billboard has no empty space left. When you put a logo on the billboard, you should rotate it so that the sides were parallel to the sides of the billboard.\nYour task is to determine if it is possible to put the logos of all the three companies on some square billboard without breaking any of the described rules.\n-----Input-----\nThe first line of the input contains six positive integers x_1, y_1, x_2, y_2, x_3, y_3 (1 \u2264 x_1, y_1, x_2, y_2, x_3, y_3 \u2264 100), where x_{i} and y_{i} determine the length and width of the logo of the i-th company respectively.\n-----Output-----\nIf it is impossible to place all the three logos on a square shield, print a single integer \"-1\" (without the quotes).\nIf it is possible, print in the first line the length of a side of square n, where you can place all the three logos. Each of the next n lines should contain n uppercase English letters \"A\", \"B\" or \"C\". The sets of the same letters should form solid rectangles, provided that:  the sizes of the rectangle composed from letters \"A\" should be equal to the sizes of the logo of the first company,  the sizes of the rectangle composed from letters \"B\" should be equal to the sizes of the logo of the second company,  the sizes of the rectangle composed from letters \"C\" should be equal to the sizes of the logo of the third company, \nNote that the logos of the companies can be rotated for printing on the billboard. The billboard mustn't have any empty space. If a square billboard can be filled with the logos in multiple ways, you are allowed to print any of them.\nSee the samples to better understand the statement.\n-----Examples-----\nInput\n5 1 2 5 5 2\nOutput\n5\nAAAAA\nBBBBB\nBBBBB\nCCCCC\nCCCCC\nInput\n4 4 2 6 4 2\nOutput\n6\nBBBBBB\nBBBBBB\nAAAACC\nAAAACC\nAAAACC\nAAAACC\n\ndef",
        "answer": "def billboard(x1, y1, x2, y2, x3, y3):\n    # Write your code here\n    if x1 == x2 and x2 == x3:\n        return -1\n    if x1 == x2 or x2 == x3 or x1 == x3:\n        return -1\n    if y1 == y2 and y2 == y3:\n        return -1\n    if y1 == y2 or y2 == y3 or y1 == y3:\n        return -1\n    if x1 + y1 == x2 + y2 and x2 + y2 == x3 + y3:\n        return -1\n    if x1 + y1 == x2 + y2 or x2 + y2 == x3 + y3 or x1 + y1 == x3 + y3:\n        return -1\n    if x1 * y1 == x2 * y2 and x2 * y2 == x3 * y3:\n        return -1\n    if x1 * y1 == x2 * y2 or x2 * y2 == x3 * y3 or x1 * y1 == x3 * y3:\n        return -1\n    if x1 * y1 == x2 * y2 and x2 * y2 == x3 * y3:\n        return -1\n    if x1 * y1 == x2 * y2 or x2 * y2 == x3 * y3 or x1 * y1 == x3 * y3:\n        return -1\n    if x1 * y1 == x2 * y2 and x2 * y2 == x3 * y3:\n        return -1\n    if x1 * y1 == x2 * y2 or x2 * y2 ==",
        "difficulty": "interview"
    },
    {
        "task_id": 965,
        "prompt": "Complete the Python function given the prompt below:There are n cows playing poker at a table. For the current betting phase, each player's status is either \"ALLIN\", \"IN\", or \"FOLDED\", and does not change throughout the phase. To increase the suspense, a player whose current status is not \"FOLDED\" may show his/her hand to the table. However, so as not to affect any betting decisions, he/she may only do so if all other players have a status of either \"ALLIN\" or \"FOLDED\". The player's own status may be either \"ALLIN\" or \"IN\".\nFind the number of cows that can currently show their hands without affecting any betting decisions.\n-----Input-----\nThe first line contains a single integer, n (2 \u2264 n \u2264 2\u00b710^5). The second line contains n characters, each either \"A\", \"I\", or \"F\". The i-th character is \"A\" if the i-th player's status is \"ALLIN\", \"I\" if the i-th player's status is \"IN\", or \"F\" if the i-th player's status is \"FOLDED\".\n-----Output-----\nThe first line should contain a single integer denoting the number of players that can currently show their hands.\n-----Examples-----\nInput\n6\nAFFAAA\nOutput\n4\nInput\n3\nAFI\nOutput\n1\n-----Note-----\nIn the first sample, cows 1, 4, 5, and 6 can show their hands. In the second sample, only cow 3 can show her hand.\n\ndef",
        "answer": "def count_cows(n, status):\n    count = 0\n    for i in range(n):\n        if status[i] == 'A' or status[i] == 'I':\n            count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 966,
        "prompt": "Complete the Python function given the prompt below:It seems like the year of 2013 came only yesterday. Do you know a curious fact? The year of 2013 is the first year after the old 1987 with only distinct digits.\nNow you are suggested to solve the following problem: given a year number, find the minimum year number which is strictly larger than the given one and has only distinct digits.\n-----Input-----\nThe single line contains integer y (1000 \u2264 y \u2264 9000) \u2014 the year number.\n-----Output-----\nPrint a single integer \u2014 the minimum year number that is strictly larger than y and all it's digits are distinct. It is guaranteed that the answer exists.\n-----Examples-----\nInput\n1987\nOutput\n2013\nInput\n2013\nOutput\n2014\n\ndef",
        "answer": "def next_year(y):\n    while True:\n        y += 1\n        if len(set(str(y))) == len(str(y)):\n            return y",
        "difficulty": "interview"
    },
    {
        "task_id": 967,
        "prompt": "Complete the Python function given the prompt below:Emuskald is addicted to Codeforces, and keeps refreshing the main page not to miss any changes in the \"recent actions\" list. He likes to read thread conversations where each thread consists of multiple messages.\nRecent actions shows a list of n different threads ordered by the time of the latest message in the thread. When a new message is posted in a thread that thread jumps on the top of the list. No two messages of different threads are ever posted at the same time.\nEmuskald has just finished reading all his opened threads and refreshes the main page for some more messages to feed his addiction. He notices that no new threads have appeared in the list and at the i-th place in the list there is a thread that was at the a_{i}-th place before the refresh. He doesn't want to waste any time reading old messages so he wants to open only threads with new messages.\nHelp Emuskald find out the number of threads that surely have new messages. A thread x surely has a new message if there is no such sequence of thread updates (posting messages) that both conditions hold:   thread x is not updated (it has no new messages);  the list order 1, 2,..., n changes to a_1, a_2,..., a_{n}. \n-----Input-----\nThe first line of input contains an integer n, the number of threads (1 \u2264 n \u2264 10^5). The next line contains a list of n space-separated integers a_1, a_2,..., a_{n} where a_{i} (1 \u2264 a_{i} \u2264 n) is the old position of the i-th thread in the new list. It is guaranteed that all of the a_{i} are distinct.\n-----Output-----\nOutput a single integer \u2014 the number of threads that surely contain a new message.\n-----Examples-----\nInput\n5\n5 2 1 3 4\nOutput\n2\nInput\n3\n1 2 3\nOutput\n0\nInput\n4\n4 3 2 1\nOutput\n3\n-----Note-----\nIn the first test case, threads 2 and 5 are placed before the thread 1, so these threads must contain new messages. Threads 1, 3 and 4 may contain no new messages, if only threads 2 and 5 have new messages.\nIn the second test case, there may be no new messages at all, since the thread order hasn't changed.\nIn the third test case, only thread 1 can contain no new messages.\n\ndef",
        "answer": "def find_new_messages(n, a):\n    a.sort()\n    count = 0\n    for i in range(n):\n        if a[i]!= i+1:\n            count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 968,
        "prompt": "Complete the Python function given the prompt below:A way to make a new task is to make it nondeterministic or probabilistic. For example, the hard task of Topcoder SRM 595, Constellation, is the probabilistic version of a convex hull.\nLet's try to make a new task. Firstly we will use the following task. There are n people, sort them by their name. It is just an ordinary sorting problem, but we can make it more interesting by adding nondeterministic element. There are n people, each person will use either his/her first name or last name as a handle. Can the lexicographical order of the handles be exactly equal to the given permutation p?\nMore formally, if we denote the handle of the i-th person as h_{i}, then the following condition must hold: $\\forall i, j(i < j) : h_{p_{i}} < h_{p_{j}}$.\n-----Input-----\nThe first line contains an integer n (1 \u2264 n \u2264 10^5) \u2014 the number of people.\nThe next n lines each contains two strings. The i-th line contains strings f_{i} and s_{i} (1 \u2264 |f_{i}|, |s_{i}| \u2264 50) \u2014 the first name and last name of the i-th person. Each string consists only of lowercase English letters. All of the given 2n strings will be distinct.\nThe next line contains n distinct integers: p_1, p_2,..., p_{n} (1 \u2264 p_{i} \u2264 n).\n-----Output-----\nIf it is possible, output \"YES\", otherwise output \"NO\".\n-----Examples-----\nInput\n3\ngennady korotkevich\npetr mitrichev\ngaoyuan chen\n1 2 3\nOutput\nNO\nInput\n3\ngennady korotkevich\npetr mitrichev\ngaoyuan chen\n3 1 2\nOutput\nYES\nInput\n2\ngalileo galilei\nnicolaus copernicus\n2 1\nOutput\nYES\nInput\n10\nrean schwarzer\nfei claussell\nalisa reinford\neliot craig\nlaura arseid\njusis albarea\nmachias regnitz\nsara valestin\nemma millstein\ngaius worzel\n1 2 3 4 5 6 7 8 9 10\nOutput\nNO\nInput\n10\nrean schwarzer\nfei claussell\nalisa reinford\neliot craig\nlaura arseid\njusis albarea\nmachias regnitz\nsara valestin\nemma millstein\ngaius worzel\n2 4 9 6 5 7 1 3 8 10\nOutput\nYES\n-----Note-----\nIn example 1 and 2, we have 3 people: tourist, Petr and me (cgy4ever). You can see that whatever handle is chosen, I must be the first, then tourist and Petr must be the last.\nIn example 3, if Copernicus uses \"copernicus\" as his handle, everything will be alright.\n\ndef",
        "answer": "def is_permutation(p, f, s):\n    return sorted(f) == sorted(p) and sorted(s) == sorted(p)",
        "difficulty": "interview"
    },
    {
        "task_id": 969,
        "prompt": "Complete the Python function given the prompt below:A boy named Ayrat lives on planet AMI-1511. Each inhabitant of this planet has a talent. Specifically, Ayrat loves running, moreover, just running is not enough for him. He is dreaming of making running a real art.\nFirst, he wants to construct the running track with coating t. On planet AMI-1511 the coating of the track is the sequence of colored blocks, where each block is denoted as the small English letter. Therefore, every coating can be treated as a string.\nUnfortunately, blocks aren't freely sold to non-business customers, but Ayrat found an infinite number of coatings s. Also, he has scissors and glue. Ayrat is going to buy some coatings s, then cut out from each of them exactly one continuous piece (substring) and glue it to the end of his track coating. Moreover, he may choose to flip this block before glueing it. Ayrat want's to know the minimum number of coating s he needs to buy in order to get the coating t for his running track. Of course, he also want's to know some way to achieve the answer.\n-----Input-----\nFirst line of the input contains the string s\u00a0\u2014 the coating that is present in the shop. Second line contains the string t\u00a0\u2014 the coating Ayrat wants to obtain. Both strings are non-empty, consist of only small English letters and their length doesn't exceed 2100.\n-----Output-----\nThe first line should contain the minimum needed number of coatings n or -1 if it's impossible to create the desired coating.\nIf the answer is not -1, then the following n lines should contain two integers x_{i} and y_{i}\u00a0\u2014 numbers of ending blocks in the corresponding piece. If x_{i} \u2264 y_{i} then this piece is used in the regular order, and if x_{i} > y_{i} piece is used in the reversed order. Print the pieces in the order they should be glued to get the string t.\n-----Examples-----\nInput\nabc\ncbaabc\nOutput\n2\n3 1\n1 3\nInput\naaabrytaaa\nayrat\nOutput\n3\n1 1\n6 5\n8 7\nInput\nami\nno\nOutput\n-1\n-----Note-----\nIn the first sample string \"cbaabc\" = \"cba\" + \"abc\".\nIn the second sample: \"ayrat\" = \"a\" + \"yr\" + \"at\".\n\ndef",
        "answer": "def solution(s, t):\n    # write your code in Python 3.6\n    if len(s) < len(t):\n        return -1\n    if len(s) == len(t):\n        if s == t:\n            return 0\n        else:\n            return -1\n    if len(s) > len(t):\n        if s[:len(t)] == t:\n            return 1\n        else:\n            return -1\n    if len(s) == len(t) + 1:\n        if s[:len(t)] == t:\n            return 1\n        else:\n            return -1\n    if len(s) == len(t) - 1:\n        if s[:len(t)] == t:\n            return 1\n        else:\n            return -1\n    if len(s) == len(t) + 2:\n        if s[:len(t)] == t:\n            return 1\n        else:\n            return -1\n    if len(s) == len(t) - 2:\n        if s[:len(t)] == t:\n            return 1\n        else:\n            return -1\n    if len(s) == len(t) + 3:\n        if s[:len(t)] == t:\n            return 1\n        else:\n            return -1\n    if len(s) == len(t) - 3:\n        if s[:len(t)] == t:\n            return 1\n        else:\n            return -1\n    if len(s) == len(t) + 4:\n        if s[:len(t)] == t:\n            return 1\n        else:\n            return -1\n    if len(s) == len",
        "difficulty": "interview"
    },
    {
        "task_id": 970,
        "prompt": "Complete the Python function given the prompt below:You are given a chessboard of size 1 \u00d7 n. It is guaranteed that n is even. The chessboard is painted like this: \"BWBW...BW\".\nSome cells of the board are occupied by the chess pieces. Each cell contains no more than one chess piece. It is known that the total number of pieces equals to $\\frac{n}{2}$.\nIn one step you can move one of the pieces one cell to the left or to the right. You cannot move pieces beyond the borders of the board. You also cannot move pieces to the cells that are already occupied.\nYour task is to place all the pieces in the cells of the same color using the minimum number of moves (all the pieces must occupy only the black cells or only the white cells after all the moves are made).\n-----Input-----\nThe first line of the input contains one integer n (2 \u2264 n \u2264 100, n is even) \u2014 the size of the chessboard. \nThe second line of the input contains $\\frac{n}{2}$ integer numbers $p_{1}, p_{2}, \\ldots, p_{\\frac{n}{2}}$ (1 \u2264 p_{i} \u2264 n) \u2014 initial positions of the pieces. It is guaranteed that all the positions are distinct.\n-----Output-----\nPrint one integer \u2014 the minimum number of moves you have to make to place all the pieces in the cells of the same color.\n-----Examples-----\nInput\n6\n1 2 6\nOutput\n2\nInput\n10\n1 2 3 4 5\nOutput\n10\n-----Note-----\nIn the first example the only possible strategy is to move the piece at the position 6 to the position 5 and move the piece at the position 2 to the position 3. Notice that if you decide to place the pieces in the white cells the minimum number of moves will be 3.\nIn the second example the possible strategy is to move $5 \\rightarrow 9$ in 4 moves, then $4 \\rightarrow 7$ in 3 moves, $3 \\rightarrow 5$ in 2 moves and $2 \\rightarrow 3$ in 1 move.\n\ndef",
        "answer": "def chess_board(n):\n    if n % 2 == 0:\n        return n // 2\n    else:\n        return n // 2 + 1",
        "difficulty": "interview"
    },
    {
        "task_id": 971,
        "prompt": "Complete the Python function given the prompt below:Kolya is going to make fresh orange juice. He has n oranges of sizes a_1, a_2,..., a_{n}. Kolya will put them in the juicer in the fixed order, starting with orange of size a_1, then orange of size a_2 and so on. To be put in the juicer the orange must have size not exceeding b, so if Kolya sees an orange that is strictly greater he throws it away and continues with the next one.\nThe juicer has a special section to collect waste. It overflows if Kolya squeezes oranges of the total size strictly greater than d. When it happens Kolya empties the waste section (even if there are no more oranges) and continues to squeeze the juice. How many times will he have to empty the waste section?\n-----Input-----\nThe first line of the input contains three integers n, b and d (1 \u2264 n \u2264 100 000, 1 \u2264 b \u2264 d \u2264 1 000 000)\u00a0\u2014 the number of oranges, the maximum size of the orange that fits in the juicer and the value d, which determines the condition when the waste section should be emptied.\nThe second line contains n integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 1 000 000)\u00a0\u2014 sizes of the oranges listed in the order Kolya is going to try to put them in the juicer.\n-----Output-----\nPrint one integer\u00a0\u2014 the number of times Kolya will have to empty the waste section.\n-----Examples-----\nInput\n2 7 10\n5 6\nOutput\n1\nInput\n1 5 10\n7\nOutput\n0\nInput\n3 10 10\n5 7 7\nOutput\n1\nInput\n1 1 1\n1\nOutput\n0\n-----Note-----\nIn the first sample, Kolya will squeeze the juice from two oranges and empty the waste section afterwards.\nIn the second sample, the orange won't fit in the juicer so Kolya will have no juice at all.\n\ndef",
        "answer": "def orangeJuice(n, b, d):\n    juice = 0\n    for i in range(n):\n        if a[i] <= b:\n            juice += 1\n        else:\n            juice = 0\n        if juice > d:\n            juice = 0\n            break\n    return juice",
        "difficulty": "interview"
    },
    {
        "task_id": 972,
        "prompt": "Complete the Python function given the prompt below:Consider an n \u00d7 m grid. Initially all the cells of the grid are colored white. Lenny has painted some of the cells (at least one) black. We call a painted grid convex if one can walk from any black cell to any another black cell using a path of side-adjacent black cells changing his direction at most once during the path. In the figure below, the left grid is convex while the right one is not convex, because there exist two cells which need more than one time to change direction in their path. [Image] \nYou're given a painted grid in the input. Tell Lenny if the grid is convex or not.\n-----Input-----\nThe first line of the input contains two integers n and m (1 \u2264 n, m \u2264 50) \u2014 the size of the grid. Each of the next n lines contains m characters \"B\" or \"W\". Character \"B\" denotes a black cell of the grid and \"W\" denotes a white cell of the grid.\nIt's guaranteed that the grid has at least one black cell.\n-----Output-----\nOn the only line of the output print \"YES\" if the grid is convex, otherwise print \"NO\". Do not print quotes.\n-----Examples-----\nInput\n3 4\nWWBW\nBWWW\nWWWB\nOutput\nNO\nInput\n3 1\nB\nB\nW\nOutput\nYES\n\ndef",
        "answer": "def check(grid):\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 'B':\n                if not check_neighbours(grid, i, j):\n                    return False\n    return True",
        "difficulty": "interview"
    },
    {
        "task_id": 973,
        "prompt": "Complete the Python function given the prompt below:Bob is a farmer. He has a large pasture with many sheep. Recently, he has lost some of them due to wolf attacks. He thus decided to place some shepherd dogs in such a way that all his sheep are protected.\nThe pasture is a rectangle consisting of R \u00d7 C cells. Each cell is either empty, contains a sheep, a wolf or a dog. Sheep and dogs always stay in place, but wolves can roam freely around the pasture, by repeatedly moving to the left, right, up or down to a neighboring cell. When a wolf enters a cell with a sheep, it consumes it. However, no wolf can enter a cell with a dog.\nInitially there are no dogs. Place dogs onto the pasture in such a way that no wolf can reach any sheep, or determine that it is impossible. Note that since you have many dogs, you do not need to minimize their number. \n-----Input-----\nFirst line contains two integers R (1 \u2264 R \u2264 500) and C (1 \u2264 C \u2264 500), denoting the number of rows and the numbers of columns respectively.\nEach of the following R lines is a string consisting of exactly C characters, representing one row of the pasture. Here, 'S' means a sheep, 'W' a wolf and '.' an empty cell.\n-----Output-----\nIf it is impossible to protect all sheep, output a single line with the word \"No\".\nOtherwise, output a line with the word \"Yes\". Then print R lines, representing the pasture after placing dogs. Again, 'S' means a sheep, 'W' a wolf, 'D' is a dog and '.' an empty space. You are not allowed to move, remove or add a sheep or a wolf.\nIf there are multiple solutions, you may print any of them. You don't have to minimize the number of dogs.\n-----Examples-----\nInput\n6 6\n..S...\n..S.W.\n.S....\n..W...\n...W..\n......\nOutput\nYes\n..SD..\n..SDW.\n.SD...\n.DW...\nDD.W..\n......\nInput\n1 2\nSW\nOutput\nNo\nInput\n5 5\n.S...\n...S.\nS....\n...S.\n.S...\nOutput\nYes\n.S...\n...S.\nS.D..\n...S.\n.S...\n-----Note-----\nIn the first example, we can split the pasture into two halves, one containing wolves and one containing sheep. Note that the sheep at (2,1) is safe, as wolves cannot move diagonally.\nIn the second example, there are no empty spots to put dogs that would guard the lone sheep.\nIn the third example, there are no wolves, so the task is very easy. We put a dog in the center to observe the peacefulness of the meadow, but the solution would be correct even without him.\n\ndef",
        "answer": "def protect_sheep(sheep, wolf):\n    if sheep == 0:\n        return \"Yes\"\n    if sheep == 1:\n        return \"No\"\n    if wolf == 0:\n        return \"No\"\n    if sheep == wolf:\n        return \"No\"\n    if sheep < wolf:\n        return \"No\"\n    if sheep % wolf == 0:\n        return \"No\"\n    if sheep % wolf == 1:\n        return \"Yes\"\n    if sheep % wolf == 2:\n        return \"Yes\"\n    if sheep % wolf == 3:\n        return \"Yes\"\n    if sheep % wolf == 4:\n        return \"Yes\"\n    if sheep % wolf == 5:\n        return \"Yes\"\n    if sheep % wolf == 6:\n        return \"Yes\"\n    if sheep % wolf == 7:\n        return \"Yes\"\n    if sheep % wolf == 8:\n        return \"Yes\"\n    if sheep % wolf == 9:\n        return \"Yes\"\n    if sheep % wolf == 10:\n        return \"Yes\"\n    if sheep % wolf == 11:\n        return \"Yes\"\n    if sheep % wolf == 12:\n        return \"Yes\"\n    if sheep % wolf == 13:\n        return \"Yes\"\n    if sheep % wolf == 14:\n        return \"Yes\"\n    if sheep % wolf == 15:\n        return \"Yes\"\n    if sheep % wolf == 16:\n        return \"Yes\"\n    if sheep % wolf == 17:\n        return \"Yes\"\n    if sheep % wolf == 18:\n        return \"Yes\"\n    if sheep % wolf == 19:\n        return \"Yes\"\n    if sheep % wolf == 20:\n        return \"Yes\"\n    if sheep % wolf == 21:\n",
        "difficulty": "interview"
    },
    {
        "task_id": 974,
        "prompt": "Complete the Python function given the prompt below:Okabe and Super Hacker Daru are stacking and removing boxes. There are n boxes numbered from 1 to n. Initially there are no boxes on the stack.\nOkabe, being a control freak, gives Daru 2n commands: n of which are to add a box to the top of the stack, and n of which are to remove a box from the top of the stack and throw it in the trash. Okabe wants Daru to throw away the boxes in the order from 1 to n. Of course, this means that it might be impossible for Daru to perform some of Okabe's remove commands, because the required box is not on the top of the stack.\nThat's why Daru can decide to wait until Okabe looks away and then reorder the boxes in the stack in any way he wants. He can do it at any point of time between Okabe's commands, but he can't add or remove boxes while he does it.\nTell Daru the minimum number of times he needs to reorder the boxes so that he can successfully complete all of Okabe's commands. It is guaranteed that every box is added before it is required to be removed.\n-----Input-----\nThe first line of input contains the integer n (1 \u2264 n \u2264 3\u00b710^5)\u00a0\u2014 the number of boxes.\nEach of the next 2n lines of input starts with a string \"add\" or \"remove\". If the line starts with the \"add\", an integer x (1 \u2264 x \u2264 n) follows, indicating that Daru should add the box with number x to the top of the stack. \nIt is guaranteed that exactly n lines contain \"add\" operations, all the boxes added are distinct, and n lines contain \"remove\" operations. It is also guaranteed that a box is always added before it is required to be removed.\n-----Output-----\nPrint the minimum number of times Daru needs to reorder the boxes to successfully complete all of Okabe's commands.\n-----Examples-----\nInput\n3\nadd 1\nremove\nadd 2\nadd 3\nremove\nremove\nOutput\n1\nInput\n7\nadd 3\nadd 2\nadd 1\nremove\nadd 4\nremove\nremove\nremove\nadd 6\nadd 7\nadd 5\nremove\nremove\nremove\nOutput\n2\n-----Note-----\nIn the first sample, Daru should reorder the boxes after adding box 3 to the stack.\nIn the second sample, Daru should reorder the boxes after adding box 4 and box 7 to the stack.\n\ndef",
        "answer": "def reorder(n):\n    if n == 1:\n        return 0\n    return n - 1 + reorder(n - 1)",
        "difficulty": "interview"
    },
    {
        "task_id": 975,
        "prompt": "Complete the Python function given the prompt below:After the fourth season Sherlock and Moriary have realized the whole foolishness of the battle between them and decided to continue their competitions in peaceful game of Credit Cards.\nRules of this game are simple: each player bring his favourite n-digit credit card. Then both players name the digits written on their cards one by one. If two digits are not equal, then the player, whose digit is smaller gets a flick (knock in the forehead usually made with a forefinger) from the other player. For example, if n = 3, Sherlock's card is 123 and Moriarty's card has number 321, first Sherlock names 1 and Moriarty names 3 so Sherlock gets a flick. Then they both digit 2 so no one gets a flick. Finally, Sherlock names 3, while Moriarty names 1 and gets a flick.\nOf course, Sherlock will play honestly naming digits one by one in the order they are given, while Moriary, as a true villain, plans to cheat. He is going to name his digits in some other order (however, he is not going to change the overall number of occurences of each digit). For example, in case above Moriarty could name 1, 2, 3 and get no flicks at all, or he can name 2, 3 and 1 to give Sherlock two flicks.\nYour goal is to find out the minimum possible number of flicks Moriarty will get (no one likes flicks) and the maximum possible number of flicks Sherlock can get from Moriarty. Note, that these two goals are different and the optimal result may be obtained by using different strategies.\n-----Input-----\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 1000)\u00a0\u2014 the number of digits in the cards Sherlock and Moriarty are going to use.\nThe second line contains n digits\u00a0\u2014 Sherlock's credit card number.\nThe third line contains n digits\u00a0\u2014 Moriarty's credit card number.\n-----Output-----\nFirst print the minimum possible number of flicks Moriarty will get. Then print the maximum possible number of flicks that Sherlock can get from Moriarty.\n-----Examples-----\nInput\n3\n123\n321\nOutput\n0\n2\nInput\n2\n88\n00\nOutput\n2\n0\n-----Note-----\nFirst sample is elaborated in the problem statement. In the second sample, there is no way Moriarty can avoid getting two flicks.\n\ndef",
        "answer": "def flicks(n, s1, s2):\n    s1 = list(s1)\n    s2 = list(s2)\n    s1.sort()\n    s2.sort()\n    flicks = 0\n    for i in range(n):\n        if s1[i]!= s2[i]:\n            flicks += 1\n    return flicks",
        "difficulty": "interview"
    },
    {
        "task_id": 976,
        "prompt": "Complete the Python function given the prompt below:You have decided to watch the best moments of some movie. There are two buttons on your player:   Watch the current minute of the movie. By pressing this button, you watch the current minute of the movie and the player automatically proceeds to the next minute of the movie.  Skip exactly x minutes of the movie (x is some fixed positive integer). If the player is now at the t-th minute of the movie, then as a result of pressing this button, it proceeds to the minute (t + x). \nInitially the movie is turned on in the player on the first minute, and you want to watch exactly n best moments of the movie, the i-th best moment starts at the l_{i}-th minute and ends at the r_{i}-th minute (more formally, the i-th best moment consists of minutes: l_{i}, l_{i} + 1,..., r_{i}). \nDetermine, what is the minimum number of minutes of the movie you have to watch if you want to watch all the best moments?\n-----Input-----\nThe first line contains two space-separated integers n, x (1 \u2264 n \u2264 50, 1 \u2264 x \u2264 10^5) \u2014 the number of the best moments of the movie and the value of x for the second button.\nThe following n lines contain the descriptions of the best moments of the movie, the i-th line of the description contains two integers separated by a space l_{i}, r_{i} (1 \u2264 l_{i} \u2264 r_{i} \u2264 10^5).\nIt is guaranteed that for all integers i from 2 to n the following condition holds: r_{i} - 1 < l_{i}.\n-----Output-----\nOutput a single number \u2014 the answer to the problem.\n-----Examples-----\nInput\n2 3\n5 6\n10 12\nOutput\n6\nInput\n1 1\n1 100000\nOutput\n100000\n-----Note-----\nIn the first sample, the player was initially standing on the first minute. As the minutes from the 1-st to the 4-th one don't contain interesting moments, we press the second button. Now we can not press the second button and skip 3 more minutes, because some of them contain interesting moments. Therefore, we watch the movie from the 4-th to the 6-th minute, after that the current time is 7. Similarly, we again skip 3 minutes and then watch from the 10-th to the 12-th minute of the movie. In total, we watch 6 minutes of the movie.\nIn the second sample, the movie is very interesting, so you'll have to watch all 100000 minutes of the movie.\n\ndef",
        "answer": "def best_moments(n, x):\n    return n * x",
        "difficulty": "interview"
    },
    {
        "task_id": 977,
        "prompt": "Complete the Python function given the prompt below:This is the easy version of the problem. The difference between versions is the constraints on $n$ and $a_i$. You can make hacks only if all versions of the problem are solved.\nFirst, Aoi came up with the following idea for the competitive programming problem:\nYuzu is a girl who collecting candies. Originally, she has $x$ candies. There are also $n$ enemies numbered with integers from $1$ to $n$. Enemy $i$ has $a_i$ candies.\nYuzu is going to determine a permutation $P$. A permutation is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $\\{2,3,1,5,4\\}$ is a permutation, but $\\{1,2,2\\}$ is not a permutation ($2$ appears twice in the array) and $\\{1,3,4\\}$ is also not a permutation (because $n=3$ but there is the number $4$ in the array).\nAfter that, she will do $n$ duels with the enemies with the following rules:  If Yuzu has equal or more number of candies than enemy $P_i$, she wins the duel and gets $1$ candy. Otherwise, she loses the duel and gets nothing.  The candy which Yuzu gets will be used in the next duels. \nYuzu wants to win all duels. How many valid permutations $P$ exist?\nThis problem was easy and wasn't interesting for Akari, who is a friend of Aoi. And Akari made the following problem from the above idea:\nLet's define $f(x)$ as the number of valid permutations for the integer $x$.\nYou are given $n$, $a$ and a prime number $p \\le n$. Let's call a positive integer $x$ good, if the value $f(x)$ is not divisible by $p$. Find all good integers $x$.\nYour task is to solve this problem made by Akari.\n-----Input-----\nThe first line contains two integers $n$, $p$ $(2 \\le p \\le n \\le 2000)$. It is guaranteed, that the number $p$ is prime (it has exactly two divisors $1$ and $p$).\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ $(1 \\le a_i \\le 2000)$.\n-----Output-----\nIn the first line, print the number of good integers $x$.\nIn the second line, output all good integers $x$ in the ascending order.\nIt is guaranteed that the number of good integers $x$ does not exceed $10^5$.\n-----Examples-----\nInput\n3 2\n3 4 5\nOutput\n1\n3\nInput\n4 3\n2 3 5 6\nOutput\n2\n3 4\nInput\n4 3\n9 1 1 1\nOutput\n0\n\n-----Note-----\nIn the first test, $p=2$.  If $x \\le 2$, there are no valid permutations for Yuzu. So $f(x)=0$ for all $x \\le 2$. The number $0$ is divisible by $2$, so all integers $x \\leq 2$ are not good.  If $x = 3$, $\\{1,2,3\\}$ is the only valid permutation for Yuzu. So $f(3)=1$, so the number $3$ is good.  If $x = 4$, $\\{1,2,3\\}, \\{1,3,2\\}, \\{2,1,3\\}, \\{2,3,1\\}$ are all valid permutations for Yuzu. So $f(4)=4$, so the number $4$ is not good.  If $x \\ge 5$, all $6$ permutations are valid for Yuzu. So $f(x)=6$ for all $x \\ge 5$, so all integers $x \\ge 5$ are not good. \nSo, the only good number is $3$.\nIn the third test, for all positive integers $x$ the value $f(x)$ is divisible by $p = 3$.\n\ndef",
        "answer": "def f(x):\n    return x % p",
        "difficulty": "interview"
    },
    {
        "task_id": 978,
        "prompt": "Complete the Python function given the prompt below:Cucumber boy is fan of Kyubeat, a famous music game.\nKyubeat has 16 panels for playing arranged in 4 \u00d7 4 table. When a panel lights up, he has to press that panel.\nEach panel has a timing to press (the preffered time when a player should press it), and Cucumber boy is able to press at most k panels in a time with his one hand. Cucumber boy is trying to press all panels in perfect timing, that is he wants to press each panel exactly in its preffered time. If he cannot press the panels with his two hands in perfect timing, his challenge to press all the panels in perfect timing will fail.\nYou are given one scene of Kyubeat's panel from the music Cucumber boy is trying. Tell him is he able to press all the panels in perfect timing.\n-----Input-----\nThe first line contains a single integer k (1 \u2264 k \u2264 5) \u2014 the number of panels Cucumber boy can press with his one hand.\nNext 4 lines contain 4 characters each (digits from 1 to 9, or period) \u2014 table of panels. If a digit i was written on the panel, it means the boy has to press that panel in time i. If period was written on the panel, he doesn't have to press that panel.\n-----Output-----\nOutput \"YES\" (without quotes), if he is able to press all the panels in perfect timing. If not, output \"NO\" (without quotes).\n-----Examples-----\nInput\n1\n.135\n1247\n3468\n5789\nOutput\nYES\nInput\n5\n..1.\n1111\n..1.\n..1.\nOutput\nYES\nInput\n1\n....\n12.1\n.2..\n.2..\nOutput\nNO\n-----Note-----\nIn the third sample boy cannot press all panels in perfect timing. He can press all the panels in timing in time 1, but he cannot press the panels in time 2 in timing with his two hands.\n\ndef",
        "answer": "def perfectTiming(k, arr):\n    for i in range(len(arr)):\n        if arr[i] == '.':\n            continue\n        else:\n            if int(arr[i]) > k:\n                return \"NO\"\n    return \"YES\"",
        "difficulty": "interview"
    },
    {
        "task_id": 979,
        "prompt": "Complete the Python function given the prompt below:To become the king of Codeforces, Kuroni has to solve the following problem.\nHe is given $n$ numbers $a_1, a_2, \\dots, a_n$. Help Kuroni to calculate $\\prod_{1\\le i<j\\le n} |a_i - a_j|$. As result can be very big, output it modulo $m$.\nIf you are not familiar with short notation, $\\prod_{1\\le i<j\\le n} |a_i - a_j|$ is equal to $|a_1 - a_2|\\cdot|a_1 - a_3|\\cdot$ $\\dots$ $\\cdot|a_1 - a_n|\\cdot|a_2 - a_3|\\cdot|a_2 - a_4|\\cdot$ $\\dots$ $\\cdot|a_2 - a_n| \\cdot$ $\\dots$ $\\cdot |a_{n-1} - a_n|$. In other words, this is the product of $|a_i - a_j|$ for all $1\\le i < j \\le n$.\n-----Input-----\nThe first line contains two integers $n$, $m$ ($2\\le n \\le 2\\cdot 10^5$, $1\\le m \\le 1000$)\u00a0\u2014 number of numbers and modulo.\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($0 \\le a_i \\le 10^9$).\n-----Output-----\nOutput the single number\u00a0\u2014 $\\prod_{1\\le i<j\\le n} |a_i - a_j| \\bmod m$.\n-----Examples-----\nInput\n2 10\n8 5\nOutput\n3\nInput\n3 12\n1 4 5\nOutput\n0\nInput\n3 7\n1 4 9\nOutput\n1\n-----Note-----\nIn the first sample, $|8 - 5| = 3 \\equiv 3 \\bmod 10$.\nIn the second sample, $|1 - 4|\\cdot|1 - 5|\\cdot|4 - 5| = 3\\cdot 4 \\cdot 1 = 12 \\equiv 0 \\bmod 12$.\nIn the third sample, $|1 - 4|\\cdot|1 - 9|\\cdot|4 - 9| = 3 \\cdot 8 \\cdot 5 = 120 \\equiv 1 \\bmod 7$.\n\ndef",
        "answer": "def solve(n, m, a):\n    res = 1\n    for i in range(n):\n        for j in range(i + 1, n):\n            res *= abs(a[i] - a[j])\n            res %= m\n    return res",
        "difficulty": "interview"
    },
    {
        "task_id": 980,
        "prompt": "Complete the Python function given the prompt below:We had a string s consisting of n lowercase Latin letters. We made k copies of this string, thus obtaining k identical strings s_1, s_2,..., s_{k}. After that, in each of these strings we swapped exactly two characters (the characters we swapped could be identical, but they had different indices in the string).\nYou are given k strings s_1, s_2,..., s_{k}, and you have to restore any string s so that it is possible to obtain these strings by performing aforementioned operations. Note that the total length of the strings you are given doesn't exceed 5000 (that is, k\u00b7n \u2264 5000).\n-----Input-----\nThe first line contains two integers k and n (1 \u2264 k \u2264 2500, 2 \u2264 n \u2264 5000, k\u00a0\u00b7\u00a0n \u2264 5000) \u2014 the number of strings we obtained, and the length of each of these strings.\nNext k lines contain the strings s_1, s_2,..., s_{k}, each consisting of exactly n lowercase Latin letters.\n-----Output-----\nPrint any suitable string s, or -1 if such string doesn't exist.\n-----Examples-----\nInput\n3 4\nabac\ncaab\nacba\nOutput\nacab\nInput\n3 4\nkbbu\nkbub\nubkb\nOutput\nkbub\nInput\n5 4\nabcd\ndcba\nacbd\ndbca\nzzzz\nOutput\n-1\n-----Note-----\nIn the first example s_1 is obtained by swapping the second and the fourth character in acab, s_2 is obtained by swapping the first and the second character, and to get s_3, we swap the third and the fourth character.\nIn the second example s_1 is obtained by swapping the third and the fourth character in kbub, s_2 \u2014 by swapping the second and the fourth, and s_3 \u2014 by swapping the first and the third.\nIn the third example it's impossible to obtain given strings by aforementioned operations.\n\ndef",
        "answer": "def swap_two_letters(s):\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if s[i] == s[j]:\n                return s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:]\n    return -1",
        "difficulty": "interview"
    },
    {
        "task_id": 981,
        "prompt": "Complete the Python function given the prompt below:Igor has fallen in love with Tanya. Now Igor wants to show his feelings and write a number on the fence opposite to Tanya's house. Igor thinks that the larger the number is, the more chance to win Tanya's heart he has. \nUnfortunately, Igor could only get v liters of paint. He did the math and concluded that digit d requires a_{d} liters of paint. Besides, Igor heard that Tanya doesn't like zeroes. That's why Igor won't use them in his number.\nHelp Igor find the maximum number he can write on the fence.\n-----Input-----\nThe first line contains a positive integer v (0 \u2264 v \u2264 10^6). The second line contains nine positive integers a_1, a_2,..., a_9 (1 \u2264 a_{i} \u2264 10^5).\n-----Output-----\nPrint the maximum number Igor can write on the fence. If he has too little paint for any digit (so, he cannot write anything), print -1.\n-----Examples-----\nInput\n5\n5 4 3 2 1 2 3 4 5\nOutput\n55555\nInput\n2\n9 11 1 12 5 8 9 10 6\nOutput\n33\nInput\n0\n1 1 1 1 1 1 1 1 1\nOutput\n-1\n\ndef",
        "answer": "def paint(v, a):\n    if v < 0:\n        return -1\n    if v == 0:\n        return 0\n    if v == 1:\n        return a[0]\n    if v == 2:\n        return a[0] + a[1]\n    if v == 3:\n        return a[0] + a[1] + a[2]\n    if v == 4:\n        return a[0] + a[1] + a[2] + a[3]\n    if v == 5:\n        return a[0] + a[1] + a[2] + a[3] + a[4]\n    if v == 6:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5]\n    if v == 7:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6]\n    if v == 8:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7]\n    if v == 9:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8]\n    if v == 10:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9]",
        "difficulty": "interview"
    },
    {
        "task_id": 982,
        "prompt": "Complete the Python function given the prompt below:You got a job as a marketer in a pet shop, and your current task is to boost sales of cat food. One of the strategies is to sell cans of food in packs with discounts. \nSuppose you decided to sell packs with $a$ cans in a pack with a discount and some customer wants to buy $x$ cans of cat food. Then he follows a greedy strategy:   he buys $\\left\\lfloor \\frac{x}{a} \\right\\rfloor$ packs with a discount;  then he wants to buy the remaining $(x \\bmod a)$ cans one by one. \n$\\left\\lfloor \\frac{x}{a} \\right\\rfloor$ is $x$ divided by $a$ rounded down, $x \\bmod a$ is the remainer of $x$ divided by $a$.\nBut customers are greedy in general, so if the customer wants to buy $(x \\bmod a)$ cans one by one and it happens that $(x \\bmod a) \\ge \\frac{a}{2}$ he decides to buy the whole pack of $a$ cans (instead of buying $(x \\bmod a)$ cans). It makes you, as a marketer, happy since the customer bought more than he wanted initially.\nYou know that each of the customers that come to your shop can buy any number of cans from $l$ to $r$ inclusive. Can you choose such size of pack $a$ that each customer buys more cans than they wanted initially?\n-----Input-----\nThe first line contains a single integer $t$ ($1 \\le t \\le 1000$)\u00a0\u2014 the number of test cases.\nThe first and only line of each test case contains two integers $l$ and $r$ ($1 \\le l \\le r \\le 10^9$)\u00a0\u2014 the range of the number of cans customers can buy.\n-----Output-----\nFor each test case, print YES if you can choose such size of pack $a$ that each customer buys more cans than they wanted initially. Otherwise, print NO.\nYou can print each character in any case.\n-----Example-----\nInput\n3\n3 4\n1 2\n120 150\nOutput\nYES\nNO\nYES\n-----Note-----\nIn the first test case, you can take, for example, $a = 5$ as the size of the pack. Then if a customer wants to buy $3$ cans, he'll buy $5$ instead ($3 \\bmod 5 = 3$, $\\frac{5}{2} = 2.5$). The one who wants $4$ cans will also buy $5$ cans.\nIn the second test case, there is no way to choose $a$.\nIn the third test case, you can take, for example, $a = 80$.\n\ndef",
        "answer": "def pack(l, r):\n    return (r - l + 1) // a",
        "difficulty": "interview"
    },
    {
        "task_id": 983,
        "prompt": "Complete the Python function given the prompt below:Professor Dumbledore is helping Harry destroy the Horcruxes. He went to Gaunt Shack as he suspected a Horcrux to be present there. He saw Marvolo Gaunt's Ring and identified it as a Horcrux. Although he destroyed it, he is still affected by its curse. Professor Snape is helping Dumbledore remove the curse. For this, he wants to give Dumbledore exactly x drops of the potion he made. \nValue of x is calculated as maximum of p\u00b7a_{i} + q\u00b7a_{j} + r\u00b7a_{k} for given p, q, r and array a_1, a_2,... a_{n} such that 1 \u2264 i \u2264 j \u2264 k \u2264 n. Help Snape find the value of x. Do note that the value of x may be negative.\n-----Input-----\nFirst line of input contains 4 integers n, p, q, r ( - 10^9 \u2264 p, q, r \u2264 10^9, 1 \u2264 n \u2264 10^5).\nNext line of input contains n space separated integers a_1, a_2,... a_{n} ( - 10^9 \u2264 a_{i} \u2264 10^9).\n-----Output-----\nOutput a single integer the maximum value of p\u00b7a_{i} + q\u00b7a_{j} + r\u00b7a_{k} that can be obtained provided 1 \u2264 i \u2264 j \u2264 k \u2264 n.\n-----Examples-----\nInput\n5 1 2 3\n1 2 3 4 5\nOutput\n30\nInput\n5 1 2 -3\n-1 -2 -3 -4 -5\nOutput\n12\n-----Note-----\nIn the first sample case, we can take i = j = k = 5, thus making the answer as 1\u00b75 + 2\u00b75 + 3\u00b75 = 30.\nIn second sample case, selecting i = j = 1 and k = 5 gives the answer 12.\n\ndef",
        "answer": "def max_value(n, p, q, r, a):\n    max_value = 0\n    for i in range(n):\n        for j in range(i, n):\n            for k in range(j, n):\n                max_value = max(max_value, p*a[i] + q*a[j] + r*a[k])\n    return max_value",
        "difficulty": "interview"
    },
    {
        "task_id": 984,
        "prompt": "Complete the Python function given the prompt below:Let T be arbitrary binary tree \u2014 tree, every vertex of which has no more than two children. Given tree is rooted, so there exists only one vertex which doesn't have a parent \u2014 it's the root of a tree. Every vertex has an integer number written on it. Following algorithm is run on every value from the tree T:  Set pointer to the root of a tree.  Return success if the value in the current vertex is equal to the number you are looking for  Go to the left child of the vertex if the value in the current vertex is greater than the number you are looking for  Go to the right child of the vertex if the value in the current vertex is less than the number you are looking for  Return fail if you try to go to the vertex that doesn't exist \nHere is the pseudo-code of the described algorithm: \nbool find(TreeNode t, int x) {\n    if (t == null)\n        return false;\n    if (t.value == x)\n        return true;\n    if (x < t.value)\n        return find(t.left, x);\n    else\n        return find(t.right, x);\n}\nfind(root, x);\nThe described algorithm works correctly if the tree is binary search tree (i.e. for each node the values of left subtree are less than the value in the node, the values of right subtree are greater than the value in the node). But it can return invalid result if tree is not a binary search tree.\nSince the given tree is not necessarily a binary search tree, not all numbers can be found this way. Your task is to calculate, how many times the search will fail being running on every value from the tree.\nIf the tree has multiple vertices with the same values on them then you should run algorithm on every one of them separately.\n-----Input-----\nFirst line contains integer number n (1 \u2264 n \u2264 10^5) \u2014 number of vertices in the tree.\nEach of the next n lines contains 3 numbers v, l, r (0 \u2264 v \u2264 10^9) \u2014 value on current vertex, index of the left child of the vertex and index of the right child of the vertex, respectively. If some child doesn't exist then number  - 1 is set instead. Note that different vertices of the tree may contain the same values.\n-----Output-----\nPrint number of times when search algorithm will fail.\n-----Examples-----\nInput\n3\n15 -1 -1\n10 1 3\n5 -1 -1\nOutput\n2\nInput\n8\n6 2 3\n3 4 5\n12 6 7\n1 -1 8\n4 -1 -1\n5 -1 -1\n14 -1 -1\n2 -1 -1\nOutput\n1\n-----Note-----\nIn the example the root of the tree in vertex 2. Search of numbers 5 and 15 will return fail because on the first step algorithm will choose the subtree which doesn't contain numbers you are looking for.\n\ndef",
        "answer": "def find(t, x):\n    if t == None:\n        return False\n    if t.value == x:\n        return True\n    if x < t.value:\n        return find(t.left, x)\n    else:\n        return find(t.right, x)",
        "difficulty": "interview"
    },
    {
        "task_id": 985,
        "prompt": "Complete the Python function given the prompt below:Today, Wet Shark is given n bishops on a 1000 by 1000 grid. Both rows and columns of the grid are numbered from 1 to 1000. Rows are numbered from top to bottom, while columns are numbered from left to right.\nWet Shark thinks that two bishops attack each other if they share the same diagonal. Note, that this is the only criteria, so two bishops may attack each other (according to Wet Shark) even if there is another bishop located between them. Now Wet Shark wants to count the number of pairs of bishops that attack each other.\n-----Input-----\nThe first line of the input contains n (1 \u2264 n \u2264 200 000)\u00a0\u2014 the number of bishops.\nEach of next n lines contains two space separated integers x_{i} and y_{i} (1 \u2264 x_{i}, y_{i} \u2264 1000)\u00a0\u2014 the number of row and the number of column where i-th bishop is positioned. It's guaranteed that no two bishops share the same position.\n-----Output-----\nOutput one integer\u00a0\u2014 the number of pairs of bishops which attack each other. \n-----Examples-----\nInput\n5\n1 1\n1 5\n3 3\n5 1\n5 5\nOutput\n6\nInput\n3\n1 1\n2 3\n3 5\nOutput\n0\n-----Note-----\nIn the first sample following pairs of bishops attack each other: (1, 3), (1, 5), (2, 3), (2, 4), (3, 4) and (3, 5). Pairs (1, 2), (1, 4), (2, 5) and (4, 5) do not attack each other because they do not share the same diagonal.\n\ndef",
        "answer": "def bishop(n, x, y):\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if abs(x[i]-x[j]) == abs(y[i]-y[j]):\n                count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 986,
        "prompt": "Complete the Python function given the prompt below:Your search for Heidi is over \u2013 you finally found her at a library, dressed up as a human. In fact, she has spent so much time there that she now runs the place! Her job is to buy books and keep them at the library so that people can borrow and read them. There are n different books, numbered 1 through n.\nWe will look at the library's operation during n consecutive days. Heidi knows in advance that on the i-th day (1 \u2264 i \u2264 n) precisely one person will come to the library, request to borrow the book a_{i}, read it in a few hours, and return the book later on the same day.\nHeidi desperately wants to please all her guests, so she will make sure to always have the book a_{i} available in the library on the i-th day. During the night before the i-th day, she has the option of going to the bookstore (which operates at nights to avoid competition with the library) and buying any book for the price of 1 CHF. Of course, if she already has a book at the library, she does not need to buy it again. Initially, the library contains no books.\nThere is a problem, though. The capacity of the library is k \u2013 this means that at any time, there can be at most k books at the library. If buying a new book would cause Heidi to have more than k books, she must first get rid of some book that she already has, in order to make room for the new book. If she later needs a book that she got rid of, she will need to buy that book again.\nYou are given k and the sequence of requests for books a_1, a_2,..., a_{n}. What is the minimum cost (in CHF) of buying new books to satisfy all the requests?\n-----Input-----\nThe first line of input will contain two integers n and k (1 \u2264 n, k \u2264 80). The second line will contain n integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 n) \u2013 the sequence of book requests.\n-----Output-----\nOn a single line print the minimum cost of buying books at the store so as to satisfy all requests.\n-----Examples-----\nInput\n4 80\n1 2 2 1\nOutput\n2\nInput\n4 1\n1 2 2 1\nOutput\n3\nInput\n4 2\n1 2 3 1\nOutput\n3\n-----Note-----\nIn the first test case, Heidi is able to keep all books forever. Therefore, she only needs to buy the book 1 before the first day and the book 2 before the second day.\nIn the second test case, she can only keep one book at a time. Therefore she will need to buy new books on the first, second and fourth day.\nIn the third test case, before buying book 3 on the third day, she must decide which of the books 1 and 2 she should get rid of. Of course, she should keep the book 1, which will be requested on the fourth day.\n\ndef",
        "answer": "def book_store(n, k, a):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 4\n    if n == 7:\n        return 4\n    if n == 8:\n        return 4\n    if n == 9:\n        return 4\n    if n == 10:\n        return 4\n    if n == 11:\n        return 4\n    if n == 12:\n        return 4\n    if n == 13:\n        return 4\n    if n == 14:\n        return 4\n    if n == 15:\n        return 4\n    if n == 16:\n        return 4\n    if n == 17:\n        return 4\n    if n == 18:\n        return 4\n    if n == 19:\n        return 4\n    if n == 20:\n        return 4\n    if n == 21:\n        return 4\n    if n == 22:\n        return 4\n    if n == 23:\n        return 4\n    if n == 24:\n        return 4\n    if n == 25:\n        return 4\n    if n == 26:\n        return 4\n    if n == 27:\n        return 4\n    if n == 28:\n        return 4\n    if n == 29:\n        return 4\n    if n == 30:\n        return 4\n    if n == 31:\n        return 4\n    if n == 32:\n        return 4\n    if n == 33:\n        return 4\n    if n == 34:\n        return 4\n    if n == 35:\n        return 4\n    if n ==",
        "difficulty": "interview"
    },
    {
        "task_id": 987,
        "prompt": "Complete the Python function given the prompt below:You are given a permutation of the numbers 1, 2,..., n and m pairs of positions (a_{j}, b_{j}).\nAt each step you can choose a pair from the given positions and swap the numbers in that positions. What is the lexicographically maximal permutation one can get?\nLet p and q be two permutations of the numbers 1, 2,..., n. p is lexicographically smaller than the q if a number 1 \u2264 i \u2264 n exists, so p_{k} = q_{k} for 1 \u2264 k < i and p_{i} < q_{i}.\n-----Input-----\nThe first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the length of the permutation p and the number of pairs of positions.\nThe second line contains n distinct integers p_{i} (1 \u2264 p_{i} \u2264 n) \u2014 the elements of the permutation p.\nEach of the last m lines contains two integers (a_{j}, b_{j}) (1 \u2264 a_{j}, b_{j} \u2264 n) \u2014 the pairs of positions to swap. Note that you are given a positions, not the values to swap.\n-----Output-----\nPrint the only line with n distinct integers p'_{i} (1 \u2264 p'_{i} \u2264 n) \u2014 the lexicographically maximal permutation one can get.\n-----Example-----\nInput\n9 6\n1 2 3 4 5 6 7 8 9\n1 4\n4 7\n2 5\n5 8\n3 6\n6 9\nOutput\n7 8 9 4 5 6 1 2 3\n\ndef",
        "answer": "def swap(a, b):\n    a, b = b, a\n    return a, b",
        "difficulty": "interview"
    },
    {
        "task_id": 988,
        "prompt": "Complete the Python function given the prompt below:A classroom in a school has six rows with 3 desks in each row. Two people can use the same desk: one sitting on the left and one sitting on the right. \nSome places are already occupied, and some places are vacant. Petya has just entered the class and wants to occupy the most convenient place. The conveniences of the places are shown on the picture: [Image] \nHere, the desks in the top row are the closest to the blackboard, while the desks in the bottom row are the furthest from the blackboard.\nYou are given a plan of the class, where '*' denotes an occupied place, '.' denotes a vacant place, and the aisles are denoted by '-'. \nFind any of the most convenient vacant places for Petya.\n-----Input-----\nThe input consists of 6 lines. Each line describes one row of desks, starting from the closest to the blackboard. Each line is given in the following format: two characters, each is '*' or '.' \u2014 the description of the left desk in the current row; a character '-' \u2014 the aisle; two characters, each is '*' or '.' \u2014 the description of the center desk in the current row; a character '-' \u2014 the aisle; two characters, each is '*' or '.' \u2014 the description of the right desk in the current row. So, the length of each of the six lines is 8.\nIt is guaranteed that there is at least one vacant place in the classroom.\n-----Output-----\nPrint the plan of the classroom after Petya takes one of the most convenient for him places. Mark this place with the letter 'P'. There should be exactly one letter 'P' in the plan. Petya can only take a vacant place. In all other places the output should coincide with the input.\nIf there are multiple answers, print any.\n-----Examples-----\nInput\n..-**-..\n..-**-..\n..-..-..\n..-..-..\n..-..-..\n..-..-..\nOutput\n..-**-..\n..-**-..\n..-..-..\n..-P.-..\n..-..-..\n..-..-..\nInput\n**-**-**\n**-**-**\n..-**-.*\n**-**-**\n..-..-..\n..-**-..\nOutput\n**-**-**\n**-**-**\n..-**-.*\n**-**-**\n..-P.-..\n..-**-..\nInput\n**-**-*.\n*.-*.-**\n**-**-**\n**-**-**\n..-..-..\n..-**-..\nOutput\n**-**-*.\n*.-*P-**\n**-**-**\n**-**-**\n..-..-..\n..-**-..\n-----Note-----\nIn the first example the maximum convenience is 3.\nIn the second example the maximum convenience is 2.\nIn the third example the maximum convenience is 4.\n\ndef",
        "answer": "def classroom(a):\n    a = a.split('\\n')\n    a = [i.split('-') for i in a]\n    a = [[i[0], i[1], i[2], i[3], i[4], i[5]] for i in a]\n    a = [[i[0], i[1], i[2], i[3], i[4], i[5]] for i in a]\n    a = [[i[0], i[1], i[2], i[3], i[4], i[5]] for i in a]\n    a = [[i[0], i[1], i[2], i[3], i[4], i[5]] for i in a]\n    a = [[i[0], i[1], i[2], i[3], i[4], i[5]] for i in a]\n    a = [[i[0], i[1], i[2], i[3], i[4], i[5]] for i in a]\n    a = [[i[0], i[1], i[2], i[3], i[4], i[5]] for i in a]\n    a = [[i[0], i[1], i[2], i[3], i[4], i[5]] for i in a]\n    a = [[i[0], i[1], i[2], i[3], i[4], i[5]] for i in a]\n    a = [[i[0], i[1], i[2], i[3], i[4], i[5]] for i in a]\n    a = [[i[0], i[1], i[2], i[3], i[4], i[5]]",
        "difficulty": "interview"
    },
    {
        "task_id": 989,
        "prompt": "Complete the Python function given the prompt below:You are given a sequence $a_1, a_2, \\dots, a_n$ consisting of $n$ integers.\nYou may perform the following operation on this sequence: choose any element and either increase or decrease it by one.\nCalculate the minimum possible difference between the maximum element and the minimum element in the sequence, if you can perform the aforementioned operation no more than $k$ times.\n-----Input-----\nThe first line contains two integers $n$ and $k$ $(2 \\le n \\le 10^{5}, 1 \\le k \\le 10^{14})$ \u2014 the number of elements in the sequence and the maximum number of times you can perform the operation, respectively.\nThe second line contains a sequence of integers $a_1, a_2, \\dots, a_n$ $(1 \\le a_i \\le 10^{9})$.\n-----Output-----\nPrint the minimum possible difference between the maximum element and the minimum element in the sequence, if you can perform the aforementioned operation no more than $k$ times.\n-----Examples-----\nInput\n4 5\n3 1 7 5\nOutput\n2\nInput\n3 10\n100 100 100\nOutput\n0\nInput\n10 9\n4 5 5 7 5 4 5 2 4 3\nOutput\n1\n-----Note-----\nIn the first example you can increase the first element twice and decrease the third element twice, so the sequence becomes $[3, 3, 5, 5]$, and the difference between maximum and minimum is $2$. You still can perform one operation after that, but it's useless since you can't make the answer less than $2$.\nIn the second example all elements are already equal, so you may get $0$ as the answer even without applying any operations.\n\ndef",
        "answer": "def minDifference(a, k):\n    a.sort()\n    return min(a[-1] - a[0], a[-1] - a[1] + k, a[-1] - a[-2] + k)",
        "difficulty": "interview"
    },
    {
        "task_id": 990,
        "prompt": "Complete the Python function given the prompt below:We have a tree with N vertices numbered 1 to N.\nThe i-th edge in this tree connects Vertex a_i and Vertex b_i.\nConsider painting each of these edges white or black. There are 2^{N-1} such ways to paint the edges. Among them, how many satisfy all of the following M restrictions?  \n - The i-th (1 \\leq i \\leq M) restriction is represented by two integers u_i and v_i, which mean that the path connecting Vertex u_i and Vertex v_i must contain at least one edge painted black.\n-----Constraints-----\n - 2 \\leq N \\leq 50\n - 1 \\leq a_i,b_i \\leq N\n - The graph given in input is a tree.\n - 1 \\leq M \\leq \\min(20,\\frac{N(N-1)}{2})\n - 1 \\leq u_i < v_i \\leq N\n - If i \\not= j, either u_i \\not=u_j or v_i\\not=v_j\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\na_1 b_1\n:\na_{N-1} b_{N-1}\nM\nu_1 v_1\n:\nu_M v_M\n-----Output-----\nPrint the number of ways to paint the edges that satisfy all of the M conditions.\n-----Sample Input-----\n3\n1 2\n2 3\n1\n1 3\n-----Sample Output-----\n3\nThe tree in this input is shown below:\nAll of the M restrictions will be satisfied if Edge 1 and 2 are respectively painted (white, black), (black, white), or (black, black), so the answer is 3.\n\ndef",
        "answer": "def paint(n, a, b, m, u, v):\n    if m == 0:\n        return 1\n    if n == 1:\n        return 2\n    return paint(n - 1, a, b, m, u, v) + paint(n - 1, a, b, m - 1, u, v)",
        "difficulty": "interview"
    },
    {
        "task_id": 991,
        "prompt": "Complete the Python function given the prompt below:There are N cities numbered 1 to N, connected by M railroads.\nYou are now at City 1, with 10^{100} gold coins and S silver coins in your pocket.\nThe i-th railroad connects City U_i and City V_i bidirectionally, and a one-way trip costs A_i silver coins and takes B_i minutes.\nYou cannot use gold coins to pay the fare.\nThere is an exchange counter in each city. At the exchange counter in City i, you can get C_i silver coins for 1 gold coin.\nThe transaction takes D_i minutes for each gold coin you give.\nYou can exchange any number of gold coins at each exchange counter.\nFor each t=2,..., N, find the minimum time needed to travel from City 1 to City t. You can ignore the time spent waiting for trains.\n-----Constraints-----\n - 2 \\leq N \\leq 50\n - N-1 \\leq M \\leq 100\n - 0 \\leq S \\leq 10^9\n - 1 \\leq A_i \\leq 50\n - 1 \\leq B_i,C_i,D_i \\leq 10^9\n - 1 \\leq U_i < V_i \\leq N\n - There is no pair i, j(i \\neq j) such that (U_i,V_i)=(U_j,V_j).\n - Each city t=2,...,N can be reached from City 1 with some number of railroads.\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN M S\nU_1 V_1 A_1 B_1\n:\nU_M V_M A_M B_M\nC_1 D_1\n:\nC_N D_N\n-----Output-----\nFor each t=2,..., N in this order, print a line containing the minimum time needed to travel from City 1 to City t.\n-----Sample Input-----\n3 2 1\n1 2 1 2\n1 3 2 4\n1 11\n1 2\n2 5\n-----Sample Output-----\n2\n14\nThe railway network in this input is shown in the figure below.\nIn this figure, each city is labeled as follows:\n - The first line: the ID number i of the city (i for City i)\n - The second line: C_i / D_i\nSimilarly, each railroad is labeled as follows:\n - The first line: the ID number i of the railroad (i for the i-th railroad in input)\n - The second line: A_i / B_i\nYou can travel from City 1 to City 2 in 2 minutes, as follows:\n - Use the 1-st railroad to move from City 1 to City 2 in 2 minutes.\nYou can travel from City 1 to City 3 in 14 minutes, as follows:\n - Use the 1-st railroad to move from City 1 to City 2 in 2 minutes.\n - At the exchange counter in City 2, exchange 3 gold coins for 3 silver coins in 6 minutes.\n - Use the 1-st railroad to move from City 2 to City 1 in 2 minutes.\n - Use the 2-nd railroad to move from City 1 to City 3 in 4 minutes.\n\ndef",
        "answer": "def railroads(n, m, s, u, v, a, b, c, d):\n    # Write your code here\n    # n = number of cities\n    # m = number of railroads\n    # s = number of silver coins\n    # u = number of gold coins\n    # v = number of silver coins\n    # a = number of minutes it takes to travel one city\n    # b = number of minutes it takes to travel one railroad\n    # c = number of silver coins to exchange for one gold coin\n    # d = number of minutes it takes to exchange one gold coin\n    # return the minimum time needed to travel from city 1 to city n\n    # Write your code here\n    # n = number of cities\n    # m = number of railroads\n    # s = number of silver coins\n    # u = number of gold coins\n    # v = number of silver coins\n    # a = number of minutes it takes to travel one city\n    # b = number of minutes it takes to travel one railroad\n    # c = number of silver coins to exchange for one gold coin\n    # d = number of minutes it takes to exchange one gold coin\n    # return the minimum time needed to travel from city 1 to city n\n    # Write your code here\n    # n = number of cities\n    # m = number of railroads\n    # s = number of silver coins\n    # u = number of gold coins\n    # v = number of silver coins\n    # a = number of minutes it takes to travel one city\n    # b = number of minutes it takes to travel one railroad\n    # c = number of silver coins to exchange for one gold coin\n    # d = number of minutes it takes to exchange one gold coin\n    # return the minimum time needed to travel from city 1 to city n\n    # Write",
        "difficulty": "interview"
    },
    {
        "task_id": 992,
        "prompt": "Complete the Python function given the prompt below:Given are a sequence of N positive integers A_1, A_2, \\ldots, A_N and another positive integer S.\nFor a non-empty subset T of the set \\{1, 2, \\ldots, N \\}, let us define f(T) as follows:\n - f(T) is the number of different non-empty subsets \\{x_1, x_2, \\ldots, x_k \\} of T such that A_{x_1}+A_{x_2}+\\cdots +A_{x_k} = S.\nFind the sum of f(T) over all 2^N-1 subsets T of \\{1, 2, \\ldots, N \\}. Since the sum can be enormous, print it modulo 998244353.\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 3000\n - 1 \\leq S \\leq 3000\n - 1 \\leq A_i \\leq 3000\n-----Input-----\nInput is given from Standard Input in the following format:\nN S\nA_1 A_2... A_N\n-----Output-----\nPrint the sum of f(T) modulo 998244353.\n-----Sample Input-----\n3 4\n2 2 4\n-----Sample Output-----\n6\nFor each T, the value of f(T) is shown below. The sum of these values is 6.\n - f(\\{1\\}) = 0\n - f(\\{2\\}) = 0\n - f(\\{3\\}) = 1 (One subset \\{3\\} satisfies the condition.)\n - f(\\{1, 2\\}) = 1 (\\{1, 2\\})\n - f(\\{2, 3\\}) = 1 (\\{3\\})\n - f(\\{1, 3\\}) = 1 (\\{3\\})\n - f(\\{1, 2, 3\\}) = 2 (\\{1, 2\\}, \\{3\\})\n\ndef",
        "answer": "def f(T, S):\n    if len(T) == 0:\n        return 0\n    elif len(T) == 1:\n        if T[0] == S:\n            return 1\n        else:\n            return 0\n    else:\n        if T[0] == S:\n            return 1 + f(T[1:], S)\n        else:\n            return f(T[1:], S)",
        "difficulty": "interview"
    },
    {
        "task_id": 993,
        "prompt": "Complete the Python function given the prompt below:There are N boxes arranged in a row from left to right. The i-th box from the left contains A_i candies.\nYou will take out the candies from some consecutive boxes and distribute them evenly to M children.\nSuch being the case, find the number of the pairs (l, r) that satisfy the following:\n - l and r are both integers and satisfy 1 \\leq l \\leq r \\leq N.\n - A_l + A_{l+1} +... + A_r is a multiple of M.\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 10^5\n - 2 \\leq M \\leq 10^9\n - 1 \\leq A_i \\leq 10^9\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\nA_1 A_2... A_N\n-----Output-----\nPrint the number of the pairs (l, r) that satisfy the conditions.\nNote that the number may not fit into a 32-bit integer type.\n-----Sample Input-----\n3 2\n4 1 5\n-----Sample Output-----\n3\nThe sum A_l + A_{l+1} +... + A_r for each pair (l, r) is as follows:\n - Sum for (1, 1): 4\n - Sum for (1, 2): 5\n - Sum for (1, 3): 10\n - Sum for (2, 2): 1\n - Sum for (2, 3): 6\n - Sum for (3, 3): 5\nAmong these, three are multiples of 2.\n\ndef",
        "answer": "def candies(n, m, arr):\n    count = 0\n    for i in range(n):\n        sum = 0\n        for j in range(i, n):\n            sum += arr[j]\n            if sum % m == 0:\n                count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 994,
        "prompt": "Complete the Python function given the prompt below:A tourist hiked along the mountain range. The hike lasted for n days, during each day the tourist noted height above the sea level. On the i-th day height was equal to some integer h_{i}. The tourist pick smooth enough route for his hike, meaning that the between any two consecutive days height changes by at most 1, i.e. for all i's from 1 to n - 1 the inequality |h_{i} - h_{i} + 1| \u2264 1 holds.\nAt the end of the route the tourist rafted down a mountain river and some notes in the journal were washed away. Moreover, the numbers in the notes could have been distorted. Now the tourist wonders what could be the maximum height during his hike. Help him restore the maximum possible value of the maximum height throughout the hike or determine that the notes were so much distorted that they do not represent any possible height values that meet limits |h_{i} - h_{i} + 1| \u2264 1.\n-----Input-----\nThe first line contains two space-separated numbers, n and m (1 \u2264 n \u2264 10^8, 1 \u2264 m \u2264 10^5)\u00a0\u2014 the number of days of the hike and the number of notes left in the journal.\nNext m lines contain two space-separated integers d_{i} and h_{d}_{i} (1 \u2264 d_{i} \u2264 n, 0 \u2264 h_{d}_{i} \u2264 10^8)\u00a0\u2014 the number of the day when the i-th note was made and height on the d_{i}-th day. It is guaranteed that the notes are given in the chronological order, i.e. for all i from 1 to m - 1 the following condition holds: d_{i} < d_{i} + 1.\n-----Output-----\nIf the notes aren't contradictory, print a single integer \u2014 the maximum possible height value throughout the whole route.\nIf the notes do not correspond to any set of heights, print a single word 'IMPOSSIBLE' (without the quotes).\n-----Examples-----\nInput\n8 2\n2 0\n7 0\nOutput\n2\nInput\n8 3\n2 0\n7 0\n8 3\nOutput\nIMPOSSIBLE\n-----Note-----\nFor the first sample, an example of a correct height sequence with a maximum of 2: (0, 0, 1, 2, 1, 1, 0, 1).\nIn the second sample the inequality between h_7 and h_8 does not hold, thus the information is inconsistent.\n\ndef",
        "answer": "def max_height(n, m, d, h):\n    if m == 0:\n        return 0\n    if n == 1:\n        return max(h)\n    if n == 2:\n        return max(h[0], h[1])\n    if n == 3:\n        return max(h[0], h[1], h[2])\n    if n == 4:\n        return max(h[0], h[1], h[2], h[3])\n    if n == 5:\n        return max(h[0], h[1], h[2], h[3], h[4])\n    if n == 6:\n        return max(h[0], h[1], h[2], h[3], h[4], h[5])\n    if n == 7:\n        return max(h[0], h[1], h[2], h[3], h[4], h[5], h[6])\n    if n == 8:\n        return max(h[0], h[1], h[2], h[3], h[4], h[5], h[6], h[7])\n    if n == 9:\n        return max(h[0], h[1], h[2], h[3], h[4], h[5], h[6], h[7], h[8])\n    if n == 10:\n        return max(h[0], h[1], h[2], h[3], h[4], h[5], h[6], h[7], h[8], h[9])\n    if n == 11:\n        return max(h[0], h[1], h[2], h[3], h[4], h[5], h[6",
        "difficulty": "interview"
    },
    {
        "task_id": 995,
        "prompt": "Complete the Python function given the prompt below:SaMer has written the greatest test case of all time for one of his problems. For a given array of integers, the problem asks to find the minimum number of groups the array can be divided into, such that the product of any pair of integers in the same group is a perfect square. \nEach integer must be in exactly one group. However, integers in a group do not necessarily have to be contiguous in the array.\nSaMer wishes to create more cases from the test case he already has. His test case has an array $A$ of $n$ integers, and he needs to find the number of contiguous subarrays of $A$ that have an answer to the problem equal to $k$ for each integer $k$ between $1$ and $n$ (inclusive).\n-----Input-----\nThe first line of input contains a single integer $n$ ($1 \\leq n \\leq 5000$), the size of the array.\nThe second line contains $n$ integers $a_1$,$a_2$,$\\dots$,$a_n$ ($-10^8 \\leq a_i \\leq 10^8$), the values of the array.\n-----Output-----\nOutput $n$ space-separated integers, the $k$-th integer should be the number of contiguous subarrays of $A$ that have an answer to the problem equal to $k$.\n-----Examples-----\nInput\n2\n5 5\nOutput\n3 0\nInput\n5\n5 -4 2 1 8\nOutput\n5 5 3 2 0\nInput\n1\n0\nOutput\n1\n\ndef",
        "answer": "def perfectSquare(n):\n    # Write your code here\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if",
        "difficulty": "interview"
    },
    {
        "task_id": 996,
        "prompt": "Complete the Python function given the prompt below:A super computer has been built in the Turtle Academy of Sciences. The computer consists of n\u00b7m\u00b7k CPUs. The architecture was the paralellepiped of size n \u00d7 m \u00d7 k, split into 1 \u00d7 1 \u00d7 1 cells, each cell contains exactly one CPU. Thus, each CPU can be simultaneously identified as a group of three numbers from the layer number from 1 to n, the line number from 1 to m and the column number from 1 to k.\nIn the process of the Super Computer's work the CPUs can send each other messages by the famous turtle scheme: CPU (x, y, z) can send messages to CPUs (x + 1, y, z), (x, y + 1, z) and (x, y, z + 1) (of course, if they exist), there is no feedback, that is, CPUs (x + 1, y, z), (x, y + 1, z) and (x, y, z + 1) cannot send messages to CPU (x, y, z).\nOver time some CPUs broke down and stopped working. Such CPUs cannot send messages, receive messages or serve as intermediates in transmitting messages. We will say that CPU (a, b, c) controls CPU (d, e, f), if there is a chain of CPUs (x_{i}, y_{i}, z_{i}), such that (x_1 = a, y_1 = b, z_1 = c), (x_{p} = d, y_{p} = e, z_{p} = f) (here and below p is the length of the chain) and the CPU in the chain with number i (i < p) can send messages to CPU i + 1.\nTurtles are quite concerned about the denial-proofness of the system of communication between the remaining CPUs. For that they want to know the number of critical CPUs. A CPU (x, y, z) is critical, if turning it off will disrupt some control, that is, if there are two distinctive from (x, y, z) CPUs: (a, b, c) and (d, e, f), such that (a, b, c) controls (d, e, f) before (x, y, z) is turned off and stopped controlling it after the turning off.\n-----Input-----\nThe first line contains three integers n, m and k (1 \u2264 n, m, k \u2264 100)\u00a0\u2014 the dimensions of the Super Computer. \nThen n blocks follow, describing the current state of the processes. The blocks correspond to the layers of the Super Computer in the order from 1 to n. Each block consists of m lines, k characters in each \u2014 the description of a layer in the format of an m \u00d7 k table. Thus, the state of the CPU (x, y, z) is corresponded to the z-th character of the y-th line of the block number x. Character \"1\" corresponds to a working CPU and character \"0\" corresponds to a malfunctioning one. The blocks are separated by exactly one empty line.\n-----Output-----\nPrint a single integer \u2014 the number of critical CPUs, that is, such that turning only this CPU off will disrupt some control.\n-----Examples-----\nInput\n2 2 3\n000\n000\n111\n111\nOutput\n2\nInput\n3 3 3\n111\n111\n111\n111\n111\n111\n111\n111\n111\nOutput\n19\nInput\n1 1 10\n0101010101\nOutput\n0\n-----Note-----\nIn the first sample the whole first layer of CPUs is malfunctional. In the second layer when CPU (2, 1, 2) turns off, it disrupts the control by CPU (2, 1, 3) over CPU (2, 1, 1), and when CPU (2, 2, 2) is turned off, it disrupts the control over CPU (2, 2, 3) by CPU (2, 2, 1).\nIn the second sample all processors except for the corner ones are critical.\nIn the third sample there is not a single processor controlling another processor, so the answer is 0.\n\ndef",
        "answer": "def critical_processes(layers):\n    critical = 0\n    for i in range(len(layers)):\n        for j in range(len(layers[i])):\n            if layers[i][j] == '1':\n                for k in range(len(layers)):\n                    if k!= i:\n                        for l in range(len(layers[k])):\n                            if layers[k][l] == '1':\n                                critical += 1\n    return critical",
        "difficulty": "interview"
    },
    {
        "task_id": 997,
        "prompt": "Complete the Python function given the prompt below:You are given string s. Let's call word any largest sequence of consecutive symbols without symbols ',' (comma) and ';' (semicolon). For example, there are four words in string \"aba,123;1a;0\": \"aba\", \"123\", \"1a\", \"0\". A word can be empty: for example, the string s=\";;\" contains three empty words separated by ';'.\nYou should find all words in the given string that are nonnegative INTEGER numbers without leading zeroes and build by them new string a. String a should contain all words that are numbers separating them by ',' (the order of numbers should remain the same as in the string s). By all other words you should build string b in the same way (the order of numbers should remain the same as in the string s).\nHere strings \"101\", \"0\" are INTEGER numbers, but \"01\" and \"1.0\" are not.\nFor example, for the string aba,123;1a;0 the string a would be equal to \"123,0\" and string b would be equal to \"aba,1a\".\n-----Input-----\nThe only line of input contains the string s (1 \u2264 |s| \u2264 10^5). The string contains only symbols '.' (ASCII 46), ',' (ASCII 44), ';' (ASCII 59), digits, lowercase and uppercase latin letters.\n-----Output-----\nPrint the string a to the first line and string b to the second line. Each string should be surrounded by quotes (ASCII 34).\nIf there are no words that are numbers print dash (ASCII 45) on the first line. If all words are numbers print dash on the second line.\n-----Examples-----\nInput\naba,123;1a;0\nOutput\n\"123,0\"\n\"aba,1a\"\nInput\n1;;01,a0,\nOutput\n\"1\"\n\",01,a0,\"\nInput\n1\nOutput\n\"1\"\n-\nInput\na\nOutput\n-\n\"a\"\n-----Note-----\nIn the second example the string s contains five words: \"1\", \"\", \"01\", \"a0\", \"\".\n\ndef",
        "answer": "def solution(s):\n    words = s.split(';')\n    numbers = []\n    for word in words:\n        if word.isdigit():\n            numbers.append(word)\n    if numbers:\n        return ','.join(numbers)\n    else:\n        return '-'\n",
        "difficulty": "interview"
    },
    {
        "task_id": 998,
        "prompt": "Complete the Python function given the prompt below:Given two integers $n$ and $x$, construct an array that satisfies the following conditions:   for any element $a_i$ in the array, $1 \\le a_i<2^n$;  there is no non-empty subsegment with bitwise XOR equal to $0$ or $x$,  its length $l$ should be maximized. \nA sequence $b$ is a subsegment of a sequence $a$ if $b$ can be obtained from $a$ by deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n-----Input-----\nThe only line contains two integers $n$ and $x$ ($1 \\le n \\le 18$, $1 \\le x<2^{18}$).\n-----Output-----\nThe first line should contain the length of the array $l$.\nIf $l$ is positive, the second line should contain $l$ space-separated integers $a_1$, $a_2$, $\\dots$, $a_l$ ($1 \\le a_i < 2^n$)\u00a0\u2014 the elements of the array $a$.\nIf there are multiple solutions, print any of them.\n-----Examples-----\nInput\n3 5\nOutput\n3\n6 1 3\nInput\n2 4\nOutput\n3\n1 3 1 \nInput\n1 1\nOutput\n0\n-----Note-----\nIn the first example, the bitwise XOR of the subsegments are $\\{6,7,4,1,2,3\\}$.\n\ndef",
        "answer": "def construct_array(n, x):\n    # Write your code here\n    a = []\n    for i in range(1, 2**n):\n        a.append(i^x)\n    return a",
        "difficulty": "interview"
    },
    {
        "task_id": 999,
        "prompt": "Complete the Python function given the prompt below:Anton likes to play chess. Also he likes to do programming. No wonder that he decided to attend chess classes and programming classes.\nAnton has n variants when he will attend chess classes, i-th variant is given by a period of time (l_{1, }i, r_{1, }i). Also he has m variants when he will attend programming classes, i-th variant is given by a period of time (l_{2, }i, r_{2, }i).\nAnton needs to choose exactly one of n possible periods of time when he will attend chess classes and exactly one of m possible periods of time when he will attend programming classes. He wants to have a rest between classes, so from all the possible pairs of the periods he wants to choose the one where the distance between the periods is maximal.\nThe distance between periods (l_1, r_1) and (l_2, r_2) is the minimal possible distance between a point in the first period and a point in the second period, that is the minimal possible |i - j|, where l_1 \u2264 i \u2264 r_1 and l_2 \u2264 j \u2264 r_2. In particular, when the periods intersect, the distance between them is 0.\nAnton wants to know how much time his rest between the classes will last in the best case. Help Anton and find this number!\n-----Input-----\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 200 000)\u00a0\u2014 the number of time periods when Anton can attend chess classes.\nEach of the following n lines of the input contains two integers l_{1, }i and r_{1, }i (1 \u2264 l_{1, }i \u2264 r_{1, }i \u2264 10^9)\u00a0\u2014 the i-th variant of a period of time when Anton can attend chess classes.\nThe following line of the input contains a single integer m (1 \u2264 m \u2264 200 000)\u00a0\u2014 the number of time periods when Anton can attend programming classes.\nEach of the following m lines of the input contains two integers l_{2, }i and r_{2, }i (1 \u2264 l_{2, }i \u2264 r_{2, }i \u2264 10^9)\u00a0\u2014 the i-th variant of a period of time when Anton can attend programming classes.\n-----Output-----\nOutput one integer\u00a0\u2014 the maximal possible distance between time periods.\n-----Examples-----\nInput\n3\n1 5\n2 6\n2 3\n2\n2 4\n6 8\nOutput\n3\nInput\n3\n1 5\n2 6\n3 7\n2\n2 4\n1 4\nOutput\n0\n-----Note-----\nIn the first sample Anton can attend chess classes in the period (2, 3) and attend programming classes in the period (6, 8). It's not hard to see that in this case the distance between the periods will be equal to 3.\nIn the second sample if he chooses any pair of periods, they will intersect. So the answer is 0.\n\ndef",
        "answer": "def distance(l1, r1, l2, r2):\n    return min(abs(l1 - l2), abs(r1 - r2))",
        "difficulty": "interview"
    }
]