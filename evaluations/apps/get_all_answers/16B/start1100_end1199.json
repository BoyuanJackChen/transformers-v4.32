[
    {
        "task_id": 1100,
        "prompt": "Complete the Python function given the prompt below:Ari the monster always wakes up very early with the first ray of the sun and the first thing she does is feeding her squirrel.\nAri draws a regular convex polygon on the floor and numbers it's vertices 1, 2,..., n in clockwise order. Then starting from the vertex 1 she draws a ray in the direction of each other vertex. The ray stops when it reaches a vertex or intersects with another ray drawn before. Ari repeats this process for vertex 2, 3,..., n (in this particular order). And then she puts a walnut in each region inside the polygon.\n [Image] \nAda the squirrel wants to collect all the walnuts, but she is not allowed to step on the lines drawn by Ari. That means Ada have to perform a small jump if she wants to go from one region to another. Ada can jump from one region P to another region Q if and only if P and Q share a side or a corner.\nAssuming that Ada starts from outside of the picture, what is the minimum number of jumps she has to perform in order to collect all the walnuts?\n-----Input-----\nThe first and only line of the input contains a single integer n (3 \u2264 n \u2264 54321) - the number of vertices of the regular polygon drawn by Ari.\n-----Output-----\nPrint the minimum number of jumps Ada should make to collect all the walnuts. Note, that she doesn't need to leave the polygon after.\n-----Examples-----\nInput\n5\nOutput\n9\nInput\n3\nOutput\n1\n-----Note-----\nOne of the possible solutions for the first sample is shown on the picture above.\n\ndef",
        "answer": "def jump(n):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    return 2 + jump(n - 2)",
        "difficulty": "interview"
    },
    {
        "task_id": 1101,
        "prompt": "Complete the Python function given the prompt below:In an attempt to escape the Mischievous Mess Makers' antics, Farmer John has abandoned his farm and is traveling to the other side of Bovinia. During the journey, he and his k cows have decided to stay at the luxurious Grand Moo-dapest Hotel. The hotel consists of n rooms located in a row, some of which are occupied.\nFarmer John wants to book a set of k + 1 currently unoccupied rooms for him and his cows. He wants his cows to stay as safe as possible, so he wishes to minimize the maximum distance from his room to the room of his cow. The distance between rooms i and j is defined as |j - i|. Help Farmer John protect his cows by calculating this minimum possible distance.\n-----Input-----\nThe first line of the input contains two integers n and k (1 \u2264 k < n \u2264 100 000)\u00a0\u2014 the number of rooms in the hotel and the number of cows travelling with Farmer John.\nThe second line contains a string of length n describing the rooms. The i-th character of the string will be '0' if the i-th room is free, and '1' if the i-th room is occupied. It is guaranteed that at least k + 1 characters of this string are '0', so there exists at least one possible choice of k + 1 rooms for Farmer John and his cows to stay in.\n-----Output-----\nPrint the minimum possible distance between Farmer John's room and his farthest cow.\n-----Examples-----\nInput\n7 2\n0100100\nOutput\n2\nInput\n5 1\n01010\nOutput\n2\nInput\n3 2\n000\nOutput\n1\n-----Note-----\nIn the first sample, Farmer John can book room 3 for himself, and rooms 1 and 4 for his cows. The distance to the farthest cow is 2. Note that it is impossible to make this distance 1, as there is no block of three consecutive unoccupied rooms.\nIn the second sample, Farmer John can book room 1 for himself and room 3 for his single cow. The distance between him and his cow is 2.\nIn the third sample, Farmer John books all three available rooms, taking the middle room for himself so that both cows are next to him. His distance from the farthest cow is 1.\n\ndef",
        "answer": "def min_distance(n, k, rooms):\n    # Write your code here\n    rooms = [int(i) for i in rooms]\n    rooms.sort()\n    max_distance = 0\n    for i in range(k + 1):\n        if i == 0:\n            max_distance = max(max_distance, abs(rooms[i] - 0))\n        else:\n            max_distance = max(max_distance, abs(rooms[i] - rooms[i - 1]))\n    return max_distance",
        "difficulty": "interview"
    },
    {
        "task_id": 1102,
        "prompt": "Complete the Python function given the prompt below:There are n cities in Bearland, numbered 1 through n. Cities are arranged in one long row. The distance between cities i and j is equal to |i - j|.\nLimak is a police officer. He lives in a city a. His job is to catch criminals. It's hard because he doesn't know in which cities criminals are. Though, he knows that there is at most one criminal in each city.\nLimak is going to use a BCD (Bear Criminal Detector). The BCD will tell Limak how many criminals there are for every distance from a city a. After that, Limak can catch a criminal in each city for which he is sure that there must be a criminal.\nYou know in which cities criminals are. Count the number of criminals Limak will catch, after he uses the BCD.\n-----Input-----\nThe first line of the input contains two integers n and a (1 \u2264 a \u2264 n \u2264 100)\u00a0\u2014 the number of cities and the index of city where Limak lives.\nThe second line contains n integers t_1, t_2,..., t_{n} (0 \u2264 t_{i} \u2264 1). There are t_{i} criminals in the i-th city.\n-----Output-----\nPrint the number of criminals Limak will catch.\n-----Examples-----\nInput\n6 3\n1 1 1 0 1 0\nOutput\n3\nInput\n5 2\n0 0 0 1 0\nOutput\n1\n-----Note-----\nIn the first sample, there are six cities and Limak lives in the third one (blue arrow below). Criminals are in cities marked red.\n [Image] \nUsing the BCD gives Limak the following information:\n  There is one criminal at distance 0 from the third city\u00a0\u2014 Limak is sure that this criminal is exactly in the third city.  There is one criminal at distance 1 from the third city\u00a0\u2014 Limak doesn't know if a criminal is in the second or fourth city.  There are two criminals at distance 2 from the third city\u00a0\u2014 Limak is sure that there is one criminal in the first city and one in the fifth city.  There are zero criminals for every greater distance. \nSo, Limak will catch criminals in cities 1, 3 and 5, that is 3 criminals in total.\nIn the second sample (drawing below), the BCD gives Limak the information that there is one criminal at distance 2 from Limak's city. There is only one city at distance 2 so Limak is sure where a criminal is.\n [Image]\n\ndef",
        "answer": "def BCD(n, a):\n    c = [0] * n\n    for i in range(n):\n        c[i] = t[i]\n    for i in range(n):\n        if c[i] == 1:\n            for j in range(n):\n                if abs(i - j) <= a:\n                    c[j] = 1\n    return sum(c)",
        "difficulty": "interview"
    },
    {
        "task_id": 1103,
        "prompt": "Complete the Python function given the prompt below:Vladik was bored on his way home and decided to play the following game. He took n cards and put them in a row in front of himself. Every card has a positive integer number not exceeding 8 written on it. He decided to find the longest subsequence of cards which satisfies the following conditions:\n  the number of occurrences of each number from 1 to 8 in the subsequence doesn't differ by more then 1 from the number of occurrences of any other number. Formally, if there are c_{k} cards with number k on them in the subsequence, than for all pairs of integers $i \\in [ 1,8 ], j \\in [ 1,8 ]$ the condition |c_{i} - c_{j}| \u2264 1 must hold.  if there is at least one card with number x on it in the subsequence, then all cards with number x in this subsequence must form a continuous segment in it (but not necessarily a continuous segment in the original sequence). For example, the subsequence [1, 1, 2, 2] satisfies this condition while the subsequence [1, 2, 2, 1] doesn't. Note that [1, 1, 2, 2] doesn't satisfy the first condition. \nPlease help Vladik to find the length of the longest subsequence that satisfies both conditions.\n-----Input-----\nThe first line contains single integer n (1 \u2264 n \u2264 1000)\u00a0\u2014 the number of cards in Vladik's sequence.\nThe second line contains the sequence of n positive integers not exceeding 8\u00a0\u2014 the description of Vladik's sequence.\n-----Output-----\nPrint single integer\u00a0\u2014 the length of the longest subsequence of Vladik's sequence that satisfies both conditions.\n-----Examples-----\nInput\n3\n1 1 1\nOutput\n1\nInput\n8\n8 7 6 5 4 3 2 1\nOutput\n8\nInput\n24\n1 8 1 2 8 2 3 8 3 4 8 4 5 8 5 6 8 6 7 8 7 8 8 8\nOutput\n17\n-----Note-----\nIn the first sample all the numbers written on the cards are equal, so you can't take more than one card, otherwise you'll violate the first condition.\n\ndef",
        "answer": "def longest_subsequence(n, seq):\n    count = [0] * 9\n    for i in seq:\n        count[i] += 1\n    max_count = 0\n    max_count_num = 0\n    for i in range(1, 9):\n        if count[i] > max_count:\n            max_count = count[i]\n            max_count_num = i\n    return max_count_num",
        "difficulty": "interview"
    },
    {
        "task_id": 1104,
        "prompt": "Complete the Python function given the prompt below:When Masha came to math classes today, she saw two integer sequences of length $n - 1$ on the blackboard. Let's denote the elements of the first sequence as $a_i$ ($0 \\le a_i \\le 3$), and the elements of the second sequence as $b_i$ ($0 \\le b_i \\le 3$).\nMasha became interested if or not there is an integer sequence of length $n$, which elements we will denote as $t_i$ ($0 \\le t_i \\le 3$), so that for every $i$ ($1 \\le i \\le n - 1$) the following is true:   $a_i = t_i | t_{i + 1}$ (where $|$ denotes the bitwise OR operation) and  $b_i = t_i \\& t_{i + 1}$ (where $\\&$ denotes the bitwise AND operation). \nThe question appeared to be too difficult for Masha, so now she asked you to check whether such a sequence $t_i$ of length $n$ exists. If it exists, find such a sequence. If there are multiple such sequences, find any of them.\n-----Input-----\nThe first line contains a single integer $n$ ($2 \\le n \\le 10^5$)\u00a0\u2014 the length of the sequence $t_i$. \nThe second line contains $n - 1$ integers $a_1, a_2, \\ldots, a_{n-1}$ ($0 \\le a_i \\le 3$)\u00a0\u2014 the first sequence on the blackboard.\nThe third line contains $n - 1$ integers $b_1, b_2, \\ldots, b_{n-1}$ ($0 \\le b_i \\le 3$)\u00a0\u2014 the second sequence on the blackboard.\n-----Output-----\nIn the first line print \"YES\" (without quotes), if there is a sequence $t_i$ that satisfies the conditions from the statements, and \"NO\" (without quotes), if there is no such sequence.\nIf there is such a sequence, on the second line print $n$ integers $t_1, t_2, \\ldots, t_n$ ($0 \\le t_i \\le 3$)\u00a0\u2014 the sequence that satisfies the statements conditions.\nIf there are multiple answers, print any of them.\n-----Examples-----\nInput\n4\n3 3 2\n1 2 0\nOutput\nYES\n1 3 2 0 \nInput\n3\n1 3\n3 2\nOutput\nNO\n-----Note-----\nIn the first example it's easy to see that the sequence from output satisfies the given conditions:   $t_1 | t_2 = (01_2) | (11_2) = (11_2) = 3 = a_1$ and $t_1 \\& t_2 = (01_2) \\& (11_2) = (01_2) = 1 = b_1$;  $t_2 | t_3 = (11_2) | (10_2) = (11_2) = 3 = a_2$ and $t_2 \\& t_3 = (11_2) \\& (10_2) = (10_2) = 2 = b_2$;  $t_3 | t_4 = (10_2) | (00_2) = (10_2) = 2 = a_3$ and $t_3 \\& t_4 = (10_2) \\& (00_2) = (00_2) = 0 = b_3$. \nIn the second example there is no such sequence.\n\ndef",
        "answer": "def sequence(a, b):\n    for i in range(len(a)):\n        if a[i] | b[i]!= b[i + 1] or a[i] & b[i]!= a[i + 1]:\n            return False\n    return True",
        "difficulty": "interview"
    },
    {
        "task_id": 1105,
        "prompt": "Complete the Python function given the prompt below:During the \"Russian Code Cup\" programming competition, the testing system stores all sent solutions for each participant. We know that many participants use random numbers in their programs and are often sent several solutions with the same source code to check.\nEach participant is identified by some unique positive integer k, and each sent solution A is characterized by two numbers: x\u00a0\u2014 the number of different solutions that are sent before the first solution identical to A, and k \u2014 the number of the participant, who is the author of the solution. Consequently, all identical solutions have the same x.\nIt is known that the data in the testing system are stored in the chronological order, that is, if the testing system has a solution with number x (x > 0) of the participant with number k, then the testing system has a solution with number x - 1 of the same participant stored somewhere before.\nDuring the competition the checking system crashed, but then the data of the submissions of all participants have been restored. Now the jury wants to verify that the recovered data is in chronological order. Help the jury to do so.\n-----Input-----\nThe first line of the input contains an integer n (1 \u2264 n \u2264 10^5)\u00a0\u2014 the number of solutions. Each of the following n lines contains two integers separated by space x and k (0 \u2264 x \u2264 10^5; 1 \u2264 k \u2264 10^5)\u00a0\u2014 the number of previous unique solutions and the identifier of the participant.\n-----Output-----\nA single line of the output should contain \u00abYES\u00bb if the data is in chronological order, and \u00abNO\u00bb otherwise.\n-----Examples-----\nInput\n2\n0 1\n1 1\nOutput\nYES\nInput\n4\n0 1\n1 2\n1 1\n0 2\nOutput\nNO\nInput\n4\n0 1\n1 1\n0 1\n0 2\nOutput\nYES\n\ndef",
        "answer": "def check(arr):\n    for i in range(len(arr)-1):\n        if arr[i][0] == arr[i+1][0]:\n            if arr[i][1] > arr[i+1][1]:\n                return False\n    return True",
        "difficulty": "interview"
    },
    {
        "task_id": 1106,
        "prompt": "Complete the Python function given the prompt below:Om Nom is the main character of a game \"Cut the Rope\". He is a bright little monster who likes visiting friends living at the other side of the park. However the dark old parks can scare even somebody as fearless as Om Nom, so he asks you to help him. [Image] \nThe park consists of 2^{n} + 1 - 1 squares connected by roads so that the scheme of the park is a full binary tree of depth n. More formally, the entrance to the park is located at the square 1. The exits out of the park are located at squares 2^{n}, 2^{n} + 1,..., 2^{n} + 1 - 1 and these exits lead straight to the Om Nom friends' houses. From each square i (2 \u2264 i < 2^{n} + 1) there is a road to the square $\\lfloor \\frac{i}{2} \\rfloor$. Thus, it is possible to go from the park entrance to each of the exits by walking along exactly n roads.  [Image]  To light the path roads in the evening, the park keeper installed street lights along each road. The road that leads from square i to square $\\lfloor \\frac{i}{2} \\rfloor$ has a_{i} lights.\nOm Nom loves counting lights on the way to his friend. Om Nom is afraid of spiders who live in the park, so he doesn't like to walk along roads that are not enough lit. What he wants is that the way to any of his friends should have in total the same number of lights. That will make him feel safe. \nHe asked you to help him install additional lights. Determine what minimum number of lights it is needed to additionally place on the park roads so that a path from the entrance to any exit of the park contains the same number of street lights. You may add an arbitrary number of street lights to each of the roads.\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 10) \u2014 the number of roads on the path from the entrance to any exit.\nThe next line contains 2^{n} + 1 - 2 numbers a_2, a_3,... a_2^{n} + 1 - 1 \u2014 the initial numbers of street lights on each road of the park. Here a_{i} is the number of street lights on the road between squares i and $\\lfloor \\frac{i}{2} \\rfloor$. All numbers a_{i} are positive integers, not exceeding 100.\n-----Output-----\nPrint the minimum number of street lights that we should add to the roads of the park to make Om Nom feel safe.\n-----Examples-----\nInput\n2\n1 2 3 4 5 6\nOutput\n5\n-----Note-----\nPicture for the sample test. Green color denotes the additional street lights. [Image]\n\ndef",
        "answer": "def lights(n, a):\n    return min(a)",
        "difficulty": "interview"
    },
    {
        "task_id": 1107,
        "prompt": "Complete the Python function given the prompt below:Everybody knows that the Berland citizens are keen on health, especially students. Berland students are so tough that all they drink is orange juice!\nYesterday one student, Vasya and his mates made some barbecue and they drank this healthy drink only. After they ran out of the first barrel of juice, they decided to play a simple game. All n people who came to the barbecue sat in a circle (thus each person received a unique index b_{i} from 0 to n - 1). The person number 0 started the game (this time it was Vasya). All turns in the game were numbered by integers starting from 1. If the j-th turn was made by the person with index b_{i}, then this person acted like that:  he pointed at the person with index (b_{i} + 1)\u00a0mod\u00a0n either with an elbow or with a nod (x\u00a0mod\u00a0y is the remainder after dividing x by y);  if j \u2265 4 and the players who had turns number j - 1, j - 2, j - 3, made during their turns the same moves as player b_{i} on the current turn, then he had drunk a glass of juice;  the turn went to person number (b_{i} + 1)\u00a0mod\u00a0n. \nThe person who was pointed on the last turn did not make any actions.\nThe problem was, Vasya's drunk too much juice and can't remember the goal of the game. However, Vasya's got the recorded sequence of all the participants' actions (including himself). Now Vasya wants to find out the maximum amount of juice he could drink if he played optimally well (the other players' actions do not change). Help him.\nYou can assume that in any scenario, there is enough juice for everybody.\n-----Input-----\nThe first line contains a single integer n (4 \u2264 n \u2264 2000) \u2014 the number of participants in the game. The second line describes the actual game: the i-th character of this line equals 'a', if the participant who moved i-th pointed at the next person with his elbow, and 'b', if the participant pointed with a nod. The game continued for at least 1 and at most 2000 turns. \n-----Output-----\nPrint a single integer \u2014 the number of glasses of juice Vasya could have drunk if he had played optimally well.\n-----Examples-----\nInput\n4\nabbba\nOutput\n1\nInput\n4\nabbab\nOutput\n0\n-----Note-----\nIn both samples Vasya has got two turns \u2014 1 and 5. In the first sample, Vasya could have drunk a glass of juice during the fifth turn if he had pointed at the next person with a nod. In this case, the sequence of moves would look like \"abbbb\". In the second sample Vasya wouldn't drink a single glass of juice as the moves performed during turns 3 and 4 are different.\n\ndef",
        "answer": "def Berland_game(n, s):\n    s = s.replace('a', '1')\n    s = s.replace('b', '0')\n    s = s.replace('1', 'a')\n    s = s.replace('0', 'b')\n    s = s.replace('1', 'a')\n    s = s.replace('0', 'b')\n    s = s.replace('1', 'a')\n    s = s.replace('0', 'b')\n    s = s.replace('1', 'a')\n    s = s.replace('0', 'b')\n    s = s.replace('1', 'a')\n    s = s.replace('0', 'b')\n    s = s.replace('1', 'a')\n    s = s.replace('0', 'b')\n    s = s.replace('1', 'a')\n    s = s.replace('0', 'b')\n    s = s.replace('1', 'a')\n    s = s.replace('0', 'b')\n    s = s.replace('1', 'a')\n    s = s.replace('0', 'b')\n    s = s.replace('1', 'a')\n    s = s.replace('0', 'b')\n    s = s.replace('1', 'a')\n    s = s.replace('0', 'b')\n    s = s.replace('1', 'a')\n    s = s.replace('0', 'b')\n    s = s.replace('1', 'a')\n    s = s.replace('0', 'b')\n    s = s.replace('1', 'a')\n    s = s.replace('0', 'b')\n",
        "difficulty": "interview"
    },
    {
        "task_id": 1108,
        "prompt": "Complete the Python function given the prompt below:George has recently entered the BSUCP (Berland State University for Cool Programmers). George has a friend Alex who has also entered the university. Now they are moving into a dormitory. \nGeorge and Alex want to live in the same room. The dormitory has n rooms in total. At the moment the i-th room has p_{i} people living in it and the room can accommodate q_{i} people in total (p_{i} \u2264 q_{i}). Your task is to count how many rooms has free place for both George and Alex.\n-----Input-----\nThe first line contains a single integer n (1 \u2264 n \u2264 100) \u2014 the number of rooms.\nThe i-th of the next n lines contains two integers p_{i} and q_{i} (0 \u2264 p_{i} \u2264 q_{i} \u2264 100) \u2014 the number of people who already live in the i-th room and the room's capacity.\n-----Output-----\nPrint a single integer \u2014 the number of rooms where George and Alex can move in.\n-----Examples-----\nInput\n3\n1 1\n2 2\n3 3\nOutput\n0\nInput\n3\n1 10\n0 10\n10 10\nOutput\n2\n\ndef",
        "answer": "def room_for_two(n, p, q):\n    count = 0\n    for i in range(n):\n        if p[i] + q[i] <= 10:\n            count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 1109,
        "prompt": "Complete the Python function given the prompt below:This task will exclusively concentrate only on the arrays where all elements equal 1 and/or 2.\nArray a is k-period if its length is divisible by k and there is such array b of length k, that a is represented by array b written exactly $\\frac{n}{k}$ times consecutively. In other words, array a is k-periodic, if it has period of length k.\nFor example, any array is n-periodic, where n is the array length. Array [2, 1, 2, 1, 2, 1] is at the same time 2-periodic and 6-periodic and array [1, 2, 1, 1, 2, 1, 1, 2, 1] is at the same time 3-periodic and 9-periodic.\nFor the given array a, consisting only of numbers one and two, find the minimum number of elements to change to make the array k-periodic. If the array already is k-periodic, then the required value equals 0.\n-----Input-----\nThe first line of the input contains a pair of integers n, k (1 \u2264 k \u2264 n \u2264 100), where n is the length of the array and the value n is divisible by k. The second line contains the sequence of elements of the given array a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 2), a_{i} is the i-th element of the array.\n-----Output-----\nPrint the minimum number of array elements we need to change to make the array k-periodic. If the array already is k-periodic, then print 0.\n-----Examples-----\nInput\n6 2\n2 1 2 2 2 1\nOutput\n1\nInput\n8 4\n1 1 2 1 1 1 2 1\nOutput\n0\nInput\n9 3\n2 1 1 1 2 1 1 1 2\nOutput\n3\n-----Note-----\nIn the first sample it is enough to change the fourth element from 2 to 1, then the array changes to [2, 1, 2, 1, 2, 1].\nIn the second sample, the given array already is 4-periodic.\nIn the third sample it is enough to replace each occurrence of number two by number one. In this case the array will look as [1, 1, 1, 1, 1, 1, 1, 1, 1] \u2014 this array is simultaneously 1-, 3- and 9-periodic.\n\ndef",
        "answer": "def k_periodic(a, k):\n    n = len(a)\n    count = 0\n    for i in range(n):\n        if a[i] == 1:\n            count += 1\n        if a[i] == 2:\n            count += 1\n            if count % k!= 0:\n                return -1\n    return count // k",
        "difficulty": "interview"
    },
    {
        "task_id": 1110,
        "prompt": "Complete the Python function given the prompt below:Manao is trying to open a rather challenging lock. The lock has n buttons on it and to open it, you should press the buttons in a certain order to open the lock. When you push some button, it either stays pressed into the lock (that means that you've guessed correctly and pushed the button that goes next in the sequence), or all pressed buttons return to the initial position. When all buttons are pressed into the lock at once, the lock opens.\nConsider an example with three buttons. Let's say that the opening sequence is: {2, 3, 1}. If you first press buttons 1 or 3, the buttons unpress immediately. If you first press button 2, it stays pressed. If you press 1 after 2, all buttons unpress. If you press 3 after 2, buttons 3 and 2 stay pressed. As soon as you've got two pressed buttons, you only need to press button 1 to open the lock.\nManao doesn't know the opening sequence. But he is really smart and he is going to act in the optimal way. Calculate the number of times he's got to push a button in order to open the lock in the worst-case scenario.\n-----Input-----\nA single line contains integer n (1 \u2264 n \u2264 2000) \u2014 the number of buttons the lock has.\n-----Output-----\nIn a single line print the number of times Manao has to push a button in the worst-case scenario.\n-----Examples-----\nInput\n2\nOutput\n3\nInput\n3\nOutput\n7\n-----Note-----\nConsider the first test sample. Manao can fail his first push and push the wrong button. In this case he will already be able to guess the right one with his second push. And his third push will push the second right button. Thus, in the worst-case scenario he will only need 3 pushes.\n\ndef",
        "answer": "def lock(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    return lock(n-1) + lock(n-2) + lock(n-3)",
        "difficulty": "interview"
    },
    {
        "task_id": 1111,
        "prompt": "Complete the Python function given the prompt below:You are given a set of n elements indexed from 1 to n. The weight of i-th element is w_{i}. The weight of some subset of a given set is denoted as $W(S) =|S|\\cdot \\sum_{i \\in S} w_{i}$. The weight of some partition R of a given set into k subsets is $W(R) = \\sum_{S \\in R} W(S)$ (recall that a partition of a given set is a set of its subsets such that every element of the given set belongs to exactly one subset in partition).\nCalculate the sum of weights of all partitions of a given set into exactly k non-empty subsets, and print it modulo 10^9 + 7. Two partitions are considered different iff there exist two elements x and y such that they belong to the same set in one of the partitions, and to different sets in another partition.\n-----Input-----\nThe first line contains two integers n and k (1 \u2264 k \u2264 n \u2264 2\u00b710^5) \u2014 the number of elements and the number of subsets in each partition, respectively.\nThe second line contains n integers w_{i} (1 \u2264 w_{i} \u2264 10^9)\u2014 weights of elements of the set.\n-----Output-----\nPrint one integer \u2014 the sum of weights of all partitions of a given set into k non-empty subsets, taken modulo 10^9 + 7.\n-----Examples-----\nInput\n4 2\n2 3 2 3\nOutput\n160\nInput\n5 2\n1 2 3 4 5\nOutput\n645\n-----Note-----\nPossible partitions in the first sample:  {{1, 2, 3}, {4}}, W(R) = 3\u00b7(w_1 + w_2 + w_3) + 1\u00b7w_4 = 24;  {{1, 2, 4}, {3}}, W(R) = 26;  {{1, 3, 4}, {2}}, W(R) = 24;  {{1, 2}, {3, 4}}, W(R) = 2\u00b7(w_1 + w_2) + 2\u00b7(w_3 + w_4) = 20;  {{1, 3}, {2, 4}}, W(R) = 20;  {{1, 4}, {2, 3}}, W(R) = 20;  {{1}, {2, 3, 4}}, W(R) = 26; \nPossible partitions in the second sample:  {{1, 2, 3, 4}, {5}}, W(R) = 45;  {{1, 2, 3, 5}, {4}}, W(R) = 48;  {{1, 2, 4, 5}, {3}}, W(R) = 51;  {{1, 3, 4, 5}, {2}}, W(R) = 54;  {{2, 3, 4, 5}, {1}}, W(R) = 57;  {{1, 2, 3}, {4, 5}}, W(R) = 36;  {{1, 2, 4}, {3, 5}}, W(R) = 37;  {{1, 2, 5}, {3, 4}}, W(R) = 38;  {{1, 3, 4}, {2, 5}}, W(R) = 38;  {{1, 3, 5}, {2, 4}}, W(R) = 39;  {{1, 4, 5}, {2, 3}}, W(R) = 40;  {{2, 3, 4}, {1, 5}}, W(R) = 39;  {{2, 3, 5}, {1, 4}}, W(R) = 40;  {{2, 4, 5}, {1, 3}}, W(R) = 41;  {{3, 4, 5}, {1, 2}}, W(R) = 42.\n\ndef",
        "answer": "def partition(arr, n, k):\n    dp = [[0 for i in range(k+1)] for j in range(n+1)]\n    for i in range(n+1):\n        dp[i][1] = 1\n    for i in range(1, n+1):\n        for j in range(2, k+1):\n            for x in range(i):\n                dp[i][j] += dp[x][j-1]\n            dp[i][j] %= (10**9 + 7)\n    return dp[n][k]",
        "difficulty": "interview"
    },
    {
        "task_id": 1112,
        "prompt": "Complete the Python function given the prompt below:Little Elephant loves magic squares very much.\nA magic square is a 3 \u00d7 3 table, each cell contains some positive integer. At that the sums of integers in all rows, columns and diagonals of the table are equal. The figure below shows the magic square, the sum of integers in all its rows, columns and diagonals equals 15. $\\left. \\begin{array}{|c|c|c|} \\hline 4 & {9} & {2} \\\\ \\hline 3 & {5} & {7} \\\\ \\hline 8 & {1} & {6} \\\\ \\hline \\end{array} \\right.$ \nThe Little Elephant remembered one magic square. He started writing this square on a piece of paper, but as he wrote, he forgot all three elements of the main diagonal of the magic square. Fortunately, the Little Elephant clearly remembered that all elements of the magic square did not exceed 10^5. \nHelp the Little Elephant, restore the original magic square, given the Elephant's notes.\n-----Input-----\nThe first three lines of the input contain the Little Elephant's notes. The first line contains elements of the first row of the magic square. The second line contains the elements of the second row, the third line is for the third row. The main diagonal elements that have been forgotten by the Elephant are represented by zeroes.\nIt is guaranteed that the notes contain exactly three zeroes and they are all located on the main diagonal. It is guaranteed that all positive numbers in the table do not exceed 10^5.\n-----Output-----\nPrint three lines, in each line print three integers \u2014 the Little Elephant's magic square. If there are multiple magic squares, you are allowed to print any of them. Note that all numbers you print must be positive and not exceed 10^5.\nIt is guaranteed that there exists at least one magic square that meets the conditions.\n-----Examples-----\nInput\n0 1 1\n1 0 1\n1 1 0\nOutput\n1 1 1\n1 1 1\n1 1 1\nInput\n0 3 6\n5 0 5\n4 7 0\nOutput\n6 3 6\n5 5 5\n4 7 4\n\ndef",
        "answer": "def magic_square(nums):\n    nums = [int(i) for i in nums]\n    nums = [nums[i:i+3] for i in range(0, len(nums), 3)]\n    nums = [sum(i) for i in nums]\n    nums = [nums[i:i+3] for i in range(0, len(nums), 3)]\n    nums = [sum(i) for i in nums]\n    return nums",
        "difficulty": "interview"
    },
    {
        "task_id": 1113,
        "prompt": "Complete the Python function given the prompt below:Initially Ildar has an empty array. He performs $n$ steps. On each step he takes a subset of integers already added to the array and appends the mex of this subset to the array. \nThe mex of an multiset of integers is the smallest non-negative integer not presented in the multiset. For example, the mex of the multiset $[0, 2, 3]$ is $1$, while the mex of the multiset $[1, 2, 1]$ is $0$.\nMore formally, on the step $m$, when Ildar already has an array $a_1, a_2, \\ldots, a_{m-1}$, he chooses some subset of indices $1 \\leq i_1 < i_2 < \\ldots < i_k < m$ (possibly, empty), where $0 \\leq k < m$, and appends the $mex(a_{i_1}, a_{i_2}, \\ldots a_{i_k})$ to the end of the array.\nAfter performing all the steps Ildar thinks that he might have made a mistake somewhere. He asks you to determine for a given array $a_1, a_2, \\ldots, a_n$ the minimum step $t$ such that he has definitely made a mistake on at least one of the steps $1, 2, \\ldots, t$, or determine that he could have obtained this array without mistakes.\n-----Input-----\nThe first line contains a single integer $n$ ($1 \\leq n \\leq 100\\,000$)\u00a0\u2014 the number of steps Ildar made.\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\leq a_i \\leq 10^9$)\u00a0\u2014 the array Ildar obtained.\n-----Output-----\nIf Ildar could have chosen the subsets on each step in such a way that the resulting array is $a_1, a_2, \\ldots, a_n$, print $-1$.\nOtherwise print a single integer $t$\u00a0\u2014 the smallest index of a step such that a mistake was made on at least one step among steps $1, 2, \\ldots, t$.\n-----Examples-----\nInput\n4\n0 1 2 1\nOutput\n-1\nInput\n3\n1 0 1\nOutput\n1\nInput\n4\n0 1 2 239\nOutput\n4\n-----Note-----\nIn the first example it is possible that Ildar made no mistakes. Here is the process he could have followed.  $1$-st step. The initial array is empty. He can choose an empty subset and obtain $0$, because the mex of an empty set is $0$. Appending this value to the end he gets the array $[0]$.  $2$-nd step. The current array is $[0]$. He can choose a subset $[0]$ and obtain an integer $1$, because $mex(0) = 1$. Appending this value to the end he gets the array $[0,1]$.  $3$-rd step. The current array is $[0,1]$. He can choose a subset $[0,1]$ and obtain an integer $2$, because $mex(0,1) = 2$. Appending this value to the end he gets the array $[0,1,2]$.  $4$-th step. The current array is $[0,1,2]$. He can choose a subset $[0]$ and obtain an integer $1$, because $mex(0) = 1$. Appending this value to the end he gets the array $[0,1,2,1]$. \nThus, he can get the array without mistakes, so the answer is $-1$.\nIn the second example he has definitely made a mistake on the very first step, because he could not have obtained anything different from $0$.\nIn the third example he could have obtained $[0, 1, 2]$ without mistakes, but $239$ is definitely wrong.\n\ndef",
        "answer": "def mex(arr):\n    arr.sort()\n    for i in range(len(arr)):\n        if arr[i]!= i:\n            return i\n    return len(arr)",
        "difficulty": "interview"
    },
    {
        "task_id": 1114,
        "prompt": "Complete the Python function given the prompt below:While Patrick was gone shopping, Spongebob decided to play a little trick on his friend. The naughty Sponge browsed through Patrick's personal stuff and found a sequence a_1, a_2,..., a_{m} of length m, consisting of integers from 1 to n, not necessarily distinct. Then he picked some sequence f_1, f_2,..., f_{n} of length n and for each number a_{i} got number b_{i} = f_{a}_{i}. To finish the prank he erased the initial sequence a_{i}.\nIt's hard to express how sad Patrick was when he returned home from shopping! We will just say that Spongebob immediately got really sorry about what he has done and he is now trying to restore the original sequence. Help him do this or determine that this is impossible.\n-----Input-----\nThe first line of the input contains two integers n and m (1 \u2264 n, m \u2264 100 000)\u00a0\u2014 the lengths of sequences f_{i} and b_{i} respectively.\nThe second line contains n integers, determining sequence f_1, f_2,..., f_{n} (1 \u2264 f_{i} \u2264 n).\nThe last line contains m integers, determining sequence b_1, b_2,..., b_{m} (1 \u2264 b_{i} \u2264 n).\n-----Output-----\nPrint \"Possible\" if there is exactly one sequence a_{i}, such that b_{i} = f_{a}_{i} for all i from 1 to m. Then print m integers a_1, a_2,..., a_{m}.\nIf there are multiple suitable sequences a_{i}, print \"Ambiguity\".\nIf Spongebob has made a mistake in his calculations and no suitable sequence a_{i} exists, print \"Impossible\".\n-----Examples-----\nInput\n3 3\n3 2 1\n1 2 3\nOutput\nPossible\n3 2 1 \nInput\n3 3\n1 1 1\n1 1 1\nOutput\nAmbiguity\nInput\n3 3\n1 2 1\n3 3 3\nOutput\nImpossible\n-----Note-----\nIn the first sample 3 is replaced by 1 and vice versa, while 2 never changes. The answer exists and is unique.\nIn the second sample all numbers are replaced by 1, so it is impossible to unambiguously restore the original sequence.\nIn the third sample f_{i} \u2260 3 for all i, so no sequence a_{i} transforms into such b_{i} and we can say for sure that Spongebob has made a mistake.\n\ndef",
        "answer": "def main():\n    n, m = map(int, input().split())\n    f = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    if len(set(f))!= n or len(set(b))!= m:\n        print('Impossible')\n    else:\n        for i in range(n):\n            if f[i]!= b[i]:\n                print('Impossible')\n                return\n        print('Possible')\n        print(*b)",
        "difficulty": "interview"
    },
    {
        "task_id": 1115,
        "prompt": "Complete the Python function given the prompt below:Pasha is participating in a contest on one well-known website. This time he wants to win the contest and will do anything to get to the first place!\nThis contest consists of n problems, and Pasha solves ith problem in a_{i} time units (his solutions are always correct). At any moment of time he can be thinking about a solution to only one of the problems (that is, he cannot be solving two problems at the same time). The time Pasha spends to send his solutions is negligible. Pasha can send any number of solutions at the same moment.\nUnfortunately, there are too many participants, and the website is not always working. Pasha received the information that the website will be working only during m time periods, jth period is represented by its starting moment l_{j} and ending moment r_{j}. Of course, Pasha can send his solution only when the website is working. In other words, Pasha can send his solution at some moment T iff there exists a period x such that l_{x} \u2264 T \u2264 r_{x}.\nPasha wants to know his best possible result. We need to tell him the minimal moment of time by which he is able to have solutions to all problems submitted, if he acts optimally, or say that it's impossible no matter how Pasha solves the problems.\n-----Input-----\nThe first line contains one integer n\u00a0(1 \u2264 n \u2264 1000) \u2014 the number of problems. The second line contains n integers a_{i}\u00a0(1 \u2264 a_{i} \u2264 10^5) \u2014 the time Pasha needs to solve ith problem.\nThe third line contains one integer m\u00a0(0 \u2264 m \u2264 1000) \u2014 the number of periods of time when the website is working. Next m lines represent these periods. jth line contains two numbers l_{j} and r_{j}\u00a0(1 \u2264 l_{j} < r_{j} \u2264 10^5) \u2014 the starting and the ending moment of jth period.\nIt is guaranteed that the periods are not intersecting and are given in chronological order, so for every j > 1 the condition l_{j} > r_{j} - 1 is met.\n-----Output-----\nIf Pasha can solve and submit all the problems before the end of the contest, print the minimal moment of time by which he can have all the solutions submitted.\nOtherwise print \"-1\" (without brackets).\n-----Examples-----\nInput\n2\n3 4\n2\n1 4\n7 9\nOutput\n7\nInput\n1\n5\n1\n1 4\nOutput\n-1\nInput\n1\n5\n1\n1 5\nOutput\n5\n-----Note-----\nIn the first example Pasha can act like this: he solves the second problem in 4 units of time and sends it immediately. Then he spends 3 time units to solve the first problem and sends it 7 time units after the contest starts, because at this moment the website starts working again.\nIn the second example Pasha invents the solution only after the website stops working for the last time.\nIn the third example Pasha sends the solution exactly at the end of the first period.\n\ndef",
        "answer": "def best_time_to_buy_and_sell_stock(prices):\n    min_price_so_far, max_profit = float('inf'), 0.0\n    for price in prices:\n        max_profit_sell_today = price - min_price_so_far\n        max_profit = max(max_profit, max_profit_sell_today)\n        min_price_so_far = min(min_price_so_far, price)\n    return max_profit",
        "difficulty": "interview"
    },
    {
        "task_id": 1116,
        "prompt": "Complete the Python function given the prompt below:You are a rebel leader and you are planning to start a revolution in your country. But the evil Government found out about your plans and set your punishment in the form of correctional labor.\nYou must paint a fence which consists of $10^{100}$ planks in two colors in the following way (suppose planks are numbered from left to right from $0$):   if the index of the plank is divisible by $r$ (such planks have indices $0$, $r$, $2r$ and so on) then you must paint it red;  if the index of the plank is divisible by $b$ (such planks have indices $0$, $b$, $2b$ and so on) then you must paint it blue;  if the index is divisible both by $r$ and $b$ you can choose the color to paint the plank;  otherwise, you don't need to paint the plank at all (and it is forbidden to spent paint on it). \nFurthermore, the Government added one additional restriction to make your punishment worse. Let's list all painted planks of the fence in ascending order: if there are $k$ consecutive planks with the same color in this list, then the Government will state that you failed the labor and execute you immediately. If you don't paint the fence according to the four aforementioned conditions, you will also be executed.\nThe question is: will you be able to accomplish the labor (the time is not important) or the execution is unavoidable and you need to escape at all costs.\n-----Input-----\nThe first line contains single integer $T$ ($1 \\le T \\le 1000$) \u2014 the number of test cases.\nThe next $T$ lines contain descriptions of test cases \u2014 one per line. Each test case contains three integers $r$, $b$, $k$ ($1 \\le r, b \\le 10^9$, $2 \\le k \\le 10^9$) \u2014 the corresponding coefficients.\n-----Output-----\nPrint $T$ words \u2014 one per line. For each test case print REBEL (case insensitive) if the execution is unavoidable or OBEY (case insensitive) otherwise.\n-----Example-----\nInput\n4\n1 1 2\n2 10 4\n5 2 3\n3 2 2\nOutput\nOBEY\nREBEL\nOBEY\nOBEY\n\ndef",
        "answer": "def fence(r, b, k):\n    if k == 0:\n        return 0\n    if r == b:\n        return r\n    if r == 0:\n        return b\n    if r == 1:\n        return k\n    if b == 1:\n        return k\n    if k == 1:\n        return r\n    if k == 2:\n        return r\n    if k == 3:\n        return r\n    if k == 4:\n        return r\n    if k == 5:\n        return r\n    if k == 6:\n        return r\n    if k == 7:\n        return r\n    if k == 8:\n        return r\n    if k == 9:\n        return r\n    if k == 10:\n        return r\n    if k == 11:\n        return r\n    if k == 12:\n        return r\n    if k == 13:\n        return r\n    if k == 14:\n        return r\n    if k == 15:\n        return r\n    if k == 16:\n        return r\n    if k == 17:\n        return r\n    if k == 18:\n        return r\n    if k == 19:\n        return r\n    if k == 20:\n        return r\n    if k == 21:\n        return r\n    if k == 22:\n        return r\n    if k == 23:\n        return r\n    if k == 24:\n        return r\n    if k == 25:\n        return r\n    if k == 26:\n        return r\n    if k == 27:\n        return r\n    if k == 28:\n        return r\n    if k == 29:\n        return r\n    if k == 30:\n        return r\n    if k == 31:",
        "difficulty": "interview"
    },
    {
        "task_id": 1117,
        "prompt": "Complete the Python function given the prompt below:There are $n$ rectangles in a row. You can either turn each rectangle by $90$ degrees or leave it as it is. If you turn a rectangle, its width will be height, and its height will be width. Notice that you can turn any number of rectangles, you also can turn all or none of them. You can not change the order of the rectangles.\nFind out if there is a way to make the rectangles go in order of non-ascending height. In other words, after all the turns, a height of every rectangle has to be not greater than the height of the previous rectangle (if it is such). \n-----Input-----\nThe first line contains a single integer $n$ ($1 \\leq n \\leq 10^5$)\u00a0\u2014 the number of rectangles.\nEach of the next $n$ lines contains two integers $w_i$ and $h_i$ ($1 \\leq w_i, h_i \\leq 10^9$)\u00a0\u2014 the width and the height of the $i$-th rectangle.\n-----Output-----\nPrint \"YES\" (without quotes) if there is a way to make the rectangles go in order of non-ascending height, otherwise print \"NO\".\nYou can print each letter in any case (upper or lower).\n-----Examples-----\nInput\n3\n3 4\n4 6\n3 5\nOutput\nYES\nInput\n2\n3 4\n5 5\nOutput\nNO\n-----Note-----\nIn the first test, you can rotate the second and the third rectangles so that the heights will be [4, 4, 3].\nIn the second test, there is no way the second rectangle will be not higher than the first one.\n\ndef",
        "answer": "def check(lst):\n    for i in range(len(lst)-1):\n        if lst[i]>lst[i+1]:\n            return False\n    return True",
        "difficulty": "interview"
    },
    {
        "task_id": 1118,
        "prompt": "Complete the Python function given the prompt below:You are given a line of $n$ colored squares in a row, numbered from $1$ to $n$ from left to right. The $i$-th square initially has the color $c_i$.\nLet's say, that two squares $i$ and $j$ belong to the same connected component if $c_i = c_j$, and $c_i = c_k$ for all $k$ satisfying $i < k < j$. In other words, all squares on the segment from $i$ to $j$ should have the same color.\nFor example, the line $[3, 3, 3]$ has $1$ connected component, while the line $[5, 2, 4, 4]$ has $3$ connected components.\nThe game \"flood fill\" is played on the given line as follows:   At the start of the game you pick any starting square (this is not counted as a turn).  Then, in each game turn, change the color of the connected component containing the starting square to any other color. \nFind the minimum number of turns needed for the entire line to be changed into a single color.\n-----Input-----\nThe first line contains a single integer $n$ ($1 \\le n \\le 5000$)\u00a0\u2014 the number of squares.\nThe second line contains integers $c_1, c_2, \\ldots, c_n$ ($1 \\le c_i \\le 5000$)\u00a0\u2014 the initial colors of the squares.\n-----Output-----\nPrint a single integer\u00a0\u2014 the minimum number of the turns needed.\n-----Examples-----\nInput\n4\n5 2 2 1\nOutput\n2\nInput\n8\n4 5 2 2 1 3 5 5\nOutput\n4\nInput\n1\n4\nOutput\n0\n-----Note-----\nIn the first example, a possible way to achieve an optimal answer is to pick square with index $2$ as the starting square and then play as follows:  $[5, 2, 2, 1]$  $[5, 5, 5, 1]$  $[1, 1, 1, 1]$ \nIn the second example, a possible way to achieve an optimal answer is to pick square with index $5$ as the starting square and then perform recoloring into colors $2, 3, 5, 4$ in that order.\nIn the third example, the line already consists of one color only.\n\ndef",
        "answer": "def flood_fill(line):\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 1119,
        "prompt": "Complete the Python function given the prompt below:You are given three integers k, p_{a} and p_{b}.\nYou will construct a sequence with the following algorithm: Initially, start with the empty sequence. Each second, you do the following. With probability p_{a} / (p_{a} + p_{b}), add 'a' to the end of the sequence. Otherwise (with probability p_{b} / (p_{a} + p_{b})), add 'b' to the end of the sequence.\nYou stop once there are at least k subsequences that form 'ab'. Determine the expected number of times 'ab' is a subsequence in the resulting sequence. It can be shown that this can be represented by P / Q, where P and Q are coprime integers, and $Q \\neq 0 \\operatorname{mod}(10^{9} + 7)$. Print the value of $P \\cdot Q^{-1} \\operatorname{mod}(10^{9} + 7)$.\n-----Input-----\nThe first line will contain three integers integer k, p_{a}, p_{b} (1 \u2264 k \u2264 1 000, 1 \u2264 p_{a}, p_{b} \u2264 1 000 000).\n-----Output-----\nPrint a single integer, the answer to the problem.\n-----Examples-----\nInput\n1 1 1\nOutput\n2\nInput\n3 1 4\nOutput\n370000006\n-----Note-----\nThe first sample, we will keep appending to our sequence until we get the subsequence 'ab' at least once. For instance, we get the sequence 'ab' with probability 1/4, 'bbab' with probability 1/16, and 'aab' with probability 1/8. Note, it's impossible for us to end with a sequence like 'aabab', since we would have stopped our algorithm once we had the prefix 'aab'. \nThe expected amount of times that 'ab' will occur across all valid sequences is 2. \nFor the second sample, the answer is equal to $\\frac{341}{100}$.\n\ndef",
        "answer": "def compute_probability(k, p_a, p_b):\n    p = p_a / (p_a + p_b)\n    q = 1 - p\n    return p * q ** k",
        "difficulty": "interview"
    },
    {
        "task_id": 1120,
        "prompt": "Complete the Python function given the prompt below:Yet another Armageddon is coming! This time the culprit is the Julya tribe calendar. \nThe beavers in this tribe knew math very well. Smart Beaver, an archaeologist, got a sacred plate with a magic integer on it. The translation from Old Beaverish is as follows: \n\"May the Great Beaver bless you! May your chacres open and may your third eye never turn blind from beholding the Truth! Take the magic number, subtract a digit from it (the digit must occur in the number) and get a new magic number. Repeat this operation until a magic number equals zero. The Earth will stand on Three Beavers for the time, equal to the number of subtractions you perform!\"\nDistinct subtraction sequences can obviously get you different number of operations. But the Smart Beaver is ready to face the worst and is asking you to count the minimum number of operations he needs to reduce the magic number to zero.\n-----Input-----\nThe single line contains the magic integer n, 0 \u2264 n.\n  to get 20 points, you need to solve the problem with constraints: n \u2264 10^6 (subproblem C1);  to get 40 points, you need to solve the problem with constraints: n \u2264 10^12 (subproblems C1+C2);  to get 100 points, you need to solve the problem with constraints: n \u2264 10^18 (subproblems C1+C2+C3). \n-----Output-----\nPrint a single integer \u2014 the minimum number of subtractions that turns the magic number to a zero.\n-----Examples-----\nInput\n24\nOutput\n5\n-----Note-----\nIn the first test sample the minimum number of operations can be reached by the following sequence of subtractions: \n 24 \u2192 20 \u2192 18 \u2192 10 \u2192 9 \u2192 0\n\ndef",
        "answer": "def subtract(n):\n    count = 0\n    while n > 0:\n        n -= 1\n        count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 1121,
        "prompt": "Complete the Python function given the prompt below:You have an n \u00d7 m rectangle table, its cells are not initially painted. Your task is to paint all cells of the table. The resulting picture should be a tiling of the table with squares. More formally:  each cell must be painted some color (the colors are marked by uppercase Latin letters);  we will assume that two cells of the table are connected if they are of the same color and share a side; each connected region of the table must form a square. \nGiven n and m, find lexicographically minimum coloring of the table that meets the described properties.\n-----Input-----\nThe first line contains two integers, n and m (1 \u2264 n, m \u2264 100).\n-----Output-----\nPrint lexicographically minimum coloring of the table that meets the described conditions. \nOne coloring (let's call it X) is considered lexicographically less than the other one (let's call it Y), if:  consider all the table cells from left to right and from top to bottom (first, the first cell in the first row, then the second cell in the first row and so on);  let's find in this order the first cell that has distinct colors in two colorings;  the letter that marks the color of the cell in X, goes alphabetically before the letter that marks the color of the cell in Y. \n-----Examples-----\nInput\n1 3\nOutput\nABA\nInput\n2 2\nOutput\nAA\nAA\nInput\n3 4\nOutput\nAAAB\nAAAC\nAAAB\n\ndef",
        "answer": "def table(n, m):\n    if n == 1:\n        return 'A'\n    if m == 1:\n        return 'A' * n\n    if n == 2:\n        return 'AA'\n    if m == 2:\n        return 'AA' * n\n    if n == 3:\n        return 'AAA'\n    if m == 3:\n        return 'AAA' * n\n    if n == 4:\n        return 'AAAA'\n    if m == 4:\n        return 'AAAA' * n\n    if n == 5:\n        return 'AAAAA'\n    if m == 5:\n        return 'AAAAA' * n\n    if n == 6:\n        return 'AAAAAA'\n    if m == 6:\n        return 'AAAAAA' * n\n    if n == 7:\n        return 'AAAAAAA'\n    if m == 7:\n        return 'AAAAAAA' * n\n    if n == 8:\n        return 'AAAAAAAB'\n    if m == 8:\n        return 'AAAAAAAB' * n\n    if n == 9:\n        return 'AAAAAAABC'\n    if m == 9:\n        return 'AAAAAAABC' * n\n    if n == 10:\n        return 'AAAAAAABCD'\n    if m == 10:\n        return 'AAAAAAABCD' * n\n    if n == 11:\n        return 'AAAAAAABCDE'\n    if m == 11:\n        return 'AAAAAAABCDE' * n\n    if n == 12:\n        return 'AAAAAAABCDEF'\n    if m == 12:\n        return 'AAAAAAABCDEF' * n\n    if n == 13:\n        return 'AAAAAAABCDEFGH'\n    if m == 13:\n        ",
        "difficulty": "interview"
    },
    {
        "task_id": 1122,
        "prompt": "Complete the Python function given the prompt below:You are going to hold a competition of one-to-one game called AtCoder Janken. (Janken is the Japanese name for Rock-paper-scissors.)N players will participate in this competition, and they are given distinct integers from 1 through N.\nThe arena has M playing fields for two players. You need to assign each playing field two distinct integers between 1 and N (inclusive).\nYou cannot assign the same integer to multiple playing fields.\nThe competition consists of N rounds, each of which proceeds as follows:\n - For each player, if there is a playing field that is assigned the player's integer, the player goes to that field and fight the other player who comes there.\n - Then, each player adds 1 to its integer. If it becomes N+1, change it to 1.\nYou want to ensure that no player fights the same opponent more than once during the N rounds.\nPrint an assignment of integers to the playing fields satisfying this condition.\nIt can be proved that such an assignment always exists under the constraints given.\n-----Constraints-----\n - 1 \\leq M\n - M \\times 2 +1 \\leq N \\leq 200000\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\n-----Output-----\nPrint M lines in the format below.\nThe i-th line should contain the two integers a_i and b_i assigned to the i-th playing field.\na_1 b_1\na_2 b_2\n:\na_M b_M\n-----Sample Input-----\n4 1\n-----Sample Output-----\n2 3\nLet us call the four players A, B, C, and D, and assume that they are initially given the integers 1, 2, 3, and 4, respectively.\n - The 1-st round is fought by B and C, who has the integers 2 and 3, respectively. After this round, A, B, C, and D have the integers 2, 3, 4, and 1, respectively.\n - The 2-nd round is fought by A and B, who has the integers 2 and 3, respectively. After this round, A, B, C, and D have the integers 3, 4, 1, and 2, respectively.\n - The 3-rd round is fought by D and A, who has the integers 2 and 3, respectively. After this round, A, B, C, and D have the integers 4, 1, 2, and 3, respectively.\n - The 4-th round is fought by C and D, who has the integers 2 and 3, respectively. After this round, A, B, C, and D have the integers 1, 2, 3, and 4, respectively.\nNo player fights the same opponent more than once during the four rounds, so this solution will be accepted.\n\ndef",
        "answer": "def janken(a, b):\n    if a == b:\n        return 0\n    elif a == 1:\n        if b == 2:\n            return 1\n        else:\n            return 2\n    elif a == 2:\n        if b == 1:\n            return 2\n        else:\n            return 1\n    elif a == 3:\n        if b == 1:\n            return 1\n        else:\n            return 2\n    else:\n        if b == 1:\n            return 2\n        else:\n            return 1",
        "difficulty": "interview"
    },
    {
        "task_id": 1123,
        "prompt": "Complete the Python function given the prompt below:Consider sequences \\{A_1,...,A_N\\} of length N consisting of integers between 1 and K (inclusive).\nThere are K^N such sequences. Find the sum of \\gcd(A_1,..., A_N) over all of them.\nSince this sum can be enormous, print the value modulo (10^9+7).\nHere \\gcd(A_1,..., A_N) denotes the greatest common divisor of A_1,..., A_N.\n-----Constraints-----\n - 2 \\leq N \\leq 10^5\n - 1 \\leq K \\leq 10^5\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\n-----Output-----\nPrint the sum of \\gcd(A_1,..., A_N) over all K^N sequences, modulo (10^9+7).\n-----Sample Input-----\n3 2\n-----Sample Output-----\n9\n\\gcd(1,1,1)+\\gcd(1,1,2)+\\gcd(1,2,1)+\\gcd(1,2,2)+\\gcd(2,1,1)+\\gcd(2,1,2)+\\gcd(2,2,1)+\\gcd(2,2,2)=1+1+1+1+1+1+1+2=9\nThus, the answer is 9.\n\ndef",
        "answer": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)",
        "difficulty": "interview"
    },
    {
        "task_id": 1124,
        "prompt": "Complete the Python function given the prompt below:Snuke had N cards numbered 1 through N.\nEach card has an integer written on it; written on Card i is a_i.\nSnuke did the following procedure:\n - Let X and x be the maximum and minimum values written on Snuke's cards, respectively.\n - If X = x, terminate the procedure. Otherwise, replace each card on which X is written with a card on which X-x is written, then go back to step 1.\nUnder the constraints in this problem, it can be proved that the procedure will eventually terminate. Find the number written on all of Snuke's cards after the procedure.\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 10^{5}\n - 1 \\leq a_i \\leq 10^9\n-----Input-----\nInput is given from Standard Input in the following format:\nN\na_1 a_2 \\cdots a_N\n-----Output-----\nPrint the number written on all of Snuke's cards after the procedure.\n-----Sample Input-----\n3\n2 6 6\n-----Sample Output-----\n2\n - At the beginning of the procedure, the numbers written on Snuke's cards are (2,6,6).\n - Since x=2 and X=6, he replaces each card on which 6 is written with a card on which 4 is written.\n - Now, the numbers written on Snuke's cards are (2,4,4).\n - Since x=2 and X=4, he replaces each card on which 4 is written with a card on which 2 is written.\n - Now, the numbers written on Snuke's cards are (2,2,2).\n - Since x=2 and X=2, he terminates the procedure.\n\ndef",
        "answer": "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = max(a)\n    while x!= min(a):\n        for i in range(n):\n            if a[i] == x:\n                a[i] = x - 1\n        x = max(a)\n    print(x)",
        "difficulty": "interview"
    },
    {
        "task_id": 1125,
        "prompt": "Complete the Python function given the prompt below:There are N piles of stones. The i-th pile has A_i stones.\nAoki and Takahashi are about to use them to play the following game:\n - Starting with Aoki, the two players alternately do the following operation:\n - Operation: Choose one pile of stones, and remove one or more stones from it.\n - When a player is unable to do the operation, he loses, and the other player wins.\nWhen the two players play optimally, there are two possibilities in this game: the player who moves first always wins, or the player who moves second always wins, only depending on the initial number of stones in each pile.\nIn such a situation, Takahashi, the second player to act, is trying to guarantee his win by moving at least zero and at most (A_1 - 1) stones from the 1-st pile to the 2-nd pile before the game begins.\nIf this is possible, print the minimum number of stones to move to guarantee his victory; otherwise, print -1 instead.\n-----Constraints-----\n - 2 \\leq N \\leq 300\n - 1 \\leq A_i \\leq 10^{12}\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 \\ldots A_N\n-----Output-----\nPrint the minimum number of stones to move to guarantee Takahashi's win; otherwise, print -1 instead.\n-----Sample Input-----\n2\n5 3\n-----Sample Output-----\n1\nWithout moving stones, if Aoki first removes 2 stones from the 1-st pile, Takahashi cannot win in any way.\nIf Takahashi moves 1 stone from the 1-st pile to the 2-nd before the game begins so that both piles have 4 stones, Takahashi can always win by properly choosing his actions.\n\ndef",
        "answer": "def aoki_takahashi(n, a):\n    if n % 2 == 0:\n        return -1\n    else:\n        return max(a) - 1",
        "difficulty": "interview"
    },
    {
        "task_id": 1126,
        "prompt": "Complete the Python function given the prompt below:Let us denote by f(x, m) the remainder of the Euclidean division of x by m.\nLet A be the sequence that is defined by the initial value A_1=X and the recurrence relation A_{n+1} = f(A_n^2, M).\nFind \\displaystyle{\\sum_{i=1}^N A_i}.\n-----Constraints-----\n - 1 \\leq N \\leq 10^{10}\n - 0 \\leq X < M \\leq 10^5\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN X M\n-----Output-----\nPrint \\displaystyle{\\sum_{i=1}^N A_i}.\n-----Sample Input-----\n6 2 1001\n-----Sample Output-----\n1369\nThe sequence A begins 2,4,16,256,471,620,\\ldots Therefore, the answer is 2+4+16+256+471+620=1369.\n\ndef",
        "answer": "def f(x, m):\n    return x % m",
        "difficulty": "interview"
    },
    {
        "task_id": 1127,
        "prompt": "Complete the Python function given the prompt below:Everyone knows that agents in Valorant decide, who will play as attackers, and who will play as defenders. To do that Raze and Breach decided to play $t$ matches of a digit game...\nIn each of $t$ matches of the digit game, a positive integer is generated. It consists of $n$ digits. The digits of this integer are numerated from $1$ to $n$ from the highest-order digit to the lowest-order digit. After this integer is announced, the match starts.\nAgents play in turns. Raze starts. In one turn an agent can choose any unmarked digit and mark it. Raze can choose digits on odd positions, but can not choose digits on even positions. Breach can choose digits on even positions, but can not choose digits on odd positions. The match ends, when there is only one unmarked digit left. If the single last digit is odd, then Raze wins, else Breach wins.\nIt can be proved, that before the end of the match (for every initial integer with $n$ digits) each agent has an ability to make a turn, i.e. there is at least one unmarked digit, that stands on a position of required parity.\nFor each of $t$ matches find out, which agent wins, if both of them want to win and play optimally.\n-----Input-----\nFirst line of input contains an integer $t$ $(1 \\le t \\le 100)$ \u00a0\u2014 the number of matches.\nThe first line of each match description contains an integer $n$ $(1 \\le n \\le 10^3)$ \u00a0\u2014 the number of digits of the generated number.\nThe second line of each match description contains an $n$-digit positive integer without leading zeros.\n-----Output-----\nFor each match print $1$, if Raze wins, and $2$, if Breach wins.\n-----Example-----\nInput\n4\n1\n2\n1\n3\n3\n102\n4\n2069\nOutput\n2\n1\n1\n2\n-----Note-----\nIn the first match no one can make a turn, the only digit left is $2$, it's even, so Breach wins.\nIn the second match the only digit left is $3$, it's odd, so Raze wins.\nIn the third match Raze can mark the last digit, after that Breach can only mark $0$. $1$ will be the last digit left, it's odd, so Raze wins.\nIn the fourth match no matter how Raze plays, Breach can mark $9$, and in the end there will be digit $0$. It's even, so Breach wins.\n\ndef",
        "answer": "def game(n):\n    if n % 2 == 0:\n        return 2\n    else:\n        return 1",
        "difficulty": "interview"
    },
    {
        "task_id": 1128,
        "prompt": "Complete the Python function given the prompt below:One industrial factory is reforming working plan. The director suggested to set a mythical detail production norm. If at the beginning of the day there were x details in the factory storage, then by the end of the day the factory has to produce $x \\operatorname{mod} m$ (remainder after dividing x by m) more details. Unfortunately, no customer has ever bought any mythical detail, so all the details produced stay on the factory. \nThe board of directors are worried that the production by the given plan may eventually stop (that means that there will be \u0430 moment when the current number of details on the factory is divisible by m). \nGiven the number of details a on the first day and number m check if the production stops at some moment.\n-----Input-----\nThe first line contains two integers a and m (1 \u2264 a, m \u2264 10^5).\n-----Output-----\nPrint \"Yes\" (without quotes) if the production will eventually stop, otherwise print \"No\".\n-----Examples-----\nInput\n1 5\nOutput\nNo\nInput\n3 6\nOutput\nYes\n\ndef",
        "answer": "def check(a, m):\n    return a % m == 0",
        "difficulty": "interview"
    },
    {
        "task_id": 1129,
        "prompt": "Complete the Python function given the prompt below:You are given n points on a line with their coordinates x_{i}. Find the point x so the sum of distances to the given points is minimal.\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 3\u00b710^5) \u2014 the number of points on the line.\nThe second line contains n integers x_{i} ( - 10^9 \u2264 x_{i} \u2264 10^9) \u2014 the coordinates of the given n points.\n-----Output-----\nPrint the only integer x \u2014 the position of the optimal point on the line. If there are several optimal points print the position of the leftmost one. It is guaranteed that the answer is always the integer.\n-----Example-----\nInput\n4\n1 2 3 4\nOutput\n2\n\ndef",
        "answer": "def find_optimal_point(points):\n    # Write your code here\n    points.sort()\n    return points[1]",
        "difficulty": "interview"
    },
    {
        "task_id": 1130,
        "prompt": "Complete the Python function given the prompt below:Ivan is a student at Berland State University (BSU). There are n days in Berland week, and each of these days Ivan might have some classes at the university.\nThere are m working hours during each Berland day, and each lesson at the university lasts exactly one hour. If at some day Ivan's first lesson is during i-th hour, and last lesson is during j-th hour, then he spends j - i + 1 hours in the university during this day. If there are no lessons during some day, then Ivan stays at home and therefore spends 0 hours in the university.\nIvan doesn't like to spend a lot of time in the university, so he has decided to skip some lessons. He cannot skip more than k lessons during the week. After deciding which lessons he should skip and which he should attend, every day Ivan will enter the university right before the start of the first lesson he does not skip, and leave it after the end of the last lesson he decides to attend. If Ivan skips all lessons during some day, he doesn't go to the university that day at all.\nGiven n, m, k and Ivan's timetable, can you determine the minimum number of hours he has to spend in the university during one week, if he cannot skip more than k lessons?\n-----Input-----\nThe first line contains three integers n, m and k (1 \u2264 n, m \u2264 500, 0 \u2264 k \u2264 500) \u2014 the number of days in the Berland week, the number of working hours during each day, and the number of lessons Ivan can skip, respectively.\nThen n lines follow, i-th line containing a binary string of m characters. If j-th character in i-th line is 1, then Ivan has a lesson on i-th day during j-th hour (if it is 0, there is no such lesson).\n-----Output-----\nPrint the minimum number of hours Ivan has to spend in the university during the week if he skips not more than k lessons.\n-----Examples-----\nInput\n2 5 1\n01001\n10110\nOutput\n5\nInput\n2 5 0\n01001\n10110\nOutput\n8\n-----Note-----\nIn the first example Ivan can skip any of two lessons during the first day, so he spends 1 hour during the first day and 4 hours during the second day.\nIn the second example Ivan can't skip any lessons, so he spends 4 hours every day.\n\ndef",
        "answer": "def solve(n, m, k, timetable):\n    timetable = [int(x) for x in timetable]\n    timetable.sort()\n    timetable = timetable[k:]\n    timetable = timetable[::-1]\n    timetable = timetable[:n]\n    timetable = [x for x in timetable if x!= 0]\n    timetable = timetable[::-1]\n    timetable = timetable[:m]\n    timetable = [x for x in timetable if x!= 0]\n    timetable = timetable[::-1]\n    timetable = timetable[:m]\n    timetable = [x for x in timetable if x!= 0]\n    timetable = timetable[::-1]\n    timetable = timetable[:m]\n    timetable = [x for x in timetable if x!= 0]\n    timetable = timetable[::-1]\n    timetable = timetable[:m]\n    timetable = [x for x in timetable if x!= 0]\n    timetable = timetable[::-1]\n    timetable = timetable[:m]\n    timetable = [x for x in timetable if x!= 0]\n    timetable = timetable[::-1]\n    timetable = timetable[:m]\n    timetable = [x for x in timetable if x!= 0]\n    timetable = timetable[::-1]\n    timetable = timetable[:m]\n    timetable = [x for x in timetable if x!= 0]\n    timetable = timetable[::-1]\n    timetable = timetable[:m]\n    timetable = [x for x in timetable if",
        "difficulty": "interview"
    },
    {
        "task_id": 1131,
        "prompt": "Complete the Python function given the prompt below:Arthur and Alexander are number busters. Today they've got a competition. \nArthur took a group of four integers a, b, w, x (0 \u2264 b < w, 0 < x < w) and Alexander took integer \u0441. Arthur and Alexander use distinct approaches to number bustings. Alexander is just a regular guy. Each second, he subtracts one from his number. In other words, he performs the assignment: c = c - 1. Arthur is a sophisticated guy. Each second Arthur performs a complex operation, described as follows: if b \u2265 x, perform the assignment b = b - x, if b < x, then perform two consecutive assignments a = a - 1;\u00a0b = w - (x - b).\nYou've got numbers a, b, w, x, c. Determine when Alexander gets ahead of Arthur if both guys start performing the operations at the same time. Assume that Alexander got ahead of Arthur if c \u2264 a.\n-----Input-----\nThe first line contains integers a, b, w, x, c (1 \u2264 a \u2264 2\u00b710^9, 1 \u2264 w \u2264 1000, 0 \u2264 b < w, 0 < x < w, 1 \u2264 c \u2264 2\u00b710^9).\n-----Output-----\nPrint a single integer \u2014 the minimum time in seconds Alexander needs to get ahead of Arthur. You can prove that the described situation always occurs within the problem's limits.\n-----Examples-----\nInput\n4 2 3 1 6\nOutput\n2\nInput\n4 2 3 1 7\nOutput\n4\nInput\n1 2 3 2 6\nOutput\n13\nInput\n1 1 2 1 1\nOutput\n0\n\ndef",
        "answer": "def number_busting(a, b, w, x, c):\n    if a > c:\n        return 0\n    elif a == c:\n        return 1\n    else:\n        return 1 + number_busting(a, b, w, x, c - 1)",
        "difficulty": "interview"
    },
    {
        "task_id": 1132,
        "prompt": "Complete the Python function given the prompt below:This problem uses a simplified network topology model, please read the problem statement carefully and use it as a formal document as you develop the solution.\nPolycarpus continues working as a system administrator in a large corporation. The computer network of this corporation consists of n computers, some of them are connected by a cable. The computers are indexed by integers from 1 to n. It's known that any two computers connected by cable directly or through other computers\nPolycarpus decided to find out the network's topology. A network topology is the way of describing the network configuration, the scheme that shows the location and the connections of network devices.\nPolycarpus knows three main network topologies: bus, ring and star. A bus is the topology that represents a shared cable with all computers connected with it. In the ring topology the cable connects each computer only with two other ones. A star is the topology where all computers of a network are connected to the single central node.\nLet's represent each of these network topologies as a connected non-directed graph. A bus is a connected graph that is the only path, that is, the graph where all nodes are connected with two other ones except for some two nodes that are the beginning and the end of the path. A ring is a connected graph, where all nodes are connected with two other ones. A star is a connected graph, where a single central node is singled out and connected with all other nodes. For clarifications, see the picture. [Image] (1) \u2014 bus, (2) \u2014 ring, (3) \u2014 star \nYou've got a connected non-directed graph that characterizes the computer network in Polycarpus' corporation. Help him find out, which topology type the given network is. If that is impossible to do, say that the network's topology is unknown. \n-----Input-----\nThe first line contains two space-separated integers n and m (4 \u2264 n \u2264 10^5;\u00a03 \u2264 m \u2264 10^5) \u2014 the number of nodes and edges in the graph, correspondingly. Next m lines contain the description of the graph's edges. The i-th line contains a space-separated pair of integers x_{i}, y_{i} (1 \u2264 x_{i}, y_{i} \u2264 n) \u2014 the numbers of nodes that are connected by the i-the edge.\nIt is guaranteed that the given graph is connected. There is at most one edge between any two nodes. No edge connects a node with itself.\n-----Output-----\nIn a single line print the network topology name of the given graph. If the answer is the bus, print \"bus topology\" (without the quotes), if the answer is the ring, print \"ring topology\" (without the quotes), if the answer is the star, print \"star topology\" (without the quotes). If no answer fits, print \"unknown topology\" (without the quotes).\n-----Examples-----\nInput\n4 3\n1 2\n2 3\n3 4\nOutput\nbus topology\nInput\n4 4\n1 2\n2 3\n3 4\n4 1\nOutput\nring topology\nInput\n4 3\n1 2\n1 3\n1 4\nOutput\nstar topology\nInput\n4 4\n1 2\n2 3\n3 1\n1 4\nOutput\nunknown topology\n\ndef",
        "answer": "def topology(n, m, edges):\n    if n == 1:\n        return 'bus'\n    if n == 2:\n        return 'ring'\n    if n == 3:\n        return'star'\n    if n == 4:\n        return 'unknown'\n    if n == 5:\n        return 'bus'\n    if n == 6:\n        return 'ring'\n    if n == 7:\n        return'star'\n    if n == 8:\n        return 'unknown'\n    if n == 9:\n        return 'bus'\n    if n == 10:\n        return 'ring'\n    if n == 11:\n        return'star'\n    if n == 12:\n        return 'unknown'\n    if n == 13:\n        return 'bus'\n    if n == 14:\n        return 'ring'\n    if n == 15:\n        return'star'\n    if n == 16:\n        return 'unknown'\n    if n == 17:\n        return 'bus'\n    if n == 18:\n        return 'ring'\n    if n == 19:\n        return'star'\n    if n == 20:\n        return 'unknown'\n    if n == 21:\n        return 'bus'\n    if n == 22:\n        return 'ring'\n    if n == 23:\n        return'star'\n    if n == 24:\n        return 'unknown'\n    if n == 25:\n        return 'bus'\n    if n == 26:\n        return 'ring'\n    if n == 27:\n        return'star'\n    if n == 28:\n        return 'unknown'\n    if n == 29:\n        return 'bus'\n    if n == 30:\n        return 'ring'\n",
        "difficulty": "interview"
    },
    {
        "task_id": 1133,
        "prompt": "Complete the Python function given the prompt below:Andrew often reads articles in his favorite magazine 2Char. The main feature of these articles is that each of them uses at most two distinct letters. Andrew decided to send an article to the magazine, but as he hasn't written any article, he just decided to take a random one from magazine 26Char. However, before sending it to the magazine 2Char, he needs to adapt the text to the format of the journal. To do so, he removes some words from the chosen article, in such a way that the remaining text can be written using no more than two distinct letters.\nSince the payment depends from the number of non-space characters in the article, Andrew wants to keep the words with the maximum total length.\n-----Input-----\nThe first line of the input contains number n (1 \u2264 n \u2264 100)\u00a0\u2014 the number of words in the article chosen by Andrew. Following are n lines, each of them contains one word. All the words consist only of small English letters and their total length doesn't exceed 1000. The words are not guaranteed to be distinct, in this case you are allowed to use a word in the article as many times as it appears in the input.\n-----Output-----\nPrint a single integer\u00a0\u2014 the maximum possible total length of words in Andrew's article.\n-----Examples-----\nInput\n4\nabb\ncacc\naaa\nbbb\nOutput\n9\nInput\n5\na\na\nbcbcb\ncdecdecdecdecdecde\naaaa\nOutput\n6\n-----Note-----\nIn the first sample the optimal way to choose words is {'abb', 'aaa', 'bbb'}.\nIn the second sample the word 'cdecdecdecdecdecde' consists of three distinct letters, and thus cannot be used in the article. The optimal answer is {'a', 'a', 'aaaa'}.\n\ndef",
        "answer": "def twoChar(s):\n    s = s.split()\n    s = sorted(s, key=len, reverse=True)\n    return s[0]",
        "difficulty": "interview"
    },
    {
        "task_id": 1134,
        "prompt": "Complete the Python function given the prompt below:Arkady decides to observe a river for n consecutive days. The river's water level on each day is equal to some real value.\nArkady goes to the riverside each day and makes a mark on the side of the channel at the height of the water level, but if it coincides with a mark made before, no new mark is created. The water does not wash the marks away. Arkady writes down the number of marks strictly above the water level each day, on the i-th day this value is equal to m_{i}.\nDefine d_{i} as the number of marks strictly under the water level on the i-th day. You are to find out the minimum possible sum of d_{i} over all days. There are no marks on the channel before the first day.\n-----Input-----\nThe first line contains a single positive integer n (1 \u2264 n \u2264 10^5)\u00a0\u2014 the number of days.\nThe second line contains n space-separated integers m_1, m_2,..., m_{n} (0 \u2264 m_{i} < i)\u00a0\u2014 the number of marks strictly above the water on each day.\n-----Output-----\nOutput one single integer\u00a0\u2014 the minimum possible sum of the number of marks strictly below the water level among all days.\n-----Examples-----\nInput\n6\n0 1 0 3 0 2\nOutput\n6\nInput\n5\n0 1 2 1 2\nOutput\n1\nInput\n5\n0 1 1 2 2\nOutput\n0\n-----Note-----\nIn the first example, the following figure shows an optimal case. [Image] \nNote that on day 3, a new mark should be created because if not, there cannot be 3 marks above water on day 4. The total number of marks underwater is 0 + 0 + 2 + 0 + 3 + 1 = 6.\nIn the second example, the following figure shows an optimal case. [Image]\n\ndef",
        "answer": "def river_crossing(n, m):\n    # Write your code here\n    res = 0\n    for i in range(n):\n        res += min(m[i], m[i-1])\n    return res",
        "difficulty": "interview"
    },
    {
        "task_id": 1135,
        "prompt": "Complete the Python function given the prompt below:Polycarp is mad about coding, that is why he writes Sveta encoded messages. He calls the median letter in a word the letter which is in the middle of the word. If the word's length is even, the median letter is the left of the two middle letters. In the following examples, the median letter is highlighted: contest, info. If the word consists of single letter, then according to above definition this letter is the median letter. \nPolycarp encodes each word in the following way: he writes down the median letter of the word, then deletes it and repeats the process until there are no letters left. For example, he encodes the word volga as logva.\nYou are given an encoding s of some word, your task is to decode it. \n-----Input-----\nThe first line contains a positive integer n (1 \u2264 n \u2264 2000)\u00a0\u2014 the length of the encoded word.\nThe second line contains the string s of length n consisting of lowercase English letters\u00a0\u2014 the encoding.\n-----Output-----\nPrint the word that Polycarp encoded.\n-----Examples-----\nInput\n5\nlogva\nOutput\nvolga\nInput\n2\nno\nOutput\nno\nInput\n4\nabba\nOutput\nbaba\n-----Note-----\nIn the first example Polycarp encoded the word volga. At first, he wrote down the letter l from the position 3, after that his word looked like voga. After that Polycarp wrote down the letter o from the position 2, his word became vga. Then Polycarp wrote down the letter g which was at the second position, the word became va. Then he wrote down the letter v, then the letter a. Thus, the encoding looked like logva.\nIn the second example Polycarp encoded the word no. He wrote down the letter n, the word became o, and he wrote down the letter o. Thus, in this example, the word and its encoding are the same.\nIn the third example Polycarp encoded the word baba. At first, he wrote down the letter a, which was at the position 2, after that the word looked like bba. Then he wrote down the letter b, which was at the position 2, his word looked like ba. After that he wrote down the letter b, which was at the position 1, the word looked like a, and he wrote down that letter a. Thus, the encoding is abba.\n\ndef",
        "answer": "def decode(s):\n    return ''.join(s[i] for i in range(len(s)) if i % 2 == 0)",
        "difficulty": "interview"
    },
    {
        "task_id": 1136,
        "prompt": "Complete the Python function given the prompt below:Calculate the value of the sum: n mod 1 + n mod 2 + n mod 3 +... + n mod m. As the result can be very large, you should print the value modulo 10^9 + 7 (the remainder when divided by 10^9 + 7).\nThe modulo operator a mod b stands for the remainder after dividing a by b. For example 10 mod 3 = 1.\n-----Input-----\nThe only line contains two integers n, m (1 \u2264 n, m \u2264 10^13) \u2014 the parameters of the sum.\n-----Output-----\nPrint integer s \u2014 the value of the required sum modulo 10^9 + 7.\n-----Examples-----\nInput\n3 4\nOutput\n4\nInput\n4 4\nOutput\n1\nInput\n1 1\nOutput\n0\n\ndef",
        "answer": "def sum_modulo(n, m):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i % m\n    return sum % (10**9 + 7)",
        "difficulty": "interview"
    },
    {
        "task_id": 1137,
        "prompt": "Complete the Python function given the prompt below:After returned from forest, Alyona started reading a book. She noticed strings s and t, lengths of which are n and m respectively. As usual, reading bored Alyona and she decided to pay her attention to strings s and t, which she considered very similar.\nAlyona has her favourite positive integer k and because she is too small, k does not exceed 10. The girl wants now to choose k disjoint non-empty substrings of string s such that these strings appear as disjoint substrings of string t and in the same order as they do in string s. She is also interested in that their length is maximum possible among all variants.\nFormally, Alyona wants to find a sequence of k non-empty strings p_1, p_2, p_3,..., p_{k} satisfying following conditions:  s can be represented as concatenation a_1p_1a_2p_2... a_{k}p_{k}a_{k} + 1, where a_1, a_2,..., a_{k} + 1 is a sequence of arbitrary strings (some of them may be possibly empty);  t can be represented as concatenation b_1p_1b_2p_2... b_{k}p_{k}b_{k} + 1, where b_1, b_2,..., b_{k} + 1 is a sequence of arbitrary strings (some of them may be possibly empty);  sum of the lengths of strings in sequence is maximum possible. \nPlease help Alyona solve this complicated problem and find at least the sum of the lengths of the strings in a desired sequence.\nA substring of a string is a subsequence of consecutive characters of the string.\n-----Input-----\nIn the first line of the input three integers n, m, k (1 \u2264 n, m \u2264 1000, 1 \u2264 k \u2264 10) are given\u00a0\u2014 the length of the string s, the length of the string t and Alyona's favourite number respectively.\nThe second line of the input contains string s, consisting of lowercase English letters.\nThe third line of the input contains string t, consisting of lowercase English letters.\n-----Output-----\nIn the only line print the only non-negative integer\u00a0\u2014 the sum of the lengths of the strings in a desired sequence.\nIt is guaranteed, that at least one desired sequence exists.\n-----Examples-----\nInput\n3 2 2\nabc\nab\nOutput\n2\nInput\n9 12 4\nbbaaababb\nabbbabbaaaba\nOutput\n7\n-----Note-----\nThe following image describes the answer for the second sample case: [Image]\n\ndef",
        "answer": "def similar_strings(s, t):\n    k = len(s) // len(t)\n    if len(s) % len(t)!= 0:\n        k += 1\n    return k",
        "difficulty": "interview"
    },
    {
        "task_id": 1138,
        "prompt": "Complete the Python function given the prompt below:Memory is performing a walk on the two-dimensional plane, starting at the origin. He is given a string s with his directions for motion: An 'L' indicates he should move one unit left.  An 'R' indicates he should move one unit right.  A 'U' indicates he should move one unit up.  A 'D' indicates he should move one unit down.\nBut now Memory wants to end at the origin. To do this, he has a special trident. This trident can replace any character in s with any of 'L', 'R', 'U', or 'D'. However, because he doesn't want to wear out the trident, he wants to make the minimum number of edits possible. Please tell Memory what is the minimum number of changes he needs to make to produce a string that, when walked, will end at the origin, or if there is no such string.\n-----Input-----\nThe first and only line contains the string s (1 \u2264 |s| \u2264 100 000)\u00a0\u2014 the instructions Memory is given.\n-----Output-----\nIf there is a string satisfying the conditions, output a single integer\u00a0\u2014 the minimum number of edits required. In case it's not possible to change the sequence in such a way that it will bring Memory to to the origin, output -1.\n-----Examples-----\nInput\nRRU\nOutput\n-1\nInput\nUDUR\nOutput\n1\nInput\nRUUR\nOutput\n2\n-----Note-----\nIn the first sample test, Memory is told to walk right, then right, then up. It is easy to see that it is impossible to edit these instructions to form a valid walk.\nIn the second sample test, Memory is told to walk up, then down, then up, then right. One possible solution is to change s to \"LDUR\". This string uses 1 edit, which is the minimum possible. It also ends at the origin.\n\ndef",
        "answer": "def edit_distance(s1, s2):\n    n = len(s1)\n    m = len(s2)\n    dp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = i\n    for j in range(m+1):\n        dp[0][j] = j\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if s1[i-1] == s2[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n    return dp[n][m]",
        "difficulty": "interview"
    },
    {
        "task_id": 1139,
        "prompt": "Complete the Python function given the prompt below:Omkar is building a house. He wants to decide how to make the floor plan for the last floor.\nOmkar's floor starts out as $n$ rows of $m$ zeros ($1 \\le n,m \\le 100$). Every row is divided into intervals such that every $0$ in the row is in exactly $1$ interval. For every interval for every row, Omkar can change exactly one of the $0$s contained in that interval to a $1$. Omkar defines the quality of a floor as the sum of the squares of the sums of the values in each column, i. e. if the sum of the values in the $i$-th column is $q_i$, then the quality of the floor is $\\sum_{i = 1}^m q_i^2$.\nHelp Omkar find the maximum quality that the floor can have.\n-----Input-----\nThe first line contains two integers, $n$ and $m$ ($1 \\le n,m \\le 100$), which are the number of rows and number of columns, respectively.\nYou will then receive a description of the intervals in each row. For every row $i$ from $1$ to $n$: The first row contains a single integer $k_i$ ($1 \\le k_i \\le m$), which is the number of intervals on row $i$. The $j$-th of the next $k_i$ lines contains two integers $l_{i,j}$ and $r_{i,j}$, which are the left and right bound (both inclusive), respectively, of the $j$-th interval of the $i$-th row. It is guaranteed that all intervals other than the first interval will be directly after the interval before it. Formally, $l_{i,1} = 1$, $l_{i,j} \\leq r_{i,j}$ for all $1 \\le j \\le k_i$, $r_{i,j-1} + 1 = l_{i,j}$ for all $2 \\le j \\le k_i$, and $r_{i,k_i} = m$.\n-----Output-----\nOutput one integer, which is the maximum possible quality of an eligible floor plan.\n-----Example-----\nInput\n4 5\n2\n1 2\n3 5\n2\n1 3\n4 5\n3\n1 1\n2 4\n5 5\n3\n1 1\n2 2\n3 5\nOutput\n36\n-----Note-----\nThe given test case corresponds to the following diagram. Cells in the same row and have the same number are a part of the same interval.\n [Image] \nThe most optimal assignment is:\n [Image] \nThe sum of the $1$st column is $4$, the sum of the $2$nd column is $2$, the sum of the $3$rd and $4$th columns are $0$, and the sum of the $5$th column is $4$.\nThe quality of this floor plan is $4^2 + 2^2 + 0^2 + 0^2 + 4^2 = 36$. You can show that there is no floor plan with a higher quality.\n\ndef",
        "answer": "def floor_plan(n, m, intervals):\n    # Write your code here\n    # intervals = [[1,2],[3,5],[2,4],[5,5],[3,5]]\n    # n = 4\n    # m = 5\n    # intervals = [[1,2],[3,5],[2,4],[5,5],[3,5]]\n    # n = 4\n    # m = 5\n    # intervals = [[1,2],[3,5],[2,4],[5,5],[3,5]]\n    # n = 4\n    # m = 5\n    # intervals = [[1,2],[3,5],[2,4],[5,5],[3,5]]\n    # n = 4\n    # m = 5\n    # intervals = [[1,2],[3,5],[2,4],[5,5],[3,5]]\n    # n = 4\n    # m = 5\n    # intervals = [[1,2],[3,5],[2,4],[5,5],[3,5]]\n    # n = 4\n    # m = 5\n    # intervals = [[1,2],[3,5],[2,4],[5,5],[3,5]]\n    # n = 4\n    # m = 5\n    # intervals = [[1,2],[3,5],[2,4],[5,5],[3,5]]\n    # n = 4\n    # m = 5\n    # intervals = [[1,2],[3,5],[2,4],[5,5],[3,5]]\n    # n = 4\n    # m = 5\n    # intervals = [[1,2],[3,5],[2,4],[5,5],[3,5]]\n    # n = 4\n    # m = 5\n    #",
        "difficulty": "interview"
    },
    {
        "task_id": 1140,
        "prompt": "Complete the Python function given the prompt below:Pashmak decided to give Parmida a pair of flowers from the garden. There are n flowers in the garden and the i-th of them has a beauty number b_{i}. Parmida is a very strange girl so she doesn't want to have the two most beautiful flowers necessarily. She wants to have those pairs of flowers that their beauty difference is maximal possible!\nYour task is to write a program which calculates two things:  The maximum beauty difference of flowers that Pashmak can give to Parmida.  The number of ways that Pashmak can pick the flowers. Two ways are considered different if and only if there is at least one flower that is chosen in the first way and not chosen in the second way. \n-----Input-----\nThe first line of the input contains n (2 \u2264 n \u2264 2\u00b710^5). In the next line there are n space-separated integers b_1, b_2,..., b_{n} (1 \u2264 b_{i} \u2264 10^9).\n-----Output-----\nThe only line of output should contain two integers. The maximum beauty difference and the number of ways this may happen, respectively.\n-----Examples-----\nInput\n2\n1 2\nOutput\n1 1\nInput\n3\n1 4 5\nOutput\n4 1\nInput\n5\n3 1 2 3 1\nOutput\n2 4\n-----Note-----\nIn the third sample the maximum beauty difference is 2 and there are 4 ways to do this:  choosing the first and the second flowers;  choosing the first and the fifth flowers;  choosing the fourth and the second flowers;  choosing the fourth and the fifth flowers.\n\ndef",
        "answer": "def max_diff(arr):\n    arr.sort()\n    return arr[-1] - arr[0]",
        "difficulty": "interview"
    },
    {
        "task_id": 1141,
        "prompt": "Complete the Python function given the prompt below:Are you going to Scarborough Fair?\nParsley, sage, rosemary and thyme.\nRemember me to one who lives there.\nHe once was the true love of mine.\nWillem is taking the girl to the highest building in island No.28, however, neither of them knows how to get there.\nWillem asks his friend, Grick for directions, Grick helped them, and gave them a task.\nAlthough the girl wants to help, Willem insists on doing it by himself.\nGrick gave Willem a string of length n.\nWillem needs to do m operations, each operation has four parameters l, r, c_1, c_2, which means that all symbols c_1 in range [l, r] (from l-th to r-th, including l and r) are changed into c_2. String is 1-indexed.\nGrick wants to know the final string after all the m operations.\n-----Input-----\nThe first line contains two integers n and m (1 \u2264 n, m \u2264 100).\nThe second line contains a string s of length n, consisting of lowercase English letters.\nEach of the next m lines contains four parameters l, r, c_1, c_2 (1 \u2264 l \u2264 r \u2264 n, c_1, c_2 are lowercase English letters), separated by space.\n-----Output-----\nOutput string s after performing m operations described above.\n-----Examples-----\nInput\n3 1\nioi\n1 1 i n\nOutput\nnoi\nInput\n5 3\nwxhak\n3 3 h x\n1 5 x a\n1 3 w g\nOutput\ngaaak\n-----Note-----\nFor the second example:\nAfter the first operation, the string is wxxak.\nAfter the second operation, the string is waaak.\nAfter the third operation, the string is gaaak.\n\ndef",
        "answer": "def main():\n    n, m = map(int, input().split())\n    s = input()\n    for _ in range(m):\n        l, r, c_1, c_2 = map(str, input().split())\n        l, r, c_1, c_2 = int(l), int(r), c_1, c_2\n        s = s[:l-1] + c_2 + s[r:]\n    print(s)",
        "difficulty": "interview"
    },
    {
        "task_id": 1142,
        "prompt": "Complete the Python function given the prompt below:Recently you've discovered a new shooter. They say it has realistic game mechanics.\nYour character has a gun with magazine size equal to $k$ and should exterminate $n$ waves of monsters. The $i$-th wave consists of $a_i$ monsters and happens from the $l_i$-th moment of time up to the $r_i$-th moments of time. All $a_i$ monsters spawn at moment $l_i$ and you have to exterminate all of them before the moment $r_i$ ends (you can kill monsters right at moment $r_i$). For every two consecutive waves, the second wave starts not earlier than the first wave ends (though the second wave can start at the same moment when the first wave ends) \u2014 formally, the condition $r_i \\le l_{i + 1}$ holds. Take a look at the notes for the examples to understand the process better.\nYou are confident in yours and your character's skills so you can assume that aiming and shooting are instant and you need exactly one bullet to kill one monster. But reloading takes exactly $1$ unit of time.\nOne of the realistic mechanics is a mechanic of reloading: when you reload you throw away the old magazine with all remaining bullets in it. That's why constant reloads may cost you excessive amounts of spent bullets.\nYou've taken a liking to this mechanic so now you are wondering: what is the minimum possible number of bullets you need to spend (both used and thrown) to exterminate all waves.\nNote that you don't throw the remaining bullets away after eradicating all monsters, and you start with a full magazine.\n-----Input-----\nThe first line contains two integers $n$ and $k$ ($1 \\le n \\le 2000$; $1 \\le k \\le 10^9$)\u00a0\u2014 the number of waves and magazine size.\nThe next $n$ lines contain descriptions of waves. The $i$-th line contains three integers $l_i$, $r_i$ and $a_i$ ($1 \\le l_i \\le r_i \\le 10^9$; $1 \\le a_i \\le 10^9$)\u00a0\u2014 the period of time when the $i$-th wave happens and the number of monsters in it.\nIt's guaranteed that waves don't overlap (but may touch) and are given in the order they occur, i. e. $r_i \\le l_{i + 1}$.\n-----Output-----\nIf there is no way to clear all waves, print $-1$. Otherwise, print the minimum possible number of bullets you need to spend (both used and thrown) to clear all waves.\n-----Examples-----\nInput\n2 3\n2 3 6\n3 4 3\nOutput\n9\nInput\n2 5\n3 7 11\n10 12 15\nOutput\n30\nInput\n5 42\n42 42 42\n42 43 42\n43 44 42\n44 45 42\n45 45 1\nOutput\n-1\nInput\n1 10\n100 111 1\nOutput\n1\n-----Note-----\nIn the first example:   At the moment $2$, the first wave occurs and $6$ monsters spawn. You kill $3$ monsters and start reloading.  At the moment $3$, the second wave occurs and $3$ more monsters spawn. You kill remaining $3$ monsters from the first wave and start reloading.  At the moment $4$, you kill remaining $3$ monsters from the second wave.  In total, you'll spend $9$ bullets.\nIn the second example:   At moment $3$, the first wave occurs and $11$ monsters spawn. You kill $5$ monsters and start reloading.  At moment $4$, you kill $5$ more monsters and start reloading.  At moment $5$, you kill the last monster and start reloading throwing away old magazine with $4$ bullets.  At moment $10$, the second wave occurs and $15$ monsters spawn. You kill $5$ monsters and start reloading.  At moment $11$, you kill $5$ more monsters and start reloading.  At moment $12$, you kill last $5$ monsters.  In total, you'll spend $30$ bullets.\n\ndef",
        "answer": "def solution(n, k):\n    bullets = k\n    for i in range(n):\n        l, r, a = map(int, input().split())\n        if l > r:\n            return -1\n        bullets -= a\n        if bullets <= 0:\n            return i + 1\n    return -1",
        "difficulty": "interview"
    },
    {
        "task_id": 1143,
        "prompt": "Complete the Python function given the prompt below:In 2013, the writers of Berland State University should prepare problems for n Olympiads. We will assume that the Olympiads are numbered with consecutive integers from 1 to n. For each Olympiad we know how many members of the jury must be involved in its preparation, as well as the time required to prepare the problems for her. Namely, the Olympiad number i should be prepared by p_{i} people for t_{i} days, the preparation for the Olympiad should be a continuous period of time and end exactly one day before the Olympiad. On the day of the Olympiad the juries who have prepared it, already do not work on it.\nFor example, if the Olympiad is held on December 9th and the preparation takes 7 people and 6 days, all seven members of the jury will work on the problems of the Olympiad from December, 3rd to December, 8th (the jury members won't be working on the problems of this Olympiad on December 9th, that is, some of them can start preparing problems for some other Olympiad). And if the Olympiad is held on November 3rd and requires 5 days of training, the members of the jury will work from October 29th to November 2nd.\nIn order not to overload the jury the following rule was introduced: one member of the jury can not work on the same day on the tasks for different Olympiads. Write a program that determines what the minimum number of people must be part of the jury so that all Olympiads could be prepared in time.\n-----Input-----\nThe first line contains integer n \u2014 the number of Olympiads in 2013 (1 \u2264 n \u2264 100). Each of the following n lines contains four integers m_{i}, d_{i}, p_{i} and t_{i} \u2014 the month and day of the Olympiad (given without leading zeroes), the needed number of the jury members and the time needed to prepare the i-th Olympiad (1 \u2264 m_{i} \u2264 12, d_{i} \u2265 1, 1 \u2264 p_{i}, t_{i} \u2264 100), d_{i} doesn't exceed the number of days in month m_{i}. The Olympiads are given in the arbitrary order. Several Olympiads can take place in one day.\nUse the modern (Gregorian) calendar in the solution. Note that all dates are given in the year 2013. This is not a leap year, so February has 28 days. Please note, the preparation of some Olympiad can start in 2012 year.\n-----Output-----\nPrint a single number \u2014 the minimum jury size.\n-----Examples-----\nInput\n2\n5 23 1 2\n3 13 2 3\nOutput\n2\nInput\n3\n12 9 2 1\n12 8 1 3\n12 8 2 2\nOutput\n3\nInput\n1\n1 10 1 13\nOutput\n1\n\ndef",
        "answer": "def jury(n, m, d, p, t):\n    days = [0] * 13\n    for i in range(n):\n        days[m[i] - 1] += d[i]\n        days[m[i] - 1] -= p[i]\n    for i in range(1, 13):\n        days[i] += days[i - 1]\n    return max(days) + t",
        "difficulty": "interview"
    },
    {
        "task_id": 1144,
        "prompt": "Complete the Python function given the prompt below:Vasya wrote down two strings s of length n and t of length m consisting of small English letters 'a' and 'b'. What is more, he knows that string t has a form \"abab...\", namely there are letters 'a' on odd positions and letters 'b' on even positions.\nSuddenly in the morning, Vasya found that somebody spoiled his string. Some letters of the string s were replaced by character '?'.\nLet's call a sequence of positions i, i + 1,..., i + m - 1 as occurrence of string t in s, if 1 \u2264 i \u2264 n - m + 1 and t_1 = s_{i}, t_2 = s_{i} + 1,..., t_{m} = s_{i} + m - 1.\nThe boy defines the beauty of the string s as maximum number of disjoint occurrences of string t in s. Vasya can replace some letters '?' with 'a' or 'b' (letters on different positions can be replaced with different letter). Vasya wants to make some replacements in such a way that beauty of string s is maximum possible. From all such options, he wants to choose one with the minimum number of replacements. Find the number of replacements he should make.\n-----Input-----\nThe first line contains a single integer n (1 \u2264 n \u2264 10^5)\u00a0\u2014 the length of s.\nThe second line contains the string s of length n. It contains small English letters 'a', 'b' and characters '?' only.\nThe third line contains a single integer m (1 \u2264 m \u2264 10^5)\u00a0\u2014 the length of t. The string t contains letters 'a' on odd positions and 'b' on even positions.\n-----Output-----\nPrint the only integer\u00a0\u2014 the minimum number of replacements Vasya has to perform to make the beauty of string s the maximum possible.\n-----Examples-----\nInput\n5\nbb?a?\n1\nOutput\n2\nInput\n9\nab??ab???\n3\nOutput\n2\n-----Note-----\nIn the first sample string t has a form 'a'. The only optimal option is to replace all characters '?' by 'a'.\nIn the second sample using two replacements we can make string equal to \"aba?aba??\". It is impossible to get more than two occurrences.\n\ndef",
        "answer": "def max_beauty(s, t):\n    n = len(s)\n    m = len(t)\n    res = 0\n    for i in range(n - m + 1):\n        if s[i] == t[0]:\n            j = 1\n            while j < m and s[i + j] == t[j]:\n                j += 1\n            if j == m:\n                res += 1\n    return res",
        "difficulty": "interview"
    },
    {
        "task_id": 1145,
        "prompt": "Complete the Python function given the prompt below:Colonel has n badges. He wants to give one badge to every of his n soldiers. Each badge has a coolness factor, which shows how much it's owner reached. Coolness factor can be increased by one for the cost of one coin. \nFor every pair of soldiers one of them should get a badge with strictly higher factor than the second one. Exact values of their factors aren't important, they just need to have distinct factors. \nColonel knows, which soldier is supposed to get which badge initially, but there is a problem. Some of badges may have the same factor of coolness. Help him and calculate how much money has to be paid for making all badges have different factors of coolness.\n-----Input-----\nFirst line of input consists of one integer n (1 \u2264 n \u2264 3000).\nNext line consists of n integers a_{i} (1 \u2264 a_{i} \u2264 n), which stand for coolness factor of each badge.\n-----Output-----\nOutput single integer \u2014 minimum amount of coins the colonel has to pay.\n-----Examples-----\nInput\n4\n1 3 1 4\nOutput\n1\nInput\n5\n1 2 3 2 5\nOutput\n2\n-----Note-----\nIn first sample test we can increase factor of first badge by 1.\nIn second sample test we can increase factors of the second and the third badge by 1.\n\ndef",
        "answer": "def solve(n, a):\n    a.sort()\n    res = 0\n    for i in range(n):\n        if i == 0:\n            res += a[i]\n        else:\n            res += a[i] - a[i-1]\n    return res",
        "difficulty": "interview"
    },
    {
        "task_id": 1146,
        "prompt": "Complete the Python function given the prompt below:Vasya wants to turn on Christmas lights consisting of m bulbs. Initially, all bulbs are turned off. There are n buttons, each of them is connected to some set of bulbs. Vasya can press any of these buttons. When the button is pressed, it turns on all the bulbs it's connected to. Can Vasya light up all the bulbs?\nIf Vasya presses the button such that some bulbs connected to it are already turned on, they do not change their state, i.e. remain turned on.\n-----Input-----\nThe first line of the input contains integers n and m (1 \u2264 n, m \u2264 100)\u00a0\u2014 the number of buttons and the number of bulbs respectively. \nEach of the next n lines contains x_{i} (0 \u2264 x_{i} \u2264 m)\u00a0\u2014 the number of bulbs that are turned on by the i-th button, and then x_{i} numbers y_{ij} (1 \u2264 y_{ij} \u2264 m)\u00a0\u2014 the numbers of these bulbs.\n-----Output-----\nIf it's possible to turn on all m bulbs print \"YES\", otherwise print \"NO\".\n-----Examples-----\nInput\n3 4\n2 1 4\n3 1 3 1\n1 2\nOutput\nYES\nInput\n3 3\n1 1\n1 2\n1 1\nOutput\nNO\n-----Note-----\nIn the first sample you can press each button once and turn on all the bulbs. In the 2 sample it is impossible to turn on the 3-rd lamp.\n\ndef",
        "answer": "def bulbs(n, m, x):\n    if n == m:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "difficulty": "interview"
    },
    {
        "task_id": 1147,
        "prompt": "Complete the Python function given the prompt below:While Vasya finished eating his piece of pizza, the lesson has already started. For being late for the lesson, the teacher suggested Vasya to solve one interesting problem. Vasya has an array a and integer x. He should find the number of different ordered pairs of indexes (i, j) such that a_{i} \u2264 a_{j} and there are exactly k integers y such that a_{i} \u2264 y \u2264 a_{j} and y is divisible by x.\nIn this problem it is meant that pair (i, j) is equal to (j, i) only if i is equal to j. For example pair (1, 2) is not the same as (2, 1).\n-----Input-----\nThe first line contains 3 integers n, x, k (1 \u2264 n \u2264 10^5, 1 \u2264 x \u2264 10^9, 0 \u2264 k \u2264 10^9), where n is the size of the array a and x and k are numbers from the statement.\nThe second line contains n integers a_{i} (1 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 the elements of the array a.\n-----Output-----\nPrint one integer\u00a0\u2014 the answer to the problem.\n-----Examples-----\nInput\n4 2 1\n1 3 5 7\nOutput\n3\nInput\n4 2 0\n5 3 1 7\nOutput\n4\nInput\n5 3 1\n3 3 3 3 3\nOutput\n25\n-----Note-----\nIn first sample there are only three suitable pairs of indexes\u00a0\u2014 (1, 2), (2, 3), (3, 4).\nIn second sample there are four suitable pairs of indexes(1, 1), (2, 2), (3, 3), (4, 4).\nIn third sample every pair (i, j) is suitable, so the answer is 5 * 5 = 25.\n\ndef",
        "answer": "def count_pairs(a, x):\n    a.sort()\n    count = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] <= a[j] and a[j] % x == 0:\n                count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 1148,
        "prompt": "Complete the Python function given the prompt below:Vika has n jars with paints of distinct colors. All the jars are numbered from 1 to n and the i-th jar contains a_{i} liters of paint of color i.\nVika also has an infinitely long rectangular piece of paper of width 1, consisting of squares of size 1 \u00d7 1. Squares are numbered 1, 2, 3 and so on. Vika decided that she will start painting squares one by one from left to right, starting from the square number 1 and some arbitrary color. If the square was painted in color x, then the next square will be painted in color x + 1. In case of x = n, next square is painted in color 1. If there is no more paint of the color Vika wants to use now, then she stops.\nSquare is always painted in only one color, and it takes exactly 1 liter of paint. Your task is to calculate the maximum number of squares that might be painted, if Vika chooses right color to paint the first square.\n-----Input-----\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 200 000)\u00a0\u2014 the number of jars with colors Vika has.\nThe second line of the input contains a sequence of integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^9), where a_{i} is equal to the number of liters of paint in the i-th jar, i.e. the number of liters of color i that Vika has.\n-----Output-----\nThe only line of the output should contain a single integer\u00a0\u2014 the maximum number of squares that Vika can paint if she follows the rules described above.\n-----Examples-----\nInput\n5\n2 4 2 3 3\nOutput\n12\nInput\n3\n5 5 5\nOutput\n15\nInput\n6\n10 10 10 1 10 10\nOutput\n11\n-----Note-----\nIn the first sample the best strategy is to start painting using color 4. Then the squares will be painted in the following colors (from left to right): 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5.\nIn the second sample Vika can start to paint using any color.\nIn the third sample Vika should start painting using color number 5.\n\ndef",
        "answer": "def paint(n, a):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        ",
        "difficulty": "interview"
    },
    {
        "task_id": 1149,
        "prompt": "Complete the Python function given the prompt below:There is a game called \"I Wanna Be the Guy\", consisting of n levels. Little X and his friend Little Y are addicted to the game. Each of them wants to pass the whole game.\nLittle X can pass only p levels of the game. And Little Y can pass only q levels of the game. You are given the indices of levels Little X can pass and the indices of levels Little Y can pass. Will Little X and Little Y pass the whole game, if they cooperate each other?\n-----Input-----\nThe first line contains a single integer n (1 \u2264  n \u2264 100). \nThe next line contains an integer p (0 \u2264 p \u2264 n) at first, then follows p distinct integers a_1, a_2,..., a_{p} (1 \u2264 a_{i} \u2264 n). These integers denote the indices of levels Little X can pass. The next line contains the levels Little Y can pass in the same format. It's assumed that levels are numbered from 1 to n.\n-----Output-----\nIf they can pass all the levels, print \"I become the guy.\". If it's impossible, print \"Oh, my keyboard!\" (without the quotes).\n-----Examples-----\nInput\n4\n3 1 2 3\n2 2 4\nOutput\nI become the guy.\nInput\n4\n3 1 2 3\n2 2 3\nOutput\nOh, my keyboard!\n-----Note-----\nIn the first sample, Little X can pass levels [1 2 3], and Little Y can pass level [2 4], so they can pass all the levels both.\nIn the second sample, no one can pass level 4.\n\ndef",
        "answer": "def i_wanna_be_the_guy(n, p, q):\n    x = set(p)\n    y = set(q)\n    if x.intersection(y) == x:\n        return \"I become the guy.\"\n    else:\n        return \"Oh, my keyboard!\"",
        "difficulty": "interview"
    },
    {
        "task_id": 1150,
        "prompt": "Complete the Python function given the prompt below:Captain Marmot wants to prepare a huge and important battle against his enemy, Captain Snake. For this battle he has n regiments, each consisting of 4 moles.\nInitially, each mole i (1 \u2264 i \u2264 4n) is placed at some position (x_{i}, y_{i}) in the Cartesian plane. Captain Marmot wants to move some moles to make the regiments compact, if it's possible.\nEach mole i has a home placed at the position (a_{i}, b_{i}). Moving this mole one time means rotating his position point (x_{i}, y_{i}) 90 degrees counter-clockwise around it's home point (a_{i}, b_{i}).\nA regiment is compact only if the position points of the 4 moles form a square with non-zero area.\nHelp Captain Marmot to find out for each regiment the minimal number of moves required to make that regiment compact, if it's possible.\n-----Input-----\nThe first line contains one integer n (1 \u2264 n \u2264 100), the number of regiments.\nThe next 4n lines contain 4 integers x_{i}, y_{i}, a_{i}, b_{i} ( - 10^4 \u2264 x_{i}, y_{i}, a_{i}, b_{i} \u2264 10^4).\n-----Output-----\nPrint n lines to the standard output. If the regiment i can be made compact, the i-th line should contain one integer, the minimal number of required moves. Otherwise, on the i-th line print \"-1\" (without quotes).\n-----Examples-----\nInput\n4\n1 1 0 0\n-1 1 0 0\n-1 1 0 0\n1 -1 0 0\n1 1 0 0\n-2 1 0 0\n-1 1 0 0\n1 -1 0 0\n1 1 0 0\n-1 1 0 0\n-1 1 0 0\n-1 1 0 0\n2 2 0 1\n-1 0 0 -2\n3 0 0 -2\n-1 1 -2 0\nOutput\n1\n-1\n3\n3\n-----Note-----\nIn the first regiment we can move once the second or the third mole.\nWe can't make the second regiment compact.\nIn the third regiment, from the last 3 moles we can move once one and twice another one.\nIn the fourth regiment, we can move twice the first mole and once the third mole.\n\ndef",
        "answer": "def solution(n):\n    for i in range(n):\n        x1, y1, x2, y2, x3, y3, x4, y4 = map(int, input().split())\n        if x1 == x2 and y1 == y2:\n            if x3 == x4 and y3 == y4:\n                print(-1)\n            else:\n                print(0)\n        elif x1 == x3 and y1 == y3:\n            if x2 == x4 and y2 == y4:\n                print(-1)\n            else:\n                print(0)\n        elif x2 == x4 and y2 == y4:\n            if x1 == x3 and y1 == y3:\n                print(-1)\n            else:\n                print(0)\n        else:\n            print(0)",
        "difficulty": "interview"
    },
    {
        "task_id": 1151,
        "prompt": "Complete the Python function given the prompt below:An atom of element X can exist in n distinct states with energies E_1 < E_2 <... < E_{n}. Arkady wants to build a laser on this element, using a three-level scheme. Here is a simplified description of the scheme. \nThree distinct states i, j and k are selected, where i < j < k. After that the following process happens:   initially the atom is in the state i, we spend E_{k} - E_{i} energy to put the atom in the state k, the atom emits a photon with useful energy E_{k} - E_{j} and changes its state to the state j, the atom spontaneously changes its state to the state i, losing energy E_{j} - E_{i}, the process repeats from step 1. \nLet's define the energy conversion efficiency as $\\eta = \\frac{E_{k} - E_{j}}{E_{k} - E_{i}}$, i.\u00a0e. the ration between the useful energy of the photon and spent energy.\nDue to some limitations, Arkady can only choose such three states that E_{k} - E_{i} \u2264 U.\nHelp Arkady to find such the maximum possible energy conversion efficiency within the above constraints.\n-----Input-----\nThe first line contains two integers n and U (3 \u2264 n \u2264 10^5, 1 \u2264 U \u2264 10^9) \u2014 the number of states and the maximum possible difference between E_{k} and E_{i}.\nThe second line contains a sequence of integers E_1, E_2,..., E_{n} (1 \u2264 E_1 < E_2... < E_{n} \u2264 10^9). It is guaranteed that all E_{i} are given in increasing order.\n-----Output-----\nIf it is not possible to choose three states that satisfy all constraints, print -1.\nOtherwise, print one real number \u03b7\u00a0\u2014 the maximum possible energy conversion efficiency. Your answer is considered correct its absolute or relative error does not exceed 10^{ - 9}.\nFormally, let your answer be a, and the jury's answer be b. Your answer is considered correct if $\\frac{|a - b|}{\\operatorname{max}(1,|b|)} \\leq 10^{-9}$.\n-----Examples-----\nInput\n4 4\n1 3 5 7\nOutput\n0.5\nInput\n10 8\n10 13 15 16 17 19 20 22 24 25\nOutput\n0.875\nInput\n3 1\n2 5 10\nOutput\n-1\n-----Note-----\nIn the first example choose states 1, 2 and 3, so that the energy conversion efficiency becomes equal to $\\eta = \\frac{5 - 3}{5 - 1} = 0.5$.\nIn the second example choose states 4, 5 and 9, so that the energy conversion efficiency becomes equal to $\\eta = \\frac{24 - 17}{24 - 16} = 0.875$.\n\ndef",
        "answer": "def energy_efficiency(n, u, e):\n    e.sort()\n    i, j, k = e[0], e[1], e[2]\n    if k - i > u:\n        return -1\n    else:\n        return (k - i) / (k - j)",
        "difficulty": "interview"
    },
    {
        "task_id": 1152,
        "prompt": "Complete the Python function given the prompt below:Ramesses came to university to algorithms practice, and his professor, who is a fairly known programmer, gave him the following task.\nYou are given two matrices $A$ and $B$ of size $n \\times m$, each of which consists of $0$ and $1$ only. You can apply the following operation to the matrix $A$ arbitrary number of times: take any submatrix of the matrix $A$ that has at least two rows and two columns, and invert the values in its corners (i.e. all corners of the submatrix that contain $0$, will be replaced by $1$, and all corners of the submatrix that contain $1$, will be replaced by $0$). You have to answer whether you can obtain the matrix $B$ from the matrix $A$. [Image] An example of the operation. The chosen submatrix is shown in blue and yellow, its corners are shown in yellow. \nRamesses don't want to perform these operations by himself, so he asks you to answer this question.\nA submatrix of matrix $M$ is a matrix which consist of all elements which come from one of the rows with indices $x_1, x_1+1, \\ldots, x_2$ of matrix $M$ and one of the columns with indices $y_1, y_1+1, \\ldots, y_2$ of matrix $M$, where $x_1, x_2, y_1, y_2$ are the edge rows and columns of the submatrix. In other words, a submatrix is a set of elements of source matrix which form a solid rectangle (i.e. without holes) with sides parallel to the sides of the original matrix. The corners of the submatrix are cells $(x_1, y_1)$, $(x_1, y_2)$, $(x_2, y_1)$, $(x_2, y_2)$, where the cell $(i,j)$ denotes the cell on the intersection of the $i$-th row and the $j$-th column.\n-----Input-----\nThe first line contains two integers $n$ and $m$ ($1 \\leq n, m \\leq 500$)\u00a0\u2014 the number of rows and the number of columns in matrices $A$ and $B$.\nEach of the next $n$ lines contain $m$ integers: the $j$-th integer in the $i$-th line is the $j$-th element of the $i$-th row of the matrix $A$ ($0 \\leq A_{ij} \\leq 1$). \nEach of the next $n$ lines contain $m$ integers: the $j$-th integer in the $i$-th line is the $j$-th element of the $i$-th row of the matrix $B$ ($0 \\leq B_{ij} \\leq 1$). \n-----Output-----\nPrint \"Yes\" (without quotes) if it is possible to transform the matrix $A$ to the matrix $B$ using the operations described above, and \"No\" (without quotes), if it is not possible. You can print each letter in any case (upper or lower).\n-----Examples-----\nInput\n3 3\n0 1 0\n0 1 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\nOutput\nYes\nInput\n6 7\n0 0 1 1 0 0 1\n0 1 0 0 1 0 1\n0 0 0 1 0 0 1\n1 0 1 0 1 0 0\n0 1 0 0 1 0 1\n0 1 0 1 0 0 1\n1 1 0 1 0 1 1\n0 1 1 0 1 0 0\n1 1 0 1 0 0 1\n1 0 1 0 0 1 0\n0 1 1 0 1 0 0\n0 1 1 1 1 0 1\nOutput\nYes\nInput\n3 4\n0 1 0 1\n1 0 1 0\n0 1 0 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\nOutput\nNo\n-----Note-----\nThe examples are explained below. [Image] Example 1.  [Image] Example 2.  [Image] Example 3.\n\ndef",
        "answer": "def check(A, B):\n    n, m = len(A), len(A[0])\n    for i in range(n):\n        for j in range(m):\n            if A[i][j]!= B[i][j]:\n                return False\n    return True",
        "difficulty": "interview"
    },
    {
        "task_id": 1153,
        "prompt": "Complete the Python function given the prompt below:Hacker Zhorik wants to decipher two secret messages he intercepted yesterday. Yeah message is a sequence of encrypted blocks, each of them consists of several bytes of information.\nZhorik knows that each of the messages is an archive containing one or more files. Zhorik knows how each of these archives was transferred through the network: if an archive consists of k files of sizes l_1, l_2,..., l_{k} bytes, then the i-th file is split to one or more blocks b_{i}, 1, b_{i}, 2,..., b_{i}, m_{i} (here the total length of the blocks b_{i}, 1 + b_{i}, 2 +... + b_{i}, m_{i} is equal to the length of the file l_{i}), and after that all blocks are transferred through the network, maintaining the order of files in the archive.\nZhorik thinks that the two messages contain the same archive, because their total lengths are equal. However, each file can be split in blocks in different ways in the two messages.\nYou are given the lengths of blocks in each of the two messages. Help Zhorik to determine what is the maximum number of files could be in the archive, if the Zhorik's assumption is correct.\n-----Input-----\nThe first line contains two integers n, m (1 \u2264 n, m \u2264 10^5) \u2014 the number of blocks in the first and in the second messages.\nThe second line contains n integers x_1, x_2,..., x_{n} (1 \u2264 x_{i} \u2264 10^6) \u2014 the length of the blocks that form the first message.\nThe third line contains m integers y_1, y_2,..., y_{m} (1 \u2264 y_{i} \u2264 10^6) \u2014 the length of the blocks that form the second message.\nIt is guaranteed that x_1 +... + x_{n} = y_1 +... + y_{m}. Also, it is guaranteed that x_1 +... + x_{n} \u2264 10^6.\n-----Output-----\nPrint the maximum number of files the intercepted array could consist of.\n-----Examples-----\nInput\n7 6\n2 5 3 1 11 4 4\n7 8 2 4 1 8\nOutput\n3\nInput\n3 3\n1 10 100\n1 100 10\nOutput\n2\nInput\n1 4\n4\n1 1 1 1\nOutput\n1\n-----Note-----\nIn the first example the maximum number of files in the archive is 3. For example, it is possible that in the archive are three files of sizes 2 + 5 = 7, 15 = 3 + 1 + 11 = 8 + 2 + 4 + 1 and 4 + 4 = 8.\nIn the second example it is possible that the archive contains two files of sizes 1 and 110 = 10 + 100 = 100 + 10. Note that the order of files is kept while transferring archives through the network, so we can't say that there are three files of sizes 1, 10 and 100.\nIn the third example the only possibility is that the archive contains a single file of size 4.\n\ndef",
        "answer": "def max_files(blocks1, blocks2):\n    blocks1.sort()\n    blocks2.sort()\n    i = 0\n    j = 0\n    count = 0\n    while i < len(blocks1) and j < len(blocks2):\n        if blocks1[i] + blocks2[j] <= blocks1[-1]:\n            count += 1\n            i += 1\n            j += 1\n        else:\n            i += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 1154,
        "prompt": "Complete the Python function given the prompt below:Vanya smashes potato in a vertical food processor. At each moment of time the height of the potato in the processor doesn't exceed h and the processor smashes k centimeters of potato each second. If there are less than k centimeters remaining, than during this second processor smashes all the remaining potato.\nVanya has n pieces of potato, the height of the i-th piece is equal to a_{i}. He puts them in the food processor one by one starting from the piece number 1 and finishing with piece number n. Formally, each second the following happens:\n  If there is at least one piece of potato remaining, Vanya puts them in the processor one by one, until there is not enough space for the next piece.  Processor smashes k centimeters of potato (or just everything that is inside). \nProvided the information about the parameter of the food processor and the size of each potato in a row, compute how long will it take for all the potato to become smashed.\n-----Input-----\nThe first line of the input contains integers n, h and k (1 \u2264 n \u2264 100 000, 1 \u2264 k \u2264 h \u2264 10^9)\u00a0\u2014 the number of pieces of potato, the height of the food processor and the amount of potato being smashed each second, respectively.\nThe second line contains n integers a_{i} (1 \u2264 a_{i} \u2264 h)\u00a0\u2014 the heights of the pieces.\n-----Output-----\nPrint a single integer\u00a0\u2014 the number of seconds required to smash all the potatoes following the process described in the problem statement.\n-----Examples-----\nInput\n5 6 3\n5 4 3 2 1\nOutput\n5\nInput\n5 6 3\n5 5 5 5 5\nOutput\n10\nInput\n5 6 3\n1 2 1 1 1\nOutput\n2\n-----Note-----\nConsider the first sample.   First Vanya puts the piece of potato of height 5 into processor. At the end of the second there is only amount of height 2 remaining inside.  Now Vanya puts the piece of potato of height 4. At the end of the second there is amount of height 3 remaining.  Vanya puts the piece of height 3 inside and again there are only 3 centimeters remaining at the end of this second.  Vanya finally puts the pieces of height 2 and 1 inside. At the end of the second the height of potato in the processor is equal to 3.  During this second processor finally smashes all the remaining potato and the process finishes. \nIn the second sample, Vanya puts the piece of height 5 inside and waits for 2 seconds while it is completely smashed. Then he repeats the same process for 4 other pieces. The total time is equal to 2\u00b75 = 10 seconds.\nIn the third sample, Vanya simply puts all the potato inside the processor and waits 2 seconds.\n\ndef",
        "answer": "def solve(n, h, k):\n    if n == 1:\n        return h\n    else:\n        return (n - 1) * solve(n - 1, h, k) + k",
        "difficulty": "interview"
    },
    {
        "task_id": 1155,
        "prompt": "Complete the Python function given the prompt below:We often go to supermarkets to buy some fruits or vegetables, and on the tag there prints the price for a kilo. But in some supermarkets, when asked how much the items are, the clerk will say that $a$ yuan for $b$ kilos (You don't need to care about what \"yuan\" is), the same as $a/b$ yuan for a kilo.\nNow imagine you'd like to buy $m$ kilos of apples. You've asked $n$ supermarkets and got the prices. Find the minimum cost for those apples.\nYou can assume that there are enough apples in all supermarkets.\n-----Input-----\nThe first line contains two positive integers $n$ and $m$ ($1 \\leq n \\leq 5\\,000$, $1 \\leq m \\leq 100$), denoting that there are $n$ supermarkets and you want to buy $m$ kilos of apples.\nThe following $n$ lines describe the information of the supermarkets. Each line contains two positive integers $a, b$ ($1 \\leq a, b \\leq 100$), denoting that in this supermarket, you are supposed to pay $a$ yuan for $b$ kilos of apples.\n-----Output-----\nThe only line, denoting the minimum cost for $m$ kilos of apples. Please make sure that the absolute or relative error between your answer and the correct answer won't exceed $10^{-6}$.\nFormally, let your answer be $x$, and the jury's answer be $y$. Your answer is considered correct if $\\frac{|x - y|}{\\max{(1, |y|)}} \\le 10^{-6}$.\n-----Examples-----\nInput\n3 5\n1 2\n3 4\n1 3\nOutput\n1.66666667\nInput\n2 1\n99 100\n98 99\nOutput\n0.98989899\n-----Note-----\nIn the first sample, you are supposed to buy $5$ kilos of apples in supermarket $3$. The cost is $5/3$ yuan.\nIn the second sample, you are supposed to buy $1$ kilo of apples in supermarket $2$. The cost is $98/99$ yuan.\n\ndef",
        "answer": "def min_cost(n, m, prices):\n    prices.sort()\n    return sum(prices[:m]) / m",
        "difficulty": "interview"
    },
    {
        "task_id": 1156,
        "prompt": "Complete the Python function given the prompt below:\"We've tried solitary confinement, waterboarding and listening to Just In Beaver, to no avail. We need something extreme.\"\n\"Little Alena got an array as a birthday present...\"\nThe array b of length n is obtained from the array a of length n and two integers l and r\u00a0(l \u2264 r) using the following procedure:\nb_1 = b_2 = b_3 = b_4 = 0.\nFor all 5 \u2264 i \u2264 n:   b_{i} = 0 if a_{i}, a_{i} - 1, a_{i} - 2, a_{i} - 3, a_{i} - 4 > r and b_{i} - 1 = b_{i} - 2 = b_{i} - 3 = b_{i} - 4 = 1  b_{i} = 1 if a_{i}, a_{i} - 1, a_{i} - 2, a_{i} - 3, a_{i} - 4 < l and b_{i} - 1 = b_{i} - 2 = b_{i} - 3 = b_{i} - 4 = 0  b_{i} = b_{i} - 1 otherwise \nYou are given arrays a and b' of the same length. Find two integers l and r\u00a0(l \u2264 r), such that applying the algorithm described above will yield an array b equal to b'.\nIt's guaranteed that the answer exists.\n-----Input-----\nThe first line of input contains a single integer n (5 \u2264 n \u2264 10^5)\u00a0\u2014 the length of a and b'.\nThe second line of input contains n space separated integers a_1,..., a_{n} ( - 10^9 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 the elements of a.\nThe third line of input contains a string of n characters, consisting of 0 and 1\u00a0\u2014 the elements of b'. Note that they are not separated by spaces.\n-----Output-----\nOutput two integers l and r\u00a0( - 10^9 \u2264 l \u2264 r \u2264 10^9), conforming to the requirements described above.\nIf there are multiple solutions, output any of them.\nIt's guaranteed that the answer exists.\n-----Examples-----\nInput\n5\n1 2 3 4 5\n00001\nOutput\n6 15\nInput\n10\n-10 -9 -8 -7 -6 6 7 8 9 10\n0000111110\nOutput\n-5 5\n-----Note-----\nIn the first test case any pair of l and r pair is valid, if 6 \u2264 l \u2264 r \u2264 10^9, in that case b_5 = 1, because a_1,..., a_5 < l.\n\ndef",
        "answer": "def birthday(a, b):\n    n = len(a)\n    b_1 = b_2 = b_3 = b_4 = 0\n    for i in range(n):\n        if a[i] < r and b_1 == b_2 == b_3 == b_4 == 1:\n            b_1 = b_2 = b_3 = b_4 = 0\n        if a[i] < l and b_1 == b_2 == b_3 == b_4 == 0:\n            b_1 = b_2 = b_3 = b_4 = 1\n        if a[i] < l and b_1 == b_2 == b_3 == b_4 == 1:\n            b_1 = b_2 = b_3 = b_4 = 0\n        if a[i] > r and b_1 == b_2 == b_3 == b_4 == 0:\n            b_1 = b_2 = b_3 = b_4 = 1\n        if a[i] > r and b_1 == b_2 == b_3 == b_4 == 1:\n            b_1 = b_2 = b_3 = b_4 = 0\n        if a[i] > r and b_1 == b_2 == b_3 == b_4 == 1:\n            b_1 = b_2 = b_3 = b_4 = 0\n        if a[i] > r and b_1 == b_2 == b_3 == b_4 == 1:\n            b_1 = b_2 = b_3 = b_4 = 0\n        if a[i] > r and b_1 == b_2 == b_3 == b_4 == 1:\n",
        "difficulty": "interview"
    },
    {
        "task_id": 1157,
        "prompt": "Complete the Python function given the prompt below:You are given a sequence $a_1, a_2, \\dots, a_n$ consisting of $n$ non-zero integers (i.e. $a_i \\ne 0$). \nYou have to calculate two following values:  the number of pairs of indices $(l, r)$ $(l \\le r)$ such that $a_l \\cdot a_{l + 1} \\dots a_{r - 1} \\cdot a_r$ is negative;  the number of pairs of indices $(l, r)$ $(l \\le r)$ such that $a_l \\cdot a_{l + 1} \\dots a_{r - 1} \\cdot a_r$ is positive; \n-----Input-----\nThe first line contains one integer $n$ $(1 \\le n \\le 2 \\cdot 10^{5})$ \u2014 the number of elements in the sequence.\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ $(-10^{9} \\le a_i \\le 10^{9}; a_i \\neq 0)$ \u2014 the elements of the sequence.\n-----Output-----\nPrint two integers \u2014 the number of subsegments with negative product and the number of subsegments with positive product, respectively.\n-----Examples-----\nInput\n5\n5 -3 3 -1 1\nOutput\n8 7\nInput\n10\n4 2 -4 3 1 2 -4 3 2 3\nOutput\n28 27\nInput\n5\n-1 -2 -3 -4 -5\nOutput\n9 6\n\ndef",
        "answer": "def count_subsegments(a):\n    n = len(a)\n    count_neg = 0\n    count_pos = 0\n    for i in range(n):\n        for j in range(i, n):\n            if a[i] * a[j] < 0:\n                count_neg += 1\n            elif a[i] * a[j] > 0:\n                count_pos += 1\n    return count_neg, count_pos",
        "difficulty": "interview"
    },
    {
        "task_id": 1158,
        "prompt": "Complete the Python function given the prompt below:The king's birthday dinner was attended by $k$ guests. The dinner was quite a success: every person has eaten several dishes (though the number of dishes was the same for every person) and every dish was served alongside with a new set of kitchen utensils.\nAll types of utensils in the kingdom are numbered from $1$ to $100$. It is known that every set of utensils is the same and consist of different types of utensils, although every particular type may appear in the set at most once. For example, a valid set of utensils can be composed of one fork, one spoon and one knife.\nAfter the dinner was over and the guests were dismissed, the king wondered what minimum possible number of utensils could be stolen. Unfortunately, the king has forgotten how many dishes have been served for every guest but he knows the list of all the utensils left after the dinner. Your task is to find the minimum possible number of stolen utensils.\n-----Input-----\nThe first line contains two integer numbers $n$ and $k$ ($1 \\le n \\le 100, 1 \\le k \\le 100$) \u00a0\u2014 the number of kitchen utensils remaining after the dinner and the number of guests correspondingly.\nThe next line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 100$) \u00a0\u2014 the types of the utensils remaining. Equal values stand for identical utensils while different values stand for different utensils.\n-----Output-----\nOutput a single value \u2014 the minimum number of utensils that could be stolen by the guests.\n-----Examples-----\nInput\n5 2\n1 2 2 1 3\nOutput\n1\nInput\n10 3\n1 3 3 1 3 5 5 5 5 100\nOutput\n14\n-----Note-----\nIn the first example it is clear that at least one utensil of type $3$ has been stolen, since there are two guests and only one such utensil. But it is also possible that every person received only one dish and there were only six utensils in total, when every person got a set $(1, 2, 3)$ of utensils. Therefore, the answer is $1$.\nOne can show that in the second example at least $2$ dishes should have been served for every guest, so the number of utensils should be at least $24$: every set contains $4$ utensils and every one of the $3$ guests gets two such sets. Therefore, at least $14$ objects have been stolen. Please note that utensils of some types (for example, of types $2$ and $4$ in this example) may be not present in the set served for dishes.\n\ndef",
        "answer": "def stolen_utensils(n, k, arr):\n    arr.sort()\n    count = 0\n    for i in range(n):\n        if arr[i]!= arr[i+1]:\n            count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 1159,
        "prompt": "Complete the Python function given the prompt below:Every person likes prime numbers. Alice is a person, thus she also shares the love for them. Bob wanted to give her an affectionate gift but couldn't think of anything inventive. Hence, he will be giving her a graph. How original, Bob! Alice will surely be thrilled!\nWhen building the graph, he needs four conditions to be satisfied:   It must be a simple undirected graph, i.e. without multiple (parallel) edges and self-loops.  The number of vertices must be exactly $n$\u00a0\u2014 a number he selected. This number is not necessarily prime.  The total number of edges must be prime.  The degree (i.e. the number of edges connected to the vertex) of each vertex must be prime. \nBelow is an example for $n = 4$. The first graph (left one) is invalid as the degree of vertex $2$ (and $4$) equals to $1$, which is not prime. The second graph (middle one) is invalid as the total number of edges is $4$, which is not a prime number. The third graph (right one) is a valid answer for $n = 4$.  [Image] \nNote that the graph can be disconnected.\nPlease help Bob to find any such graph!\n-----Input-----\nThe input consists of a single integer $n$ ($3 \\leq n \\leq 1\\,000$)\u00a0\u2014 the number of vertices.\n-----Output-----\nIf there is no graph satisfying the conditions, print a single line containing the integer $-1$.\nOtherwise, first print a line containing a prime number $m$ ($2 \\leq m \\leq \\frac{n(n-1)}{2}$)\u00a0\u2014 the number of edges in the graph. Then, print $m$ lines, the $i$-th of which containing two integers $u_i$, $v_i$ ($1 \\leq u_i, v_i \\leq n$)\u00a0\u2014 meaning that there is an edge between vertices $u_i$ and $v_i$. The degree of each vertex must be prime. There must be no multiple (parallel) edges or self-loops.\nIf there are multiple solutions, you may print any of them.\nNote that the graph can be disconnected.\n-----Examples-----\nInput\n4\nOutput\n5\n1 2\n1 3\n2 3\n2 4\n3 4\nInput\n8\nOutput\n13\n1 2\n1 3\n2 3\n1 4\n2 4\n1 5\n2 5\n1 6\n2 6\n1 7\n1 8\n5 8\n7 8\n-----Note-----\nThe first example was described in the statement.\nIn the second example, the degrees of vertices are $[7, 5, 2, 2, 3, 2, 2, 3]$. Each of these numbers is prime. Additionally, the number of edges, $13$, is also a prime number, hence both conditions are satisfied. [Image]\n\ndef",
        "answer": "def isPrime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True",
        "difficulty": "interview"
    },
    {
        "task_id": 1160,
        "prompt": "Complete the Python function given the prompt below:The organizers of a programming contest have decided to present t-shirts to participants. There are six different t-shirts sizes in this problem: S, M, L, XL, XXL, XXXL (sizes are listed in increasing order). The t-shirts are already prepared. For each size from S to XXXL you are given the number of t-shirts of this size.\nDuring the registration, the organizers asked each of the n participants about the t-shirt size he wants. If a participant hesitated between two sizes, he could specify two neighboring sizes\u00a0\u2014 this means that any of these two sizes suits him.\nWrite a program that will determine whether it is possible to present a t-shirt to each participant of the competition, or not. Of course, each participant should get a t-shirt of proper size:   the size he wanted, if he specified one size;  any of the two neibouring sizes, if he specified two sizes. \nIf it is possible, the program should find any valid distribution of the t-shirts.\n-----Input-----\nThe first line of the input contains six non-negative integers\u00a0\u2014 the number of t-shirts of each size. The numbers are given for the sizes S, M, L, XL, XXL, XXXL, respectively. The total number of t-shirts doesn't exceed 100 000.\nThe second line contains positive integer n (1 \u2264 n \u2264 100 000)\u00a0\u2014 the number of participants.\nThe following n lines contain the sizes specified by the participants, one line per participant. The i-th line contains information provided by the i-th participant: single size or two sizes separated by comma (without any spaces). If there are two sizes, the sizes are written in increasing order. It is guaranteed that two sizes separated by comma are neighboring.\n-----Output-----\nIf it is not possible to present a t-shirt to each participant, print \u00abNO\u00bb (without quotes).\nOtherwise, print n + 1 lines. In the first line print \u00abYES\u00bb (without quotes). In the following n lines print the t-shirt sizes the orginizers should give to participants, one per line. The order of the participants should be the same as in the input.\nIf there are multiple solutions, print any of them.\n-----Examples-----\nInput\n0 1 0 1 1 0\n3\nXL\nS,M\nXL,XXL\nOutput\nYES\nXL\nM\nXXL\nInput\n1 1 2 0 1 1\n5\nS\nM\nS,M\nXXL,XXXL\nXL,XXL\nOutput\nNO\n\ndef",
        "answer": "def tshirts(sizes):\n    sizes = sorted(sizes)\n    sizes = [sizes[0]] + [sizes[i] - sizes[i - 1] for i in range(1, len(sizes))] + [sizes[-1]]\n    sizes = sorted(sizes)\n    sizes = [sizes[0]] + [sizes[i] - sizes[i - 1] for i in range(1, len(sizes))] + [sizes[-1]]\n    sizes = sorted(sizes)\n    sizes = [sizes[0]] + [sizes[i] - sizes[i - 1] for i in range(1, len(sizes))] + [sizes[-1]]\n    sizes = sorted(sizes)\n    sizes = [sizes[0]] + [sizes[i] - sizes[i - 1] for i in range(1, len(sizes))] + [sizes[-1]]\n    sizes = sorted(sizes)\n    sizes = [sizes[0]] + [sizes[i] - sizes[i - 1] for i in range(1, len(sizes))] + [sizes[-1]]\n    sizes = sorted(sizes)\n    sizes = [sizes[0]] + [sizes[i] - sizes[i - 1] for i in range(1, len(sizes))] + [sizes[-1]]\n    sizes = sorted(sizes)\n    sizes = [sizes[0]] + [sizes[i] - sizes[i - 1] for i in range(1, len(sizes))] + [sizes[-1]]\n    ",
        "difficulty": "interview"
    },
    {
        "task_id": 1161,
        "prompt": "Complete the Python function given the prompt below:You are given string s consists of opening and closing brackets of four kinds <>, {}, [], (). There are two types of brackets: opening and closing. You can replace any bracket by another of the same type. For example, you can replace < by the bracket {, but you can't replace it by ) or >.\nThe following definition of a regular bracket sequence is well-known, so you can be familiar with it.\nLet's define a regular bracket sequence (RBS). Empty string is RBS. Let s_1 and s_2 be a RBS then the strings <s_1>s_2, {s_1}s_2, [s_1]s_2, (s_1)s_2 are also RBS.\nFor example the string \"[[(){}]<>]\" is RBS, but the strings \"[)()\" and \"][()()\" are not.\nDetermine the least number of replaces to make the string s RBS.\n-----Input-----\nThe only line contains a non empty string s, consisting of only opening and closing brackets of four kinds. The length of s does not exceed 10^6.\n-----Output-----\nIf it's impossible to get RBS from s print Impossible.\nOtherwise print the least number of replaces needed to get RBS from s.\n-----Examples-----\nInput\n[<}){}\nOutput\n2\nInput\n{()}[]\nOutput\n0\nInput\n]]\nOutput\nImpossible\n\ndef",
        "answer": "def bracket_sequence(s):\n    bracket_dict = {'(': ')', '{': '}', '[': ']', '<': '>'}\n    bracket_stack = []\n    for bracket in s:\n        if bracket in bracket_dict:\n            bracket_stack.append(bracket)\n        else:\n            if bracket_stack and bracket_dict[bracket_stack[-1]] == bracket:\n                bracket_stack.pop()\n            else:\n                return 'Impossible'\n    return len(bracket_stack)",
        "difficulty": "interview"
    },
    {
        "task_id": 1162,
        "prompt": "Complete the Python function given the prompt below:Hasan loves playing games and has recently discovered a game called TopScore. In this soccer-like game there are $p$ players doing penalty shoot-outs. Winner is the one who scores the most. In case of ties, one of the top-scorers will be declared as the winner randomly with equal probability.\nThey have just finished the game and now are waiting for the result. But there's a tiny problem! The judges have lost the paper of scores! Fortunately they have calculated sum of the scores before they get lost and also for some of the players they have remembered a lower bound on how much they scored. However, the information about the bounds is private, so Hasan only got to know his bound.\nAccording to the available data, he knows that his score is at least $r$ and sum of the scores is $s$.\nThus the final state of the game can be represented in form of sequence of $p$ integers $a_1, a_2, \\dots, a_p$ ($0 \\le a_i$) \u2014 player's scores. Hasan is player number $1$, so $a_1 \\ge r$. Also $a_1 + a_2 + \\dots + a_p = s$. Two states are considered different if there exists some position $i$ such that the value of $a_i$ differs in these states. \nOnce again, Hasan doesn't know the exact scores (he doesn't know his exact score as well). So he considers each of the final states to be equally probable to achieve.\nHelp Hasan find the probability of him winning.\nIt can be shown that it is in the form of $\\frac{P}{Q}$ where $P$ and $Q$ are non-negative integers and $Q \\ne 0$, $P \\le Q$. Report the value of $P \\cdot Q^{-1} \\pmod {998244353}$.\n-----Input-----\nThe only line contains three integers $p$, $s$ and $r$ ($1 \\le p \\le 100$, $0 \\le r \\le s \\le 5000$) \u2014 the number of players, the sum of scores of all players and Hasan's score, respectively.\n-----Output-----\nPrint a single integer \u2014 the probability of Hasan winning.\nIt can be shown that it is in the form of $\\frac{P}{Q}$ where $P$ and $Q$ are non-negative integers and $Q \\ne 0$, $P \\le Q$. Report the value of $P \\cdot Q^{-1} \\pmod {998244353}$.\n-----Examples-----\nInput\n2 6 3\nOutput\n124780545\nInput\n5 20 11\nOutput\n1\nInput\n10 30 10\nOutput\n85932500\n-----Note-----\nIn the first example Hasan can score $3$, $4$, $5$ or $6$ goals. If he scores $4$ goals or more than he scores strictly more than his only opponent. If he scores $3$ then his opponent also scores $3$ and Hasan has a probability of $\\frac 1 2$ to win the game. Thus, overall he has the probability of $\\frac 7 8$ to win.\nIn the second example even Hasan's lower bound on goal implies him scoring more than any of his opponents. Thus, the resulting probability is $1$.\n\ndef",
        "answer": "def solve(p, s, r):\n    return (p * (s - r + 1) + 1) % 998244353",
        "difficulty": "interview"
    },
    {
        "task_id": 1163,
        "prompt": "Complete the Python function given the prompt below:There are n boys and m girls studying in the class. They should stand in a line so that boys and girls alternated there as much as possible. Let's assume that positions in the line are indexed from left to right by numbers from 1 to n + m. Then the number of integers i (1 \u2264 i < n + m) such that positions with indexes i and i + 1 contain children of different genders (position i has a girl and position i + 1 has a boy or vice versa) must be as large as possible. \nHelp the children and tell them how to form the line.\n-----Input-----\nThe single line of the input contains two integers n and m (1 \u2264 n, m \u2264 100), separated by a space.\n-----Output-----\nPrint a line of n + m characters. Print on the i-th position of the line character \"B\", if the i-th position of your arrangement should have a boy and \"G\", if it should have a girl. \nOf course, the number of characters \"B\" should equal n and the number of characters \"G\" should equal m. If there are multiple optimal solutions, print any of them.\n-----Examples-----\nInput\n3 3\nOutput\nGBGBGB\nInput\n4 2\nOutput\nBGBGBB\n-----Note-----\nIn the first sample another possible answer is BGBGBG. \nIn the second sample answer BBGBGB is also optimal.\n\ndef",
        "answer": "def alternatingCharacters(s):\n    count = 0\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 1164,
        "prompt": "Complete the Python function given the prompt below:Vasily exited from a store and now he wants to recheck the total price of all purchases in his bill. The bill is a string in which the names of the purchases and their prices are printed in a row without any spaces. Check has the format \"name_1price_1name_2price_2...name_{n}price_{n}\", where name_{i} (name of the i-th purchase) is a non-empty string of length not more than 10, consisting of lowercase English letters, and price_{i} (the price of the i-th purchase) is a non-empty string, consisting of digits and dots (decimal points). It is possible that purchases with equal names have different prices.\nThe price of each purchase is written in the following format. If the price is an integer number of dollars then cents are not written.\nOtherwise, after the number of dollars a dot (decimal point) is written followed by cents in a two-digit format (if number of cents is between 1 and 9 inclusively, there is a leading zero).\nAlso, every three digits (from less significant to the most) in dollars are separated by dot (decimal point). No extra leading zeroes are allowed. The price always starts with a digit and ends with a digit.\nFor example:  \"234\", \"1.544\", \"149.431.10\", \"0.99\" and \"123.05\" are valid prices,  \".333\", \"3.33.11\", \"12.00\", \".33\", \"0.1234\" and \"1.2\" are not valid. \nWrite a program that will find the total price of all purchases in the given bill.\n-----Input-----\nThe only line of the input contains a non-empty string s with length not greater than 1000\u00a0\u2014 the content of the bill.\nIt is guaranteed that the bill meets the format described above. It is guaranteed that each price in the bill is not less than one cent and not greater than 10^6 dollars.\n-----Output-----\nPrint the total price exactly in the same format as prices given in the input.\n-----Examples-----\nInput\nchipsy48.32televizor12.390\nOutput\n12.438.32\nInput\na1b2c3.38\nOutput\n6.38\nInput\naa0.01t0.03\nOutput\n0.04\n\ndef",
        "answer": "def total_price(bill):\n    bill = bill.split('.')\n    bill = bill[0]\n    bill = bill.split('_')\n    bill = bill[1:]\n    bill = bill[::2]\n    bill = bill[::-1]\n    bill = bill[::-1]\n    bill = bill[::-1]\n    bill = bill[::-1]\n    bill = bill[::-1]\n    bill = bill[::-1]\n    bill = bill[::-1]\n    bill = bill[::-1]\n    bill = bill[::-1]\n    bill = bill[::-1]\n    bill = bill[::-1]\n    bill = bill[::-1]\n    bill = bill[::-1]\n    bill = bill[::-1]\n    bill = bill[::-1]\n    bill = bill[::-1]\n    bill = bill[::-1]\n    bill = bill[::-1]\n    bill = bill[::-1]\n    bill = bill[::-1]\n    bill = bill[::-1]\n    bill = bill[::-1]\n    bill = bill[::-1]\n    bill = bill[::-1]\n    bill = bill[::-1]\n    bill = bill[::-1]\n    bill = bill[::-1]\n    bill = bill[::-1]\n    bill = bill[::-1]\n    bill = bill[::-1]\n    bill = bill[::-1]\n    bill = bill[::-1]\n    bill = bill[::-1]\n    bill = bill[::-1]\n    bill = bill[::-1",
        "difficulty": "interview"
    },
    {
        "task_id": 1165,
        "prompt": "Complete the Python function given the prompt below:You are given array a with n integers and m queries. The i-th query is given with three integers l_{i}, r_{i}, x_{i}.\nFor the i-th query find any position p_{i} (l_{i} \u2264 p_{i} \u2264 r_{i}) so that a_{p}_{i} \u2260 x_{i}.\n-----Input-----\nThe first line contains two integers n, m (1 \u2264 n, m \u2264 2\u00b710^5) \u2014 the number of elements in a and the number of queries.\nThe second line contains n integers a_{i} (1 \u2264 a_{i} \u2264 10^6) \u2014 the elements of the array a.\nEach of the next m lines contains three integers l_{i}, r_{i}, x_{i} (1 \u2264 l_{i} \u2264 r_{i} \u2264 n, 1 \u2264 x_{i} \u2264 10^6) \u2014 the parameters of the i-th query.\n-----Output-----\nPrint m lines. On the i-th line print integer p_{i} \u2014 the position of any number not equal to x_{i} in segment [l_{i}, r_{i}] or the value  - 1 if there is no such number.\n-----Examples-----\nInput\n6 4\n1 2 1 1 3 5\n1 4 1\n2 6 2\n3 4 1\n3 4 2\nOutput\n2\n6\n-1\n4\n\ndef",
        "answer": "def check(a, l, r, x):\n    for i in range(l, r + 1):\n        if a[i]!= x:\n            return i\n    return -1",
        "difficulty": "interview"
    },
    {
        "task_id": 1166,
        "prompt": "Complete the Python function given the prompt below:After a long day, Alice and Bob decided to play a little game. The game board consists of $n$ cells in a straight line, numbered from $1$ to $n$, where each cell contains a number $a_i$ between $1$ and $n$. Furthermore, no two cells contain the same number. \nA token is placed in one of the cells. They take alternating turns of moving the token around the board, with Alice moving first. The current player can move from cell $i$ to cell $j$ only if the following two conditions are satisfied:   the number in the new cell $j$ must be strictly larger than the number in the old cell $i$ (i.e. $a_j > a_i$), and  the distance that the token travels during this turn must be a multiple of the number in the old cell (i.e. $|i-j|\\bmod a_i = 0$). \nWhoever is unable to make a move, loses. For each possible starting position, determine who wins if they both play optimally. It can be shown that the game is always finite, i.e. there always is a winning strategy for one of the players.\n-----Input-----\nThe first line contains a single integer $n$ ($1 \\le n \\le 10^5$)\u00a0\u2014 the number of numbers.\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le n$). Furthermore, there are no pair of indices $i \\neq j$ such that $a_i = a_j$.\n-----Output-----\nPrint $s$\u00a0\u2014 a string of $n$ characters, where the $i$-th character represents the outcome of the game if the token is initially placed in the cell $i$. If Alice wins, then $s_i$ has to be equal to \"A\"; otherwise, $s_i$ has to be equal to \"B\". \n-----Examples-----\nInput\n8\n3 6 5 4 2 7 1 8\nOutput\nBAAAABAB\nInput\n15\n3 11 2 5 10 9 7 13 15 8 4 12 6 1 14\nOutput\nABAAAABBBAABAAB\n-----Note-----\nIn the first sample, if Bob puts the token on the number (not position):   $1$: Alice can move to any number. She can win by picking $7$, from which Bob has no move.  $2$: Alice can move to $3$ and $5$. Upon moving to $5$, Bob can win by moving to $8$. If she chooses $3$ instead, she wins, as Bob has only a move to $4$, from which Alice can move to $8$.  $3$: Alice can only move to $4$, after which Bob wins by moving to $8$.  $4$, $5$, or $6$: Alice wins by moving to $8$.  $7$, $8$: Alice has no move, and hence she loses immediately.\n\ndef",
        "answer": "def game(n, a):\n    if n == 1:\n        return \"A\"\n    if n == 2:\n        return \"B\"\n    if n == 3:\n        return \"A\"\n    if n == 4:\n        return \"B\"\n    if n == 5:\n        return \"A\"\n    if n == 6:\n        return \"B\"\n    if n == 7:\n        return \"A\"\n    if n == 8:\n        return \"B\"\n    if n == 9:\n        return \"A\"\n    if n == 10:\n        return \"B\"\n    if n == 11:\n        return \"A\"\n    if n == 12:\n        return \"B\"\n    if n == 13:\n        return \"A\"\n    if n == 14:\n        return \"B\"\n    if n == 15:\n        return \"A\"\n    if n == 16:\n        return \"B\"\n    if n == 17:\n        return \"A\"\n    if n == 18:\n        return \"B\"\n    if n == 19:\n        return \"A\"\n    if n == 20:\n        return \"B\"\n    if n == 21:\n        return \"A\"\n    if n == 22:\n        return \"B\"\n    if n == 23:\n        return \"A\"\n    if n == 24:\n        return \"B\"\n    if n == 25:\n        return \"A\"\n    if n == 26:\n        return \"B\"\n    if n == 27:\n        return \"A\"\n    if n == 28:\n        return \"B\"\n    if n == 29:\n        return \"A\"\n    if n == 30:\n        return \"B\"\n    if n",
        "difficulty": "interview"
    },
    {
        "task_id": 1167,
        "prompt": "Complete the Python function given the prompt below:Tomorrow is a difficult day for Polycarp: he has to attend $a$ lectures and $b$ practical classes at the university! Since Polycarp is a diligent student, he is going to attend all of them.\nWhile preparing for the university, Polycarp wonders whether he can take enough writing implements to write all of the lectures and draw everything he has to during all of the practical classes. Polycarp writes lectures using a pen (he can't use a pencil to write lectures!); he can write down $c$ lectures using one pen, and after that it runs out of ink. During practical classes Polycarp draws blueprints with a pencil (he can't use a pen to draw blueprints!); one pencil is enough to draw all blueprints during $d$ practical classes, after which it is unusable.\nPolycarp's pencilcase can hold no more than $k$ writing implements, so if Polycarp wants to take $x$ pens and $y$ pencils, they will fit in the pencilcase if and only if $x + y \\le k$.\nNow Polycarp wants to know how many pens and pencils should he take. Help him to determine it, or tell that his pencilcase doesn't have enough room for all the implements he needs tomorrow!\nNote that you don't have to minimize the number of writing implements (though their total number must not exceed $k$).\n-----Input-----\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 100$) \u2014 the number of test cases in the input. Then the test cases follow.\nEach test case is described by one line containing five integers $a$, $b$, $c$, $d$ and $k$, separated by spaces ($1 \\le a, b, c, d, k \\le 100$) \u2014 the number of lectures Polycarp has to attend, the number of practical classes Polycarp has to attend, the number of lectures which can be written down using one pen, the number of practical classes for which one pencil is enough, and the number of writing implements that can fit into Polycarp's pencilcase, respectively.\nIn hacks it is allowed to use only one test case in the input, so $t = 1$ should be satisfied.\n-----Output-----\nFor each test case, print the answer as follows:\nIf the pencilcase can't hold enough writing implements to use them during all lectures and practical classes, print one integer $-1$. Otherwise, print two non-negative integers $x$ and $y$ \u2014 the number of pens and pencils Polycarp should put in his pencilcase. If there are multiple answers, print any of them. Note that you don't have to minimize the number of writing implements (though their total number must not exceed $k$).\n-----Example-----\nInput\n3\n7 5 4 5 8\n7 5 4 5 2\n20 53 45 26 4\nOutput\n7 1\n-1\n1 3\n-----Note-----\nThere are many different answers for the first test case; $x = 7$, $y = 1$ is only one of them. For example, $x = 3$, $y = 1$ is also correct.\n$x = 1$, $y = 3$ is the only correct answer for the third test case.\n\ndef",
        "answer": "def solve(a, b, c, d, k):\n    if a + b > k:\n        return -1\n    if a + c > k:\n        return -1\n    if b + d > k:\n        return -1\n    return min(a, b, c, d)",
        "difficulty": "interview"
    },
    {
        "task_id": 1168,
        "prompt": "Complete the Python function given the prompt below:Disclaimer: there are lots of untranslateable puns in the Russian version of the statement, so there is one more reason for you to learn Russian :)\nRick and Morty like to go to the ridge High Cry for crying loudly\u00a0\u2014 there is an extraordinary echo. Recently they discovered an interesting acoustic characteristic of this ridge: if Rick and Morty begin crying simultaneously from different mountains, their cry would be heard between these mountains up to the height equal the bitwise OR of mountains they've climbed and all the mountains between them. \nBitwise OR is a binary operation which is determined the following way. Consider representation of numbers x and y in binary numeric system (probably with leading zeroes) x = x_{k}... x_1x_0 and y = y_{k}... y_1y_0. Then z = x\u00a0|\u00a0y is defined following way: z = z_{k}... z_1z_0, where z_{i} = 1, if x_{i} = 1 or y_{i} = 1, and z_{i} = 0 otherwise. In the other words, digit of bitwise OR of two numbers equals zero if and only if digits at corresponding positions is both numbers equals zero. For example bitwise OR of numbers 10 = 1010_2 and 9 = 1001_2 equals 11 = 1011_2. In programming languages C/C++/Java/Python this operation is defined as \u00ab|\u00bb, and in Pascal as \u00abor\u00bb.\nHelp Rick and Morty calculate the number of ways they can select two mountains in such a way that if they start crying from these mountains their cry will be heard above these mountains and all mountains between them. More formally you should find number of pairs l and r (1 \u2264 l < r \u2264 n) such that bitwise OR of heights of all mountains between l and r (inclusive) is larger than the height of any mountain at this interval.\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 200 000), the number of mountains in the ridge.\nSecond line contains n integers a_{i} (0 \u2264 a_{i} \u2264 10^9), the heights of mountains in order they are located in the ridge.\n-----Output-----\nPrint the only integer, the number of ways to choose two different mountains.\n-----Examples-----\nInput\n5\n3 2 1 6 5\nOutput\n8\nInput\n4\n3 3 3 3\nOutput\n0\n-----Note-----\nIn the first test case all the ways are pairs of mountains with the numbers (numbering from one):(1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 4), (3, 5), (4, 5)\nIn the second test case there are no such pairs because for any pair of mountains the height of cry from them is 3, and this height is equal to the height of any mountain.\n\ndef",
        "answer": "def count_ways(n, a):\n    a.sort()\n    ways = [0] * n\n    ways[0] = 1\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] | a[j] > a[i]:\n                ways[i] += ways[j]\n    return ways[-1]",
        "difficulty": "interview"
    },
    {
        "task_id": 1169,
        "prompt": "Complete the Python function given the prompt below:Vasya has got an undirected graph consisting of $n$ vertices and $m$ edges. This graph doesn't contain any self-loops or multiple edges. Self-loop is an edge connecting a vertex to itself. Multiple edges are a pair of edges such that they connect the same pair of vertices. Since the graph is undirected, the pair of edges $(1, 2)$ and $(2, 1)$ is considered to be multiple edges. Isolated vertex of the graph is a vertex such that there is no edge connecting this vertex to any other vertex.\nVasya wants to know the minimum and maximum possible number of isolated vertices in an undirected graph consisting of $n$ vertices and $m$ edges. \n-----Input-----\nThe only line contains two integers $n$ and $m~(1 \\le n \\le 10^5, 0 \\le m \\le \\frac{n (n - 1)}{2})$.\nIt is guaranteed that there exists a graph without any self-loops or multiple edges with such number of vertices and edges.\n-----Output-----\nIn the only line print two numbers $min$ and $max$ \u2014 the minimum and maximum number of isolated vertices, respectively.\n-----Examples-----\nInput\n4 2\nOutput\n0 1\nInput\n3 1\nOutput\n1 1\n-----Note-----\nIn the first example it is possible to construct a graph with $0$ isolated vertices: for example, it should contain edges $(1, 2)$ and $(3, 4)$. To get one isolated vertex, we may construct a graph with edges $(1, 2)$ and $(1, 3)$. \nIn the second example the graph will always contain exactly one isolated vertex.\n\ndef",
        "answer": "def min_max_isolated_vertices(n, m):\n    return min, max",
        "difficulty": "interview"
    },
    {
        "task_id": 1170,
        "prompt": "Complete the Python function given the prompt below:Let's denote a m-free matrix as a binary (that is, consisting of only 1's and 0's) matrix such that every square submatrix of size m \u00d7 m of this matrix contains at least one zero. \nConsider the following problem:\nYou are given two integers n and m. You have to construct an m-free square matrix of size n \u00d7 n such that the number of 1's in this matrix is maximum possible. Print the maximum possible number of 1's in such matrix.\nYou don't have to solve this problem. Instead, you have to construct a few tests for it.\nYou will be given t numbers x_1, x_2,..., x_{t}. For every $i \\in [ 1, t ]$, find two integers n_{i} and m_{i} (n_{i} \u2265 m_{i}) such that the answer for the aforementioned problem is exactly x_{i} if we set n = n_{i} and m = m_{i}.\n-----Input-----\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of tests you have to construct.\nThen t lines follow, i-th line containing one integer x_{i} (0 \u2264 x_{i} \u2264 10^9).\nNote that in hacks you have to set t = 1.\n-----Output-----\nFor each test you have to construct, output two positive numbers n_{i} and m_{i} (1 \u2264 m_{i} \u2264 n_{i} \u2264 10^9) such that the maximum number of 1's in a m_{i}-free n_{i} \u00d7 n_{i} matrix is exactly x_{i}. If there are multiple solutions, you may output any of them; and if this is impossible to construct a test, output a single integer  - 1. \n-----Example-----\nInput\n3\n21\n0\n1\nOutput\n5 2\n1 1\n-1\n\ndef",
        "answer": "def max_ones(n, m):\n    if n == 1:\n        return m\n    if m == 1:\n        return n\n    if n < m:\n        return -1\n    if n == m:\n        return n\n    return max_ones(n - m, m)",
        "difficulty": "interview"
    },
    {
        "task_id": 1171,
        "prompt": "Complete the Python function given the prompt below:Your friend gave you a dequeue D as a birthday present.\nD is a horizontal cylinder that contains a row of N jewels.\nThe values of the jewels are V_1, V_2,..., V_N from left to right. There may be jewels with negative values.\nIn the beginning, you have no jewel in your hands.\nYou can perform at most K operations on D, chosen from the following, at most K times (possibly zero):\n - Operation A: Take out the leftmost jewel contained in D and have it in your hand. You cannot do this operation when D is empty.\n - Operation B: Take out the rightmost jewel contained in D and have it in your hand. You cannot do this operation when D is empty.\n - Operation C: Choose a jewel in your hands and insert it to the left end of D. You cannot do this operation when you have no jewel in your hand.\n - Operation D: Choose a jewel in your hands and insert it to the right end of D. You cannot do this operation when you have no jewel in your hand.\nFind the maximum possible sum of the values of jewels in your hands after the operations.\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 50\n - 1 \\leq K \\leq 100\n - -10^7 \\leq V_i \\leq 10^7\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\nV_1 V_2... V_N\n-----Output-----\nPrint the maximum possible sum of the values of jewels in your hands after the operations.\n-----Sample Input-----\n6 4\n-10 8 2 1 2 6\n-----Sample Output-----\n14\nAfter the following sequence of operations, you have two jewels of values 8 and 6 in your hands for a total of 14, which is the maximum result.\n - Do operation A. You take out the jewel of value -10 from the left end of D.\n - Do operation B. You take out the jewel of value 6 from the right end of D.\n - Do operation A. You take out the jewel of value 8 from the left end of D.\n - Do operation D. You insert the jewel of value -10 to the right end of D.\n\ndef",
        "answer": "def dequeue_jewels(jewels, k):\n    jewels.sort()\n    jewels.reverse()\n    jewels_sum = 0\n    for i in range(k):\n        if jewels[i] < 0:\n            jewels_sum += jewels[i]\n            jewels.pop(i)\n        else:\n            jewels.pop(i)\n            jewels.append(jewels[i])\n            jewels.sort()\n            jewels.reverse()\n    return jewels_sum",
        "difficulty": "interview"
    },
    {
        "task_id": 1172,
        "prompt": "Complete the Python function given the prompt below:The ABC number of a string T is the number of triples of integers (i, j, k) that satisfy all of the following conditions:\n - 1 \u2264 i < j < k \u2264 |T| (|T| is the length of T.)\n - T_i = A (T_i is the i-th character of T from the beginning.)\n - T_j = B\n - T_k = C\nFor example, when T = ABCBC, there are three triples of integers (i, j, k) that satisfy the conditions: (1, 2, 3), (1, 2, 5), (1, 4, 5). Thus, the ABC number of T is 3.\nYou are given a string S. Each character of S is A, B, C or?.\nLet Q be the number of occurrences of? in S. We can make 3^Q strings by replacing each occurrence of? in S with A, B or C. Find the sum of the ABC numbers of all these strings.\nThis sum can be extremely large, so print the sum modulo 10^9 + 7.\n-----Constraints-----\n - 3 \u2264 |S| \u2264 10^5\n - Each character of S is A, B, C or?.\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n-----Output-----\nPrint the sum of the ABC numbers of all the 3^Q strings, modulo 10^9 + 7.\n-----Sample Input-----\nA??C\n-----Sample Output-----\n8\nIn this case, Q = 2, and we can make 3^Q = 9 strings by by replacing each occurrence of? with A, B or C. The ABC number of each of these strings is as follows:\n - AAAC: 0\n - AABC: 2\n - AACC: 0\n - ABAC: 1\n - ABBC: 2\n - ABCC: 2\n - ACAC: 0\n - ACBC: 1\n - ACCC: 0\nThe sum of these is 0 + 2 + 0 + 1 + 2 + 2 + 0 + 1 + 0 = 8, so we print 8 modulo 10^9 + 7, that is, 8.\n\ndef",
        "answer": "def abc(s):\n    a = s.count('A')\n    b = s.count('B')\n    c = s.count('C')\n    return a*b*c",
        "difficulty": "interview"
    },
    {
        "task_id": 1173,
        "prompt": "Complete the Python function given the prompt below:N players will participate in a tennis tournament. We will call them Player 1, Player 2, \\ldots, Player N.\nThe tournament is round-robin format, and there will be N(N-1)/2 matches in total.\nIs it possible to schedule these matches so that all of the following conditions are satisfied? If the answer is yes, also find the minimum number of days required.\n - Each player plays at most one matches in a day.\n - Each player i (1 \\leq i \\leq N) plays one match against Player A_{i, 1}, A_{i, 2}, \\ldots, A_{i, N-1} in this order.\n-----Constraints-----\n - 3 \\leq N \\leq 1000\n - 1 \\leq A_{i, j} \\leq N\n - A_{i, j} \\neq i\n - A_{i, 1}, A_{i, 2}, \\ldots, A_{i, N-1} are all different.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_{1, 1} A_{1, 2} \\ldots A_{1, N-1}\nA_{2, 1} A_{2, 2} \\ldots A_{2, N-1}\n:\nA_{N, 1} A_{N, 2} \\ldots A_{N, N-1}\n-----Output-----\nIf it is possible to schedule all the matches so that all of the conditions are satisfied, print the minimum number of days required; if it is impossible, print -1.\n-----Sample Input-----\n3\n2 3\n1 3\n1 2\n-----Sample Output-----\n3\nAll the conditions can be satisfied if the matches are scheduled for three days as follows:\n - Day 1: Player 1 vs Player 2\n - Day 2: Player 1 vs Player 3\n - Day 3: Player 2 vs Player 3\nThis is the minimum number of days required.\n\ndef",
        "answer": "def schedule_tournament(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n",
        "difficulty": "interview"
    },
    {
        "task_id": 1174,
        "prompt": "Complete the Python function given the prompt below:Takahashi is going to buy N items one by one.\nThe price of the i-th item he buys is A_i yen (the currency of Japan).\nHe has M discount tickets, and he can use any number of them when buying an item.\nIf Y tickets are used when buying an item priced X yen, he can get the item for \\frac{X}{2^Y} (rounded down to the nearest integer) yen.\nWhat is the minimum amount of money required to buy all the items?\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N, M \\leq 10^5\n - 1 \\leq A_i \\leq 10^9\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\nA_1 A_2... A_N\n-----Output-----\nPrint the minimum amount of money required to buy all the items.\n-----Sample Input-----\n3 3\n2 13 8\n-----Sample Output-----\n9\nWe can buy all the items for 9 yen, as follows:\n - Buy the 1-st item for 2 yen without tickets.\n - Buy the 2-nd item for 3 yen with 2 tickets.\n - Buy the 3-rd item for 4 yen with 1 ticket.\n\ndef",
        "answer": "def tickets(people):\n    change = {25:0, 50:0, 100:0}\n    for price in people:\n        if price == 25:\n            change[25] += 1\n        elif price == 50:\n            change[25] -= 1\n            change[50] += 1\n        elif price == 100:\n            change[25] -= 1\n            change[50] -= 1\n            change[100] += 1\n        if change[25] < 0 or change[50] < 0:\n            return \"NO\"\n    return \"YES\"",
        "difficulty": "interview"
    },
    {
        "task_id": 1175,
        "prompt": "Complete the Python function given the prompt below:Given are integers L and R. Find the number, modulo 10^9 + 7, of pairs of integers (x, y) (L \\leq x \\leq y \\leq R) such that the remainder when y is divided by x is equal to y \\mbox{ XOR } x.What is \\mbox{ XOR }?\nThe XOR of integers A and B, A \\mbox{ XOR } B, is defined as follows:\n - When A \\mbox{ XOR } B is written in base two, the digit in the 2^k's place (k \\geq 0) is 1 if either A or B, but not both, has 1 in the 2^k's place, and 0 otherwise.\nFor example, 3 \\mbox{ XOR } 5 = 6. (In base two: 011 \\mbox{ XOR } 101 = 110.)\n-----Constraints-----\n - 1 \\leq L \\leq R \\leq 10^{18}\n-----Input-----\nInput is given from Standard Input in the following format:\nL R\n-----Output-----\nPrint the number of pairs of integers (x, y) (L \\leq x \\leq y \\leq R) satisfying the condition, modulo 10^9 + 7.\n-----Sample Input-----\n2 3\n-----Sample Output-----\n3\nThree pairs satisfy the condition: (2, 2), (2, 3), and (3, 3).\n\ndef",
        "answer": "def xor_sum(l, r):\n    return (r * (r + 1) // 2) - (l * (l + 1) // 2)",
        "difficulty": "interview"
    },
    {
        "task_id": 1176,
        "prompt": "Complete the Python function given the prompt below:There are N integers, A_1, A_2,..., A_N, arranged in a row in this order.\nYou can perform the following operation on this integer sequence any number of times:\nOperation: Choose an integer i satisfying 1 \\leq i \\leq N-1. Multiply both A_i and A_{i+1} by -1.\nLet B_1, B_2,..., B_N be the integer sequence after your operations.\nFind the maximum possible value of B_1 + B_2 +... + B_N.\n-----Constraints-----\n - All values in input are integers.\n - 2 \\leq N \\leq 10^5\n - -10^9 \\leq A_i \\leq 10^9\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 A_2... A_N\n-----Output-----\nPrint the maximum possible value of B_1 + B_2 +... + B_N.\n-----Sample Input-----\n3\n-10 5 -4\n-----Sample Output-----\n19\nIf we perform the operation as follows:\n - Choose 1 as i, which changes the sequence to 10, -5, -4.\n - Choose 2 as i, which changes the sequence to 10, 5, 4.\nwe have B_1 = 10, B_2 = 5, B_3 = 4. The sum here, B_1 + B_2 + B_3 = 10 + 5 + 4 = 19, is the maximum possible result.\n\ndef",
        "answer": "def max_sum(arr):\n    arr = arr[::-1]\n    for i in range(1, len(arr)):\n        arr[i] *= -1\n    return sum(arr)",
        "difficulty": "interview"
    },
    {
        "task_id": 1177,
        "prompt": "Complete the Python function given the prompt below:Given are a sequence of N integers A_1, A_2, \\ldots, A_N and a positive integer S.\nFor a pair of integers (L, R) such that 1\\leq L \\leq R \\leq N, let us define f(L, R) as follows:\n - f(L, R) is the number of sequences of integers (x_1, x_2, \\ldots, x_k) such that L \\leq x_1 < x_2 < \\cdots < x_k \\leq R and A_{x_1}+A_{x_2}+\\cdots +A_{x_k} = S.\nFind the sum of f(L, R) over all pairs of integers (L, R) such that 1\\leq L \\leq R\\leq N. Since this sum can be enormous, print it modulo 998244353.\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 3000\n - 1 \\leq S \\leq 3000\n - 1 \\leq A_i \\leq 3000\n-----Input-----\nInput is given from Standard Input in the following format:\nN S\nA_1 A_2... A_N\n-----Output-----\nPrint the sum of f(L, R), modulo 998244353.\n-----Sample Input-----\n3 4\n2 2 4\n-----Sample Output-----\n5\nThe value of f(L, R) for each pair is as follows, for a total of 5.\n - f(1,1) = 0\n - f(1,2) = 1 (for the sequence (1, 2))\n - f(1,3) = 2 (for (1, 2) and (3))\n - f(2,2) = 0\n - f(2,3) = 1 (for (3))\n - f(3,3) = 1 (for (3))\n\ndef",
        "answer": "def f(L, R):\n    if L == R:\n        return 0\n    elif L == 1:\n        return 1\n    elif L == 2:\n        return 2\n    elif L == 3:\n        return 1\n    else:\n        return f(L-1, R-1) + f(L-2, R-1) + f(L-3, R-1)",
        "difficulty": "interview"
    },
    {
        "task_id": 1178,
        "prompt": "Complete the Python function given the prompt below:We will create an artwork by painting black some squares in a white square grid with 10^9 rows and N columns.\nThe current plan is as follows: for the i-th column from the left, we will paint the H_i bottommost squares and will not paint the other squares in that column.\nBefore starting to work, you can choose at most K columns (possibly zero) and change the values of H_i for these columns to any integers of your choice between 0 and 10^9 (inclusive).\nDifferent values can be chosen for different columns.\nThen, you will create the modified artwork by repeating the following operation:\n - Choose one or more consecutive squares in one row and paint them black. (Squares already painted black can be painted again, but squares not to be painted according to the modified plan should not be painted.)\nFind the minimum number of times you need to perform this operation.\n-----Constraints-----\n - 1 \\leq N \\leq 300\n - 0 \\leq K \\leq N\n - 0 \\leq H_i \\leq 10^9\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\nH_1 H_2... H_N\n-----Output-----\nPrint the minimum number of operations required.\n-----Sample Input-----\n4 1\n2 3 4 1\n-----Sample Output-----\n3\nFor example, by changing the value of H_3 to 2, you can create the modified artwork by the following three operations:\n - Paint black the 1-st through 4-th squares from the left in the 1-st row from the bottom.\n - Paint black the 1-st through 3-rd squares from the left in the 2-nd row from the bottom.\n - Paint black the 2-nd square from the left in the 3-rd row from the bottom.\n\ndef",
        "answer": "def painting_squares(n, k, h):\n    # Write your code here\n    h.sort()\n    h.reverse()\n    count = 0\n    for i in range(k):\n        if h[i] == 0:\n            continue\n        count += (h[i] - 1) // n + 1\n        h[i] = (h[i] - 1) % n + 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 1179,
        "prompt": "Complete the Python function given the prompt below:In late autumn evening n robots gathered in the cheerful company of friends. Each robot has a unique identifier\u00a0\u2014 an integer from 1 to 10^9.\nAt some moment, robots decided to play the game \"Snowball\". Below there are the rules of this game. First, all robots stand in a row. Then the first robot says his identifier. After that the second robot says the identifier of the first robot and then says his own identifier. Then the third robot says the identifier of the first robot, then says the identifier of the second robot and after that says his own. This process continues from left to right until the n-th robot says his identifier.\nYour task is to determine the k-th identifier to be pronounced.\n-----Input-----\nThe first line contains two positive integers n and k (1 \u2264 n \u2264 100 000, 1 \u2264 k \u2264 min(2\u00b710^9, n\u00b7(n + 1) / 2).\nThe second line contains the sequence id_1, id_2,..., id_{n} (1 \u2264 id_{i} \u2264 10^9)\u00a0\u2014 identifiers of roborts. It is guaranteed that all identifiers are different.\n-----Output-----\nPrint the k-th pronounced identifier (assume that the numeration starts from 1).\n-----Examples-----\nInput\n2 2\n1 2\nOutput\n1\nInput\n4 5\n10 4 18 3\nOutput\n4\n-----Note-----\nIn the first sample identifiers of robots will be pronounced in the following order: 1, 1, 2. As k = 2, the answer equals to 1.\nIn the second test case identifiers of robots will be pronounced in the following order: 10, 10, 4, 10, 4, 18, 10, 4, 18, 3. As k = 5, the answer equals to 4.\n\ndef",
        "answer": "def robot_game(n, k):\n    if k == 1:\n        return 1\n    else:\n        return robot_game(n, k - 1) + k - 1",
        "difficulty": "interview"
    },
    {
        "task_id": 1180,
        "prompt": "Complete the Python function given the prompt below:Vasya is sitting on an extremely boring math class. To have fun, he took a piece of paper and wrote out n numbers on a single line. After that, Vasya began to write out different ways to put pluses (\"+\") in the line between certain digits in the line so that the result was a correct arithmetic expression; formally, no two pluses in such a partition can stand together (between any two adjacent pluses there must be at least one digit), and no plus can stand at the beginning or the end of a line. For example, in the string 100500, ways 100500 (add no pluses), 1+00+500 or 10050+0 are correct, and ways 100++500, +1+0+0+5+0+0 or 100500+ are incorrect.\nThe lesson was long, and Vasya has written all the correct ways to place exactly k pluses in a string of digits. At this point, he got caught having fun by a teacher and he was given the task to calculate the sum of all the resulting arithmetic expressions by the end of the lesson (when calculating the value of an expression the leading zeros should be ignored). As the answer can be large, Vasya is allowed to get only its remainder modulo 10^9 + 7. Help him!\n-----Input-----\nThe first line contains two integers, n and k (0 \u2264 k < n \u2264 10^5).\nThe second line contains a string consisting of n digits.\n-----Output-----\nPrint the answer to the problem modulo 10^9 + 7.\n-----Examples-----\nInput\n3 1\n108\nOutput\n27\nInput\n3 2\n108\nOutput\n9\n-----Note-----\nIn the first sample the result equals (1 + 08) + (10 + 8) = 27.\nIn the second sample the result equals 1 + 0 + 8 = 9.\n\ndef",
        "answer": "def arithmetic_expressions(n, k):\n    if k == 0:\n        return 1\n    if k == 1:\n        return n\n    if k == 2:\n        return n * (n - 1) // 2\n    return (arithmetic_expressions(n - 1, k - 1) + arithmetic_expressions(n - 1, k)) % (10 ** 9 + 7)",
        "difficulty": "interview"
    },
    {
        "task_id": 1181,
        "prompt": "Complete the Python function given the prompt below:Ryouko is an extremely forgetful girl, she could even forget something that has just happened. So in order to remember, she takes a notebook with her, called Ryouko's Memory Note. She writes what she sees and what she hears on the notebook, and the notebook became her memory.\nThough Ryouko is forgetful, she is also born with superb analyzing abilities. However, analyzing depends greatly on gathered information, in other words, memory. So she has to shuffle through her notebook whenever she needs to analyze, which is tough work.\nRyouko's notebook consists of n pages, numbered from 1 to n. To make life (and this problem) easier, we consider that to turn from page x to page y, |x - y| pages should be turned. During analyzing, Ryouko needs m pieces of information, the i-th piece of information is on page a_{i}. Information must be read from the notebook in order, so the total number of pages that Ryouko needs to turn is $\\sum_{i = 1}^{m - 1}|a_{i + 1} - a_{i}|$.\nRyouko wants to decrease the number of pages that need to be turned. In order to achieve this, she can merge two pages of her notebook. If Ryouko merges page x to page y, she would copy all the information on page x to y\u00a0(1 \u2264 x, y \u2264 n), and consequently, all elements in sequence a that was x would become y. Note that x can be equal to y, in which case no changes take place.\nPlease tell Ryouko the minimum number of pages that she needs to turn. Note she can apply the described operation at most once before the reading. Note that the answer can exceed 32-bit integers.\n-----Input-----\nThe first line of input contains two integers n and m\u00a0(1 \u2264 n, m \u2264 10^5).\nThe next line contains m integers separated by spaces: a_1, a_2,..., a_{m} (1 \u2264 a_{i} \u2264 n).\n-----Output-----\nPrint a single integer \u2014 the minimum number of pages Ryouko needs to turn.\n-----Examples-----\nInput\n4 6\n1 2 3 4 3 2\nOutput\n3\nInput\n10 5\n9 4 3 8 8\nOutput\n6\n-----Note-----\nIn the first sample, the optimal solution is to merge page 4 to 3, after merging sequence a becomes {1, 2, 3, 3, 3, 2}, so the number of pages Ryouko needs to turn is |1 - 2| + |2 - 3| + |3 - 3| + |3 - 3| + |3 - 2| = 3.\nIn the second sample, optimal solution is achieved by merging page 9 to 4.\n\ndef",
        "answer": "def solve(n, m, a):\n    a.sort()\n    ans = 0\n    for i in range(1, m):\n        ans += abs(a[i] - a[i - 1])\n    return ans",
        "difficulty": "interview"
    },
    {
        "task_id": 1182,
        "prompt": "Complete the Python function given the prompt below:Paul is at the orchestra. The string section is arranged in an r \u00d7 c rectangular grid and is filled with violinists with the exception of n violists. Paul really likes violas, so he would like to take a picture including at least k of them. Paul can take a picture of any axis-parallel rectangle in the orchestra. Count the number of possible pictures that Paul can take.\nTwo pictures are considered to be different if the coordinates of corresponding rectangles are different.\n-----Input-----\nThe first line of input contains four space-separated integers r, c, n, k (1 \u2264 r, c, n \u2264 10, 1 \u2264 k \u2264 n)\u00a0\u2014 the number of rows and columns of the string section, the total number of violas, and the minimum number of violas Paul would like in his photograph, respectively.\nThe next n lines each contain two integers x_{i} and y_{i} (1 \u2264 x_{i} \u2264 r, 1 \u2264 y_{i} \u2264 c): the position of the i-th viola. It is guaranteed that no location appears more than once in the input.\n-----Output-----\nPrint a single integer\u00a0\u2014 the number of photographs Paul can take which include at least k violas. \n-----Examples-----\nInput\n2 2 1 1\n1 2\nOutput\n4\nInput\n3 2 3 3\n1 1\n3 1\n2 2\nOutput\n1\nInput\n3 2 3 2\n1 1\n3 1\n2 2\nOutput\n4\n-----Note-----\nWe will use '*' to denote violinists and '#' to denote violists.\nIn the first sample, the orchestra looks as follows \n*#\n**\n Paul can take a photograph of just the viola, the 1 \u00d7 2 column containing the viola, the 2 \u00d7 1 row containing the viola, or the entire string section, for 4 pictures total.\nIn the second sample, the orchestra looks as follows \n#*\n*#\n#*\n Paul must take a photograph of the entire section.\nIn the third sample, the orchestra looks the same as in the second sample.\n\ndef",
        "answer": "def orchestra(r, c, n, k):\n    return r * c - n * k",
        "difficulty": "interview"
    },
    {
        "task_id": 1183,
        "prompt": "Complete the Python function given the prompt below:Dreamoon is a big fan of the Codeforces contests.\nOne day, he claimed that he will collect all the places from $1$ to $54$ after two more rated contests. It's amazing!\nBased on this, you come up with the following problem:\nThere is a person who participated in $n$ Codeforces rounds. His place in the first round is $a_1$, his place in the second round is $a_2$,..., his place in the $n$-th round is $a_n$.\nYou are given a positive non-zero integer $x$.\nPlease, find the largest $v$ such that this person can collect all the places from $1$ to $v$ after $x$ more rated contests.\nIn other words, you need to find the largest $v$, such that it is possible, that after $x$ more rated contests, for each $1 \\leq i \\leq v$, there will exist a contest where this person took the $i$-th place.\nFor example, if $n=6$, $x=2$ and $a=[3,1,1,5,7,10]$ then answer is $v=5$, because if on the next two contest he will take places $2$ and $4$, then he will collect all places from $1$ to $5$, so it is possible to get $v=5$.\n-----Input-----\nThe first line contains an integer $t$ ($1 \\leq t \\leq 5$) denoting the number of test cases in the input.\nEach test case contains two lines. The first line contains two integers $n, x$ ($1 \\leq n, x \\leq 100$). The second line contains $n$ positive non-zero integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 100$).\n-----Output-----\nFor each test case print one line containing the largest $v$, such that it is possible that after $x$ other contests, for each $1 \\leq i \\leq v$, there will exist a contest where this person took the $i$-th place.\n-----Example-----\nInput\n5\n6 2\n3 1 1 5 7 10\n1 100\n100\n11 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1\n1\n4 57\n80 60 40 20\nOutput\n5\n101\n2\n2\n60\n-----Note-----\nThe first test case is described in the statement.\nIn the second test case, the person has one hundred future contests, so he can take place $1,2,\\ldots,99$ and place $101$ on them in some order, to collect places $1,2,\\ldots,101$.\n\ndef",
        "answer": "def dreamoon(n, x, a):\n    a.sort()\n    a.reverse()\n    for i in range(n):\n        if a[i] < x:\n            return i + 1\n    return n + 1",
        "difficulty": "interview"
    },
    {
        "task_id": 1184,
        "prompt": "Complete the Python function given the prompt below:Recently, Anton has found a set. The set consists of small English letters. Anton carefully wrote out all the letters from the set in one line, separated by a comma. He also added an opening curved bracket at the beginning of the line and a closing curved bracket at the end of the line. \nUnfortunately, from time to time Anton would forget writing some letter and write it again. He asks you to count the total number of distinct letters in his set.\n-----Input-----\nThe first and the single line contains the set of letters. The length of the line doesn't exceed 1000. It is guaranteed that the line starts from an opening curved bracket and ends with a closing curved bracket. Between them, small English letters are listed, separated by a comma. Each comma is followed by a space.\n-----Output-----\nPrint a single number \u2014 the number of distinct letters in Anton's set.\n-----Examples-----\nInput\n{a, b, c}\nOutput\n3\nInput\n{b, a, b, a}\nOutput\n2\nInput\n{}\nOutput\n0\n\ndef",
        "answer": "def count_unique_letters(s):\n    return len(set(s.replace(',', '')))",
        "difficulty": "interview"
    },
    {
        "task_id": 1185,
        "prompt": "Complete the Python function given the prompt below:The new ITone 6 has been released recently and George got really keen to buy it. Unfortunately, he didn't have enough money, so George was going to work as a programmer. Now he faced the following problem at the work.\nGiven a sequence of n integers p_1, p_2,..., p_{n}. You are to choose k pairs of integers:\n [l_1, r_1], [l_2, r_2],..., [l_{k}, r_{k}]\u00a0(1 \u2264 l_1 \u2264 r_1 < l_2 \u2264 r_2 <... < l_{k} \u2264 r_{k} \u2264 n;\u00a0r_{i} - l_{i} + 1 = m), \nin such a way that the value of sum $\\sum_{i = 1}^{k} \\sum_{j = l_{i}}^{r_{i}} p_{j}$ is maximal possible. Help George to cope with the task.\n-----Input-----\nThe first line contains three integers n, m and k (1 \u2264 (m \u00d7 k) \u2264 n \u2264 5000). The second line contains n integers p_1, p_2,..., p_{n} (0 \u2264 p_{i} \u2264 10^9).\n-----Output-----\nPrint an integer in a single line \u2014 the maximum possible value of sum.\n-----Examples-----\nInput\n5 2 1\n1 2 3 4 5\nOutput\n9\nInput\n7 1 3\n2 10 7 18 5 33 0\nOutput\n61\n\ndef",
        "answer": "def max_sum(n, m, k, arr):\n    arr.sort()\n    max_sum = 0\n    for i in range(k):\n        max_sum += sum(arr[i:i+m])\n    return max_sum",
        "difficulty": "interview"
    },
    {
        "task_id": 1186,
        "prompt": "Complete the Python function given the prompt below:Given an integer N, find two permutations:  Permutation p of numbers from 1 to N such that p_{i} \u2260 i and p_{i} & i = 0 for all i = 1, 2,..., N.  Permutation q of numbers from 1 to N such that q_{i} \u2260 i and q_{i} & i \u2260 0 for all i = 1, 2,..., N. \n& is the bitwise AND operation.\n-----Input-----\nThe input consists of one line containing a single integer N (1 \u2264 N \u2264 10^5).\n-----Output-----\nFor each subtask, if the required permutation doesn't exist, output a single line containing the word \"NO\"; otherwise output the word \"YES\" in the first line and N elements of the permutation, separated by spaces, in the second line. If there are several possible permutations in a subtask, output any of them.\n-----Examples-----\nInput\n3\nOutput\nNO\nNO\nInput\n6\nOutput\nYES\n6 5 4 3 2 1 \nYES\n3 6 2 5 1 4\n\ndef",
        "answer": "def permutation(n):\n    if n == 1:\n        return [1]\n    else:\n        perm = []\n        for i in range(1, n+1):\n            if i & i == 0:\n                perm.append(i)\n        for i in range(1, n+1):\n            if i & i!= 0:\n                perm.append(i)\n        return perm",
        "difficulty": "interview"
    },
    {
        "task_id": 1187,
        "prompt": "Complete the Python function given the prompt below:You are given a directed graph with $n$ vertices and $m$ directed edges without self-loops or multiple edges.\nLet's denote the $k$-coloring of a digraph as following: you color each edge in one of $k$ colors. The $k$-coloring is good if and only if there no cycle formed by edges of same color.\nFind a good $k$-coloring of given digraph with minimum possible $k$.\n-----Input-----\nThe first line contains two integers $n$ and $m$ ($2 \\le n \\le 5000$, $1 \\le m \\le 5000$) \u2014 the number of vertices and edges in the digraph, respectively.\nNext $m$ lines contain description of edges \u2014 one per line. Each edge is a pair of integers $u$ and $v$ ($1 \\le u, v \\le n$, $u \\ne v$) \u2014 there is directed edge from $u$ to $v$ in the graph.\nIt is guaranteed that each ordered pair $(u, v)$ appears in the list of edges at most once.\n-----Output-----\nIn the first line print single integer $k$ \u2014 the number of used colors in a good $k$-coloring of given graph.\nIn the second line print $m$ integers $c_1, c_2, \\dots, c_m$ ($1 \\le c_i \\le k$), where $c_i$ is a color of the $i$-th edge (in order as they are given in the input).\nIf there are multiple answers print any of them (you still have to minimize $k$).\n-----Examples-----\nInput\n4 5\n1 2\n1 3\n3 4\n2 4\n1 4\nOutput\n1\n1 1 1 1 1 \nInput\n3 3\n1 2\n2 3\n3 1\nOutput\n2\n1 1 2\n\ndef",
        "answer": "def k_coloring(n, m, edges):\n    colors = [0] * n\n    for edge in edges:\n        colors[edge[0] - 1] += 1\n        colors[edge[1] - 1] += 1\n    return max(colors)",
        "difficulty": "interview"
    },
    {
        "task_id": 1188,
        "prompt": "Complete the Python function given the prompt below:It can be shown that any positive integer x can be uniquely represented as x = 1 + 2 + 4 +... + 2^{k} - 1 + r, where k and r are integers, k \u2265 0, 0 < r \u2264 2^{k}. Let's call that representation prairie partition of x.\nFor example, the prairie partitions of 12, 17, 7 and 1 are:  12 = 1 + 2 + 4 + 5,\n17 = 1 + 2 + 4 + 8 + 2,\n7 = 1 + 2 + 4,\n1 = 1. \nAlice took a sequence of positive integers (possibly with repeating elements), replaced every element with the sequence of summands in its prairie partition, arranged the resulting numbers in non-decreasing order and gave them to Borys. Now Borys wonders how many elements Alice's original sequence could contain. Find all possible options!\n-----Input-----\nThe first line contains a single integer n (1 \u2264 n \u2264 10^5)\u00a0\u2014 the number of numbers given from Alice to Borys.\nThe second line contains n integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^12; a_1 \u2264 a_2 \u2264... \u2264 a_{n})\u00a0\u2014 the numbers given from Alice to Borys.\n-----Output-----\nOutput, in increasing order, all possible values of m such that there exists a sequence of positive integers of length m such that if you replace every element with the summands in its prairie partition and arrange the resulting numbers in non-decreasing order, you will get the sequence given in the input.\nIf there are no such values of m, output a single integer -1.\n-----Examples-----\nInput\n8\n1 1 2 2 3 4 5 8\nOutput\n2 \nInput\n6\n1 1 1 2 2 2\nOutput\n2 3 \nInput\n5\n1 2 4 4 4\nOutput\n-1\n-----Note-----\nIn the first example, Alice could get the input sequence from [6, 20] as the original sequence.\nIn the second example, Alice's original sequence could be either [4, 5] or [3, 3, 3].\n\ndef",
        "answer": "def prairie_partition(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:",
        "difficulty": "interview"
    },
    {
        "task_id": 1189,
        "prompt": "Complete the Python function given the prompt below:Heidi the Cow is aghast: cracks in the northern Wall? Zombies gathering outside, forming groups, preparing their assault? This must not happen! Quickly, she fetches her HC^2 (Handbook of Crazy Constructions) and looks for the right chapter:\nHow to build a wall:  Take a set of bricks.  Select one of the possible wall designs. Computing the number of possible designs is left as an exercise to the reader.  Place bricks on top of each other, according to the chosen design. \nThis seems easy enough. But Heidi is a Coding Cow, not a Constructing Cow. Her mind keeps coming back to point 2b. Despite the imminent danger of a zombie onslaught, she wonders just how many possible walls she could build with up to n bricks.\nA wall is a set of wall segments as defined in the easy version. How many different walls can be constructed such that the wall consists of at least 1 and at most n bricks? Two walls are different if there exist a column c and a row r such that one wall has a brick in this spot, and the other does not.\nAlong with n, you will be given C, the width of the wall (as defined in the easy version). Return the number of different walls modulo 10^6 + 3.\n-----Input-----\nThe first line contains two space-separated integers n and C, 1 \u2264 n \u2264 500000, 1 \u2264 C \u2264 200000.\n-----Output-----\nPrint the number of different walls that Heidi could build, modulo 10^6 + 3.\n-----Examples-----\nInput\n5 1\nOutput\n5\nInput\n2 2\nOutput\n5\nInput\n3 2\nOutput\n9\nInput\n11 5\nOutput\n4367\nInput\n37 63\nOutput\n230574\n-----Note-----\nThe number 10^6 + 3 is prime.\nIn the second sample case, the five walls are: \n            B        B\nB.,.B, BB, B., and.B\nIn the third sample case, the nine walls are the five as in the second sample case and in addition the following four: \nB    B\nB    B  B        B\nB.,.B, BB, and BB\n\ndef",
        "answer": "def solve(n, c):\n    return (n * (n + 1) // 2) % (10 ** 6 + 3)",
        "difficulty": "interview"
    },
    {
        "task_id": 1190,
        "prompt": "Complete the Python function given the prompt below:In order to make the \"Sea Battle\" game more interesting, Boris decided to add a new ship type to it. The ship consists of two rectangles. The first rectangle has a width of $w_1$ and a height of $h_1$, while the second rectangle has a width of $w_2$ and a height of $h_2$, where $w_1 \\ge w_2$. In this game, exactly one ship is used, made up of two rectangles. There are no other ships on the field.\nThe rectangles are placed on field in the following way:  the second rectangle is on top the first rectangle;  they are aligned to the left, i.e. their left sides are on the same line;  the rectangles are adjacent to each other without a gap. \nSee the pictures in the notes: the first rectangle is colored red, the second rectangle is colored blue.\nFormally, let's introduce a coordinate system. Then, the leftmost bottom cell of the first rectangle has coordinates $(1, 1)$, the rightmost top cell of the first rectangle has coordinates $(w_1, h_1)$, the leftmost bottom cell of the second rectangle has coordinates $(1, h_1 + 1)$ and the rightmost top cell of the second rectangle has coordinates $(w_2, h_1 + h_2)$.\nAfter the ship is completely destroyed, all cells neighboring by side or a corner with the ship are marked. Of course, only cells, which don't belong to the ship are marked. On the pictures in the notes such cells are colored green.\nFind out how many cells should be marked after the ship is destroyed. The field of the game is infinite in any direction.\n-----Input-----\nFour lines contain integers $w_1, h_1, w_2$ and $h_2$ ($1 \\leq w_1, h_1, w_2, h_2 \\leq 10^8$, $w_1 \\ge w_2$)\u00a0\u2014 the width of the first rectangle, the height of the first rectangle, the width of the second rectangle and the height of the second rectangle. You can't rotate the rectangles.\n-----Output-----\nPrint exactly one integer\u00a0\u2014 the number of cells, which should be marked after the ship is destroyed.\n-----Examples-----\nInput\n2 1 2 1\nOutput\n12\nInput\n2 2 1 2\nOutput\n16\n-----Note-----\nIn the first example the field looks as follows (the first rectangle is red, the second rectangle is blue, green shows the marked squares): [Image] \nIn the second example the field looks as: [Image]\n\ndef",
        "answer": "def count_marked_cells(w1, h1, w2, h2):\n    return w1 * h1 + w2 * h2",
        "difficulty": "interview"
    },
    {
        "task_id": 1191,
        "prompt": "Complete the Python function given the prompt below:Unlike Knights of a Round Table, Knights of a Polygonal Table deprived of nobility and happy to kill each other. But each knight has some power and a knight can kill another knight if and only if his power is greater than the power of victim. However, even such a knight will torment his conscience, so he can kill no more than $k$ other knights. Also, each knight has some number of coins. After a kill, a knight can pick up all victim's coins.\nNow each knight ponders: how many coins he can have if only he kills other knights?\nYou should answer this question for each knight.\n-----Input-----\nThe first line contains two integers $n$ and $k$ $(1 \\le n \\le 10^5, 0 \\le k \\le \\min(n-1,10))$ \u2014 the number of knights and the number $k$ from the statement.\nThe second line contains $n$ integers $p_1, p_2,\\ldots,p_n$ $(1 \\le p_i \\le 10^9)$ \u2014 powers of the knights. All $p_i$ are distinct.\nThe third line contains $n$ integers $c_1, c_2,\\ldots,c_n$ $(0 \\le c_i \\le 10^9)$ \u2014 the number of coins each knight has.\n-----Output-----\nPrint $n$ integers \u2014 the maximum number of coins each knight can have it only he kills other knights.\n-----Examples-----\nInput\n4 2\n4 5 9 7\n1 2 11 33\nOutput\n1 3 46 36 \nInput\n5 1\n1 2 3 4 5\n1 2 3 4 5\nOutput\n1 3 5 7 9 \nInput\n1 0\n2\n3\nOutput\n3 \n-----Note-----\nConsider the first example.   The first knight is the weakest, so he can't kill anyone. That leaves him with the only coin he initially has.  The second knight can kill the first knight and add his coin to his own two.  The third knight is the strongest, but he can't kill more than $k = 2$ other knights. It is optimal to kill the second and the fourth knights: $2+11+33 = 46$.  The fourth knight should kill the first and the second knights: $33+1+2 = 36$. \nIn the second example the first knight can't kill anyone, while all the others should kill the one with the index less by one than their own.\nIn the third example there is only one knight, so he can't kill anyone.\n\ndef",
        "answer": "def polygonal(n, k):\n    return n * (n + 1) // 2 - k * (k - 1) // 2",
        "difficulty": "interview"
    },
    {
        "task_id": 1192,
        "prompt": "Complete the Python function given the prompt below:You are given a permutation of n numbers p_1, p_2,..., p_{n}. We perform k operations of the following type: choose uniformly at random two indices l and r (l \u2264 r) and reverse the order of the elements p_{l}, p_{l} + 1,..., p_{r}. Your task is to find the expected value of the number of inversions in the resulting permutation.\n-----Input-----\nThe first line of input contains two integers n and k (1 \u2264 n \u2264 100, 1 \u2264 k \u2264 10^9). The next line contains n integers p_1, p_2,..., p_{n} \u2014 the given permutation. All p_{i} are different and in range from 1 to n.\nThe problem consists of three subproblems. The subproblems have different constraints on the input. You will get some score for the correct submission of the subproblem. The description of the subproblems follows.\n  In subproblem G1 (3 points), the constraints 1 \u2264 n \u2264 6, 1 \u2264 k \u2264 4 will hold.  In subproblem G2 (5 points), the constraints 1 \u2264 n \u2264 30, 1 \u2264 k \u2264 200 will hold.  In subproblem G3 (16 points), the constraints 1 \u2264 n \u2264 100, 1 \u2264 k \u2264 10^9 will hold. \n-----Output-----\nOutput the answer with absolute or relative error no more than 1e - 9.\n-----Examples-----\nInput\n3 1\n1 2 3\nOutput\n0.833333333333333\nInput\n3 4\n1 3 2\nOutput\n1.458333333333334\n-----Note-----\nConsider the first sample test. We will randomly pick an interval of the permutation (1, 2, 3) (which has no inversions) and reverse the order of its elements. With probability $\\frac{1}{2}$, the interval will consist of a single element and the permutation will not be altered. With probability $\\frac{1}{6}$ we will inverse the first two elements' order and obtain the permutation (2, 1, 3) which has one inversion. With the same probability we might pick the interval consisting of the last two elements which will lead to the permutation (1, 3, 2) with one inversion. Finally, with probability $\\frac{1}{6}$ the randomly picked interval will contain all elements, leading to the permutation (3, 2, 1) with 3 inversions. Hence, the expected number of inversions is equal to $\\frac{1}{2} \\cdot 0 + \\frac{1}{6} \\cdot 1 + \\frac{1}{6} \\cdot 1 + \\frac{1}{6} \\cdot 3 = \\frac{5}{6}$.\n\ndef",
        "answer": "def inversions(arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 1193,
        "prompt": "Complete the Python function given the prompt below:The R1 company wants to hold a web search championship. There were n computers given for the competition, each of them is connected to the Internet. The organizers believe that the data transfer speed directly affects the result. The higher the speed of the Internet is, the faster the participant will find the necessary information. Therefore, before the competition started, each computer had its maximum possible data transfer speed measured. On the i-th computer it was a_{i} kilobits per second.\nThere will be k participants competing in the championship, each should get a separate computer. The organizing company does not want any of the participants to have an advantage over the others, so they want to provide the same data transfer speed to each participant's computer. Also, the organizers want to create the most comfortable conditions for the participants, so the data transfer speed on the participants' computers should be as large as possible.\nThe network settings of the R1 company has a special option that lets you to cut the initial maximum data transfer speed of any computer to any lower speed. How should the R1 company configure the network using the described option so that at least k of n computers had the same data transfer speed and the data transfer speed on these computers was as large as possible?\n-----Input-----\nThe first line contains two space-separated integers n and k (1 \u2264 k \u2264 n \u2264 100) \u2014 the number of computers and the number of participants, respectively. In the second line you have a space-separated sequence consisting of n integers: a_1, a_2,..., a_{n} (16 \u2264 a_{i} \u2264 32768); number a_{i} denotes the maximum data transfer speed on the i-th computer.\n-----Output-----\nPrint a single integer \u2014 the maximum Internet speed value. It is guaranteed that the answer to the problem is always an integer.\n-----Examples-----\nInput\n3 2\n40 20 30\nOutput\n30\nInput\n6 4\n100 20 40 20 50 50\nOutput\n40\n-----Note-----\nIn the first test case the organizers can cut the first computer's speed to 30 kilobits. Then two computers (the first and the third one) will have the same speed of 30 kilobits. They should be used as the participants' computers. This answer is optimal.\n\ndef",
        "answer": "def solve(n, k, a):\n    a.sort()\n    return a[k-1]",
        "difficulty": "interview"
    },
    {
        "task_id": 1194,
        "prompt": "Complete the Python function given the prompt below:Let's define the sum of two permutations p and q of numbers 0, 1,..., (n - 1) as permutation [Image], where Perm(x) is the x-th lexicographically permutation of numbers 0, 1,..., (n - 1) (counting from zero), and Ord(p) is the number of permutation p in the lexicographical order.\nFor example, Perm(0) = (0, 1,..., n - 2, n - 1), Perm(n! - 1) = (n - 1, n - 2,..., 1, 0)\nMisha has two permutations, p and q. Your task is to find their sum.\nPermutation a = (a_0, a_1,..., a_{n} - 1) is called to be lexicographically smaller than permutation b = (b_0, b_1,..., b_{n} - 1), if for some k following conditions hold: a_0 = b_0, a_1 = b_1,..., a_{k} - 1 = b_{k} - 1, a_{k} < b_{k}.\n-----Input-----\nThe first line contains an integer n (1 \u2264 n \u2264 200 000).\nThe second line contains n distinct integers from 0 to n - 1, separated by a space, forming permutation p.\nThe third line contains n distinct integers from 0 to n - 1, separated by spaces, forming permutation q.\n-----Output-----\nPrint n distinct integers from 0 to n - 1, forming the sum of the given permutations. Separate the numbers by spaces.\n-----Examples-----\nInput\n2\n0 1\n0 1\nOutput\n0 1\nInput\n2\n0 1\n1 0\nOutput\n1 0\nInput\n3\n1 2 0\n2 1 0\nOutput\n1 0 2\n-----Note-----\nPermutations of numbers from 0 to 1 in the lexicographical order: (0, 1), (1, 0).\nIn the first sample Ord(p) = 0 and Ord(q) = 0, so the answer is $\\operatorname{Perm}((0 + 0) \\operatorname{mod} 2) = \\operatorname{Perm}(0) =(0,1)$.\nIn the second sample Ord(p) = 0 and Ord(q) = 1, so the answer is $\\operatorname{Perm}((0 + 1) \\operatorname{mod} 2) = \\operatorname{Perm}(1) =(1,0)$.\nPermutations of numbers from 0 to 2 in the lexicographical order: (0, 1, 2), (0, 2, 1), (1, 0, 2), (1, 2, 0), (2, 0, 1), (2, 1, 0).\nIn the third sample Ord(p) = 3 and Ord(q) = 5, so the answer is $\\operatorname{Perm}((3 + 5) \\operatorname{mod} 6) = \\operatorname{Perm}(2) =(1,0,2)$.\n\ndef",
        "answer": "def sum_permutation(p, q):\n    n = len(p)\n    p = [0] + p\n    q = [0] + q\n    return [p[q[i]] for i in range(n + 1)]",
        "difficulty": "interview"
    },
    {
        "task_id": 1195,
        "prompt": "Complete the Python function given the prompt below:From \"ftying rats\" to urban saniwation workers - can synthetic biology tronsform how we think of pigeons? \nThe upiquitous pigeon has long been viewed as vermin - spleading disease, scavenging through trush, and defecating in populous urban spases. Yet they are product of selextive breeding for purposes as diverse as rocing for our entertainment and, historically, deliverirg wartime post. Synthotic biology may offer this animal a new chafter within the urban fabric.\nPiteon d'Or recognihes how these birds ripresent a potentially userul interface for urdan biotechnologies. If their metabolism cauld be modified, they mignt be able to add a new function to their redertoire. The idea is to \"desigm\" and culture a harmless bacteria (much like the micriorganisms in yogurt) that could be fed to pigeons to alter the birds' digentive processes such that a detergent is created from their feces. The berds hosting modilied gut becteria are releamed inte the environnent, ready to defetate soap and help clean our cities.\n-----Input-----\nThe first line of input data contains a single integer $n$ ($5 \\le n \\le 10$).\nThe second line of input data contains $n$ space-separated integers $a_i$ ($1 \\le a_i \\le 32$).\n-----Output-----\nOutput a single integer.\n-----Example-----\nInput\n5\n1 2 3 4 5\nOutput\n4\n-----Note-----\nWe did not proofread this statement at all.\n\ndef",
        "answer": "def pigeon(a):\n    return a[0] + a[1] + a[2] + a[3] + a[4]",
        "difficulty": "interview"
    },
    {
        "task_id": 1196,
        "prompt": "Complete the Python function given the prompt below:Each employee of the \"Blake Techologies\" company uses a special messaging app \"Blake Messenger\". All the stuff likes this app and uses it constantly. However, some important futures are missing. For example, many users want to be able to search through the message history. It was already announced that the new feature will appear in the nearest update, when developers faced some troubles that only you may help them to solve.\nAll the messages are represented as a strings consisting of only lowercase English letters. In order to reduce the network load strings are represented in the special compressed form. Compression algorithm works as follows: string is represented as a concatenation of n blocks, each block containing only equal characters. One block may be described as a pair (l_{i}, c_{i}), where l_{i} is the length of the i-th block and c_{i} is the corresponding letter. Thus, the string s may be written as the sequence of pairs $\\langle(l_{1}, c_{1}),(l_{2}, c_{2}), \\ldots,(l_{n}, c_{n}) \\rangle$.\nYour task is to write the program, that given two compressed string t and s finds all occurrences of s in t. Developers know that there may be many such occurrences, so they only ask you to find the number of them. Note that p is the starting position of some occurrence of s in t if and only if t_{p}t_{p} + 1...t_{p} + |s| - 1 = s, where t_{i} is the i-th character of string t.\nNote that the way to represent the string in compressed form may not be unique. For example string \"aaaa\" may be given as $\\langle(4, a) \\rangle$, $\\langle(3, a),(1, a) \\rangle$, $\\langle(2, a),(2, a) \\rangle$...\n-----Input-----\nThe first line of the input contains two integers n and m (1 \u2264 n, m \u2264 200 000)\u00a0\u2014 the number of blocks in the strings t and s, respectively.\nThe second line contains the descriptions of n parts of string t in the format \"l_{i}-c_{i}\" (1 \u2264 l_{i} \u2264 1 000 000)\u00a0\u2014 the length of the i-th part and the corresponding lowercase English letter.\nThe second line contains the descriptions of m parts of string s in the format \"l_{i}-c_{i}\" (1 \u2264 l_{i} \u2264 1 000 000)\u00a0\u2014 the length of the i-th part and the corresponding lowercase English letter.\n-----Output-----\nPrint a single integer\u00a0\u2014 the number of occurrences of s in t.\n-----Examples-----\nInput\n5 3\n3-a 2-b 4-c 3-a 2-c\n2-a 2-b 1-c\nOutput\n1\nInput\n6 1\n3-a 6-b 7-a 4-c 8-e 2-a\n3-a\nOutput\n6\nInput\n5 5\n1-h 1-e 1-l 1-l 1-o\n1-w 1-o 1-r 1-l 1-d\nOutput\n0\n-----Note-----\nIn the first sample, t = \"aaabbccccaaacc\", and string s = \"aabbc\". The only occurrence of string s in string t starts at position p = 2.\nIn the second sample, t = \"aaabbbbbbaaaaaaacccceeeeeeeeaa\", and s = \"aaa\". The occurrences of s in t start at positions p = 1, p = 10, p = 11, p = 12, p = 13 and p = 14.\n\ndef",
        "answer": "def count_substring(string, sub_string):\n    count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(sub_string):\n            count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 1197,
        "prompt": "Complete the Python function given the prompt below:Game \"Minesweeper 1D\" is played on a line of squares, the line's height is 1 square, the line's width is n squares. Some of the squares contain bombs. If a square doesn't contain a bomb, then it contains a number from 0 to 2 \u2014 the total number of bombs in adjacent squares.\nFor example, the correct field to play looks like that: 001*2***101*. The cells that are marked with \"*\" contain bombs. Note that on the correct field the numbers represent the number of bombs in adjacent cells. For example, field 2* is not correct, because cell with value 2 must have two adjacent cells with bombs.\nValera wants to make a correct field to play \"Minesweeper 1D\". He has already painted a squared field with width of n cells, put several bombs on the field and wrote numbers into some cells. Now he wonders how many ways to fill the remaining cells with bombs and numbers are there if we should get a correct field in the end.\n-----Input-----\nThe first line contains sequence of characters without spaces s_1s_2... s_{n} (1 \u2264 n \u2264 10^6), containing only characters \"*\", \"?\" and digits \"0\", \"1\" or \"2\". If character s_{i} equals \"*\", then the i-th cell of the field contains a bomb. If character s_{i} equals \"?\", then Valera hasn't yet decided what to put in the i-th cell. Character s_{i}, that is equal to a digit, represents the digit written in the i-th square.\n-----Output-----\nPrint a single integer \u2014 the number of ways Valera can fill the empty cells and get a correct field.\nAs the answer can be rather large, print it modulo 1000000007 (10^9 + 7).\n-----Examples-----\nInput\n?01???\nOutput\n4\nInput\n?\nOutput\n2\nInput\n**12\nOutput\n0\nInput\n1\nOutput\n0\n-----Note-----\nIn the first test sample you can get the following correct fields: 001**1, 001***, 001*2*, 001*10.\n\ndef",
        "answer": "def minesweeper(s):\n    n = len(s)\n    m = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if s[i][j] == '?':\n                m[i][j] = '*'\n            elif s[i][j] == '*':\n                m[i][j] = '*'\n            else:\n                m[i][j] = s[i][j]\n    for i in range(n):\n        for j in range(n):\n            if m[i][j] == '*':\n                for x in range(i - 1, i + 2):\n                    for y in range(j - 1, j + 2):\n                        if 0 <= x < n and 0 <= y < n:\n                            if m[x][y]!= '*':\n                                m[x][y] += 1\n    return m",
        "difficulty": "interview"
    },
    {
        "task_id": 1198,
        "prompt": "Complete the Python function given the prompt below:Since you are the best Wraith King, Nizhniy Magazin \u00abMir\u00bb at the centre of Vinnytsia is offering you a discount.\nYou are given an array a of length n and an integer c. \nThe value of some array b of length k is the sum of its elements except for the $\\lfloor \\frac{k}{c} \\rfloor$ smallest. For example, the value of the array [3, 1, 6, 5, 2] with c = 2 is 3 + 6 + 5 = 14.\nAmong all possible partitions of a into contiguous subarrays output the smallest possible sum of the values of these subarrays.\n-----Input-----\nThe first line contains integers n and c (1 \u2264 n, c \u2264 100 000).\nThe second line contains n integers a_{i} (1 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 elements of a.\n-----Output-----\nOutput a single integer \u00a0\u2014 the smallest possible sum of values of these subarrays of some partition of a.\n-----Examples-----\nInput\n3 5\n1 2 3\nOutput\n6\nInput\n12 10\n1 1 10 10 10 10 10 10 9 10 10 10\nOutput\n92\nInput\n7 2\n2 3 6 4 5 7 1\nOutput\n17\nInput\n8 4\n1 3 4 5 5 3 4 1\nOutput\n23\n-----Note-----\nIn the first example any partition yields 6 as the sum.\nIn the second example one of the optimal partitions is [1, 1], [10, 10, 10, 10, 10, 10, 9, 10, 10, 10] with the values 2 and 90 respectively.\nIn the third example one of the optimal partitions is [2, 3], [6, 4, 5, 7], [1] with the values 3, 13 and 1 respectively.\nIn the fourth example one of the optimal partitions is [1], [3, 4, 5, 5, 3, 4], [1] with the values 1, 21 and 1 respectively.\n\ndef",
        "answer": "def min_sum(a, c):\n    n = len(a)\n    a.sort()\n    s = 0\n    for i in range(n):\n        s += a[i]\n        if i % c == c - 1:\n            s -= a[i - c + 1]\n    return s",
        "difficulty": "interview"
    },
    {
        "task_id": 1199,
        "prompt": "Complete the Python function given the prompt below:A Christmas party in city S. had n children. All children came in mittens. The mittens can be of different colors, but each child had the left and the right mitten of the same color. Let's say that the colors of the mittens are numbered with integers from 1 to m, and the children are numbered from 1 to n. Then the i-th child has both mittens of color c_{i}.\nThe Party had Santa Claus ('Father Frost' in Russian), his granddaughter Snow Girl, the children danced around the richly decorated Christmas tree. In fact, everything was so bright and diverse that the children wanted to wear mittens of distinct colors. The children decided to swap the mittens so that each of them got one left and one right mitten in the end, and these two mittens were of distinct colors. All mittens are of the same size and fit all the children.\nThe children started exchanging the mittens haphazardly, but they couldn't reach the situation when each child has a pair of mittens of distinct colors. Vasily Petrov, the dad of one of the children, noted that in the general case the children's idea may turn out impossible. Besides, he is a mathematician and he came up with such scheme of distributing mittens that the number of children that have distinct-colored mittens was maximum. You task is to repeat his discovery. Note that the left and right mittens are different: each child must end up with one left and one right mitten.\n-----Input-----\nThe first line contains two integers n and m \u2014 the number of the children and the number of possible mitten colors (1 \u2264 n \u2264 5000, 1 \u2264 m \u2264 100). The second line contains n integers c_1, c_2,... c_{n}, where c_{i} is the color of the mittens of the i-th child (1 \u2264 c_{i} \u2264 m).\n-----Output-----\nIn the first line, print the maximum number of children who can end up with a distinct-colored pair of mittens. In the next n lines print the way the mittens can be distributed in this case. On the i-th of these lines print two space-separated integers: the color of the left and the color of the right mitten the i-th child will get. If there are multiple solutions, you can print any of them.\n-----Examples-----\nInput\n6 3\n1 3 2 2 1 1\nOutput\n6\n2 1\n1 2\n2 1\n1 3\n1 2\n3 1\nInput\n4 2\n1 2 1 1\nOutput\n2\n1 2\n1 1\n2 1\n1 1\n\ndef",
        "answer": "def swap_colors(colors, n):\n    colors_dict = {}\n    for i in range(n):\n        if colors[i] in colors_dict:\n            colors_dict[colors[i]].append(i)\n        else:\n            colors_dict[colors[i]] = [i]",
        "difficulty": "interview"
    }
]