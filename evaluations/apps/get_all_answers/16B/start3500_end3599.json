[
    {
        "task_id": 3500,
        "prompt": "Complete the Python function given the prompt below:Bingo is a game of chance played by a group of players. Each player has his or her own bingo card with a $5$-by-$5$ grid of numbers. Each number appears at most once per card. The bingo caller calls out a sequence of randomly drawn numbers, and the players mark the numbers that appear on their card as they are called out. The winner is the player that completes a line of five marked numbers (horizontally, vertically or diagonally) on his or her card. The winning player then yells \u201cbingo\u201d and the game ends.\nYou have been volunteering with a local youth group and have been running bingo games for the children. They love bingo, but every time two or more kids yell \u201cbingo\u201d at the same time, a spirited \u201cdisagreement\u201d breaks out. You\u2019ve created a slightly modified version of bingo (in the hopes of introducing fewer ties): the cards are $5$-by-$5$ grids with a number from $1$ to $3000$ in each of the $25$ cells, and a winner is only declared when a player has $5$ numbers in a row. Note that in this new game, players cannot win via columns or diagonals.\nAlas, these changes did not eliminate ties or the subsequent disagreements. To prevent further disagreements, you\u2019ve decided to analyze the sets of cards to determine if there is any possibility that a tie (where two kids can yell bingo at the same time) can occur. Write a program that takes a collection of bingo cards and determines if there is any possible sequence of numbers that could be called so that the game ends, and a tie between two or more players occurs, when the last number in the sequence is called.\nFor example, consider the following two bingo cards:\n$ \\begin{array}{ccccc} 3 & 29 & 45 & 56 & 68 \\\\ 1 & 19 & 43 & 50 & 72 \\\\ 11 & 25 & 40 & 49 & 61 \\\\ 9 & 23 & 31 & 58 & 63 \\\\ 4 & 27 & 42 & 54 & 71 \\end{array} $\n\u00a0\n$ \\begin{array}{ccccc} 14 & 23 & 39 & 59 & 63 \\\\ 8 & 17 & 35 & 55 & 61 \\\\ 15 & 26 & 42 & 53 & 71 \\\\ 10 & 25 & 31 & 57 & 64 \\\\ 6 & 20 & 44 & 52 & 68 \\\\ \\end{array} $\nThen this set of two cards could result in a tie if the sequence of numbers called was\\[ 40~ 61~ 64~ 10~ 57~ 49~ 11~ 31~ 25 \\]\nThis sequence would result in the card on the left completing the third row and the card on the right completing the fourth row when the number $25$ is called.\n-----Input-----\nThe first line of the input is an integer $n$ ($2 \\leq n \\leq 100$), the number of bingo cards. After the first line are the $n$ bingo cards, each separated from the next by a blank line of input.\nEach bingo card consists of five lines of input. Each line consists of five integers in the range from $1$ to $3000$. The numbers on each bingo card are unique.\n-----Output-----\nIf no ties are possible between any two cards, output \u201cno ties\u201d. Otherwise, output the two numbers $a$ and $b$ ($1 \\le a < b \\le n$) identifying the two cards for which a tie could occur, where the cards are numbered from $1$ to $n$ in the order that they appear in the input. If multiple pairs of cards can tie, output the pair with the smallest $a$, breaking any remaining ties with the smallest $b$.\n-----Examples-----\nSample Input:\n2\n3 29 45 56 68\n1 19 43 50 72\n11 25 40 49 61\n9 23 31 58 63\n4 27 42 54 71\n14 23 39 59 63\n8 17 35 55 61\n15 26 42 53 71\n10 25 31 57 64\n6 20 44 52 68\nSample Output:\n1 2\n\ndef",
        "answer": "def bingo_check(card):\n    # check for horizontal\n    for i in range(5):\n        for j in range(5):\n            if card[i][j] == card[i][j+1] == card[i][j+2] == card[i][j+3] == card[i][j+4]:\n                return True\n    # check for vertical\n    for i in range(5):\n        for j in range(5):\n            if card[j][i] == card[j+1][i] == card[j+2][i] == card[j+3][i] == card[j+4][i]:\n                return True\n    # check for diagonal\n    for i in range(5):\n        for j in range(5):\n            if card[i][j] == card[i+1][j+1] == card[i+2][j+2] == card[i+3][j+3] == card[i+4][j+4]:\n                return True\n    # check for diagonal\n    for i in range(5):\n        for j in range(5):\n            if card[i][j] == card[i+1][j-1] == card[i+2][j-2] == card[i+3][j-3] == card[i+4][j-4]:\n                return True\n    return False",
        "difficulty": "competition"
    },
    {
        "task_id": 3501,
        "prompt": "Complete the Python function given the prompt below:Jaap, Jan, and Thijs are on a trip to the desert after having attended the ACM ICPC World Finals 2015 in Morocco. The trip included a camel ride, and after returning from the ride, their guide invited them to a big camel race in the evening. The camels they rode will also participate and it is customary to bet on the results of the race. \nOne of the most interesting bets involves guessing the complete order in which the camels will finish the race. This bet offers the biggest return on your money, since it is also the one that is the hardest to get right.\nJaap, Jan, and Thijs have already placed their bets, but the race will not start until an hour from now, so they are getting bored. They started wondering how many pairs of camels they have put in the same order. If camel\u00a0$c$ is before camel\u00a0$d$ on Jaap\u2019s, Jan\u2019s and Thijs\u2019 bet, it means that all three of them put $c$ and $d$ in the same order. Can you help them to calculate the number of pairs of camels for which this happened?\n-----Input-----\nThe input consists of:\n - one line with an integer $n$ ($2\\leq n \\leq 200000$), the number of camels;\n - one line with $n$ integers $a_1, \\ldots, a_ n$ ($1 \\le a_ i \\le n$ for all $i$), Jaap\u2019s bet. Here $a_1$ is the camel in the first position of Jaap\u2019s bet, $a_2$ is the camel in the second position, and so on;\n - one line with Jan\u2019s bet, in the same format as Jaap\u2019s bet;\n - one line with Thijs\u2019 bet, in the same format as Jaap\u2019s bet.\nThe camels are numbered $1, \\dots, n$. Each camel appears exactly once in each bet.\n-----Output-----\nOutput the number of pairs of camels that appear in the same order in all $3$\u00a0bets.\n-----Examples-----\nSample Input:\n3\n3 2 1\n1 2 3\n1 2 3\nSample Output:\n0\n\ndef",
        "answer": "def camel_race(n, a, b, c):\n    a.sort()\n    b.sort()\n    c.sort()\n    count = 0\n    for i in range(n):\n        if a[i] == b[i] and b[i] == c[i]:\n            count += 1\n    return count",
        "difficulty": "competition"
    },
    {
        "task_id": 3502,
        "prompt": "Complete the Python function given the prompt below:Cars! Where do they come from? Where do they go? Nobody knows. They appear where roads have been built, as if out of nowhere. Some say that no two cars are alike. Some say that if you look closely, you can see the pale ghosts of miserable humans inside them, trapped forever\u2014particularly in the morning and late afternoon. What scientific eye could frame their fearful symmetry?\nWell, yours, hopefully. As part of your government\u2019s Urban Traffic Control department, you are trying to write a paper on local traffic congestion. It is too dangerous to observe cars in the wild, of course, but you have been given some data on the traffic lights along your town\u2019s Main Street, and you would like to do some theoretical calculations about how well-synchronized they are.\nMain Street is set out on a line, with traffic lights placed at various points along it. Each traffic light cycles between red and green with a fixed period, being red for $r$ seconds, then green for $g$ seconds, then red for $r$ seconds, and so on. The values of $r$ and $g$ may be different for different traffic lights. At time $0$, all the lights have just turned red.\nAssume that an \u201cideal\u201d car mystically appears at the west end of Main Street at a uniformly random real-valued time in the interval $[0, 2019!]$ (where $k!$ is the product of the first $k$ positive integers), driving eastwards at a slow crawl of $1$ meter/second until it hits a red light. What is the probability that it will make it through all the lights without being forced to stop? If it does hit a red light, which one is it likely to hit first?\nWrite a program to answer these questions.\n-----Input-----\nThe first line of input contains an integer $n$ ($1 \\le n \\le 500$), the number of traffic lights. Each of the following $n$ lines contains three integers $x$, $r$, and $g$ describing a traffic light, where $x$ ($1 \\le x \\le 10^5$) is the position of the light along Main Street in meters, and $r$ and $g$ ($0 \\le r, g$ and $1 \\le r+g \\le 100$) are the durations in seconds of the red and green portions of the light\u2019s period (so the light is red from time $0$ to $r$, from time $r+g$ to $2r+g$, and so on).\nThe west end of Main Street is at position $0$, and the lights are listed in order of strictly increasing position.\n-----Output-----\nFor each of the $n$ lights, output a line containing the probability that this light will be the first red light an \u201cideal\u201d car hits. Then output a line containing the probability that an \u201cideal\u201d car makes it all the way without stopping. Your answers should have an absolute error of at most $10^{-6}$.\n-----Examples-----\nSample Input:\n4\n1 2 3\n6 2 3\n10 2 3\n16 3 4\nSample Output:\n0.4\n0\n0.2\n0.171428571429\n0.228571428571\n\ndef",
        "answer": "def main():\n    n = int(input())\n    lights = []\n    for i in range(n):\n        x, r, g = map(int, input().split())\n        lights.append((x, r, g))\n    lights.sort()\n    prob = 0\n    for i in range(n):\n        prob += (lights[i][1] + lights[i][2]) * (lights[i][1] + lights[i][2] - 1) / 2\n    prob /= (lights[-1][0] * (lights[-1][0] + 1)) / 2\n    print(prob)\n    prob = 0\n    for i in range(n):\n        prob += (lights[i][1] + lights[i][2]) * (lights[i][1] + lights[i][2] - 1) / 2\n    prob /= (lights[-1][0] * (lights[-1][0] + 1)) / 2\n    print(prob)\nmain()",
        "difficulty": "competition"
    },
    {
        "task_id": 3503,
        "prompt": "Complete the Python function given the prompt below:Ellen is teaching elementary math to her students and the time for the final exam has come. The exam consists of $n$ questions. In each question the students have to add ($+$), subtract ($-$) or multiply ($*$) a pair of numbers. \nEllen has already chosen the $n$ pairs of numbers. All that remains is to decide for each pair which of the three possible operations the students should perform. To avoid students getting bored, Ellen wants to make sure that the $n$ correct answers to her exam are all different.\nPlease help Ellen finish constructing the exam by automating this task.\n-----Input-----\nThe input consists of:\n - one line with one integer $n$ ($1\\leq n \\leq 2500$), the number of pairs of numbers;\n - $n$ lines each with two integers $a$ and $b$ ($-10^6 \\leq a, b \\leq 10^6$), a pair of numbers used.\n-----Output-----\nFor each pair of numbers $(a,b)$ in the same order as in the input, output a line containing a valid equation. Each equation should consist of five parts: $a$, one of the three operators, $b$, an equals sign ($=$), and the result of the expression. All the $n$ expression results must be different.\nIf there are multiple valid answers you may output any of them. If there is no valid answer, output a single line with the string \u201cimpossible\u201d instead.\n-----Examples-----\nSample Input:\n4\n1 5\n3 3\n4 5\n-1 -6\nSample Output:\n1 + 5 = 6\n3 * 3 = 9\n4 - 5 = -1\n-1 - -6 = 5\n\ndef",
        "answer": "def add(a, b):\n    return a + b",
        "difficulty": "competition"
    },
    {
        "task_id": 3504,
        "prompt": "Complete the Python function given the prompt below:You\u2019ve heard of acid rain but have you heard of antimatter rain? Antimatter rain is so potent that when it comes into contact with another object, it immediately disintegrates both itself and the object. Kayla\u2019s job as a SpaceFleet Researcher is gathering weather data on exotic planets. This time, their assignment is to monitor the antimatter rainfall.\nSensors are set up in the planet\u2019s atmosphere and are about to be rained on with antimatter rain. Oh no! Kayla monitors a single 2D section. Each sensor is either a single horizontal strip or a single point. When one or more antimatter droplet fall on a single sensor, all of those droplets and the sensor disintegrate simultaneously. That is, they disappear. All other droplets will drop past where the sensor used to be.\nKayla sees all the antimatter rain drops the moment before they all start to fall. All droplets fall at exactly the same rate.\nFor each droplet, Kayla wants to know if and where it will disintegrate. Help them out with this demanding task!\nIllustration of the first sample. The vertical lines connect the drops to the sensor they hit. The drop with no associated vertical line will not hit any sensor.\n-----Input-----\nThe first line of input contains two integers $D$ ($1 \\leq D \\leq 100000$), which is the number of antimatter droplets, and $S$ ($1 \\leq S \\leq 100000$), which is the number of sensors.\nThe next $D$ lines describe the droplets, in order. Each of these lines contains two integers $x$ ($1 \\leq x \\leq 10^9$), which is the $x$-coordinate of the droplet and $y$ ($1 \\leq y \\leq 10^9$), which is the $y$-coordinate of the droplet.\nThe next $S$ lines describe the sensors. Each line contains three integers $x_1$, $x_2$ ($1 \\leq x_1 \\leq x_2 \\leq 10^9$), which is the leftmost and the rightmost $x$-coordinate of the sensor, and $y$ ($1 \\leq y \\leq 10^9$), which is the $y$-coordinate of the sensor.\nIt is guaranteed that no two drops will start in the same location, no drop will start on any sensor, and no two sensors touch (not even at a single point).\n-----Output-----\nFor each droplet, in order, display a single number indicating the $y$-coordinate that it will disintegrate. If the droplet does not disintegrate, display $0$ instead. These values should appear on separate lines.\n-----Examples-----\nSample Input:\n5 3\n1 8\n2 3\n2 8\n5 8\n5 9\n3 6 6\n1 7 4\n1 3 1\nSample Output:\n4\n1\n4\n6\n0\n\ndef",
        "answer": "def get_sensor_coordinates(sensor_coordinates):\n    sensor_coordinates_list = []\n    for sensor_coordinates_line in sensor_coordinates:\n        sensor_coordinates_list.append(sensor_coordinates_line.split())\n    return sensor_coordinates_list",
        "difficulty": "competition"
    },
    {
        "task_id": 3505,
        "prompt": "Complete the Python function given the prompt below:Given $N$ integers in the range $[-50000, 50000]$, how many ways are there to pick three integers $a_ i$, $a_ j$, $a_ k$, such that $i$, $j$, $k$ are pairwise distinct and $a_ i + a_ j = a_ k$? Two ways are different if their ordered triples $(i, j, k)$ of indices are different.\n-----Input-----\nThe first line of input consists of a single integer $N$ ($1 \\leq N \\leq 200000$). The next line consists of $N$ space-separated integers $a_1, a_2, \\dots, a_ N$.\n-----Output-----\nOutput an integer representing the number of ways.\n-----Examples-----\nSample Input:\n4\n1 2 3 4\nSample Output:\n4\n\ndef",
        "answer": "def count_triplets(nums):\n    nums.sort()\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] == nums[k]:\n                    count += 1\n    return count",
        "difficulty": "competition"
    },
    {
        "task_id": 3506,
        "prompt": "Complete the Python function given the prompt below:One of the perhaps most important factors in deciding the winning team of a football match is the amount of cheers the teams get from their supporters. The Sportify football team is about to meet their worst opponent, Spoilify. As the manager of Sportify\u2019s cheerleading squad, you have to decide on a cheerleading tactic which will ensure you the win.\nAt your disposal you have $n$ cheerleaders. Each cheerleader has energy to cheer for a total of $t$ minutes of the 90 minute long game (the cheerleaders do not recover energy during the short half-time intermission). For each cheerleader you have to decide when in the game they should cheer. The cheerleading schedule for a match is divided into one minute intervals, and during each interval each cheerleader either cheers or does not cheer during the entire interval.\nIf a team gets more cheers than the other team for 5 consecutive minutes of the game, that team will score a goal. The 5 minute count is then reset, so if a team gets more cheers than the other team for, say, 17 consecutive minutes, that team will score three goals. The 5 minute interval can not run over the half time intermission, e.g., getting more cheers than the other team from the 43\u2019rd minute to the 49\u2019th minute is not sufficient to score a goal.\nAs an additional ace up your sleeve, you have spied on the Spoilify cheerleading team and know what their strategy for the game is. Based on this information, what is the best result that can be obtained?\n-----Input-----\nThe first line of input consists of three integers $0 \\le n \\le 20$, $1 \\le t \\le 90$, and $0 \\le m \\le 1000$. The meanings of $n$ and $t$ are described above, and $m$ gives the number of time intervals that the Spoilify cheearleading team is active. Next follow $m$ lines, each consisting of two integers $a$ and $b$, $0 \\le a < b \\le 90$, indicating that a cheerleader from Spoilify is cheering from time $a$ to time $b$ of the match. These intervals may overlap or even be equal, meaning that several cheerleaders are active simultaneously.\n-----Output-----\nOutput two integers $A$ and $B$ where $A$ is the number of goals scored by the Sportify team and $B$ is the number of goals scored by the Spoilify team, assuming you use an optimal cheerleading tactic. If there are many possible results, you should first attempt to maximize the score difference $A-B$, and if there are still many possible results, maximize your score $A$.\n-----Examples-----\nSample Input:\n1 31 2\n20 60\n50 90\nSample Output:\n4 3\n\ndef",
        "answer": "def solve(n, t, m):\n    cheerleaders = [0] * n\n    for i in range(m):\n        a, b = map(int, input().split())\n        for j in range(a, b):\n            cheerleaders[j % n] += 1\n    return max(cheerleaders) - min(cheerleaders)",
        "difficulty": "competition"
    },
    {
        "task_id": 3507,
        "prompt": "Complete the Python function given the prompt below:The host university is organizing a party for this year\u2019s ACM/ICPC contestants with a buffet dinner and $R$ boxes of red wine and $W$ boxes of white wine. Wine boxes are to be arranged into non-empty piles, each pile contains only one type of wine, either white or red. After that, those piles are put into a line so that no two piles belonging to the same kind sit next to each other. In addition, for security reasons, each red wine pile should not have more than $d$ boxes of red wine, although piles of white wine can be arbitrarily large.\nYour task is to identify $K$ - the number of different ways to arrange the given wine boxes satisfying all of the above conditions.\n-----Input-----\nThe input contains $3$ space separated integers in one line: $R$, $W$, $d$ $(1 \\leq R,W \\leq 10^6, 1 \\leq d \\leq R)$\n-----Output-----\nWrite in one line the remainder of $K$ divided by $10^9+7$.\n-----Sample Clarification-----\nIn the first sample below, there are $3$ valid arrangements:\nIn the second sample below, there are $6$ valid arrangements:\n-----Examples-----\nSample Input:\n2 2 1\nSample Output:\n3\n\ndef",
        "answer": "def arrange(R, W, d):\n    return (R+W-1)//(d+1)",
        "difficulty": "competition"
    },
    {
        "task_id": 3508,
        "prompt": "Complete the Python function given the prompt below:Frustrated by his legendary inability to tear down Lund\u2019s Cathedral, Finn the Giant wants to become better at destroying pillar-borne edifices. Together with his fellow trolls he has constructed a training site consisting of a colonnade of various pillars supporting a roof. The pillars differ in structural strength\u2014some are hewn of Swedish granite, but in various styles, others are made of stone, clay, or even wood. The roof his a huge block of uniform granite. You can assume that in the beginning, each pillar is able to support its own part of the roof. The pillars have exactly the same distance.\nAs an experienced builder, Finns known enough structural engineering to understand how roof weight distributes across pillars: every pillar supports the part of the roof closest to it. After removing pillars 1 and 2, the middle pillar supports the shaded part of the roof:\nAt the left of pillar\u00a00 and to the right of pillar\u00a0$n-1$, the roof is supported by two indestructible pillars. Initially, every pillar is subject to the same pressure, 1000 kN.\nFinn is able to tear down exactly one of the internal pillars, independent of its structural integrity. He hopes to start a chain reaction, whereby the redistribution of the roof\u2019s weights results in other pillars being crushed. Which pillar should Finn tear down to create the maximum damage?\n-----Input-----\nInput consists of two lines. On the first row, the number $n$ of pillars, with $1\\leq n\\leq 100000$. On the second row, $n$ integers $b_0$, $\\ldots $, $b_{n-1}$, where $1000 \\leq b_ i\\leq 100000000$, representing how much each internal pillar can support (in kN), from left to right.\n-----Output-----\nA single line with two integers. First the maximal damage (counted in number of destroyed pillars) that Finn can cause. Second, the pillar he has to tear down. The internal pillars are numbered $0$, $1$, $\\ldots $, $n-1$. If there are more than one correct answers, any will do.\n-----Examples-----\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n3 1\n\ndef",
        "answer": "def pillars(n, b):\n    b.sort()\n    b.reverse()\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    b.append(0)\n    ",
        "difficulty": "competition"
    },
    {
        "task_id": 3509,
        "prompt": "Complete the Python function given the prompt below:Richard and Janet are going on their first date. Richard has offered to meet her at home with his bicycle, and Janet tells him she will call when she is ready in $10$ to $20$ minutes. But Richard is an impatient person; while he could wait at home for Janet\u2019s signal, he might also leave early and travel around the neighbourhood for a bit, in order to minimise the time it takes him to reach her once she calls. Due to his impatience, once Richard is on his bicycle, he does not want to ride any slower than the legal speed limit, stop at intersections, or wait outside Janet\u2019s house (but he does not mind passing by Janet\u2019s house and returning to it later).\nGiven the directed graph representing the neighbourhood around Richard\u2019s and Janet\u2019s houses, Richard wants to devise a route around the neighbourhood (after an optional waiting period at his own house) which minimises the time that Janet has to wait in the worst case. He can travel for as long as he likes and visit each intersection as many times as he likes.\nJanet will call Richard as soon as she is ready, and at that point Richard will take the shortest path to her that he can. Richard does not know exactly when Janet will be ready, but he knows it will be in somewhere between $a$ and $b$ minutes (not necessarily at a whole minute).\nIf Richard is passing through an intersection at the exact same instant Janet calls, the call is considered to happen before he chooses what to do at the intersection. For example, if he is passing by Janet\u2019s house at the moment she calls, he can immediately stop there and she does not have to wait for him at all.\nIt could happen that Janet never has to wait for $w$ minutes, but that she might have to wait for $w - \\epsilon $ minutes for arbitrarily small $\\epsilon > 0$, if she calls Richard at some inopportune moment (say, nanoseconds after he has left an intersection). In this case, we still define the worst case waiting time to be $w$.\n-----Input-----\nThe input consists of:\n - One line with two integers $a$, $b$ ($0 \\le a \\le b \\le 10^{12}$), indicating that Janet will be ready in at least $a$ minutes and at most $b$ minutes.\n - One line with two integers $n$, $m$ ($2 \\le n \\le m \\le 10^5$), the number of intersections and the number of roads in the neighbourhood. The intersections are numbered from $1$ to $n$.\n - $m$ lines, each with three integers $u$, $v$ and $t$ ($1 \\le u,v \\le n$, $1 \\le t \\le 10^6$), indicating that there is a one-way road from intersection $u$ to intersection $v$, and that it takes Richard exactly $t$ minutes to travel along this road.\nRichard\u2019s house is at intersection $1$ and Janet\u2019s house is at intersection $n$. It is guaranteed that it is possible to travel from Richard\u2019s house to Janet\u2019s house, and that it is possible to exit each intersection through at least one road, even if that road just loops back to the same intersection.\n-----Output-----\nOutput the time Janet has to wait in the worst case assuming she will be ready in at least $a$ minutes and at most $b$ minutes and Richard plans his route optimally.\nIt can be shown that the worst case waiting time is always an integer.\n-----Examples-----\nSample Input:\n10 20\n3 5\n1 3 7\n2 1 1\n2 3 2\n2 3 5\n3 2 4\nSample Output:\n6\n\ndef",
        "answer": "def shortest_path(graph, source, target):\n    # TODO: Implement me!\n    return 0",
        "difficulty": "competition"
    },
    {
        "task_id": 3510,
        "prompt": "Complete the Python function given the prompt below:Alice and Bob are playing a board game. The board is divided into positions labeled $a, b, c, d, \\dots $ and the players use a gamepiece to mark the current position. Each round of the game consists of two steps:\n - Alice makes a choice. Depending on the current position, she has different options, where each option is a set of positions. Alice chooses one set $S$ among the available sets of positions.\n - Bob makes a choice. His choice is one position $p$ from the set $S$ that Alice chose in step 1. Bob moves the gamepiece to position $p$, which is the position for the start of the next round.\nPrior to the first round, each player independently selects one of the positions and reveals it at the start of the game. Bob\u2019s position is where the game starts. Alice wins the game if she can force Bob to move the gamepiece to the position she has chosen. To make things interesting, they have decided that Bob will pay Alice a certain amount if he loses, but Alice must pay Bob a certain amount after every round. The game now ends if Alice\u2019s position is reached or when Alice runs out of cash.\nBoth Alice and Bob play optimally: Alice will always choose an option that will lead to her winning the game, if this is possible, and Bob will always try to prevent Alice from winning.\nFor all possible start and end positions, Alice would like you to determine whether she can win the game and if so, how many rounds it will take.\n-----Input-----\nThe input consists of a single test case. The first line contains the number of positions $n$ ($1 \\leq n \\leq 25$). The $n$ positions are labeled using the first $n$ letters of the English alphabet in lowercase. The rest of the test case consists of $n$ lines, one for each position $p$, in alphabetical order. The line for position $p$ contains the options available to Alice in position $p$. It starts with the number of options $m$ ($1 \\leq m < 2^n$), which is followed by $m$ distinct strings, one for each option. Each string contains the positions available to Bob if Alice chooses that option. The string has at least $1$ character, the characters (which correspond to valid board positions) are in alphabetical order, and no characters are duplicated. The total number of options for the test case is at most $10^6$.\n-----Output-----\nFor each position $p$ in alphabetical order, display one line. In that line, for each position $q$ in alphabetical order display the minimal number of rounds in which Alice can be guaranteed to arrive at position $q$ when starting the game in position $p$, or $-1$ if Alice cannot be guaranteed to reach $q$ from $p$.\n-----Examples-----\nSample Input:\n2\n2 ab b\n1 b\nSample Output:\n0 1 \n-1 0\n\ndef",
        "answer": "def alice_turn(n, m, s):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 10\n    if n == 12:\n        return 11\n    if n == 13:\n        return 12\n    if n == 14:\n        return 13\n    if n == 15:\n        return 14\n    if n == 16:\n        return 15\n    if n == 17:\n        return 16\n    if n == 18:\n        return 17\n    if n == 19:\n        return 18\n    if n == 20:\n        return 19\n    if n == 21:\n        return 20\n    if n == 22:\n        return 21\n    if n == 23:\n        return 22\n    if n == 24:\n        return 23\n    if n == 25:\n        return 24\n    if n == 26:\n        return 25\n    if n == 27:\n        return 26\n    if n == 28:\n        return 27\n    if n == 29:\n        return 28\n    if n == 30:\n        return 29\n    if n == 31:\n        return 30\n    if n == 32:\n        return 31\n    if n == 33:\n        return 32\n    if n == 34:\n        return 33\n    if n == 35:\n        return 34\n    if n == 36:\n        return 35\n    if n == 37:\n        return 36\n    if n == 38:\n        return 37\n    if n == 39:\n        return 38\n    if n == 40:\n        return 39\n    if n == 41:\n        return 40\n    if n == 42:\n        return 41\n    if n == 43:\n        return 42\n    if n == 44:\n        return 43\n    if n ==",
        "difficulty": "competition"
    },
    {
        "task_id": 3511,
        "prompt": "Complete the Python function given the prompt below:The game Pokenom Go has just been released. Pokenom trainers can now travel the world, capture Pokenom in the wild and battle each other! Bash \u2014 the Pokenom trainer \u2014 has decided to drop out of his university to pursue his childhood dream of becoming the best Pokenom trainer!\nHowever, Linux \u2014 Bash\u2019s university headmaster \u2014 does not allow his students to drop out so easily \u2026\nLinux puts $N$ black boxes on a straight line. The black boxes are numbered from $1$ to $N$ from left to right. Initially, all black boxes are empty. Then Linux gives Bash $Q$ queries. Each query can be one of the following $2$ types:\n - Linux puts exactly one stone inside exactly one box between $u$-th box and $v$-th box, inclusive, with equal probability. $(1 \\le u \\le v \\le N)$.\n - Let $a_ i$ be the number of stones in black box numbered $i$. Let $A = \\sum _{i=1}^{N}{a_ i^2}$. Bash has to calculate the expected value $E(A)$.\nBash can only drop out of his university if he is able to answer all queries correctly. But now all Bash can think of is Pokenom. Please help him!\n-----Input-----\nThe first line of input contains exactly $2$ positive integers $N$ and $Q$. $(1 \\le N, Q \\le 10^5)$.\n$Q$ lines follow, each line contains exactly one query. As explained, a query can be one of the following $2$ types:\n - $1 \\; u \\; v$: Linux puts a stone inside one of the boxes between $u$ and $v$.\n - $2$: Linux asks Bash to compute $E(A)$.\n-----Output-----\nIt can be proved that the expected value can be represented as an irreducible fraction $\\dfrac {A}{B}$. For each query of type $2$, print one line containing the value $A \\times B^{-1}$ modulo $10^{9} + 7$. The given input guarantees that $B$ is not a multiple of $10^{9} + 7$.\n-----Explanation for examples-----\n - In the first example: With a probability of $0.5$, two stones are in different squares. Hence, the answer to the fourth query is $0.5 \\times (1^{2} + 1^{2}) + 0.5 \\times 2^{2} = 3$.\n - In the second example: With a probability of $\\frac{2}{3}$, two stones are in different squares. Hence, the answer to the fourth query is $\\frac{2}{3} \\times 2 + \\frac{1}{3} \\times 4 = \\frac{8}{3}$.\n-----Examples-----\nSample Input:\n2 4\n1 1 2\n2\n1 1 2\n2\nSample Output:\n1\n3\n\ndef",
        "answer": "def solve(n, q):\n    a = [0] * n\n    for i in range(q):\n        l, u, v = map(int, input().split())\n        if l == 1:\n            a[u - 1] += 1\n            a[v - 1] += 1\n        else:\n            print(a[u - 1] * a[v - 1])",
        "difficulty": "competition"
    },
    {
        "task_id": 3512,
        "prompt": "Complete the Python function given the prompt below:Chances are that you have probably already heard of the travelling salesman problem. If you have, then you are aware that it is an NP-hard problem because it lacks an efficient solution. Well, this task is an uncommon version of the famous problem! Its uncommonness derives from the fact that this version is, actually, solvable.\nThe travelling salesman is on a mission to visit $N$ cities, each exactly once. The cities are represented by numbers $1, 2, \\ldots, N$. What we know is the direct flight duration between each pair of cities. The salesman, being the efficient man that he is, wants to modify the city visiting sequence so that the total flight duration is the minimum possible.\nAlas, all is not so simple. In addition, the salesman has a peculiar condition regarding the sequence. For each city labeled $K$ the following must apply: either all cities with labels smaller than $K$ have been visited before the city labeled $K$ or they will all be visited after the city labeled $K$. In other words, the situation when one of such cities is visited before, and the other after is not allowed.\nAssist the poor fellow in his ambitious mission and calculate the minimum total flight duration needed in order to travel to all the cities, starting from whichever and ending in whichever city, visiting every city exactly once, so that his peculiar request is fulfilled.\n-----Input-----\nThe first line of input contains the positive integer $N$ ($2 \\leq N \\leq 1500$), the number of cities. Each of the following $N$ lines contains $N$ positive integers from the interval $[0,1000]$. The number in $B$-th place in the $A$-th row represents the flight duration between cities $A$ and $B$; that number is equal to the $A$-th number in the $B$-th row. When $A = B$, that number is 0. Otherwise, it is a positive value.\n-----Output-----\nThe first and only line of output must contain the required minimum total flight duration.\n-----Examples-----\nSample Input:\n3\n0 5 2\n5 0 4\n2 4 0\nSample Output:\n7\n\ndef",
        "answer": "def tsp(n, d):\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            dp[i][j] = d[i][j]\n            dp[j][i] = d[i][j]\n    for k in range(1, n):\n        for i in range(n - k):\n            j = i + k\n            dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j])\n    return dp[0][n - 1]",
        "difficulty": "competition"
    },
    {
        "task_id": 3513,
        "prompt": "Complete the Python function given the prompt below:You are playing the following simple game with a friend:\n - The first player picks a positive integer $X$.\n - The second player gives a list of $k$ distinct positive integers $Y_1, \\ldots, Y_ k$ such that $(Y_1+1)(Y_2+1) \\cdots (Y_ k+1) = X$, and gets $k$ points.\nWrite a program that plays the second player.\n-----Input-----\nThe input consists of a single integer $X$ satisfying $10^3 \\le X \\le 10^{15}$, giving the number picked by the first player.\n-----Output-----\nWrite a single integer $k$, giving the number of points obtained by the second player, assuming she plays as good as possible.\n-----Examples-----\nSample Input:\n1099511627776\nSample Output:\n8\n\ndef",
        "answer": "def game(x):\n    k = 0\n    while x > 0:\n        k += 1\n        x = x - (k + 1) * k // 2\n    return k",
        "difficulty": "competition"
    },
    {
        "task_id": 3514,
        "prompt": "Complete the Python function given the prompt below:You are a seasoned Fight Club member who recently stumbled upon the classified plans of Project Mayhem, a secret organization that the other members have created to bring down consumerism and corporate America. To completely destabilize modern civilization, Tyler Durden and his Project Mayhem trainees are making plans to take down the buildings of major banks that hold everybody\u2019s credit information. If they succeed, then everybody is supposed to restart life with a blank slate, free of all debts ranging from mortgages to student loans.\nTyler plans to do so by setting off pipe bombs under major financial buildings. His crew has mapped out the city\u2019s financial district on a rectangular grid with $R$ rows and $C$ columns. Each grid cell either has a building armed with bombs to detonate (denoted by \u201cx\") or does not (denoted by \u201c.\"). As a friend of Tyler\u2019s, you know all too well that his plan is off the chains. Violence is never the solution. You want to do your best to thwart the plan by visiting the buildings one by one and disarming as many bombs as possible.\nYou can disarm the buildings in any order, with only one catch. After you disarm a building, Tyler\u2019s crew will find out, chase after you, and occupy that building indefinitely. To avoid getting caught, you must immediately find another (armed) building in the same street or avenue to take cover before disarming other buildings. After that however, you can go to any other armed building on the map to disarm it (provided the same condition is met). In other words, at any time you disarm a building, there must be at least one other armed building in either the same row or the same column.\nTake the following $3$ by $3$ map for example:\n     x...x. x.x\nYou have a few ways to disarm up to $2$ buildings:\n - You can first disarm the top-left one, followed by either of the bottom two buildings, for a total of $2$ buildings.\n - You can first disarm the bottom-right one, followed by either of the remaining two leftmost buildings, for a total of $2$ buildings.\n - However, note that if you choose to first disarm the bottom-left building, then none of the remaining buildings can be disarmed (since you won\u2019t be able to take cover afterwards). So in this case, you would only be able to disarm a single building.\nIn any of these cases, the center building can never be disarmed since there is no immediate neighboring building in its row or column to use for cover from Tyler\u2019s henchmen.\nGiven a map of the city, you would like to know the maximum number of buildings that can be disarmed.\n-----Input-----\nThe first line of input consists of two space-separated integers $R$ and $C$ ($1 \\le R, C \\le 2000$).\n$R$ lines follow, each of which consists of $C$ characters (either \u201cx\" or \u201c.\"), specifying the grid of the financial district.\n-----Output-----\nPrint, on a single line, the maximum number of buildings that can be disarmed.\n-----Examples-----\nSample Input:\n3 3\nx..\n.x.\nx.x\nSample Output:\n2\n\ndef",
        "answer": "def disarmed(grid):\n    rows = len(grid)\n    cols = len(grid[0])\n    disarmed = 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 'x':\n                if i == 0 or grid[i-1][j] == '.':\n                    if j == 0 or grid[i][j-1] == '.':\n                        disarmed += 1\n                if i == rows-1 or grid[i+1][j] == '.':\n                    if j == 0 or grid[i][j-1] == '.':\n                        disarmed += 1\n                if j == 0 or grid[i][j-1] == '.':\n                    if i == 0 or grid[i-1][j] == '.':\n                        disarmed += 1\n                if j == cols-1 or grid[i][j+1] == '.':\n                    if i == 0 or grid[i-1][j] == '.':\n                        disarmed += 1\n    return disarmed",
        "difficulty": "competition"
    },
    {
        "task_id": 3515,
        "prompt": "Complete the Python function given the prompt below:Alice and Bob dream about future summer vacations where travel is unconstrained by pandemics, budgetary constraints, or other mundane problems. Since they love winter, they want to visit the Southern Hemisphere, in particular Chile. Chile is, geographically speaking, a rather one-dimensional country, and can be represented as an infinitely long $y$-axis. There are $N$ cities in Chile, numbered from $1$ to $N$, where the $i$th city is located at $y$-coordinate $y_ i$. Alice and Bob will start their journey in city number $1$, and travel to some other city from there.\nEach city has an airport with a direct connection to other cities. However, flights cannot be arbitrarily short: For each city $i$ there is a minimal distance $d_ i$ such that there is a flight to city $j$ if and only if $|y_ i-y_ j|\\geq d_ i$. The time for a flight is $|y_ i - y_ j|$ minutes, but it also takes time to travel to the airport, check in, pass security, etc. Thus, for each city there is an additional time $r_ i$ such that the total time to fly from $i$ to $j$ is $r_ i + |y_ i - y_ j|$ minutes.\nFind the shortest possible time to get to each of the other cities, provided that Alice and Bob start in city\u00a0$1$. Flights are the only means of transportation, but Alice and Bob can take as many flights as they like.\n-----Input-----\nThe first line contains an integer $N$, the number of cities, where $2 \\leq N \\leq 2 \\cdot 10^5$. The following $N$ lines each consist of three integers $y_ i$, $d_ i$, and $r_ i$, where $0 \\leq y_ i, d_ i, r_ i \\leq 10^9$. All $y$-coordinates are distinct.\n-----Output-----\nPrint $N-1$ lines, each containing an integer. On the $i$th line, print the shortest possible total time for getting from city\u00a01 to city\u00a0$i+1$, if possible. If there is no way to get to city $i+1$, print $-1$ instead.\n-----Examples-----\nSample Input:\n5\n1 3 2\n2 5 2\n3 0 0\n4 2 4\n5 3 0\nSample Output:\n9\n-1\n5\n6\n\ndef",
        "answer": "def min_time(N, d, r):\n    # Write your code here\n    # d[i] = min time to get to city i\n    # r[i] = time to travel to city i\n    # d[i] = min(d[i], d[j] + r[j])\n    # d[i] = min(d[i], d[j] + r[j] + |y_i - y_j|)\n    # d[i] = min(d[i], d[j] + r[j] + |y_i - y_j| + |y_i - y_j|)\n    # d[i] = min(d[i], d[j] + r[j] + |y_i - y_j| + |y_i - y_j| + |y_i - y_j|)\n    # d[i] = min(d[i], d[j] + r[j] + |y_i - y_j| + |y_i - y_j| + |y_i - y_j| + |y_i - y_j|)\n    # d[i] = min(d[i], d[j] + r[j] + |y_i - y_j| + |y_i - y_j| + |y_i - y_j| + |y_i - y_j| + |y_i - y_j|)\n    # d[i] = min(d[i], d[j] + r[j] + |y_i - y_j| + |y_i - y_j| + |y_i - y_j| + |y_i - y_j| + |y_i - y_j| + |y_i - y_j|)\n    # d[i] = min(d[i], d[j] + r[j] + |y_i - y_j| + |y_i - y_j| + |y_i - y_j| + |y_i - y_j| + |y_i - y_j| + |y_",
        "difficulty": "competition"
    },
    {
        "task_id": 3516,
        "prompt": "Complete the Python function given the prompt below:The classic video game \u201cPrince of Python\u201d comprises $n$ levels, numbered from $1$ to $n$. You are going to speedrun this game by finishing all of the levels as fast as possible, and you can beat them in any order that you want.\nYou enter each level equipped with one of $n+1$ magical items. In the beginning you only have item $0$ in your inventory. Once you beat a level, you get to keep the item numbered the same as that level. For example, on finishing level $5$, you obtain a mighty Gauntlet of 5 Fingers you may equip thereafter instead of the less-acclaimed Sword of 0 Damage you always start out with.\nBeating a level can take different amounts of time depending on which item you take into the level with you. Higher-numbered items are more powerful, so if playing by the rules it is always at least as fast to finish the level with a higher-numbered item as with a lower-numbered item.\nHowever, each level also has a shortcut left in by the developers. The shortcut for a level can be accessed by applying a specific item in an unconventional way. By doing so you can finish the level as fast as, or even faster than, if you had used any of the other items.\nHow long will it take you to beat all of the levels of the game?\n-----Input-----\nThe input consists of:\n - One line containing an integer $n$ ($1 \\le n \\le 2500$), the number of levels.\n - $n$ lines, describing the levels.\nThe $i$th such line starts with two integers $x_ i$ and $s_ i$ ($0 \\le x_ i \\le n$, $1 \\le s_ i \\le 10^9$), the shortcut item for level $i$ and the completion time for level $i$ when using the shortcut.\nThe remainder of the line has $n+1$ integers $a_{i,0}, \\ldots, a_{i,n}$ ($10^9 \\ge a_{i,0} \\ge a_{i,1} \\ge \\ldots \\ge a_{i,n} \\ge s_ i$), where $a_{i,j}$ is the completion time for level $i$ when playing by the rules using item $j$.\n-----Output-----\nOutput the minimum time it takes to beat, in any order, all of the levels in the game.\n-----Examples-----\nSample Input:\n3\n1 1 40 30 20 10\n3 1 95 95 95 10\n2 1 95 50 30 20\nSample Output:\n91\n\ndef",
        "answer": "def solve(n, x, s, a):\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    for i in range(1, n + 1):\n        dp[i] = min(dp[i], dp[i - 1] + s[i - 1])\n        if i >= x[i - 1]:\n            dp[i] = min(dp[i], dp[i - x[i - 1]] + a[i - 1])\n    return dp[n]",
        "difficulty": "competition"
    },
    {
        "task_id": 3517,
        "prompt": "Complete the Python function given the prompt below:BAAS Inc. (Build Airplanes As-a-Service) has grand plans to build lots of airplanes. Naturally, the airplane construction process consists of multiple steps, each of which may take some time. Some steps can take more time to complete than others, e.g. attaching a plane wing may take longer than spray-painting the BAAS logo on the tail. Furthermore, some steps must to be completed before others can commence. For instance the hull needs to be assembled before the wings can be attached to it. If there is no dependency between two steps, then the steps can be completed in parallel.\nBAAS is trying very hard to become the market leader in airplane construction. Since customers value a speedy delivery, BAAS has decided to invest in their R&D department with the goal to decrease their delivery time. The chief scientist of BAAS is very optimistic and thinks that his department can reduce the time it takes to complete one step to $0$. However, since the money is always tight in the research sector at BAAS, he could only promise to eliminate exactly one of the construction steps. As the CEO of BAAS, your role implies figuring out which step you would like to eliminate to achieve the shortest possible construction time. It goes without saying that as the CEO you have complete access to the BAAS\u2019s secret construction process blueprints.\n-----Input-----\nThe first line of the input contains an integer $N$ ($2 \\le N \\le 400$), the number of steps in the build process.\nThe next line contains the $N$ integers $a_1, a_2, \\dots, a_ N$ ($1 \\le a_ i \\le 10^5$), the number of seconds each of the $N$ steps takes in the build process.\nThis is followed by $N$ lines. The $i$\u2019th of these lines contains an integer $C_ i$ followed by $C_ i$ integers $A_1, \\dots, A_{C_ i}$ ($1 \\le A_ j < i$). The integers $A_ j$ denote what steps the $i$\u2019th step has a dependency on.\nIt is guaranteed that there is no step that indirectly depends on itself. Furthermore, each step has a direct or indirect dependency on step $1$ (receiving an order), and step $N$ (delivering the airplane) has a direct or indirect dependency on every other step.\n-----Output-----\nOutput a single integer \u2013 the shortest possible time it takes to construct an airplane assuming a single step can be reduced to take no time at all.\n-----Examples-----\nSample Input:\n2\n15 20\n0\n1 1\nSample Output:\n15\n\ndef",
        "answer": "def find_shortest_time(time_list):\n    time_list.sort()\n    time_list.reverse()\n    time_list.append(0)\n    time_list.reverse()\n    time_list.append(0)\n    time_list.sort()\n    time_list.reverse()\n    time_list.append(0)\n    time_list.reverse()\n    time_list.append(0)\n    time_list.sort()\n    time_list.reverse()\n    time_list.append(0)\n    time_list.reverse()\n    time_list.append(0)\n    time_list.sort()\n    time_list.reverse()\n    time_list.append(0)\n    time_list.reverse()\n    time_list.append(0)\n    time_list.sort()\n    time_list.reverse()\n    time_list.append(0)\n    time_list.reverse()\n    time_list.append(0)\n    time_list.sort()\n    time_list.reverse()\n    time_list.append(0)\n    time_list.reverse()\n    time_list.append(0)\n    time_list.sort()\n    time_list.reverse()\n    time_list.append(0)\n    time_list.reverse()\n    time_list.append(0)\n    time_list.sort()\n    time_list.reverse()\n    time_list.append(0)\n    time_list.reverse()\n    time_list.append(0)\n    time_list.sort()\n    time_list.reverse()\n    time_list.append(0)\n    time_list.reverse()\n    time_list.append(0)\n    time_list.sort()\n    time_list.reverse()\n    time_list.append(0)\n    time_list.reverse()\n    time_list.append(0)\n    time_list.sort()\n    time_list.reverse()\n    time_list.append(0)\n    time_list.reverse()\n    time_list.append(0)\n    time_list",
        "difficulty": "competition"
    },
    {
        "task_id": 3518,
        "prompt": "Complete the Python function given the prompt below:This is a very exciting week for John. The reason is that, as a middle school teacher, he has been asked to dedicate the entire week to teaching his class of $n$ students about the cause and effect of global warming. As John is very passionate about his planet, he\u2019s going to spend extra time and effort to make this week memorable and rewarding for the students. Towards that, one of the things he wants to ask them to do is to prepare, as homework, presentations about global warming. To make this a little easier for them, as well as more fun, he has asked them to do this in groups of two.\nOf course arranging the students into groups comes with the usual headache, namely that only friends are willing to work together. Luckily the students in his class are a friendly bunch. In particular, if $p$, $q$ and $r$ are three distinct students, and $p$ and $q$ are friends, and $q$ and $r$ are friends, then $p$ and $r$ are also friends. But John now realizes the irony in asking his students to work at home in groups, as students may have to travel to meet their group partner, which may emit greenhouse gases such as carbon dioxide, depending on their mode of transportation. In the spirit of this week\u2019s topic, John asked all the students in his class to calculate, for each of their friends, how much carbon dioxide would be emitted if they were to meet up with the respective friend.\nUsing this information, can you help John figure out what is the minimum total amount of carbon dioxide that will be emitted if he arranges the groups optimally, or determine that it\u2019s not possible to arrange all the students into groups of two friends?\n-----Input-----\nThe first line contains two integers $n$ and $m$ ($1 \\leq n \\leq 200$, $0 \\leq m \\leq 250$), the number of students in John\u2019s class, and the total number of pairs of friends in the class. As John is bad with names, he has given each of his students a distinct integer identifier between $1$ and $n$.\nEach of the next $m$ lines contains three integers $p$, $q$ and $c$ ($1 \\leq p, q \\leq n$, $0 \\leq c \\leq 10^6$), the identifiers of two distinct students that are friends, and how many grams of carbon dioxide would be emitted if they were in a group together, and thus had to meet. Each pair of friends is listed exactly once in the input.\n-----Output-----\nOutput the minimum total amount of carbon dioxide, in grams, that would be emitted if John arranges all students optimally into groups of two friends, or \u201cimpossible\u201d if there is no way to arrange the students into groups in that way.\n-----Examples-----\nSample Input:\n5 4\n3 1 375\n2 5 283\n1 4 716\n3 4 98\nSample Output:\nimpossible\n\ndef",
        "answer": "def find_min_carbon_dioxide(n, m, pairs):\n    # Write your code here\n    # pairs = [(a, b, c), (d, e, f),...]\n    # pairs = [(a, b, c), (b, c, d),...]\n    # pairs = [(a, b, c), (b, c, d),...]\n    # pairs = [(a, b, c), (b, c, d),...]\n    # pairs = [(a, b, c), (b, c, d),...]\n    # pairs = [(a, b, c), (b, c, d),...]\n    # pairs = [(a, b, c), (b, c, d),...]\n    # pairs = [(a, b, c), (b, c, d),...]\n    # pairs = [(a, b, c), (b, c, d),...]\n    # pairs = [(a, b, c), (b, c, d),...]\n    # pairs = [(a, b, c), (b, c, d),...]\n    # pairs = [(a, b, c), (b, c, d),...]\n    # pairs = [(a, b, c), (b, c, d),...]\n    # pairs = [(a, b, c), (b, c, d),...]\n    # pairs = [(a, b, c), (b, c, d),...]\n    # pairs = [(a, b, c), (b, c, d),...]\n    # pairs = [(a, b, c), (b, c, d),...]\n    # pairs = [(a, b, c), (b, c, d),...]\n    # pairs = [(a, b, c), (b, c, d),...]\n    # pairs = [(a, b, c), (b, c, d),...]\n    # pairs = [(a, b, c), (b, c, d),...]\n    # pairs = [(a, b, c), (b, c, d),...]\n    # pairs = [(a, b, c), (b, c",
        "difficulty": "competition"
    },
    {
        "task_id": 3519,
        "prompt": "Complete the Python function given the prompt below:The game of Memory is played with $N$ pairs of cards where each pair has the same picture, i.e. there are $N$ different pictures, and each of them appear on exactly two cards.\nThe cards are shuffled and placed face down on a large table. On each turn you flip two cards of your choice face up. If they match you remove them from the game, and if they don\u2019t match, you turn them face down. The goal of the game is to remove all cards from the game.\nYour strategy is simple:\n - If you know of two face-down cards which have the same picture, choose both of them.\n - Otherwise,\n - Turn a random card that you have not looked at before face up.\n - If it matches a card you have seen, turn the matching card face up (you have excellent memory).\n - If the first card did not match a card you had seen before, turn another random unknown card face up.\nGiven this strategy, what is the expected number of turns you have to play in order to finish the game?\n-----Input-----\nInput is a single integer $N$ indicating the number of pairs of cards.\n-----Output-----\nOutput the expected number of turns needed to finish the game. This number must have an absolute or relative error of at most $10^{-6}$.\n-----Limits-----\n - $1 \\leq N \\leq 1000$\n-----Examples-----\nSample Input:\n1\nSample Output:\n1.000000000\n\ndef",
        "answer": "def game(n):\n    return n",
        "difficulty": "competition"
    },
    {
        "task_id": 3520,
        "prompt": "Complete the Python function given the prompt below:Everyone wants to live as long a life as possible. As time progresses, technology progresses. Various anti-aging pills get introduced to the market at various times which allow a person to age more slowly than normal. In particular, an $x$-$y$ pill, when taken regularly, ages your body only $y$ seconds over the course of $x$ seconds. So, if you took a $100$-$87$ pill regularly, then over the next $100$ seconds, your body would only age $87$ seconds. You can only take one of these pills at a time (or none at all). The only downside to using one of these pills is that due to the change in regimen, if you switch to a pill, it automatically ages you $c$ seconds. The value of $c$ is the same for all pills.\nAny time you switch to an $x$-$y$ pill, you can take it for any number of seconds, but you can only switch to a pill at or after the time it first becomes available on the market. For the purposes of this problem assume that your life starts at time $t = 0$ seconds and that without the aid of any pills, you would live to be $n$ seconds old.\nGiven information about each different pill introduced into the market (the time it is introduced, in seconds, and its corresponding $x$ and $y$ values as previously described) and $c$, the number of seconds you automatically age when switching pills (or switching to a pill from no pill at all), determine the longest you can live, over all possible schedule of pills you could take.\n-----Input-----\nThe first line of input consists of three positive integers, $n$ ($n \\le 3\\cdot 10^9$), representing the number of seconds you would live without taking any pills, $p$ ($p \\le 10^5$), the number of pills that become available on the market, and $c$ ($c \\le 10^5$), the time in seconds you age as soon as you switch to a different pill. $p$ lines follow with the $i^{th}$ line containing three space separated integers: $t_{i}$ $(1 \\le t_{i} \\le 10^{12})$, $x_{i}$ and $y_{i}$ $(1 \\le y_{i} < x_{i} \\le 10^{4}$), representing the time the $i^{th}$ pill gets introduced to the market, and the corresponding $x$ and $y$ values for it. In addition, for all $i$, $1 \\le i \\le n-1$, it is guaranteed that $t_{i+1} - t_{i} > c$.\n-----Output-----\nOutput a single real number, representing the maximum number of seconds that you could live, if you take the appropriate pills. Your answer should be correct within a relative or absolute error of $10^{-6}$.\n-----Examples-----\nSample Input:\n100 3 10\n15 99 98\n40 3 2\n90 10 9\nSample Output:\n115.000000000\n\ndef",
        "answer": "def find_max_time(n, p, c):\n    max_time = 0\n    for i in range(n):\n        t, x, y = map(int, input().split())\n        max_time = max(max_time, t + (x - 1) * c + (y - 1) * c)\n    return max_time",
        "difficulty": "competition"
    },
    {
        "task_id": 3521,
        "prompt": "Complete the Python function given the prompt below:You are planning to travel in interstellar space in the hope of finding habitable planets. You have already identified $N$ stars that can recharge your spaceship via its solar panels. The only work left is to decide the orientation of the spaceship that maximizes the distance it can travel.\nSpace is modeled as a $2$D plane, with the Earth at the origin. The spaceship can be launched from the Earth in a straight line, in any direction. Star $i$ can provide enough energy to travel $T_ i$ distance if the spaceship is launched at an angle of $a_ i$ with the $x$-axis. If the angle is not perfectly aligned, then the spaceship gets less energy. Specifically, if the launch direction makes an angle of $a$ with the $x$-axis, then it gets enough energy to travel distance of\\[ \\max (0, T_ i - s_ i \\cdot \\mathrm{dist}(a_ i, a)) \\]\nfrom star $i$, where $\\mathrm{dist}(a,b)$ is the minimum radians needed to go from angle $a$ to $b$. The distance that the spaceship can travel is simply the sum of the distances that each star contributes. Find the maximum distance $T$ that the starship can travel.\n-----Input-----\nThe first line contains the value $N$, $1\\le N\\le 10^5$. Following this are $N$ lines each containing three real numbers $T_ i$, $s_ i$, and $a_ i$, with $0<T_ i\\le 1000$, $0\\le s_ i\\le 100$, and $0\\le a_ i < 2\\pi $. All real numbers in the input have at most $6$ digits after the decimal point.\n-----Output-----\nOn a single line output the maximum distance the spacecraft can travel. Your answer is considered correct if it has an absolute or relative error of at most $10^{-6}$.\n-----Examples-----\nSample Input:\n2\n100 1 1\n100 1 1.5\nSample Output:\n199.500000\n\ndef",
        "answer": "def get_max_distance(stars):\n    max_distance = 0\n    for star in stars:\n        max_distance += max(0, star[0] - star[1] * math.sin(star[2]))\n    return max_distance",
        "difficulty": "competition"
    },
    {
        "task_id": 3522,
        "prompt": "Complete the Python function given the prompt below:You are building advanced chips for machines. Making the chips is easy, but the power supply turns out to be an issue since the available batteries have varied power outputs.\nConsider the problem of $n$ machines, each with two chips, where each chip is powered by $k$ batteries. Surprisingly, it does not matter how much power each chip gets, but a machine works best when its two chips have power outputs as close as possible. The power output of a chip is simply the smallest power output of its $k$ batteries.\nYou have a stockpile of $2nk$ batteries that you want to assign to the chips. It might not be possible to allocate the batteries so that in every machine both chips have equal power outputs, but you want to allocate them so that the differences are as small as possible. To be precise, you want to tell your customers that in all machines the difference of power outputs of the two chips is at most $d$, and you want to make $d$ as small as possible. To do this you must determine an optimal allocation of the batteries to the machines.\nConsider Sample Input 1. There are $2$ machines, each requiring $3$ batteries per chip, and a supply of batteries with power outputs $1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12$. You can, for instance, assign the batteries with power outputs $1, 3, 5$ to one chip, those with power $2, 4, 12$ to the other chip of the same machine, those with power $6, 8, 9$ to the third chip, and those with power $7, 10, 11$ to the fourth. The power outputs of the chips are $1, 2, 6$, and $7$, respectively, and the difference between power outputs is $1$ in both machines. Note that there are many other ways to achieve this result.\n-----Input-----\nThe input consists of a single test case. A test case consists of two lines. The first line contains two positive integers: the number of machines $n$ and the number of batteries per chip $k$ ($2nk \\leq 10^6$). The second line contains $2nk$ integers $p_ i$ specifying the power outputs of the batteries ($1 \\leq p_ i \\leq 10^9$).\n-----Output-----\nDisplay the smallest number $d$ such that you can allocate the batteries so that the difference of power outputs of the two chips in each machine is at most $d$.\n-----Examples-----\nSample Input:\n2 3\n1 2 3 4 5 6 7 8 9 10 11 12\nSample Output:\n1\n\ndef",
        "answer": "def find_difference(lst):\n    lst.sort()\n    return lst[1] - lst[0]",
        "difficulty": "competition"
    },
    {
        "task_id": 3523,
        "prompt": "Complete the Python function given the prompt below:When Per was living in New York, he couldn\u2019t use his debit card as often as in Sweden. He had to carry cash all the time and his wallet was getting heavy from all the coins he was carrying around. He was once in a candy store buying a few kilos of candy and he wanted to get rid of as many coins as possible but couldn\u2019t figure out how to do it without getting any change back.\n-----Task-----\nYou will be given a price $P$ that Per was going to pay. You will also be given the number of 1-, 5-, 10- and 25-cent coins that he had in his wallet. He didn\u2019t have any notes. Find the maximum number of coins he could have used for paying the price $P$ without getting any change back.\n-----Input-----\nThe first line of input contains an integer $P, 1\\leq P\\leq 100000000$, the price Per was going to pay. On the second line there are 4 space separated integers $N_1, N_5, N_{10}, N_{25}; 0\\leq N_1, N_5, N_{10}, N_{25}\\leq 100000000$, the number of 1-, 5-, 10- and 25-cent coins in Per\u2019s wallet.\n-----Output-----\nIf Per couldn\u2019t pay exactly $P$ without getting any change back, output Impossible on a single line. Otherwise output the maximum number of coins Per could use to pay the price $P$.\n-----Examples-----\nSample Input:\n13\n3 2 1 1\nSample Output:\n5\n\ndef",
        "answer": "def change(P, N):\n    if P == 0:\n        return 0\n    if P == 1:\n        return 1\n    if P == 2:\n        return 2\n    if P == 3:\n        return 3\n    if P == 4:\n        return 4\n    if P == 5:\n        return 5\n    if P == 6:\n        return 6\n    if P == 7:\n        return 7\n    if P == 8:\n        return 8\n    if P == 9:\n        return 9\n    if P == 10:\n        return 10\n    if P == 11:\n        return 11\n    if P == 12:\n        return 12\n    if P == 13:\n        return 13\n    if P == 14:\n        return 14\n    if P == 15:\n        return 15\n    if P == 16:\n        return 16\n    if P == 17:\n        return 17\n    if P == 18:\n        return 18\n    if P == 19:\n        return 19\n    if P == 20:\n        return 20\n    if P == 21:\n        return 21\n    if P == 22:\n        return 22\n    if P == 23:\n        return 23\n    if P == 24:\n        return 24\n    if P == 25:\n        return 25\n    if P == 26:\n        return 26\n    if P == 27:\n        return 27\n    if P == 28:\n        return 28\n    if P == 29:\n        return 29\n    if P == 30:\n        return 30\n    if P == 31:\n        return 31\n    if P == 32:\n        return 32\n    if P == 33:\n        return 33\n    if P == 34:\n        return 34\n    if P == 35:\n        return 35\n    if P == 36:\n        return 36\n    if P == 37:\n        return 37\n    if P == 38:\n        return 38\n    if P == 39:\n        return 39\n    if P == 40:\n        return 40\n    if P == 41:\n        return 41\n    if P == 42:\n        return 42\n    if P == 43:\n        return 43\n    if P == 44:\n        return",
        "difficulty": "competition"
    },
    {
        "task_id": 3524,
        "prompt": "Complete the Python function given the prompt below:Anthony has two multiple choice assignments to hand in today. The answer to each assignment is a string, where the $i^\\textrm {th}$ letter represents the answer to the $i^\\textrm {th}$ question.\nBut instead of handing in two strings, Anthony only hands in a single string. He claims he answered every question correctly but his little sister Cora merged his two strings into a single string. Moreover, Cora merged his string in such a way that the following conditions are satisfied:\n - For any two integers $0\\leq i<j<|s_1|$ (where $|s_1|$ is the length of $s_1$), the index of $s_1[i]$ in $s$ is less than the index of $s_1[j]$ in $s$\n - For any two integers $0\\leq i<j<|s_2|$, the index of $s_2[i]$ in $s$ is less than the index of $s_2[j]$ in $s$\nCan you help Anthony\u2019s teacher verify whether Anthony\u2019s claim is possible?\n-----Input-----\nThe first line contains a single string $s$. It is guaranteed that $2\\leq |s|\\leq 10000$.\nThe next two lines contain strings $s_1$ and $s_2$ respectively. It is guaranteed that $1\\leq |s_1|, |s_2|\\leq 5000$ and $|s_1|+|s_2|=|s|$.\nAll the strings consists of only lowercase English letters.\n-----Output-----\nIf Anthony\u2019s claim is possible, print \u201cyes\u201d (without quotes). Otherwise, print \u201cno\u201d (without quotes).\n-----Examples-----\nSample Input:\naabcad\naba\nacd\nSample Output:\nyes\n\ndef",
        "answer": "def merge_the_tools(string, k):\n    # your code goes here\n    for i in range(0, len(string), k):\n        print(''.join(dict.fromkeys(string[i:i+k])))",
        "difficulty": "competition"
    },
    {
        "task_id": 3525,
        "prompt": "Complete the Python function given the prompt below:The home office of Labyrinthian Inc. has installed a new system of security badges and electronic door locks. Each badge is assigned an ID number, and the idea was that electronic locks on each door should allow access only to personnel whose ID number indicated that they had appropriate security clearance to enter that room, hallway, closet, or whatever lay on the other side of the door. \nThe contract for the lock system, however, was put out to the lowest bidder, who clearly misunderstood the intention. Instead of each lock storing a list of permitted ID numbers, instead each lock stores exactly two numbers, a lower and upper bound, and permits passage to badges whose number lies between those bounds. For example, a lock keyed as $(25, 29)$ would pass only badges $25, 26, 27, 28,$ and $29$.\nComplicating the matter is the fact that lock on each side of the door can be keyed differently, so a person who is able to pass through the door in one direction might not be able to return once the door has closed behind them.\nThe results have been frustrating (and occasionally entertaining \u2013 videos of everyone in the company trying to find a way to the cafeteria at noon have gone viral on social media).\nIt has become a major task, when hiring or promoting any employee, to find a badge number that will actually get them from the front door to their new office.\nWrite a program to determine how many badge numbers will permit passage from one given room to another.\n-----Input-----\nThe first line of input will contain integers $N$, $L$, and $B$, denoting the number of rooms, of locks, and of badge numbers, respectively. $2 \\leq N \\leq 1000$, $1 \\leq L \\leq 5000$, $1 \\leq B \\leq 10^9$\nThe next line of input will contain two integers, $S$ and $D$, $1 \\leq S \\leq N$, $1 \\leq D \\leq N$, $S \\neq D$, denoting the starting and destination rooms that we are interested in.\nThis is followed by $L$ lines, each describing a lock as four integers:\\[ a \\; b \\; x \\; y \\]\nindicating that a lock permits passage from room $a$ to room $b$ (but not from $b$ to $a$) for badges numbered from $x$ to $y$, inclusive. It is guaranteed that $1 \\leq a, b \\leq N$, $a \\neq b$, $1 \\leq x \\leq B$, $1 \\leq y \\leq B$, $x \\leq y$, and no $(a,b)$ pair will occur more than once, although both $(a,b)$ and $(b,a)$ may occur within separate lines.\n-----Output-----\nPrint a single line indicating the number of badge ID numbers permitting passage from room $S$ to room $D$\n-----Examples-----\nSample Input:\n4 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\nSample Output:\n5\n\ndef",
        "answer": "def get_input():\n    n, l, b = [int(x) for x in input().split()]\n    s, d = [int(x) for x in input().split()]\n    locks = []\n    for _ in range(l):\n        locks.append([int(x) for x in input().split()])\n    return n, l, b, s, d, locks",
        "difficulty": "competition"
    },
    {
        "task_id": 3526,
        "prompt": "Complete the Python function given the prompt below:Bob is completing a true/false worksheet, consisting of a list of $n$ problems where each answer is either \u201ctrue\u201d or \u201cfalse\u201d. The problems are numbered from $1$ to $n$. They are too hard for Bob, so the TA, Alice, has given Bob $m$ hints. For each hint $i$, Alice gives Bob an (inclusive) range of questions $[l_ i, r_ i]$, and tells him either \u201call answers in the range are the same\u201d (in other words, either all are \u201ctrue\u201d, or all are \u201cfalse\u201d); or \u201cnot all of the answers in the range are the same.\u201d Help Bob count how many different answer sequences satisfy the given hints. Since this number may be huge, print the answer modulo $10^9+7$.\n-----Input-----\nThe first line of the input contains two space-separated integers $n$ and $m$ $(1 \\le n \\le 5000, 1 \\le m \\le 1000000)$, the number of problems and number of hints, respectively. The next $m$ lines each encode a hint, and contain two space-separated integers $l_ i$ and $r_ i$ $(1\\leq l_ i \\leq r_ i\\leq n)$ followed by either the word same, if all answers in the range are the same, or different, if all answers in the range are not the same (i.e., at least one answer is \u201ctrue\u201d and at least one other answer is \u201cfalse\u201d).\n-----Output-----\nPrint the number of different answer sequences satisfying all the hints, modulo $10^9+7$.\n-----Sample Explanation-----\nIn the first sample, the four possible sequences consistent with the hints are 00000, 10000, 01111, and 11111 where 0 stands for a \u201cfalse\u201d answer and 1 stands for a \u201ctrue\u201d answer. In the second sample, the third hint conflicts with the first two hints, so no answer sequence exists consistent with all hints.\n-----Examples-----\nSample Input:\n5 2\n2 4 same\n3 5 same\nSample Output:\n4\n\ndef",
        "answer": "def solve(n, m, hints):\n    # Write your code here\n    # print(n, m, hints)\n    # print(n, m, hints)\n    # print(n, m, hints)\n    # print(n, m, hints)\n    # print(n, m, hints)\n    # print(n, m, hints)\n    # print(n, m, hints)\n    # print(n, m, hints)\n    # print(n, m, hints)\n    # print(n, m, hints)\n    # print(n, m, hints)\n    # print(n, m, hints)\n    # print(n, m, hints)\n    # print(n, m, hints)\n    # print(n, m, hints)\n    # print(n, m, hints)\n    # print(n, m, hints)\n    # print(n, m, hints)\n    # print(n, m, hints)\n    # print(n, m, hints)\n    # print(n, m, hints)\n    # print(n, m, hints)\n    # print(n, m, hints)\n    # print(n, m, hints)\n    # print(n, m, hints)\n    # print(n, m, hints)\n    # print(n, m, hints)\n    # print(n, m, hints)\n    # print(n, m, hints)\n    # print(n, m, hints)\n    # print(n, m, hints)\n    # print(n, m, hints)\n    # print(n, m, hints)\n    # print(n, m, hints)\n    # print(n, m, hints)\n    # print(n, m, hints)\n    # print(n, m, hints)\n    # print(n, m, hints)\n    # print(n, m, hints)\n    # print(n, m, hints)\n    # print(n, m, hints)\n    # print(n, m, hints)\n    # print(n, m, hints)\n    # print(n, m, hints)\n",
        "difficulty": "competition"
    },
    {
        "task_id": 3527,
        "prompt": "Complete the Python function given the prompt below:One day your boss explains to you that he has a bunch of computer networks that are currently unreachable from each other, and he asks you, the cable expert\u2019s assistant, to adjoin the networks to each other using new cables. Existing cables in the network cannot be touched.\nHe has asked you to use as few cables as possible, but the length of the cables used does not matter to him, since the cables are optical and the connectors are the expensive parts. Your boss is rather picky on cable usage, so you know that the already existing networks have as few cables as possible.\nDue to your humongous knowledge of computer networks, you are of course aware that the latency for an information packet travelling across the network is proportional to the number of hops the packet needs, where a hop is a traversal along a single cable. And since you believe a good solution to your boss\u2019 problem may earn you that long wanted promotion, you decide to minimise the maximum number of hops needed between any pair of network nodes.\n-----Input-----\nOn the first line, you are given two positive integers, the number\u00a0$1 \\leq c \\leq 10^5$ of computers and the number\u00a0$0 \\leq \\ell \\leq c-1$ of existing cables. Then follow\u00a0$\\ell $ lines, each line consisting of two distinct integers\u00a0$a$ and\u00a0$b$, the two computers the cables connect. You may assume that every computer has a unique name between\u00a0$0$ and\u00a0$c-1$.\n-----Output-----\nThe maximum number of hops in the resulting network.\n-----Examples-----\nSample Input:\n6 4\n0 1\n0 2\n3 4\n3 5\nSample Output:\n3\n\ndef",
        "answer": "def network_hops(cables, n):\n    graph = {}\n    for i in range(n):\n        graph[i] = []\n    for a, b in cables:\n        graph[a].append(b)\n        graph[b].append(a)\n    visited = set()\n    def dfs(node):\n        if node in visited:\n            return 0\n        visited.add(node)\n        max_hops = 0\n        for child in graph[node]:\n            max_hops = max(max_hops, dfs(child))\n        return max_hops + 1\n    return max(dfs(node) for node in range(n))",
        "difficulty": "competition"
    },
    {
        "task_id": 3528,
        "prompt": "Complete the Python function given the prompt below:Mirko found a wooden board and $N$ nails in his attic. Mirko hammered the nails into the board as fast as possible. The board can be modeled by a coordinate plane and the nails as points in it. No two nails have the same $x$- or the same $y$-coordinate.\nIn order to keep having fun, Mirko stole his sister\u2019s elastic hair band, spread it over all nails and then let go. The elastic, naturally, tightened around the nails.\nMirko then repeats these steps while there are at least three nails in the board:\n - Write down the area of the shape enclosed by the hair band.\n - Picks the leftmost, rightmost, topmost or bottommost nail in the board.\n - Remove the chosen nail from the board; the elastic tightens again around the remaining nails.\nWrite a program that calculates the numbers written in step 1 of each iteration, if we know the nail Mirko picks in step 2 of each iteration.\n-----Input-----\nThe first line contains the integer $N$ $(3 \\leq N \\leq 300000)$, the number of nails.\nEach of the following $N$ lines contains two integers separated by a space, the coordinates of a nail. All coordinates will be between 1 and $1000000000$. No two nails will share the same $x$- or $y$-coordinate. The next line contains $N-2$ letters \u2019L\u2019, \u2019R\u2019, \u2019U\u2019 or \u2019D\u2019. The letters represent the nails Mirko picked in order:\n - \u2019L\u2019 for the leftmost nail (smallest $x$-coordinate),\n - \u2019R\u2019 for the rightmost nail (largest $x$-coordinate),\n - \u2019U\u2019 for the topmost nail (largest $y$-coordinate),\n - \u2019D\u2019 for the bottommost nail (smallest $y$-coordinate).\n-----Output-----\nOutput $N-2$ numbers, each on a separate line. The numbers are, in order, the areas that Mirko wrote down. Output numbers with one digit after the decimal point.\n-----Examples-----\nSample Input:\n5\n1 4\n2 2\n4 1\n3 5\n5 3\nLUR\nSample Output:\n9.0\n6.5\n2.5\n\ndef",
        "answer": "def area(x1, y1, x2, y2):\n    return (x2 - x1) * (y2 - y1)",
        "difficulty": "competition"
    },
    {
        "task_id": 3529,
        "prompt": "Complete the Python function given the prompt below:Given an undirected, unweighted, connected graph, where each edge is colored either blue or red, determine whether a spanning tree with exactly $k$ blue edges exists.\n-----Input-----\nThere will be a single test case in the input. Each test case will begin with a line with three integers:\n$n \\ m \\ k$\nWhere $n$ ($2 \\le n \\le 1000$) is the number of nodes in the graph, $m$ (limited by the structure of the graph) is the number of edges in the graph, and $k$ ($0 \\le k < n$) is the number of blue edges desired in the spanning tree. Each of the next $m$ lines will contain three elements, describing the edges:\n$c \\ f \\ t$\nWhere $c$ is a character, either capital R or capital B, indicating the color of the edge, and $f$ and $t$ are integers ($1 \\le f, t \\le n, t \\ne f$) indicating the nodes that edge goes from and to. The graph is guaranteed to be connected, and there is guaranteed to be at most one edge between any pair of nodes.\n-----Output-----\nOutput a single line, containing $1$ if it is possible to build a spanning tree with exactly $k$ blue edges, and $0$ if it is not possible.\n-----Examples-----\nSample Input:\n3 3 2\nB 1 2\nB 2 3\nR 3 1\nSample Output:\n1\n\ndef",
        "answer": "def blue_edges(n, m, k):\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    #",
        "difficulty": "competition"
    },
    {
        "task_id": 3530,
        "prompt": "Complete the Python function given the prompt below:Jimmy and his friends like to visit large theme parks. In the current theme park there are many roller coasters which then are categorized by Jimmy. He assigns a fun value to each coaster; however, the fun decreases with each run.\nMore formally: for a specific roller coaster $i$, Jimmy assigns two fun coefficients $a_ i$ and $b_ i$. While riding this roller coaster for the $k$-th time, Jimmy gains a fun value of $f(i,k) = a_ i - (k-1)^2 \\cdot b_ i$. If $f(i,k)$ is non-positive, riding the roller coaster is no longer fun.\nJimmy tries to maximize the total fun until he leaves the park. Can you tell Jimmy how much fun he can gain for a given time?\n-----Input-----\nThe input consists of a single test case.\nThe first line contains the integer $N$, where $N$ is the amount of different roller coasters in the theme park ($0< N\\le 100$).\nThe following $N$ lines contain the integers $a_ i$, $b_ i$ and $t_ i$ where $a_ i$ and $b_ i$ are the fun coefficients as specified above and $t_ i$ is the time for a single ride with the $i$-th roller coaster ($0\\le a_ i \\le 1000$; $0\\le b_ i \\le 1000$; $0 < t_ i \\le 25000$).\nThe next line contains a positive integer $Q$ denoting the number of times that Jimmy is visiting the park ($0\\le Q \\le 1000$). Each of the following $Q$ lines contains an integral time $T_ i$ that Jimmy spends during his $i$-th visit ($0\\le T_ i \\le 25000$).\n-----Output-----\nFor each of the $Q$ possible times, print one line containing the maximal total fun value if Jimmy spends $T_ i$ minutes in the theme park.\n-----Examples-----\nSample Input:\n2\n5 0 5\n7 0 7\n4\n88\n5\n6\n7\nSample Output:\n88\n5\n5\n7\n\ndef",
        "answer": "def fun(a,b,t):\n    return a-((t-1)**2)*b",
        "difficulty": "competition"
    },
    {
        "task_id": 3531,
        "prompt": "Complete the Python function given the prompt below:Your state has just purchased a large, unspoiled tract of land, and wishes to turn it into a nature park with hiking trails. The land has $n$ places of interest to which guests may wish to hike, and of these, $k$ are very special. The state wishes to connect these places with hiking trails. There are $m$ candidate hiking trails to choose from that directly connect two places of interest with various costs. There are some constraints for choosing the trails. First, there must be exactly one way to hike from any place to any other place. Second, exactly $w$ of the trails must directly connect a special place with a regular place. Of course, the state wishes to minimize the cost of blazing these trails.\n-----Input-----\nEach input will consist of a single test case. Note that your program may be run multiple times on different inputs. The first line of input will contain four integers $n$, $m$, $k$ and $w$, where $n$ ($2 \\le n \\le 2 \\cdot 10^5$) is the number of places, $m$ ($1 \\le m \\le 5 \\cdot 10^5$) is the number of potential direct trails between places, $k$ ($1 \\le k < n$) is the number of special places, and $w$ ($1 \\le w \\le n-1$) is the number of special-nonspecial direct trails the state wishes to blaze. The places are numbered $1$ to $n$.\nEach of the next $k$ lines holds a single integer $s$ ($1 \\le s \\le n$) indicating the special places. These values will be unique and will be in ascending order.\nEach of the next $m$ lines will describe a potential trail that the state could blaze. Each of these lines will consist of three integers, $a$, $b$ and $c$, where the trail would go between places $a$ and $b$ ($1 \\le a,b \\le n, a \\ne b$) and would cost $c$ ($1 \\le c \\le 10^5$). No two places will have more than one potential trail between them, and a trail from $a$ to $b$ is the same as a trail from $b$ to $a$.\n-----Output-----\nOutput a single integer, which is the minimum total cost for the state to blaze trails in their new park subject to their constraints, or $-1$ if it isn\u2019t possible.\n-----Examples-----\nSample Input:\n3 3 1 2\n2\n1 2 2\n1 3 1\n2 3 3\nSample Output:\n5\n\ndef",
        "answer": "def find_path(graph, start, end, path=[]):\n    path = path + [start]\n    if start == end:\n        return path\n    if not graph.has_key(start):\n        return None\n    for node in graph[start]:\n        if node not in path:\n            newpath = find_path(graph, node, end, path)\n            if newpath: return newpath\n    return None",
        "difficulty": "competition"
    },
    {
        "task_id": 3532,
        "prompt": "Complete the Python function given the prompt below:Mirko likes to play with strings of characters, but this time he has taken it too far \u2013 he put an \u201cexplosion\u201d in the string! An explosion is a series of characters which, if found in the vicinity of fire, explodes and starts a chain reaction.\nMirko, being as negligent as he usually is, forgot that his string contained an explosion and placed it near a candlelight. Thus the chain reaction began.\nThe chain reaction takes place in the following way:\n - if a string contains explosions, they all explode and a new string is formed by concatenating the pieces without the exploding parts\n - this concatenation could possibly create new explosions\n - the chain reaction repeats while there are explosions in the string\nNow Mirko wants to know whether anything will be left after this series of chain reactions. If nothing remains, output \u201cFRULA\u201d (without quotes). If, by any chance, something is left, output the final string remaining after all the reactions.\nPlease note: The explosion will not contain two equal characters.\n-----Input-----\nThe first line of input contains Mirko\u2019s string, ($1 \\leq |\\text {Mirko\u2019s string}| \\leq 1\\ 000\\ 000$).\nThe second line of input contains the explosion string, ($1 \\leq |\\text {explosion}| \\leq 36$).\nBoth Mirko\u2019s string and the explosion string consist of uppercase and lowercase letters of the English alphabet and digits 0, 1, \u2026, 9. The characters in the explosion string are all different.\n-----Output-----\nThe first and only line of output must contain the final string remaining after all the reactions as stated in the task.\nClarification of the second example: Firstly, the bombs on positions $1$ and $6$ explode. Then we are left with ****1****2ab (where * marks the character that exploded) and when that string is put together, we get 12ab. Sadly, that is an explosion all over again so it disappears.\n-----Examples-----\nSample Input:\nmirkovC4nizCC44\nC4\nSample Output:\nmirkovniz\n\ndef",
        "answer": "def string_reaction(string, explosion):\n    while True:\n        if explosion in string:\n            string = string.replace(explosion, \"\")\n        else:\n            break\n    return string",
        "difficulty": "competition"
    },
    {
        "task_id": 3533,
        "prompt": "Complete the Python function given the prompt below:In a single day, $N$ of Luka\u2019s trucks travel a specific highway. The highway has a number of exits and entrances. An exit with a particular number is in the same location as the entrance with that number.\nUpon entering the highway, a truck driver receives a ticket which indicates the entrance he used. When exiting, the driver pays a toll equal to the absolute difference of the entrance and exit numbers. For example, if a ticket says he used entrance $30$, then exiting at exit $12$ will cost him $18$.\nLuka has figured out a way to save toll money that his company daily spends. Any two drivers can meet on the highway and exchange tickets, even if their routes don\u2019t overlap. Tickets can be exchanged an arbitrary number of times.\nHowever, a driver cannot use an exit if his ticket says he used the same entrance, since that would be suspicious.\nWrite a program that calculates the least total amount of tolls that the drivers can achieve by exchanging tickets.\n-----Input-----\nThe first line contains the integer $N$ $(1 \\leq N \\leq 100000)$, the number of trucks. Each of the following $N$ lines contains two distinct integers between $1$ and $1000000000$. These are in order the entrance and exit numbers of one truck.\nNo two trucks will use the same highway entrance or the same exit.\n-----Output-----\nOutput the least total amount of tolls Luka\u2019s company must pay.\n-----Examples-----\nSample Input:\n3\n3 65\n45 10\n60 25\nSample Output:\n32\n\ndef",
        "answer": "def toll(entrances, exits):\n    toll = 0\n    for i in range(len(entrances)):\n        for j in range(len(exits)):\n            if entrances[i] == exits[j]:\n                toll += abs(entrances[i] - exits[j])\n    return toll",
        "difficulty": "competition"
    },
    {
        "task_id": 3534,
        "prompt": "Complete the Python function given the prompt below:Young Mirka is an amateur musician. She plays the multi-piano. $A$ multi-piano consists of an infinite number of multi-keys, denoted with integers that can be interpreted as the pitch. $A$ multi-composition (a composition written for a multi-piano) can be represented with a finite array of integers, where integers denote the order of multi-keys to press in order to play the multi-composition.\nYoung Mirka has heard a multi-composition on the multi-radio and now she wants to play it. Unfortunately, she cannot hear exactly which key was pressed, but instead she can hear whether the pressed multi-key was higher, lower or equal to the previously played key (a higher key is denoted with a larger number). Therefore she has decided to play the composition in the following way:\n - before playing, she will choose one non-negative integer $K$\n - in the beginning, she will play the correct multi-key (her multi-teacher told her which multi-key that is)\n - when she hears that the multi-key played in the multi-composition is higher than the previous multi-key played in the multi-composition, she will play the multi-key denoted with the integer larger than the multi-key she played previously by $K$\n - analogously, when she hears that the multi-key played in the multi-composition is lower than the previous multi-key played in the multi-composition, she will play the multi-key denoted with the integer smaller than the multi-key she played previously by $K$\n - when she hears that the multi-key played in the multi-composition is equal to the previous multi-key played in the multi-composition, she will repeat the multi-key she played previously\nNotice that, when Mirka is playing, she does not compare the pitch of the keys she played to the pitch of the keys from the composition.\nHelp Mirka choose the integer $K$ in order to hit as many correct pitches as possible.\n-----Input-----\nThe first line of input contains the integer $N$ ($2 \\leq N \\leq 10^6$), the number of multi-keys in the multi- composition on the multi-radio.\nThe second line of input contains $N$ integers $a_ i$ ($-10^9 \\leq a_ i \\leq 10^9$), the multi-keys played in the multi-composition.\n-----Output-----\nThe first line of output must contain the maximum number of multi-keys that Mirka can play correctly. The second line of output must contain the non-negative number $K$ that Mirka must choose in order to hit as many correct pitches as possible. The number must be smaller than or equal to $2 \\cdot 10^9$. The required number does not have to be unique, but will surely exist within the given constraints.\n-----Examples-----\nSample Input:\n5\n1 2 0 3 1\nSample Output:\n3\n2\n\ndef",
        "answer": "def max_pitches(n, a):\n    a.sort()\n    count = 0\n    for i in range(n):\n        if a[i] > a[i-1]:\n            count += 1\n    return count",
        "difficulty": "competition"
    },
    {
        "task_id": 3535,
        "prompt": "Complete the Python function given the prompt below:Matthew the physicist studies the quantum electro-dynamics of a silicon-based rectangular microchip. The microchip consists of a very large $N \\times M$ grid of electrons. Each electron has either positive (up) or negative (down) spin, denoted by $+$ and $-$ respectively.\nMatthew does not know the spin of all the electrons, but he has done $K$ measurements. In the $i$-th measurement, he discovered that the electron at position $(y_ i, x_ i)$ has a given spin $s_ i$. He also knows that in each $2\\times 2$ subgrid, there are equally many electrons with positive and negative spin. He wants to know whether he can recover the state of every electron based on his measurements. If not, he would like to know how many possible states are consistent with his measurements. For classified reasons, he wants the answer modulo $10^9 + 7$.\n-----Input-----\nThe first line contain three numbers $N$, $M$ and $K$: the height of the grid, the width of the grid and the number of measurements. The next $K$ lines contain a spin $s_ i$ where $s_ i$ is either $+$ or $-$, and two numbers $1 \\leq y_ i \\leq N$ and $1 \\leq x_ i \\leq M$ \u2013 the coordinates of the electron. Matthew never did two measurments at the exact same location.\nWe always have $1 \\leq N, M \\leq 10^9$ and $0 \\leq K \\leq 100000$.\n-----Output-----\nOutput the total number of valid states consistent with Matthew\u2019 measurements modulo $10^9 + 7$.\n-----Examples-----\nSample Input:\n2 4 4\n+ 1 1\n- 1 2\n+ 1 3\n- 1 4\nSample Output:\n2\n\ndef",
        "answer": "def get_spin(y, x):\n    if y % 2 == 0:\n        if x % 2 == 0:\n            return '+'\n        else:\n            return '-'\n    else:\n        if x % 2 == 0:\n            return '-'\n        else:\n            return '+'",
        "difficulty": "competition"
    },
    {
        "task_id": 3536,
        "prompt": "Complete the Python function given the prompt below:Consider a rooted tree with $n$ nodes, numbered $1..n$. Each node will have a fixed integer $b$, and for each, a uniform random real number is chosen in the interval $[0..b]$.\nWhat is the probability that the random numbers chosen cause the tree to form a Heap (i.e., the random value in each node is less than the random values in its children)?\nThis probability can always be expressed as a rational number $\\frac{P}{Q}$, with $Q{\\not\\equiv }0 \\pmod{10^9{+}7}$. You are to output the probability as $P{\\cdot }Q^{-1} \\bmod {10^9{+}7}$, where $Q^{-1}$ is an integer, which is the multiplicative inverse of $Q$ modulo $10^9{+}7$ ($Q\\! \\cdot \\! Q^{-1}\\! \\equiv \\! 1 \\pmod{10^9{+}7}$). (Note: $P{\\cdot }Q^{-1}\\bmod {10^9{+}7}$ does not depend on whether $P$ and $Q$ are relatively prime, only on their ratio $\\frac{P}{Q}$.)\n-----Input-----\nEach test case will begin with a line with a single integer $n$ ($1\\! \\le \\! n\\! \\le \\! 300$), which is the number of nodes in the tree.\nEach of the next $n$ lines will contain a pair of space-separated integers $b$ ($1\\! \\le \\! b\\! \\le \\! 10^9$) and $p$ ($0\\! \\le \\! p\\! \\le \\! n$) describing a node of the tree, where $b$ is the fixed integer value in the node and $p$ is the node number of its parent. The nodes are listed in order; node $1$ is first, then node $2$, and so on. A single node will have a parent $p{=}0$. This is the root of the tree.\n-----Output-----\nOutput a single integer, which is the probability expressed as $(P{\\cdot }Q^{-1}) \\bmod ({10^9{+}7})$.\n-----Examples-----\nSample Input:\n2\n1000000000 0\n1000000000 1\nSample Output:\n500000004\n\ndef",
        "answer": "def solve(n, b, p):\n    if n == 1:\n        return 1\n    else:\n        return (solve(n-1, b, p) + b * solve(n-1, b, p-1)) % 1000000007",
        "difficulty": "competition"
    },
    {
        "task_id": 3537,
        "prompt": "Complete the Python function given the prompt below:David is looking to book some travel over the world. There are $n$ countries that he can visit, and $m$ flights that are available. The $i$th flight goes from country $a_ i$ to country $b_ i$. It departs at time $s_ i$, and lands at time $e_ i$. \nDavid is currently at the airport in country $1$, and the current time is $0$, and he would like to travel country $n$. He does not care about the total amount of time needed to travel, but he really hates waiting in the airport. If he waits $t$ seconds in an airport, he gains $t^2$ units of frustration. Help him find an itinerary that minimizes the sum of frustration.\n-----Input-----\nThe first line of input contains two space-separated integers $n$ and $m$ ($1 \\le n,m \\le 200000$).\nEach of the next $m$ lines contains four space-separated integers $a_ i$, $b_ i$, $s_ i$, and $e_ i$ ($1 \\le a_ i, b_ i \\le n$; $0 \\le s_ i \\le e_ i \\le 10^6$).\nA flight might have the same departure and arrival country.\nNo two flights will have the same arrival time, or have the same departure time. In addition, no flight will have the same arrival time as the departure time of another flight. Finally, it is guaranteed that there will always be a way for David to arrive at his destination.\n-----Output-----\nPrint, on a single line, the minimum sum of frustration.\n-----Examples-----\nIn the first sample, it is optimal to take this sequence of flights:\n - Flight $5$. Goes from airport $1$ to airport $2$, departing at time $3$, arriving at time $8$.\n - Flight $3$. Goes from airport $2$ to airport $1$, departing at time $9$, arriving at time $12$.\n - Flight $7$. Goes from airport $1$ to airport $3$, departing at time $13$, arriving at time $27$.\n - Flight $8$. Goes from airport $3$ to airport $5$, deparing at time $28$, arriving at time $100$.\nThe frustration for each flight is $3^2, 1^2, 1^2,$ and $1^2$, respectively. Thus, the total frustration is $12$.\nNote that there is an itinerary that gets David to his destination faster. However, that itinerary has a higher total frustration.\n-----Examples-----\nSample Input:\n5 8\n1 2 1 10\n2 4 11 16\n2 1 9 12\n3 5 28 100\n1 2 3 8\n4 3 20 21\n1 3 13 27\n3 5 23 24\nSample Output:\n12\n\ndef",
        "answer": "def min_frust(n, m):\n    frust = 0\n    for i in range(m):\n        frust += (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) * (n - 9) * (n - 10) * (n - 11) * (n - 12) * (n - 13) * (n - 14) * (n - 15) * (n - 16) * (n - 17) * (n - 18) * (n - 19) * (n - 20) * (n - 21) * (n - 22) * (n - 23) * (n - 24) * (n - 25) * (n - 26) * (n - 27) * (n - 28) * (n - 29) * (n - 30) * (n - 31) * (n - 32) * (n - 33) * (n - 34) * (n - 35) * (n - 36) * (n - 37) * (n - 38) * (n - 39) * (n - 40) * (n - 41) * (n - 42) * (n - 43) * (n - 44) * (n - 45) * (n - 46) * (n - 47) * (n - 48) * (n - 49) * (n - 50) * (n - 51) * (n - 52) * (n - 53) * (n - 54) * (n - 55) * (n - 56) * (n - 57) * (n - 58) * (n - 59) * (n - 60) * (n - 61) * (n - 62) * (n - 63) * (n - 64) * (n - 65) * (n - 66) * (n - 67) * (n - 68) * (n - 69) * (n - 70) * (n - 71) * (n - 72) * (n - 73) * (n - 74) * (n - 75) * (n - 76) * (n - 77) * (n - 78) * (n -",
        "difficulty": "competition"
    },
    {
        "task_id": 3538,
        "prompt": "Complete the Python function given the prompt below:A set of frogs have accidentally fallen to the bottom of a large pit. Their only means of escaping the pit is to jump out of it. Each frog $i$ is described by three parameters $(l_ i,w_ i,h_ i)$ where $l_ i$ is its leap capacity, $w_ i$ its weight, and $h_ i$ its height. The leap capacity specifies how high that frog can jump. If a frog\u2019s leap capacity is strictly larger than the depth of the pit, the frog can directly escape the pit. However, these frogs are altruistic. Rather than selfishly saving themselves and leaving the frogs with too limited leap capacity behind, they collectively aim to save as many of them from the pit as possible. \nThe frogs realize that if a frog $A$ climbs up on the back of frog $B$ before it jumps, the first frog $A$ stands a better chance of escaping the pit: it can escape if $h_ B+l_ A$ is strictly larger than the depth of the pit.\nFurthermore, if frog $B$ carrying frog $A$ on its back climbs up on the back of frog $C$, the situation is even better for frog $A$: it can now escape the pit if $h_ C+h_ B+l_ A$ is strictly larger than the depth of the pit.\nThe frogs can build even higher piles of frogs this way, the only restriction is that no frog may carry other frogs of weight in total amounting to its own weight or heavier. Once a pile has been used to allow a frog to escape, the frogs in the pile jump back to the bottom of the pit and they can then form a new pile (possibly consisting of a different set of frogs). The question is simply how many frogs can escape the pit assuming they collaborate to maximize this number?\n-----Input-----\nThe first line of input contains two integers $n$ and $d$ ($1 \\le n \\leq 100000$, $1 \\le d \\le 10^8$), where $n$ is the number of frogs and $d$ is the depth of the pit in \u00b5m. Then follow $n$ lines each containing three integers $l, w, h$ ($1 \\le l, w, h \\le 10^8$), representing a frog with leap capacity $l$ \u00b5m, weight $w$ \u00b5g, and height $h$ \u00b5m. The sum of all frogs\u2019 weights is at most $10^8$ \u00b5g.\n-----Output-----\nOutput the maximum number of frogs that can escape the pit.\n-----Examples-----\nSample Input:\n3 19\n15 5 3\n12 4 4\n20 10 5\nSample Output:\n3\n\ndef",
        "answer": "def frog_escape(l, w, h):\n    return int(l*w*h/d)",
        "difficulty": "competition"
    },
    {
        "task_id": 3539,
        "prompt": "Complete the Python function given the prompt below:A Bipartite Graph is an undirected graph whose vertices can be partitioned into $2$ sets such that, for each edge $(u, v)$, $u$ and $v$ belong to different sets.\nSocket has challenged Bash to a Bipartite Battle. In the Bipartite Battle, Bash and Socket play a game with Bipartite Graphs.\nThe Bipartite Battle happens as follows:\n - Socket draws $N$ bipartite graphs. The $i$-th graph has $2$ sets of vertices, one with $a_ i$ vertices, and the other with $b_ i$ vertices.\n - Then the $2$ players, Bash and Socket alternatively take turns. In each turn, a player must choose exactly one non-empty graph, then delete exactly one edge or exactly one vertex of the chosen graph. If the player deletes one vertex, all edges adjacent to it are also deleted.\n - The player who cannot move loses. Note that this can only happen when all edges and all vertices of all graphs have been deleted.\n - Bash plays first.\nOf course, Socket does not want to play fair. Socket plans to draw bipartite graphs such that he always wins.\nHow many ways can Socket draw $N$ bipartite graphs, so that he always wins, assuming both players play optimally?\n-----Notes-----\nFor the $i$-th bipartite graph, let\u2019s number the vertices in first set from $1$ to $a_ i$, and the vertices in second set from $1$ to $b_ i$.\nAn edge connecting vertex $u$ in first set and vertex $v$ in second set is denoted as $(u, v)$.\nTwo drawings of bipartite graphs are considered different iff there exists an index $j$ and a pair of integers $(u, v)$, such that:\n - $(u, v)$ is an edge of $j$-th graph in one drawing.\n - $(u, v)$ is NOT an edge of $j$-th graph in the other drawing.\n-----Input-----\nThe first line of input contains the integer $N$ $(1 \\le N \\le 10^5)$.\n$N$ lines follow, each line contains exactly $2$ space-separated integers $a_ i$ and $b_ i$$(1 \\le a_ i, b_ i \\le 10^9)$.\n-----Output-----\nPrint exactly one integer \u2014 the number of ways Socket can draw $N$ bipartite graphs, modulo $10^9 + 7$.\n-----Examples-----\nSample Input:\n1\n1 1\nSample Output:\n1\n\ndef",
        "answer": "def bipartite(a, b):\n    return a * b",
        "difficulty": "competition"
    },
    {
        "task_id": 3540,
        "prompt": "Complete the Python function given the prompt below:You are given a puzzle that can be represented as a $4 \\times 4$ grid of colored cells. The solved puzzle contains 4 monochromatic rows, in this order: red, green, blue, yellow. Although we will analyze this puzzle using its 2D representation, it is actually a 3D puzzle! Imagine that the grid is stretched over a torus (in other words, top edge is connected to the bottom one and left edge is connected to the right one). If you are not familiar with the word \u201ctorus\u201d or what it is supposed to represent, just replace it with the word(s) \u201cdonut (with the hole in the middle)\u201d.For each move you are allowed to either move one row left or right, or one column up or down. The fact that the outer edges are connected means that if a cell is \u201cpushed out\u201d of the grid, it will reappear on the other side of the grid. If you had a torus or a donut handy (or a cup! HAHAha...ha... <sniff>), this would be much clearer. \nGiven a description of a state of this puzzle, what is the minimum number of moves you need to solve it? Note that all possible puzzle configurations are solvable in less than 13 moves.\n-----Input-----\nInput file contains exactly $4$ lines, containing $4$ characters each, each character being either \u201cR\u201d, \u201cG\u201d, \u201cB\u201d or \u201cY\u2019. The input will describe a valid state of the puzzle.\n-----Output-----\nOutput the minimum number of moves needed to solve the given puzzle.\n-----Examples-----\nSample Input:\nRGGR\nGBGB\nBYBY\nYRYR\nSample Output:\n3\n\ndef",
        "answer": "def torus(grid):\n    # Your code here\n    # return the minimum number of moves needed to solve the puzzle\n    # return the minimum number of moves needed to solve the puzzle\n    # return the minimum number of moves needed to solve the puzzle\n    # return the minimum number of moves needed to solve the puzzle\n    # return the minimum number of moves needed to solve the puzzle\n    # return the minimum number of moves needed to solve the puzzle\n    # return the minimum number of moves needed to solve the puzzle\n    # return the minimum number of moves needed to solve the puzzle\n    # return the minimum number of moves needed to solve the puzzle\n    # return the minimum number of moves needed to solve the puzzle\n    # return the minimum number of moves needed to solve the puzzle\n    # return the minimum number of moves needed to solve the puzzle\n    # return the minimum number of moves needed to solve the puzzle\n    # return the minimum number of moves needed to solve the puzzle\n    # return the minimum number of moves needed to solve the puzzle\n    # return the minimum number of moves needed to solve the puzzle\n    # return the minimum number of moves needed to solve the puzzle\n    # return the minimum number of moves needed to solve the puzzle\n    # return the minimum number of moves needed to solve the puzzle\n    # return the minimum number of moves needed to solve the puzzle\n    # return the minimum number of moves needed to solve the puzzle\n    # return the minimum number of moves needed to solve the puzzle\n    # return the minimum number of moves needed to solve the puzzle\n    # return the minimum number of moves needed to solve the puzzle\n    # return the minimum number of moves needed to solve the puzzle\n    # return the minimum number of moves needed to solve the puzzle\n    # return the minimum number of moves needed to solve the puzzle\n    # return the minimum number of moves needed to solve the puzzle\n    # return the minimum number of moves needed to solve the puzzle\n    # return the minimum number of moves needed to solve the puzzle\n    # return the minimum number of moves needed to solve the puzzle\n    # return the minimum number of moves needed to solve the puzzle\n    # return the minimum number of moves needed to solve the puzzle\n    # return the minimum number of moves needed to solve the puzzle\n    # return the minimum number of moves needed to solve the",
        "difficulty": "competition"
    },
    {
        "task_id": 3541,
        "prompt": "Complete the Python function given the prompt below:Alf and Beata were two kids who lived long ago, during the time before you could spend Halloween participating in programming competitions. As such, their lives were much more boring than the lives of kids today. How can you survive without programming competitions, you may ask yourself. The answer is easy: you go trick-or-treating!\nEvery year Alf and Beata went out in their neighbourhood to go trick-or-treating. When they trick-or-treat a house, they get some amount of candy of various sorts. Once the kids have filled up their big bag of candy, they go back home.\nSince Alf and Beata are very nice siblings, they want to split all their candy evenly. The siblings have $N$ pieces of candy together. However, they each like every piece a bit differently. Alf hates liquorice, which Beata loves. On the other hand, Alf craves chocolate which Beata finds disgusting. More specifically, Alf assigns the $i$\u2019th piece value $a_ i$ while Beata assigns it value $b_ i$. These values can be negative. They want the absolute difference between the sum of the value of all candy each sibling gets to be as small as possible. Note that each candy must be given to one of the siblings: they can\u2019t throw any candy away.\n-----Input-----\nThe first line of the input contains a single integer $N$ ($1 \\le N \\le 100$), the number of candies the siblings have collected. The next line contains the $N$ integers $a_1, a_2 \\dots, a_ N$ ($-100 \\le a_ i \\le 100$). The third and final line contains the $N$ integers $b_1, b_2 \\dots, b_ N$ ($-100 \\le b_ i \\le 100$).\n-----Output-----\nOutput a string containing $N$ characters. The $i$\u2019th character should be A if the candy should be given to Alf, and B if it should be given to Beata. If there are multiple solutions, output the lexicographically smallest one.\n-----Examples-----\nSample Input:\n5\n-2 -1 0 1 2\n2 1 0 -1 -2\nSample Output:\nAAAAA\n\ndef",
        "answer": "def candies(n, a, b):\n    a.sort()\n    b.sort()\n    if sum(a) > sum(b):\n        return 'B' * n\n    elif sum(a) < sum(b):\n        return 'A' * n\n    else:\n        return 'AB' * n",
        "difficulty": "competition"
    },
    {
        "task_id": 3542,
        "prompt": "Complete the Python function given the prompt below:When constructing electric circuits one has to connect pairs of points using wire, preferable as short as possible. In this problem we have an empty circuit board of size $N \\times M$ where we want to connect the two points $A_1$ and $A_2$ with each other using one wire, and the two points $B_1$ and $B_2$ with each other using another wire. The wires must go along the horizontal and vertical edges of the grid (see figure), and the two wires may not share a common vertex. Determine the minimum length of wire needed to do so. The wire may not go outside the circuit board.\n-----Input-----\nThe first line contains two integers, $N$ ($2 \\le N \\le 100$) and $M$ ($2 \\le M \\le 100$), the grid size of the circuit board.\nThen follows four lines containing the coordinates for the points $A_1$, $A_2$, $B_1$ and $B_2$, respectively. Each coordinate pair will be described using two integers and will correspond to an intersection point in the grid. The first coordinate will be between $0$ and $N$ inclusive and the second coordinate between $0$ and $M$ inclusive. All coordinate pairs will be unique.\n-----Output-----\nA single line containing the minimum length of wire needed to connect the points, or \u201cIMPOSSIBLE\u201d if it\u2019s not possible to do so.\n-----Examples-----\nSample Input:\n6 3\n2 3\n4 0\n0 2\n6 1\nSample Output:\nIMPOSSIBLE\n\ndef",
        "answer": "def wire_length(n, m, a1, a2, b1, b2):\n    if a1[0] == a2[0] and a1[1] == a2[1]:\n        return abs(b1[0] - b2[0]) + abs(b1[1] - b2[1])\n    elif a1[0] == a2[0] and a1[1]!= a2[1]:\n        return abs(b1[0] - b2[0]) + abs(b1[1] - a2[1])\n    elif a1[0]!= a2[0] and a1[1] == a2[1]:\n        return abs(b1[0] - a1[0]) + abs(b1[1] - b2[1])\n    else:\n        return abs(b1[0] - a1[0]) + abs(b1[1] - a2[1])",
        "difficulty": "competition"
    },
    {
        "task_id": 3543,
        "prompt": "Complete the Python function given the prompt below:Typing on phones can be tedious. It is easy to make typing mistakes, which is why most phones come with an autocorrect feature. Autocorrect not only fixes common typos, but also suggests how to finish the word while you type it. Jenny has recently been pondering how she can use this feature to her advantage, so that she can send a particular message with the minimum amount of typing. \nThe autocorrect feature on Jenny\u2019s phone works like this: the phone has an internal dictionary of words sorted by their frequency in the English language. Whenever a word is being typed, autocorrect suggests the most common word (if any) starting with all the letters typed so far. By pressing tab, the word being typed is completed with the autocorrect suggestion. Autocorrect can only be used after the first character of a word has been typed \u2013 it is not possible to press tab before having typed anything. If no dictionary word starts with the letters typed so far, pressing tab has no effect.\nJenny has recently noticed that it is sometimes possible to use autocorrect to her advantage even when it is not suggesting the correct word, by deleting the end of the autocorrected word. For instance, to type the word \u201cautocorrelation\u201d, Jenny starts typing \u201caut\u201d, which then autocorrects to \u201cautocorrect\u201d (because it is such a common word these days!) when pressing tab. By deleting the last two characters (\u201cct\u201d) and then typing the six letters \u201clation\u201d, the whole word can be typed using only $3$ (\u201caut\u201d) ${}+1$ (tab) ${}+2$ (backspace twice) ${}+6$ (\u201clation\u201d) $= 12$ keystrokes, $3$ fewer than typing \u201cautocorrelation\u201d without using autocorrect.\nGiven the dictionary on the phone and the words Jenny wants to type, output the minimum number of keystrokes required to type each word. The only keys Jenny can use are the letter keys, tab and backspace.\n-----Input-----\nThe first line of input contains two positive integers $n$ ($1 \\le n \\le 10^5$), the number of words in the dictionary, and $m$ ($1 \\le m \\le 10^5$), the number of words to type. Then follow $n$ lines with one word per line, sorted in decreasing order of how common the word is (the first word is the most common). No word appears twice in the dictionary. Then follow $m$ lines, containing the words to type.\nThe dictionary and the words to type only use lower case letters \u2018a\u2019-\u2018z\u2019. The total size of the input file is at most $1$ MB.\n-----Output-----\nFor each word to type, output a line containing the minimum number of keystrokes required to type the corresponding word.\n-----Examples-----\nSample Input:\n5 5\naustria\nautocorrect\nprogram\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx\naustria\nSample Output:\n12\n4\n11\n3\n2\n\ndef",
        "answer": "def autocorrect(word, dic):\n    for i in dic:\n        if i.startswith(word):\n            return i\n    return word",
        "difficulty": "competition"
    },
    {
        "task_id": 3544,
        "prompt": "Complete the Python function given the prompt below:People are going to the movies in groups (or alone), but normally only care to socialize within that group. Being Scandinavian, each group of people would like to sit at least one space apart from any other group of people to ensure their privacy, unless of course they sit at the end of a row. The number of seats per row in the cinema starts at $X$ and decreases with one seat per row (down to a number of $1$ seat per row). The number of groups of varying sizes is given as a vector $(N_1, \\ldots, N_ n)$, where $N_1$ is the number of people going alone, $N_2$ is the number of people going as a pair etc. Calculate the seat-width, $X$, of the widest row, which will create a solution that seats all (groups of) visitors using as few rows of seats as possible. The cinema also has a limited capacity, so the widest row may not exceed $12$ seats.\n-----Input-----\nThe first line of input contains a single integer $n$ ($1 \\leq n \\leq 12$), giving the size of the largest group in the test case.\nThen follows a line with $n$ non-negative integers, the $i$-th integer ($1$-indexed) denoting the number of groups of $i$ persons who need to be seated. Each such number is at most $30$, and not all of them are $0$.\n-----Output-----\nA single number; the size of the smallest widest row that will accommodate all the guests. If this number is greater than $12$, output impossible instead.\n-----Examples-----\nSample Input:\n3\n0 1 1\nSample Output:\n3\n\ndef",
        "answer": "def seat_width(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 5\n    elif n == 6:\n        return 6\n    elif n == 7:\n        return 7\n    elif n == 8:\n        return 8\n    elif n == 9:\n        return 9\n    elif n == 10:\n        return 10\n    elif n == 11:\n        return 11\n    elif n == 12:\n        return 12\n    else:\n        return \"impossible\"",
        "difficulty": "competition"
    },
    {
        "task_id": 3545,
        "prompt": "Complete the Python function given the prompt below:Anatoly Cheng McDougal is a typical student in many ways. Whenever possible he tries to cut and paste code instead of writing it from scratch. Unavoidably this approach causes him problems. For example, when he first learned about preorder, inorder and postorder traversals of trees, and was given code for a preorder print of a tree (shown on the left below), he simply cut and pasted the code, then moved the print statement to the correct location and renamed the procedure. However, he forgot to rename the procedure calls inside the code, resulting in the defective inorder print and postorder print code shown below.\nvoid prePrint(TNode t)\n{     \n  output(t.value);\n  if (t.left!= null) prePrint(t.left);\n  if (t.right!= null)  prePrint(t.right);\n}\nvoid inPrint(TNode t)\n{\n  if (t.left!= null) prePrint(t.left);\n  output(t.value);\n  if (t.right!= null) prePrint(t.right);\n}\nvoid postPrint(TNode t)\n{\n  if (t.left!= null) prePrint(t.left);\n  if (t.right!= null) prePrint(t.right);\n  output(t.value);\n}\nAt this point, Anatoly did not behave like a typical student. He actually tested his code! Unfortunately, when the results were not correct, he reverted back to typical student behavior. He panicked and started randomly changing calls in all three procedures, hoping to get things right. Needless to say, the situation became even worse now than when he started.\nAnatoly\u2019s professor tested the code on a random tree of characters. When she looked at the output of his three print routines, she correctly guessed what had happened. However, instead of going directly to his code, she decided to try to reconstruct Anatoly\u2019s code just by observing the output. In order to do this, she correctly made the following assumptions:\n - The output statement in each print routine is in the correct location (for example, between the two recursive calls in the inPrint routine).\n - Among the six recursive calls made by the three routines, exactly two calls are to prePrint, exactly two are to inPrint, and exactly two are to postPrint, though potentially in the wrong routines.\nSoon the professor realized that reconstructing Anatoly\u2019s code and the test tree from his output was not a simple task and that the result might be ambiguous. You will have to help her find all possible reconstructions of Anatoly\u2019s code. In addition, for each such reconstruction, you are to find the alphabetically first tree (as described in the output section) giving the observed output.\n-----Input-----\nThe input consists of a single test case. A test case consists of three strings on three separate lines: the observed output of Anatoly\u2019s prePrint, inPrint and postPrint routines (in that order) on some test tree. Each of these strings consists of $n$ uppercase letters ($4 \\le n \\le 26$), with no repeated letters in any string. The test case is guaranteed to have at least one solution.\n-----Output-----\nDisplay all possible reconstructions for the test case, ordered as described in the last paragraph below. The output for each reconstruction consists of two parts. The first part is a single line and describes the six calls in Anatoly\u2019s routines: first the two (recursive) calls in Anatoly\u2019s prePrint routine, followed by the calls in his inPrint routine, and finally the calls in his postPrint routine. The calls are described by the words Pre, In, and Post, separated by spaces. For example, if Anatoly\u2019s routines were correct, the resulting output of the first part of the reconstruction would be Pre Pre In In Post Post.\nThe second part consists of three lines and describes the first test tree that could have generated the observed outputs. The first line is the correct preorder print of the tree, and the second and third lines contain the correct inorder and postorder prints, respectively. The first tree is the one with the alphabetically first preorder print. If there are multiple such trees, the first of these is the one with the alphabetically first inorder print.\nEvery reconstruction is a sequence of 6 tokens chosen from Pre, In, and Post. The ordering of reconstructions is lexicographic with respect to the following ordering of tokens: Pre < In < Post.\n-----Examples-----\nSample Input:\nHFBIGEDCJA\nBIGEDCJFAH\nBIGEDCJFAH\nSample Output:\nPre Post In Post In Pre\nHFBJCDEGIA\nBIGEDCJFAH\nIGEDCJBAFH\n\ndef",
        "answer": "def prePrint(t):\n    if t is None:\n        return\n    output(t.value)\n    prePrint(t.left)\n    prePrint(t.right)",
        "difficulty": "competition"
    },
    {
        "task_id": 3546,
        "prompt": "Complete the Python function given the prompt below:David is writing an article for the Bulletin of the Association of Proof Completions. In his article, he proves several theorems. For every theorem, David came up with a proof. Since David is a very eager student, he even came up with multiple proofs for some of the theorems. As usual, a proof for a theorem may depend on a number of other theorems.\nThe article has to be as short as possible to publish it, and David only really cares about the main theorem, Theorem $0$. In order to achieve this, he has estimated the number of words he will need for every proof. Can you help David find the shortest possible length of his article?\n-----Input-----\n - A single line containing $1\\leq n\\leq 20$, the number of theorems.\n - For each theorem:\n - A single line containing $1\\leq p_ i\\leq 10$, the number of proofs for the $i$th theorem.\n - $p_ i$ lines, each of the form $l$, $k$, $d_0,\\dots,d_{k-1}$, where $0\\leq l\\leq 10^6$ is the length of the proof, $0\\leq k\\leq n-1$ is the number of theorems the proof depends on, and the $0\\leq d_ i\\leq n-1$ are the numbers of the theorems the proof depends on.\n-----Output-----\nPrint one line with a single integer, the shortest possible length of David\u2019s article.\n-----Examples-----\nSample Input:\n2\n2\n10 0\n3 1 1\n1\n4 1 0\nSample Output:\n10\n\ndef",
        "answer": "def get_shortest_article(n):\n    return n * 10 + 10",
        "difficulty": "competition"
    },
    {
        "task_id": 3547,
        "prompt": "Complete the Python function given the prompt below:A dishonest landowner is selling off plots of land. He\u2019s selling it in large, rectangular plots, but many of the plots overlap, so he\u2019s actually selling the same land multiple times! It\u2019s not real estate, it\u2019s unreal estate!\nGiven a description of the possibly overlapping rectangular plots of land that the dishonest landowner has sold, determine the total actual area of land covered by them.\n-----Input-----\nThere will be a single test case in the input. Each test case will begin with a line with a single integer $n$ ($0 < n \\le 5000$), indicating the number of plots of land sold. The next $n$ lines will each have a description of a rectangular plot of land, consisting of four real numbers with at most two decimals after the decimal point:\n\u00a0\u00a0\u00a0\u00a0 x1 y1 x2 y2\nwhere $(x_1,y_1)$ is the southwest corner, and $(x_2,y_2)$ is the northeast corner ($-1000 \\le x_1 < x_2 \\le 1000$, $-1000 \\le y_1 < y_2 \\le 1000$).\n-----Output-----\nOutput a single real number, which represents the total actual area covered by all of the rectangular plots of land. Output this number with exactly two decimal places, rounded.\n-----Examples-----\nSample Input:\n2\n0 0 100 100\n30 30 60 60\nSample Output:\n10000.00\n\ndef",
        "answer": "def land_area(n):\n    area = 0\n    for i in range(n):\n        x1, y1, x2, y2 = map(float, input().split())\n        area += (x2 - x1) * (y2 - y1)\n    return round(area, 2)",
        "difficulty": "competition"
    },
    {
        "task_id": 3548,
        "prompt": "Complete the Python function given the prompt below:Pia is a famous bartender at the hip Stockholm night club Supernova. One of her most impressive feats is the mixing a series of drinks using each of the $N$ distinct drink ingredients in the bar exactly once. She does this in the following way.\nFirst, Pia chooses a number of drinks to make. Each of the drink ingredients are then lined up in front of her in order $1, 2, \\dots, N$. For the first drink, she uses some positive number $K$ of ingredients starting from the left, i.e. $1, 2,..., K$. For the next drink, she uses some positive number $L$ of ingredients starting from the first unused ingredient, i.e. $K + 1, K + 2, \\dots, K + L$. She continues this process until the final drink, which uses some set of ingredients $N - M, N - M + 1, \\dots, N$.\nHowever, not every pair of ingredients work well in a drink. For example, milk and water would not go very well together. She may not include a bad pair of ingredients in any drink.\nSo far, she has managed to make a different set of drinks every night. For how many nights can she mix a new set of drinks? We call two sets of drinks different if they do not consist of the exact same drinks (though they are allowed to have drinks in common).\n-----Input-----\nThe first line of the input contains two integers $1 \\le N \\le 100000$ and $0 \\le P \\le 100000$, the number of ingredients and bad pairs of ingredients.\nEach of the next $P$ lines contains two integers $1 \\le a \\not= b \\le N$, two ingredients that do not work well together in a drink. The same pair of ingredients may appear multiple times in this list.\n-----Output-----\nOutput a single integer, the number of nights Pia can construct a different set of drinks. Since this number may be large, output the remainder when divided by $10^9 + 7$.\n-----Examples-----\nSample Input:\n5 3\n1 3\n4 5\n2 4\nSample Output:\n5\n\ndef",
        "answer": "def drink_mixer(n, p):\n    drink_set = set()\n    for i in range(n):\n        drink_set.add(i)\n    for i in range(p):\n        a, b = map(int, input().split())\n        drink_set.discard(a)\n        drink_set.discard(b)\n    return len(drink_set)",
        "difficulty": "competition"
    },
    {
        "task_id": 3549,
        "prompt": "Complete the Python function given the prompt below:After your boat ran out of fuel in the middle of the ocean, you have been following the currents for 80 days. Today, you finally got your radar equipment working. And it\u2019s receiving signals!\nAlas, the signals come from the \u201cradar\u201d station owned by the eccentric lighthouse keeper Hasse. Hasse\u2019s radar station (which does not work quite like other radar stations) emits continuous signals of three different wave-lengths. Therefore, the only interesting thing you can measure is the phase of a signal as it reaches you. For example, if the signal you tuned on to has a wave-length of $100$ meters and you are $1456$ meters from the station, your equipment can only tell you that you are either $56$, or $156$, or $256$, or $\\dots $ meters away from the lighthouse.\nSo you reach for your last piece of paper to start calculating \u2013 but wait, there\u2019s a catch! On the display you read: \u201cACCURACY: 3 METERS\u201d. So, in fact, the information you get from this signal is that your distance from Hasse\u2019s radar station is in the union of intervals $[53,59] \\cup [153, 159] \\cup [253, 259] \\cup \\dots $.\nWhat to do? Since the key to surviving at sea is to be optimistic, you are interested in what the smallest possible distance to the lighthouse could be, given the wavelengths, measurements and accuracies corresponding to the three signals.\n-----Task-----\nGiven three positive prime numbers $m_1$, $m_2$, $m_3$ (the wavelengths), three nonnegative integers $x_1$, $x_2$, $x_3$ (the measurements), and three nonnegative integers $y_1$, $y_2$, $y_3$ (the accuracies), find the smallest nonnegative integer $z$ (the smallest possible distance) such that $z$ is within distance $y_ i$ from $x_ i$ modulo $m_ i$ for each $i = 1,2,3$. An integer $x\u2019$ is within distance$y$ from $x$ modulo $m$ if there is some integer $t$ such that $x \\equiv x\u2019 + t \\pmod{m}$ and $|t| \\leq y$.\n-----Input-----\nThere are three lines of input. The first line is $m_1$ $m_2$ $m_3$, the second is $x_1$ $x_2$ $x_3$ and the third is $y_1$ $y_2$ $y_3$. You may assume that $0 < m_ i \\leq 10^6$, $0 \\leq x_ i < m_ i$, and $0 \\leq y_ i \\leq 300$ for each $i$. The numbers $m_1$, $m_2$, $m_3$ are all primes and distinct.\n-----Output-----\nPrint one line with the answer $z$. Note that the answer might not fit in a 32-bit integer.\n-----Examples-----\nSample Input:\n11 13 17\n5 2 4\n0 0 0\nSample Output:\n2095\n\ndef",
        "answer": "def f(m1, m2, m3, x1, x2, x3, y1, y2, y3):\n    # your code here\n    return z",
        "difficulty": "competition"
    },
    {
        "task_id": 3550,
        "prompt": "Complete the Python function given the prompt below:In the 21st century, Hunters are expected to master programming languages, in order to effectively gather information on the Internet.\nGon is currently learning NenScript\u00a0\u2014 the most popular programming language amongst Hunters.\nToday, Gon is learning variables. In NenScript, a variable always stores a string of zero or more characters, each character is any of the following: lowercase and uppercase English letters, digits, space and special characters: [email\u00a0protected]#$%^&*()-_=+. In this problem, we call these characters good characters. The name of every variable only consists of lowercase English letters, and underscore (_). The length of a variable name is between $1$ and $10$, inclusive.\nIn order to use a variable, first we need to declare it. The syntax of the declaration is as below:\nvar <name> = <value>;\nHere <name> is the name of the variable you want to declare, and <value> is an expression which denotes the string assigned to this variable. There are $3$ types of expression in NenScript:\n - Variable name, which means that the value equals to some previously declared variable.\n - String literal, which explicitly states the value by putting its sequence of characters in quotes.\n - Template literal, which allows you to create a string based on values of other variables by embedding expressions.\nIn a template literal, embedded expressions are calculated, then concatented with other parts to create a string. Template literals are enclosed by back-tick (`) and contain several (possibly zero) string expressions. String expressions are put inside curly braces following a dollar sign (${expression}). In other words, a template literal is an expression of the form `$S_1\\$ \\{ E_1\\} S_2\\$ \\{ E_2\\} \\ldots S_ n\\$ \\{ E_ n\\} S_{n+1}$`, where $n \\ge 0$. For every valid $i$, $S_ i$ is a string consisting of zero or more good characters, and $E_ i$ is an expression.\nLet\u2019s take an example:\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nHere, the values of a, b and c are \u201cGon\u201d, \u201cGon\u201d and \u201cMy name is Gon\u201d, respectively. Note that quotes are for clarity only, no vairable\u2019s value contains any quotes.\nTemplate literals can be nested, in other words, there can be a template literal inside a template literal. For example:\nvar a = \"Gon\";\nvar b = `My name ${`is ${a}`}`;\nIn this example, \u201c \u2018is ${a}\u2018 \u201d, whose value is \u201cis Gon\u201d, acts as an embedded expression of the template literal assigned to variable b. The value of b is \u201cMy name is Gon\u201d.\nYour task is to read a sequence of commands in NenScript, each of them is either a variable declaration, as explained above; or a print request, which is in the following form, where <expr> is an expression:\nprint <expr>;\nFor each print request, print the value of the given expression.\n-----Input-----\nThe input consists of several lines, each is either a variable declaration or a print request, as explained above. It is guaranteed all variables are neither declared twice, nor used before being declared. The input is terminated by a line with exactly one word \u201cend.\u201d. The total length of all lines does not exceed $10^4$.\n-----Output-----\nFor each print request, print on a separate line the value of the corresponding expression. It is guaranteed that you have to print at least $1$ and at most $10^4$ characters. Please be aware that we use the case sensitive and space change sensitive checker.\n-----Examples-----\nSample Input:\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.\nSample Output:\nMy name is Gon\nMy name is Gon\n\ndef",
        "answer": "def print_var(s):\n    if s[0] == 'var':\n        s = s.split('=')\n        s[0] = s[0].replace('var', '')\n        s[0] = s[0].replace(' ', '')\n        s[0] = s[0].replace('\\n', '')\n        s[0] = s[0].replace('\\t', '')\n        s[0] = s[0].replace('\\r', '')\n        s[0] = s[0].replace('\\x0b', '')\n        s[0] = s[0].replace('\\x0c', '')\n        s[0] = s[0].replace('\\x1c', '')\n        s[0] = s[0].replace('\\x1d', '')\n        s[0] = s[0].replace('\\x1e', '')\n        s[0] = s[0].replace('\\x1f', '')\n        s[0] = s[0].replace('\\x7f', '')\n        s[0] = s[0].replace('\\x80', '')\n        s[0] = s[0].replace('\\x81', '')\n        s[0] = s[0].replace('\\x82', '')\n        s[0] = s[0].replace('\\x83', '')\n        s[0] = s[0].replace('\\x84', '')\n        s[0] = s[0].replace('\\x85', '')\n        s[0] = s[0].replace('\\x86', '')\n        s[0] = s[0].replace('\\x87', '')\n        s[0] = s[0].replace('\\x88', '')\n        s[0] = s[0].replace('\\x89', '')\n        s[0] = s[0].replace('\\x8a', '')\n        s[0] = s[0].replace('\\x8b', '')\n        s[0] = s[0].replace('\\x8",
        "difficulty": "competition"
    },
    {
        "task_id": 3551,
        "prompt": "Complete the Python function given the prompt below:Dino loves ice cream. In case he ever run out of ice cream at his office, he keeps a stash of dry ice in order to quickly make new ice cream.\nHis recipe for making ice cream includes exactly $T$ liters of dry ice. Unfortunately, he has no marked containers in his office. Instead, he keeps a set of bottles of known total volume.\nHe wants to use this in order to transfer $T$ liters of dry ice from his dry ice container to the container in which he is mixing his ice cream. To do this, he should perform a sequence of three different kinds of actions. He may either fill a bottle with dry ice from the dry ice container until the bottle is full, empty the contents of a bottle into the ice container, or transfer dry ice from one bottle into other until either the first bottle becomes empty or the target bottle becomes full.\nCan you help Dino construct a plan in order to transfer $T$ liters of dry ice into the ice cream mix?\n-----Input-----\nThe first line of the input contains an integer $1 \\le N \\le 100$, the number of bottles.\nThe next line contains $N$ integers, separated by spaces. These are the volumes of all the bottles, in liters. Each volume is between $1$ and $100$ liters.\nThe final line contains the integer $1 \\le T \\le 100$, the volume in liters of dry ice needed for the ice cream.\n-----Output-----\nIf it is not possible to add the correct amount of dry ice, output impossible. Otherwise, output a sequence of moves that moves $T$ liters into the ice cream mix.\nYou may output the following moves:\n - fill x: Fill bottle $x$ from the ice cream container until it is full.\n - discard x: Empty bottle $x$ into the sink.\n - transfer x y: Pour from bottle $x$ into bottle $y$ until either $y$ is full or $x$ is empty.\nWhen pouring dry ice into the ice cream mix, use $y = 0$ as the target bottle.\nYou may output at most $100000$ moves.\n-----Examples-----\nSample Input:\n2\n7 8\n10\nSample Output:\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\n\ndef",
        "answer": "def ice_cream_moves(n, t):\n    # Fill all the bottles\n    for i in range(n):\n        if t >= n:\n            return \"impossible\"\n        t -= n\n    # Empty all the bottles\n    for i in range(n):\n        if t >= n:\n            return \"impossible\"\n        t -= n\n    # Transfer all the bottles\n    for i in range(n):\n        if t >= n:\n            return \"impossible\"\n        t -= n\n    return \"impossible\"",
        "difficulty": "competition"
    },
    {
        "task_id": 3552,
        "prompt": "Complete the Python function given the prompt below:The enemy and their massive army is approaching your fortress, and all you have to defend it is a legion of guardian gnomes. There is no hope of winning the battle, so your focus will instead be on causing as much damage as possible to the enemy. \nYou have $n$ gnomes at your disposal. Before the battle, they must be divided into at most $m$ non-empty groups. The battle will then proceed in turns. Each turn, your gnomes will attack the enemy, causing one unit of damage for each living gnome. Then the enemy will attack by throwing a lightning bolt at one of the $m$ groups. The lightning bolt kills $k$ of the gnomes in that group, or all of them if the number of living gnomes in the group is less than $k$. The battle ends when all gnomes are dead. The enemy will always throw the lightning bolts in an optimal way such that the total damage caused by the gnomes is minimized.\nNow you wonder, what is the maximum amount of damage you can cause to the enemy if you divide the gnomes into groups in an optimal way?\nFor example, if as in Sample Input 1 you have $n=10$ gnomes that are to be divided into $m=4$ groups, and the lightning bolt does at most $k=3$ damage, then an optimal solution would be to create one large group of size $7$ and three small groups of size $1$. In the first round, you cause $10$ damage and the lightning bolt reduces the large group by $3$. In the next round, you cause $7$ damage and the large group is reduced down to size $1$. In the remaining four rounds you do $4$, $3$, $2$, and $1$ damage respectively and the lightning bolt removes one group each round. In total you do $10+7+4+3+2+1 = 27$ damage.\n-----Input-----\nThe input consists of a single line containing the three integers $n$, $m$, and $k$ ($1 \\le n \\le 10^9$, $1 \\le m, k \\le 10^7$), with meanings as described above.\n-----Output-----\nOutput the maximum amount of damage you can cause to the enemy.\n-----Examples-----\nSample Input:\n10 4 3\nSample Output:\n27\n\ndef",
        "answer": "def main():\n    n, m, k = map(int, input().split())\n    print(n*m*k)",
        "difficulty": "competition"
    },
    {
        "task_id": 3553,
        "prompt": "Complete the Python function given the prompt below:\u201cHey! I have an awesome task with chameleons, $5$-th task for Saturday\u2019s competition.\u201d\n\u201cGo ahead\u2026\u201d\n(\u2026)\n\u201cThat\u2019s too difficult, I have an easier one, they won\u2019t even solve that one.\u201d\n\u201cYou are given an array of $N$ integers from the interval $[1, K]$. You need to process $M$ queries. The first type of query requires you to change a number in the array to a different value, and the second type of query requires you to determine the length of the shortest contiguous subarray of the current array that contains all numbers from $1$ to $K$.\u201d\n\u201cHm, I can do it in $\\mathrm{O}(N^6)$. What\u2019s the limit for $N$?\u201d\n-----Input-----\nThe first line of input contains the integers $N$, $K$ and $M$ ($1 \\leq N, M \\leq 100000$, $1 \\leq K \\leq 50$). The second line of input contains $N$ integers separated by space, the integers from the array. After that, $M$ queries follow, each in one of the following two forms:\n - \u201c1 p v\u201d\u2014change the value of the $p$-th number into $v$ ($1 \\leq p \\leq N, 1 \\leq v \\leq K$)\n - \u201c2\u201d\u2014what is the length of the shortest contiguous subarray of the array containing all the integers from $1$ to $K$.\n-----Output-----\nThe output must consist of the answers to the queries of the second type, each in its own line. If the required subarray doesn\u2019t exist, output -1.\n-----Examples-----\nSample Input:\n4 3 5\n2 3 1 2\n2\n1 3 3\n2\n1 1 1\n2\nSample Output:\n3\n-1\n4\n\ndef",
        "answer": "def array_manipulation(n, queries):\n    arr = [0] * n\n    for q in queries:\n        a, b, k = q\n        arr[a - 1] += k\n        if b < n:\n            arr[b] -= k\n    max_value = 0\n    running_sum = 0\n    for i in arr:\n        running_sum += i\n        if running_sum > max_value:\n            max_value = running_sum\n    return max_value",
        "difficulty": "competition"
    },
    {
        "task_id": 3554,
        "prompt": "Complete the Python function given the prompt below:Once upon a time there was a Three-Headed Monkey who had a large stash of banana smoothie on one side of the forest. However, her family lived on the other side of the forest. Our dear monkey wants to suprise them and bring them as much banana smoothie as possible. \nUnfortunately, having three heads consumes a lot of energy, so the monkey drinks one millilitre (ml) of smoothie per meter she walks. Note that this is completely continuous, so for example after walking $\\frac{\\sqrt {2} + \\pi }{3}$ meters she has consumed $\\frac{\\sqrt {2} + \\pi }{3}$ ml of smoothie. If she is not carrying any smoothie, she can not move. Furthermore, despite going to the gym every day, the monkey has limited strength and is only able to carry a limited amount of smoothie at a time. Thus she may not be able to bring all the smoothie with her at once.\nWhat she can do however is to leave containers of smoothie anywhere she wants in the forest and then pick them up again later. That way she can for instance move some of the smoothie part of the way, go back to pick up more smoothie, and so on. The monkey starts with all the smoothie in a single place and a (for her purposes) unlimited supply of large containers (large enough so that each of them has room for more smoothie than the monkey can carry). As the monkey only has two hands (despite her large number of heads), she can only carry at most two containers at the same time. The containers are essentially weightless, so the monkey can carry the same amount of smoothie regardless of whether she is carrying one or two containers. They are also bio-degradable, so she can leave empty containers anywhere she likes in the forest without staining her conscience.\nHow much smoothie (in ml) can she bring to her family on the other side of the forest? The family members are lazy and will not help the monkey transport the smoothie. The monkey does not have to deliver all the smoothie to her family at the same time.\nYou may make the following somewhat unrealistic (in the sense that no smoothie-transporting monkeys we have ever seen have satisfied them) assumptions:\n - The monkey is able to exactly transfer any real number of ml of smoothie between two containers she is carrying. Similarly, she is able to exactly walk any real number of meters.\n - Any number of containers can occupy the exact same position (they do so at the start, and during the transport the monkey is able to leave several containers in exactly the same spot).\n - Only walking consumes energy: picking up or dropping off a container, turning around, or just standing still, does not consume energy.\n-----Input-----\nThe only line of the input contains three integers $D, W, C$ \u2013 the distance between the monkey and her family in meters, the total amount of smoothie in ml and finally her maximum carrying capacity in ml. All integers are positive and at most $1000000$.\n-----Output-----\nOutput one line with one number, the amount of smoothie in ml that the Three-Headed Monkey is able to bring to her family. Output will be considered correct if it is within relative or absolute error $10^{-7}$.\n-----Examples-----\nSample Input:\n1000 3000 1000\nSample Output:\n533.3333333333\n\ndef",
        "answer": "def banana_smoothie(distance, energy, capacity):\n    return distance * energy / capacity",
        "difficulty": "competition"
    },
    {
        "task_id": 3555,
        "prompt": "Complete the Python function given the prompt below:Your dog Spot is let loose in the park. Well, relatively loose \u2013 he is tied to a post with a leash, limiting his movements. Spread around the park are various squeaky toys and other dog paraphernalia, which Spot happily goes after when he sees them. When he gets to a toy he will chew at it for a while until it has become defunct, at which point he will go after the next toy, which looks much squeakier.\nThis is all very well, but there are obstacles to Spot\u2019s joyful canine play: trees. In the park there are several trees, and if Spot walks around a tree his leash gets wrapped around the tree, making his movements more limited. Being a dog, with pressing squeaky matters to attend to, Spot does not really have time to take things such as trees into account, and always goes directly in a straight line for his next toy. If he can\u2019t get to his next toy because he has run out of leash, Spot will start barking uncontrollably (as no doubt any of us would) and you have to help him. How long would Spot\u2019s leash have to be in order for him to run out of toys before he runs out of leash?\nFor practical purposes, you may assume that (when seen from above) Spot, his toys, and the trees are points, and that the post that the leash is tied to will not hinder Spot\u2019s movements in any way. After having finished chewing a toy, Spot always goes for the most shiny unchewed toy. The post to which Spot\u2019s leash is tied is located at coordinates $(0,0)$, and this is also where Spot is initially located.\n-----Input-----\nThe first line of input consists of two integers $n$ and $m$, where $1 \\le n \\le 50$ is the number of toys in the park and $0 \\le m \\le 50$ is the number of trees in the park. Then follow $n$ lines, each containing two integers $x$, $y$ giving the coordinates of a toy. The toys are listed in decreasing order of shininess. This is followed by $m$ lines, each containing two integers $x$, $y$, indicating that there is a tree at those coordinates.\nEach coordinate is bounded by 10000 in absolute value. The toys, the trees and the post are all in different positions, and Spot\u2019s route will never take him within distance 0.001 of any tree.\n-----Output-----\nWrite a single line containing the length needed for the leash in order for Spot to be able to get to all his toys, rounded to two decimal digits.\n-----Examples-----\nSample Input:\n2 0\n10 0\n10 10\nSample Output:\n14.14\n\ndef",
        "answer": "def distance(x1, y1, x2, y2):\n    return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5",
        "difficulty": "competition"
    },
    {
        "task_id": 3556,
        "prompt": "Complete the Python function given the prompt below:Several surveys indicate that the taller you are, the higher you can climb the corporate ladder. At TALL Enterprises Inc., this \u201cde facto standard\u201d has been properly formalized: your boss is always at least as tall as you are. Furthermore, you can safely assume that your boss earns a bit more than you do. In fact, you can be absolutely sure that your immediate boss is the person who earns the least among all the employees that earn more than you and are at least as tall as you are. Furthermore, if you are the immediate boss of someone, that person is your subordinate, and all of his or her subordinates are your subordinates as well. If you are nobody\u2019s boss, then you have no subordinates. As simple as these rules are, many people working for TALL are unsure of to whom they should be turning in their weekly progress report and how many subordinates they have. Write a program that will help in determining for any employee who the immediate boss of that employee is and how many subordinates they have. Quality Assurance at TALL have devised a series of tests to ensure that your program is correct. These test are described below.\n-----Input-----\nOn the first line of input are two positive integers $m$ and $q$, where $m$ (at most $100000$) is the number of employees and $q$ (at most $10000$) is the number of queries. The following $m$ lines each list an employee by three integers on the same line: employee ID number (six decimal digits, the first one of which is not zero), yearly salary in Euros and finally height in $\\mu $m ($1 \\mu \\text {m} = 10^{-6}$ meters \u2013 accuracy is important at TALL). The chairperson is the employee that earns more than anyone else and is also the tallest person in the company. Then there are $q$ lines listing queries. Each query is a single legal employee ID.\nThe salary is a positive integer which is at most $10000000$. No two employees have the same ID, and no two employees have the same salary. The height of an employee is at least $1000000$ $\\mu $m and at most $2500000$ $\\mu $m.\n-----Output-----\nFor each employee ID $x$ in a query output a single line with two integers $y$ and $k$, where $y$ is the ID of $x$\u2019s boss, and $k$ is the number of subordinates of $x$. If the query is the ID of the chairperson, then you should output $0$ as the ID of his or her boss (since the chairperson has no immediate boss except, possibly, God).\n-----Examples-----\nSample Input:\n3 3\n123456 14323 1700000\n123458 41412 1900000\n123457 15221 1800000\n123456\n123458\n123457\nSample Output:\n123457 0\n0 2\n123458 1\n\ndef",
        "answer": "def get_subordinates(employee_id, employees):\n    subordinates = []\n    for employee in employees:\n        if employee[0] == employee_id:\n            subordinates.append(employee[0])\n            subordinates.extend(get_subordinates(employee[0], employees))\n    return subordinates",
        "difficulty": "competition"
    },
    {
        "task_id": 3557,
        "prompt": "Complete the Python function given the prompt below:In the dangerous wild west, robbers are attacking a long train with many coaches. Chaos erupts, and the robbers realize that the amount of chaos equals the number of passengers in the train, rounded up to the nearest multiple of $10$. In order to quench the chaos, they therefore decide to kill some passengers by blowing up one of the coaches.\nWhat the robbers failed to realize, however, is that when there are multiple disjoint train segments, then the total amount of chaos is equal to the sum of the chaos of each train segment times the number of train segments!\nFrantic to quench the now even worse chaos, the robbers continue blowing up every coach until all passengers are dead. Phew!\nThe chaos in a train segment is equal to the number passengers in that train segment rounded up to the nearest multiple of $10$. What was the maximum amount of chaos during the robbery?\n-----Input-----\nOn the first line is a single integer $n$, ($3 \\leq n \\leq 100000$), the number of coaches in the train. On the second line follows $n$ integers $p_1, p_2, \\ldots p_ n$, ($0 \\leq p_ i \\leq 100$ for each $i \\in \\{ 1, 2, \\ldots, n\\} $) the number of passengers in each coach. On the third and final line follows a permutation of the numbers from $1$ to $n$ indicating the order in which the robbers blew up the coaches.\n-----Output-----\nA single integer, the maximum chaos that occurred during the robbery.\n-----Examples-----\nSample Input:\n5\n3 5 10 2 5\n2 4 5 1 3\nSample Output:\n90\n\ndef",
        "answer": "def max_chaos(n, p):\n    chaos = 0\n    for i in range(n):\n        chaos += (p[i] // 10 + 1) * 10\n    return chaos",
        "difficulty": "competition"
    },
    {
        "task_id": 3558,
        "prompt": "Complete the Python function given the prompt below:The mayor has decided that it is high time to implement a new system of television transmitters. The city can be represented as a segment of the length $D$ on which there are buildings of different heights. The width of a building is negligible. On top of some buildings, television transmitters are set, their dimensions are also negligible.\nTelevision transmitters emit a television signal in all directions around them. The signal is spread through space in straight lines and cannot pass through buildings. A certain point in the city is considered covered if it is reached by a signal from an existing transmitter.\nFind the segment of the city covered by television signal and output its length.\n-----Input-----\nThe first line of input contains the integer $N$ ($1 \\leq N \\leq 3 \\cdot 10^5$), the number of buildings, and the integer $D$ ($1 \\leq D \\leq 10^9$), the city length.\nEach of the following N lines contains three numbers which describe the $i$-th building:\n - a number which determines whether there is a transmitter on top of the building: 0 (no) or 1 (yes)\n - an integer $X_ i$ ($0 \\leq X_ i \\leq D$), the distance between the building and the left end of the city\n - an integer $H_ i$ ($1 \\leq H_ i \\leq 10^9$), the building height\nThe buildings are sorted in ascending order by the distance from the left end of the city. No two buildings will be located on the same distance from the left end of the city.\n-----Output-----\nThe first and only line of output must contain the required length from the text. Note: the maximum permissible deviation from the official solution is 10-3 in absolute value.\n-----Examples-----\nSample Input:\n3 10\n1 2 6\n0 4 3\n0 8 2\nSample Output:\n6.000000\n\ndef",
        "answer": "def find_city_length(buildings):\n    buildings.sort(key=lambda x: x[1])\n    left = 0\n    right = buildings[0][1]\n    for building in buildings:\n        if building[0] == 1:\n            right = building[1]\n        else:\n            left = building[1]\n            break\n    return right - left",
        "difficulty": "competition"
    },
    {
        "task_id": 3559,
        "prompt": "Complete the Python function given the prompt below:A typical strategy in the game Starcraft is to mass up large amounts of low-tier units such as Zerglings, then throw them at your opponent and laugh maniacally as they overwhelm any opposition. However, when both players opt for the same strategy, the result can often become... quick, brutal and messy. Sadly, the game only allows for up to $400$ Zerglings per player. In this problem, however, you will simulate games that could have more than $400$ Zerglings.\nThe map on which Zerg rushes occur is represented by a $N \\times N$ grid. Each Zergling occupies a grid square and no two Zerglings ever occupy the same grid square. Each Zergling has a certain number of hit points which starts off as $35$. Its attack value is $5$ plus the attack upgrade of the player that controls it. When one Zergling attacks another, the damage incurred equals to the attack value of the attacking Zergling minus the armour upgrade of the player that owns the Zergling being attacked. The number of hit points of the Zergling that is attacked is reduced by the amount of the damage.\nDue to the inability of both players to manage their huge horde of Zerglings, the Zerglings make their decisions each turn using the following algorithm (Zerglings are not the brightest creatures, as you will see):\n - If there is an opponent Zergling in one of the $8$ horizontally, vertically, or diagonally adjacent grid squares, the Zergling will attack it. A Zergling attacks at most one opponent each turn; see below for the tie-breaking rules.\n - Otherwise, if the other player has at least one Zergling remaining on the map, the Zergling will move to the horizontally, vertically, or diagonally adjacent square that is closest to the opponent\u2019s closest Zergling in terms of Manhattan distance. When more than one adjacent square is closest, the tie-breaking rules below are used. The Manhattan distance between two points is the sum of the differences in the $x$ and $y$ coordinates of the points.\nWhen the above rules could cause the Zergling to attack in more than one direction, or to move in more than one direction, the following tie-breaking rule is used. The Zergling will prefer the first direction starting with north going clockwise. That is, the directions in order of preference are north, northeast, east, southeast, etc.\nOnce all Zerglings have made their decisions, all the attacks are conducted simultaneously and all the Zerglings with $0$ or fewer hit points are marked as dead and removed from the map. Then all the movements of the Zerglings that didn\u2019t attack are conducted simultaneously. If the square to which a Zergling is moving is occupied by another Zergling that is not moving away in this turn, then the Zergling does not move. If two or more Zerglings try to move to the same grid square, then the Zergling in the northernmost row has the right of way and the other Zergling remains stationary. If there are multiple Zerglings in the northernmost row trying to move to the same grid square, then of these, the westernmost Zergling moves and the others remain stationary. Zerglings also have a remarkable regeneration rate. After each turn, all the Zerglings that are still alive and have less than $35$ hitpoints will regain one hit point.\n-----Input-----\nThe input begins with $N$ between $2$ and $150$, followed by $2$ pairs of $2$ integers between $0$ and $3$, the attack and armour upgrades of the first player, followed by the attack and armour upgrades of the second player. This is followed by the initial game map, where \u2019.\u2019 denotes an empty square, \u20191\u2019 a Zergling belonging to the first player and \u20192\u2019 a Zergling belonging to the second player. On the map, north is up (i.e., towards the first row) and west is left (i.e., towards the first column).\nFinally, the input provides the number $t$ of turns for which the Zerg rush is to be simulated, which is an integer between $0$ and $400$, inclusive.\n-----Output-----\nOutput the map after $t$ turns in the same format as above.\n-----Examples-----\nSample Input:\n2\n0 0\n0 0\n1.\n..\n0\nSample Output:\n1.\n..\n\ndef",
        "answer": "def zergRush(N, A, B, map):\n    # Write your code here\n    # N = 2\n    # A = 0\n    # B = 0\n    # map = [\n
        "difficulty": "competition"
    },
    {
        "task_id": 3560,
        "prompt": "Complete the Python function given the prompt below:Nowadays, there are a lot of unusual people. We won\u2019t go into details, but instead focus on a certain type, to us personally the most interesting people. Of course, we\u2019re talking about barbarians!\nThere are a lot of barbarians, but only a few of them are truly important. This story has $N$ important barbarians, denoted with integers from $1$ to $N$. Each of them has their own stone tablet with their word written on it, consisting of only lowercase letters of the English alphabet.\nOur barbarians are playing an interesting game with their good friend Tarzan.\nThe game is played in $Q$ rounds. There are two round types and each is determined by Tarzan:1st type:\nTarzan shows the word $P$ to the barbarians.2nd type:\nTarzan asks the barbarian denoted with $S$ the following question: \u201cOut of all the words I\u2019ve shown you so far, how many of them have the word on your stone tablet as a consecutive substring?\u201d\nGiven the fact that the barbarians go wild a lot and aren\u2019t really able to pay attention and keep up with what\u2019s happening in the game, they need your help. Help the barbarians answer each of Tarzan\u2019s questions correctly.\n-----Input-----\nThe first line of input contains the integer $N$ ($1 \\leq N \\leq 10^5$), the number of barbarians.\nEach of the following $N$ lines contains a single word consisting of only lowercase letters of the English alphabet, the $i$-th word corresponding to the word on the stone tablet of barbarian denoted with $i$.\nAfter that, the integer $Q$ ($1 \\leq Q \\leq 10^5$) follows, the number of rounds in the game.\nThe following $Q$ lines describe the round of the game, the $i$-th line describing the $i$-th round of the game. Each line will contain the integer $T$. In the case when $T$ is equal to 1, it denotes the first type of round and the shown word $P$ follows in the same line, consisting of only lowercase letters of the English alphabet.\nIn the case when $T$ is equal to 2, it denotes the second type of round and the number $S$ ($1 \\leq S \\leq N$) follows in the same line, the label of the barbarian whom Tarzan asked the question.\nThe total length of all words written on the barbarians\u2019 stone tablets will not exceed $2 \\cdot 10^6$.\nThe total length of all words that Tarzan shows the barbarians will not exceed $2 \\cdot 10^6$.\n-----Output-----\nFor each round of the second form, output a single line. The $i$-th line must contain the correct answer to Tarzan\u2019s question in the $i$-th round of type 2.\n-----Examples-----\nSample Input:\n3\na\nbc\nabc\n3\n1 abca\n2 1\n2 3\nSample Output:\n1\n1\n\ndef",
        "answer": "def foo(n, words):\n    return [words[i] for i in range(n) if words[i] in words[:i]]",
        "difficulty": "competition"
    },
    {
        "task_id": 3561,
        "prompt": "Complete the Python function given the prompt below:John Doe wants to transport his possessions from one bank of Lake Michigan to the other. His possessions consist of $W$ wolves, $S$ sheep, and $C$ cabbages. The transportation will be carried out using a boat that can hold up to $K$ of these items at the same time. During each step, John can take some items from one bank and transfer them to the other bank. Unfortunately, when left unsupervised, wolves will eat sheep and sheep will eat cabbages (but wolves don\u2019t eat cabbages). John doesn\u2019t want to lose his possessions, so he has to devise a scheme such that this doesn\u2019t happen. With John present, any combination of items is allowed (both on the bank and in the boat). This is also true during the loading process. Since John isn\u2019t very good at solving problems like this, he asks you to help him.\n-----Input-----\nInput contains a single line with four integers: $W$, $S$, $C$, $K$. The input satisfies the following constraints:\\[ 0 \\leq W, S, C, K \\leq 10^6, \\]\\[ 1 \\leq max(W, S, C). \\]\n-----Output-----\nIf it\u2019s possible to perform the transportation without the loss of items, print YES, otherwise print NO.\n-----Examples-----\nSample Input:\n1 1 1 1\nSample Output:\nYES\n\ndef",
        "answer": "def transport(w, s, c, k):\n    if w + s + c <= k:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "difficulty": "competition"
    },
    {
        "task_id": 3562,
        "prompt": "Complete the Python function given the prompt below:It is exam time! You have, of course, been spending too much time participating in various programming contests and have not done much studying. Now you have $N$ subjects to study for, but only a limited amount of time before the final exams. You have to decide how much time to allocate to studying each subject, so that your average grade over all $N$ subjects is maximized. \nAs a seasoned programming contest competitor, you recognize immediately that you can determine the optimal allocation with a computer program. Of course, you have decided to ignore the amount of time you spend solving this problem (i.e.\u00a0procrastinating).\nYou have a total of $T$ hours that you can split among different subjects. For each subject $i$, the expected grade with $t$ hours of studying is given by the function $f_ i(t) = a_ i t^2 + b_ i t + c_ i$, satisfying the following properties:\n - $f_ i(0) \\geq 0$;\n - $f_ i(T) \\leq 100$;\n - $a_ i < 0$;\n - $f_ i(t)$ is a non-decreasing function in the interval $[0,T]$.\nYou may allocate any fraction of an hour to a subject, not just whole hours. What is the maximum average grade you can obtain over all $n$ subjects?\n-----Input-----\nThe first line of each input contains the integers $N$ ($1 \\leq N \\le 10$) and $T$ ($1 \\leq T \\le 240$) separated by a space. This is followed by $N$ lines, each containing the three parameters $a_ i$, $b_ i$, and $c_ i$ describing the function $f_ i(t)$. The three parameters are separated by a space, and are given as real numbers with $4$ decimal places. Their absolute values are no more than $100$.\n-----Output-----\nOutput in a single line the maximum average grade you can obtain. Answers within $0.01$ of the correct answer will be accepted.\n-----Examples-----\nSample Input:\n2 96\n-0.0080 1.5417 25.0000\n-0.0080 1.5417 25.0000\nSample Output:\n80.5696000000\n\ndef",
        "answer": "def f(t):\n    return a*t**2 + b*t + c",
        "difficulty": "competition"
    },
    {
        "task_id": 3563,
        "prompt": "Complete the Python function given the prompt below:Dezider is making a game board for the game of Convexity. He drilled a bunch of holes in a piece of wood. As the name of the game suggests the holes were on the boundary of a convex polygon. After turning over the piece of wood, Dezider froze\u2014he had damaged the famous Picasso lithograph\u2014The Bull No.\u00a08. Now the question is: how to fix the damage? Drawing a bunch of straight lines to cover the holes seems like a good repair method but, of course, Dezider would like to draw as few lines as possible. He needs your help. Write a program that, given the positions of the holes, finds the smallest number of straight lines that can cover the holes.\n-----Input-----\nThe only input line starts with $n$, the number of holes. Then $2n$ numbers, the coordinates of the holes, follow. You can assume that $3 \\leq n \\leq 1000$ and the coordinates are integers between $-1000000$ and $1000000$. The holes lie on the boundary of a convex polygon.\n-----Output-----\nThe output contains one line with the smallest number $\\ell $, such that $\\ell $ straight lines can cover the holes.\n-----Examples-----\nSample Input:\n4 0 0 1 1 1 0 0 1\nSample Output:\n2\n\ndef",
        "answer": "def convex_polygon(holes):\n    return 0",
        "difficulty": "competition"
    },
    {
        "task_id": 3564,
        "prompt": "Complete the Python function given the prompt below:Weenesia is an archipelago of perfectly circular islands in the 2D plane. Many islands have palm trees growing in them, perfectly straight up, so we can represent a tree by a 2D point and a height.\nWe want to build a courier system in the islands, i.e., we want to be able to move any object from any land point to any other land point. It is possible to move an object within an island without restrictions. It is also possible to climb to a palm tree and throw the object to a distance proportional to the height of the palm tree (or less), and possibly in a different island.\nUnfortunately, this may not be enough to reach our goal, so we might want to build a tunnel between two islands. The tunnel connects two points on two islands and may cross under both the sea and other islands. Each of the two entrances of a tunnel must be at least $1$ meter away from the sea to avoid flooding.\nYour task is to find the minimum length of a tunnel such that a courier system is possible.\n-----Input-----\nThe first line contains three integers $n$, $m$, and $k$ ($1 \\leq n \\leq 5000$, $0 \\leq m \\leq 10000$, $1 \\leq k \\leq 1000$), the number of islands and palm trees respectively, and the ratio between object throwing range and palm height.\nEach of the next $n$ lines contains three integers $x$, $y$, and $r$ ($|x|,|y|\\leq 10^6$, $100 \\leq r \\leq 10^6$), the center and radius of an island, in centimetres. Each of the next $m$ lines contains three integers $x$, $y$, $h$ ($|x|,|y|\\leq 10^6$, $1 \\leq h \\leq 10^4$), the center and height of a palm tree, in centimetres.\nNo two islands intersect. Each palm tree lies strictly inside an island. No two palm trees grow in the same spot.\n-----Output-----\nOutput the minimum length of a tunnel in centimetres, $0$ if no tunnel is needed, or \u201cimpossible\u201d if no such tunnel exists. Answers with an absolute or relative precision up to $10^{-6}$ will be accepted.\n-----Examples-----\nSample Input:\n3 2 3\n0 0 400\n1000 0 400\n2000 0 400\n300 0 150\n1300 0 150\nSample Output:\n1400\n\ndef",
        "answer": "def tunnel(x1, y1, r1, x2, y2, r2):\n    if (x1 - x2) ** 2 + (y1 - y2) ** 2 <= (r1 + r2) ** 2:\n        return 0\n    else:\n        return \"impossible\"",
        "difficulty": "competition"
    },
    {
        "task_id": 3565,
        "prompt": "Complete the Python function given the prompt below:Ticket to Ride1 is a board game for up to $5$ players. The goal of the game is to set up train lines (and to thwart the opponents\u2019 attempts at setting up their train lines). At the beginning of play, each player is assigned four train lines. A player may choose to discard as many of these four assignments as she likes. Each assignment has a score, corresponding to its difficulty (so, typically, a train line between e.g.\u00a0Stockholm and Tokyo would be worth more than a train line between e.g.\u00a0Stockholm and Utrecht). At the end of the game, each player gets points for the assignments that they have successfully completed, and penalty points for the assignments that they have failed to complete. \nAn assignment consists of a pair of cities that are to be connected by a series of shorter railway routes. A route can be claimed (for a certain cost associated with the route), but things are complicated by the fact that there is only a limited number of routes, and once a player claims a route, none of the other players can claim it. A player has successfully set up a train line between two cities if there is a path between the two cities using only routes that have been claimed by this player. For simplicity, we will ignore all additional aspects of the game (including the actual process of claiming routes and additional ways to score points).\nFor instance, if your assignment is to connect Stockholm and Amsterdam in the Figure above, you would probably want to claim the routes between Stockholm and Copenhagen, and between Copenhagen and Amsterdam. But if another player manages to claim the route between Copenhagen and Stockholm before you, your train line would have to use some other routes, e.g.\u00a0by going to Copenhagen via Oslo.\nIn this problem, we will consider the rather bold strategy of trying to complete all four assignments (typically, this will be quite hard). As a preliminary assessment of the difficulty of achieving this, we would like to calculate the minimum cost of setting up all four lines assuming that none of the other players interfere with our plans. Your job is to write a program to determine this minimum cost.\n-----Input-----\nThe input starts with two integers $1 \\le n \\le 40$, $0 \\le m \\le 1000$, giving the number of cities and railway routes in the map, respectively. Then follow $n$ lines, giving the names of the $n$ cities. City names are at most $20$ characters long and consist solely of lower case letters (\u2019a\u2019-\u2019z\u2019).\nAfter this follow $m$ lines, each containing the names of two different cities and an integer $1 \\le c \\le 10000$, indicating that there is a railway route with cost $c$ between the two cities. Note that there may be several railway routes between the same pair of cities. You may assume that it is always possible to set up a train line from any city to any other city.\nFinally, there are four lines, each containing the names of two cities, giving the four train line assignments.\n-----Output-----\nOutput a single line containing a single integer, the minimum possible cost to set up all four train lines.\n-----Examples-----\nSample Input:\n10 15\nstockholm\namsterdam\nlondon\nberlin\ncopenhagen\noslo\nhelsinki\ndublin\nreykjavik\nbrussels\noslo stockholm 415\nstockholm helsinki 396\noslo london 1153\noslo copenhagen 485\nstockholm copenhagen 522\ncopenhagen berlin 354\ncopenhagen amsterdam 622\nhelsinki berlin 1107\nlondon amsterdam 356\nberlin amsterdam 575\nlondon dublin 463\nreykjavik dublin 1498\nreykjavik oslo 1748\nlondon brussels 318\nbrussels amsterdam 173\nstockholm amsterdam\noslo london\nreykjavik dublin\nbrussels helsinki\nSample Output:\n3907\n\ndef",
        "answer": "def find_min_cost(cities, routes, num_cities, num_routes):\n    # Write your code here\n    # cities = ['stockholm', 'amsterdam', 'london', 'berlin', 'copenhagen', 'oslo', 'helsinki', 'dublin','reykjavik', 'brussels']\n    # routes = [['stockholm', 'copenhagen', '415'], ['stockholm', 'helsinki', '396'], ['oslo', 'london', '1153'], ['oslo', 'copenhagen', '485'], ['stockholm', 'copenhagen', '522'], ['copenhagen', 'berlin', '354'], ['copenhagen', 'amsterdam', '622'], ['helsinki', 'berlin', '1107'], ['london', 'amsterdam', '356'], ['berlin', 'amsterdam', '575'], ['london', 'dublin', '463'], ['reykjavik', 'dublin', '1498'], ['reykjavik', 'oslo', '1748'], ['london', 'brussels', '318'], ['brussels', 'amsterdam', '173'], ['stockholm', 'amsterdam', '']]\n    # num_cities = 10\n    # num_routes = 15\n    # cities = ['stockholm', 'amsterdam', 'london', 'berlin', 'copenhagen', 'oslo', 'helsinki', 'dublin','reykjavik', 'brussels']\n    # routes = [['stockholm', 'copenhagen', '415'], ['stockholm', 'helsinki', '396'], ['oslo', 'london', '1153'], ['oslo', 'copenhagen', '485'], ['stockholm', 'copenhagen', '522'], ['copenhagen', 'berlin', '354'], ['copenhagen', 'amsterdam', '622'], ['helsinki', 'berlin', '1107'], ['london', 'amsterdam', '356",
        "difficulty": "competition"
    },
    {
        "task_id": 3566,
        "prompt": "Complete the Python function given the prompt below:Oostende Beach is a very long beach located in the north of Belgium. On this beach, there are $n$ huts located along a straight line. People can rent a room in one of those huts to spend their beach vacations together with the other tenants.\nEvery day at lunch time, a food truck drives by to serve fries to the guests. The truck parks in front of one of the huts and people form two queues. The people staying in huts to the left of the food truck queue on the left, and the people to the right of the food truck queue on the right. The people staying in the hut in front of the food truck split their group in half, one half going to the left queue and the other half going to the right queue. If this is an odd number of people, the remaining person will go to the queue with fewer people, or choose one randomly if the queues have the same length. The food truck always positions itself so that the difference between the number of people in the left queue and the number of people in the right queue is as small as possible.\nEach night the number of guests in exactly one of the huts changes. Can you help the food truck find the best position for each day?\n-----Input-----\n - The first line of the input consists of two integers $1\\leq n \\leq 10^5$, the number of huts, and $1\\leq q\\leq 10^5$, the number of days.\n - The second line has $n$ integers $a_0$, $\\dots $, $a_{n-1}$ satisfying $1\\leq a_ i \\leq 10^6$ for $0\\leq i < n$, where $a_ i$ is the current number of people in hut $i$.\n - Then follow $q$ lines with two integers $0\\leq i<n$ and $1\\leq x \\leq 10^6$. The $j^\\textrm {th}$ of these lines indicates that at day $j$ the number of people in hut $i$ changes to $x$.\n-----Output-----\n - Print $q$ lines: the optimal position of the food truck after each of the $q$ nights. If there are multiple optimal positions, print the smallest one.\n-----Examples-----\nSample Input:\n5 4\n3 1 3 4 2\n0 5\n0 9\n4 5\n2 1\nSample Output:\n2\n1\n2\n1\n\ndef",
        "answer": "def food_truck(n, q, a):\n    a.sort()\n    for i in range(q):\n        x, y = map(int, input().split())\n        if x == 1:\n            a[y-1] += 1\n        else:\n            a[y-1] -= 1\n    a.sort()\n    for i in range(n):\n        if a[i] % 2 == 1:\n            print(i+1)",
        "difficulty": "competition"
    },
    {
        "task_id": 3567,
        "prompt": "Complete the Python function given the prompt below:Tira would like to join a multiplayer game with $n$ other players. Each player has a character with some features. There are a total of $k$ features, and each character has some subset of them. \nThe similarity between two characters $A$ and $B$ is calculated as follows: for each feature $f$, if both $A$ and $B$ have feature $f$ or if none of them have feature $f$, the similarity increases by one.\nTira does not have a character yet. She would like to create a new, very original character so that the maximum similarity between Tira\u2019s character and any other character is as low as possible.\nGiven the characters of the other players, your task is to create a character for Tira that fulfils the above requirement. If there are many possible characters, you can choose any of them.\n-----Input-----\nThe first line of input contains two integers $n$ and $k$, where $1 \\le n \\le 10^5$ is the number of players (excluding Tira) and $1 \\le k \\le 20$ is the number of features.\nThen follow $n$ lines describing the existing characters. Each of these $n$ lines contains a string of $k$ digits which are either $0$ or $1$. A $1$ in position $j$ means the character has the $j$\u2019th feature, and a $0$ means that it does not have the $j$\u2019th feature.\n-----Output-----\nOutput a single line describing the features of Tira\u2019s character in the same format as in the input. If there are multiple possible characters with the same smallest maximum similarity, any one of them will be accepted.\n-----Examples-----\nSample Input:\n3 5\n01001\n11100\n10111\nSample Output:\n00010\n\ndef",
        "answer": "def create_character(n, k):\n    # Write your code here\n    # n = number of players\n    # k = number of features\n    # n = 3\n    # k = 5\n    # n = 3\n    # k = 5\n    # n = 3\n    # k = 5\n    # n = 3\n    # k = 5\n    # n = 3\n    # k = 5\n    # n = 3\n    # k = 5\n    # n = 3\n    # k = 5\n    # n = 3\n    # k = 5\n    # n = 3\n    # k = 5\n    # n = 3\n    # k = 5\n    # n = 3\n    # k = 5\n    # n = 3\n    # k = 5\n    # n = 3\n    # k = 5\n    # n = 3\n    # k = 5\n    # n = 3\n    # k = 5\n    # n = 3\n    # k = 5\n    # n = 3\n    # k = 5\n    # n = 3\n    # k = 5\n    # n = 3\n    # k = 5\n    # n = 3\n    # k = 5\n    # n = 3\n    # k = 5\n    # n = 3\n    # k = 5\n    # n = 3\n    # k = 5\n    # n = 3\n    # k = 5\n    # n = 3\n    # k = 5\n    # n = 3\n    # k = 5\n    # n = 3\n    # k = 5\n    # n = 3\n    # k = 5\n    # n = 3\n    # k = 5\n    # n = 3\n    # k = 5\n    # n = 3\n    # k = 5\n    # n = 3\n    # k = 5\n    # n = 3\n    # k = 5\n    # n = 3\n    # k = 5\n    # n = 3\n    # k = 5\n    # n = 3\n    # k = 5\n    # n = 3\n    # k = 5\n    # n = 3\n    # k = 5\n    # n = 3\n    # k = 5\n",
        "difficulty": "competition"
    },
    {
        "task_id": 3568,
        "prompt": "Complete the Python function given the prompt below:Your friend\u2019s newest hobby is to play movie theme songs on her freshly acquired floppy drive organ. This organ is a collection of good old floppy drives, where each drive has been tampered with to produce sound of a unique frequency. The sound is produced by a step motor that moves the read/write head of the floppy drive along the radial axis of the drive\u2019s spin disk. The radial axis starts in the center of the spin disk and ends at the outer edge of the spin disk.\nThe sound from one drive will play continuously as long as the read/write head keeps moving in one direction; when the head changes direction, there is a brief pause of $1$fs\u2014one floppysecond, or about $100$ microseconds. The read/write head must change direction when it reaches either the inner or the outer end point of the radial axis, but it can also change direction at any other point along this axis, as determined by your friend. You can make the head stay still at any time and for as long as you wish. The starting position of the read-write head can be chosen freely.\nYour friend is a nutcase perfectionist, and will not accept any pauses where there are not supposed to be any; nor will she accept sound when there is meant to be silence. To figure out whether a given piece of music can be played\u2014perfectly\u2014on her organ, she has asked for your help.\nFor each frequency, you are given a list of intervals, each describing when that particular frequency should play, and you must decide if all of the frequencies can be played as intended. You can assume your friend has enough drives to cover all the required frequencies.\n-----Input-----\nThe first line contains an integer\u00a0$f, 1 \\leq f \\leq 10$, denoting the number of frequencies used. Then follow\u00a0$f$ blocks, on the format:\n - A single line with two integers\u00a0$t_ i, 1\\leq t_ i \\leq 10\\ 000$ and $n_ i, 1\\leq n_ i \\leq 100$; the number of floppyseconds it takes for the read/write head of frequency\u00a0$i$ to move between the end points of its radial axis, and the number of intervals for which frequency\u00a0$i$ should play.\n - $n_ i$ lines, where the\u00a0$j$-th line has two integers\u00a0$t_{i,2j}, t_{i,2j+1}$, where $0\\leq t_{i,2j},t_{i,2j+1} \\leq 1\\ 000\\ 000$, indicating that the\u00a0$i$-th frequency should start playing at time $t_{i,2j}$ and stop playing at time $t_{i,2j+1}$. You can assume that these numbers are in stricly ascending order, i.e. $t_{i,1} < t_{i,2} < \\dots < t_{i, 2n_ i}$.\n-----Output-----\nIf it is possible to play all the $f$ frequencies as intended, output \u201cpossible\u201d. Otherwise output \u201cimpossible\u201d.\n-----Examples-----\nSample Input:\n1\n6 2\n0 4\n6 12\nSample Output:\npossible\n\ndef",
        "answer": "def play_music(freq, intervals):\n    # Write your code here\n    # freq = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # intervals = [[0, 4], [6, 12]]\n    # freq = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # intervals = [[0, 4], [6, 12], [0, 4], [6, 12], [0, 4], [6, 12], [0, 4], [6, 12], [0, 4], [6, 12], [0, 4], [6, 12]]\n    # freq = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # intervals
        "difficulty": "competition"
    },
    {
        "task_id": 3569,
        "prompt": "Complete the Python function given the prompt below:One fateful spring evening Bergur was playing his favorite video game Striker-Count. Bergur is so good at Striker-Count he usually defeats his opponents without breaking a sweat. Therefore he\u2019s been racking his brain for new ways to win with style. He decides to jump in the air, rotate a full circle and shoot one shot with his trusty PWA. But he\u2019s been wondering, what is the maximum amount of opponents he can hit with one shot in this fashion.\nWe consider Bergur to positioned at the origin of a plane. His opponents are then provided as circles with a center somewhere in the plane and a radius. A single shot is then a ray from the origin and hits the opponent if and only if the ray intersects strictly more than one point of the opponent (i.e. grazing the opponent doesn\u2019t count as a hit). It is guaranteed that no opponents include Bergur (the origin). Enemies might overlap however since they might be standing on top of one another. By sheer skill Bergur will still manage to hit both of them with a single shot if the ray intersects both circles.\n-----Input-----\nThe first line of the input contains an integer $1 \\leq n \\leq 10^5$, which denotes the number Bergur\u2019s opponents present on the plane. Then $n$ lines follow, the $i$th of which contains three real numbers $-10^9 \\leq x_ i, y_ i \\leq 10^9$, $0 < r \\leq 10^9$ which denote an opponent centered at point $(x_ i, y_ i)$ in the plane with radius $r_ i$. All real numbers will have at most six digits after the decimal point. It is guaranteed that there is a neighbourhood around an optimal angle of radius $10^{-9}$ such that all angles in the neighbourhood give the same number of hit enemies.\n-----Output-----\nThe only line of the output should contain the maximum number of opponents Bergur can hit with one shot.\n-----Examples-----\nSample Input:\n5\n5 0 1\n10 0 1\n0 5 1\n0 -5 1\n-5 0 1\nSample Output:\n2\n\ndef",
        "answer": "def hit_count(x, y, r):\n    return sum(1 for x_, y_, r_ in circles if (x - x_) ** 2 + (y - y_) ** 2 <= r_ ** 2)",
        "difficulty": "competition"
    },
    {
        "task_id": 3570,
        "prompt": "Complete the Python function given the prompt below:A common plot device in story-telling is the \u201cAll Just A Dream\u201d trope. Typical symptoms of this trope being used are talking lions, main characters dying, yodeling aliens on monocycles, and a general plethora of weird events. Then, of course, someone wakes up and it is revealed that everything that happened during the entire season did in fact not happen at all. It was All Just A Dream (or some kind of hallucination), and the days of our lives spent watching all those episodes are lost forever. In order to cause further confusion and uncertainty, this can also be done in layers, with characters having dreams within dreams within dreams, and so on. \nWhen the All Just A Dream trick is taken too far and gets used too often, it can get difficult to keep track of what has actually happened. This is where you enter the picture. You will be given a list of events, dreams, and scenarios. Each scenario specifies some events that have happened and some others that have not happened. Your job is to determine for each scenario whether that scenario is possible (possibly using the All Just A Dream trick).\n-----Input-----\nThe first line of input consists of an integer $0 \\le n \\le 50000$, the number of events, dreams and scenarios. Then follow $n$ lines, giving the events, dreams, and scenarios in chronological order. Each line is in one of the following forms:\n - An event line is of the form \u201cE $e$\u201d, indicating that event $e$ happens (see below for format of $e$).\n - A dream line is of the form \u201cD $r$\u201d, indicating that the last $r$ events that happened were All Just A Dream. Note that these events are now considered to not have happened, so they should not be counted when processing subsequent D lines.\n - A scenario line is of the form \u201cS $k$ $e_1$ $\\ldots $ $e_ k$\u201d, where $1 \\le k \\le 30$ is an integer giving the number of events and $e_1, \\ldots, e_ k$ is the list of events of the scenario. In a scenario, each event may be prefixed with a \u2018!\u2019, indicating that the event did not happen in this scenario.\nEvents are strings containing at most $20$ characters and using only the characters \u2018a\u2019-\u2018z\u2019 and underscores (\u2018_\u2019). For \u2018D\u2019 lines, you can assume that $r$ is an integer between $1$ and $R$, where $R$ is the total number of events that have happened so far (and that have not turned out to be a dream). For \u2018E\u2019 lines, you can assume that $e$ is not an event that has already happened, except if the previous occurence of the event turned out to be a dream, in which case it can happen again.Warning\nThis problem has somewhat large amounts of input and output. We recommend you to make sure that your input and output are properly buffered in order to make the most of the few seconds of execution time that we give you.\n-----Output-----\nFor each scenario in the input, output a line as follows:\n - \u201cYes\u201d if the given scenario is consistent with what has happened so far.\n - \u201c$r$ Just A Dream\u201d if the given scenario would be consistent with what has happened so far, provided a \u201cD $r$\u201d line had occurred just before the scenario. If there are many possible values of $r$, choose the smallest value. Note that you should not consider this hypothetical \u201cD $r$\u201d line to have occurred (as illustrated by sample input 2 below).\n - \u201cPlot Error\u201d otherwise.\n-----Examples-----\nSample Input:\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies business_as_usual\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\nSample Output:\nPlot Error\n3 Just A Dream\nYes\nPlot Error\n\ndef",
        "answer": "def main():\n    n = int(input())\n    events = []\n    for i in range(n):\n        line = input()\n        if line[0] == 'E':\n            events.append(line[2:])\n        elif line[0] == 'D':\n            events = events[-int(line[2:]):]\n        else:\n            scenario = line[2:].split()\n            for i in range(len(scenario)):\n                if scenario[i][0] == '!':\n                    scenario[i] = scenario[i][1:]\n            print(scenario)\n            print(events)\n            print(check_scenario(scenario, events))",
        "difficulty": "competition"
    },
    {
        "task_id": 3571,
        "prompt": "Complete the Python function given the prompt below:When the first scrollbars appeared on resizable windows during user interface development in the Elder Days, computer graphics were still primitive. Widgets were made with ASCII symbols and text was monospaced. A window displayed a viewport: a part of a much longer text, adjusted to fit the width of the window. The thumb, shown as an X, represented the position of the viewport relative to the full (adjusted) text and allowed vertical nagivation by clicking and dragging.\nAlas, much of the knowledge of the Ancients has been lost in the Great Purge of the Second Iconoclast Uprising, which destroyed the last remaining implementations of the user interface layer of the Elder GUI. As head programmer of the National Laboratory of Interaction Design Archeology it is your job to recreate the behaviour of the machines of yore as faithfully as possible.\nThanks to many years of studies, you have full understanding of the typographical aesthetics of the Elder Days: Lines were set flush left but ragged-right, and words on the same line were separated by single spaces. Line breaking was simple in those days: When the next word of the text fit on the current line, it was put there, otherwise a new line was started. If a word was too wide to fit the viewport, it was set on a line of its own and truncated at the right margin.\nThe language of the Ancients was written in upper- and lowercase letters of the English alphabet without punctuation or hyphenation. The scroll bar on the right contained navigation widgets for \u201cup\u201d and \u201cdown\u201d at the top and bottom.\n-----Input-----\nThe first line consists of $4$ integers $W$, $H$, $F$, $N$, separated by single spaces. The width of the viewport is $W$, with $3\\leq W\\leq 200$. The height of the viewport is $H$, with $3\\leq H\\leq 200$. The viewport must show line $F$ of the adjusted input as the first line at the top line; lines are numbered $0,\\ldots, L-1$, where $L$ is the total number of lines in the adjusted text; you can assume $0\\leq F \\leq L - H$ and $H < L$. The following $N$ lines for $1\\leq N\\leq 30000$ contain the text (not adjusted), between $1$ and $80$\u00a0characters per line, including spaces; neither the first nor last character in each line are a space. No word in the language of the Ancients was more than $80$\u00a0characters.\n-----Thumb position-----\nYou have discovered many ancient texts explaining the position $T\\in \\{ 0,\\ldots, H-3\\} $ of the thumb. Alas, all are written in arcane languages that are long forgotten. One example reads like this:\nSUBTRACT H FROM L GIVING DENOMINATOR.\nSUBTRACT 3 FROM H.\nMULTIPLY F BY H GIVING NUMERATOR.\nDIVIDE NUMERATOR BY DENOMINATOR GIVING T REMAINDER Left-Over.\nAnother source claims that $T$ can be determined by an incantation that is almost poetic in its mystery,\n H 3 - F *  L H - /\nand yet another obscure author writes\n(defun thumb (lines height first) (/ (* (- height 3) first) (- lines height)))\n-----Output-----\nPrint the window as the Ancients would have seen it, built from minus (-), plus (+), pipe (|), lower-case V (v), caret (^), and upper-case X (X). See the sample output for the details.\n-----Examples-----\nSample Input:\n24 5 8 7\nLorem ipsum dolor sit amet consectetur adipisicing elit sed do\neiusmod tempor incididunt ut labore et dolore magna aliqua Ut enim ad\nminim veniam quis nostrud exercitation ullamco laboris nisi ut\naliquip ex ea commodo consequat Duis aute irure dolor in\nreprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\npariatur Excepteur sint occaecat cupidatat non proident sunt in\nculpa qui officia deserunt mollit anim id est laborum\nSample Output:\n+------------------------+-+\n|exercitation ullamco    |^|\n|laboris nisi ut aliquip | |\n|ex ea commodo consequat |X|\n|Duis aute irure dolor in| |\n|reprehenderit in        |v|\n+------------------------+-+\n\ndef",
        "answer": "def window(lines, height, first):\n    for i in range(height):\n        print('+' + '-' * (lines - 1) + '+')\n        print('|' +'' * (lines - 1) + '|')\n        print('|' +'' * (lines - 1) + '|')\n        print('|' +'' * (lines - 1) + '|')\n        print('|' +'' * (lines - 1) + '|')\n        print('|' +'' * (lines - 1) + '|')\n        print('|' +'' * (lines - 1) + '|')\n        print('|' +'' * (lines - 1) + '|')\n        print('|' +'' * (lines - 1) + '|')\n        print('|' +'' * (lines - 1) + '|')\n        print('|' +'' * (lines - 1) + '|')\n        print('|' +'' * (lines - 1) + '|')\n        print('|' +'' * (lines - 1) + '|')\n        print('|' +'' * (lines - 1) + '|')\n        print('|' +'' * (lines - 1) + '|')\n        print('|' +'' * (lines - 1) + '|')\n        print('|' +'' * (lines - 1) + '|')\n        print('|' +'' * (lines - 1) + '|')\n        print('|' +'' * (lines - 1) + '|')\n        print('|' +'' * (lines - 1) + '|')\n        print('|' +'' * (lines - 1) + '|')\n        print('|' +'' * (lines - 1) + '|')\n        print('|' +'' * (lines - 1) + '|')\n        print('|' +'' * (lines - 1) + '|')\n        print('|' +'' * (lines - 1) + '|')\n        print('|' + '",
        "difficulty": "competition"
    },
    {
        "task_id": 3572,
        "prompt": "Complete the Python function given the prompt below:Luk\u00e1\u0161 really likes orienteering, a sport that requires locating control points in rough terrain. To entertain the NWERC participants Luk\u00e1\u0161 wants to organize an orienteering race. However, it would be too harsh for the participants to be outdoors in this cold Swedish November weather, so he decided to jump on the new trend of indoor races, and set the race inside the B building of Link\u00f6ping University.\nLuk\u00e1\u0161 has already decided on the locations of the control points. He has also decided on the exact length of the race, so the only thing remaining is to decide in which order the control points should be visited such that the length of the total race is as he wishes. Because this is not always possible, he asks you to write a program to help him.\nNote from the organizer: the NWERC indoorienteering race for this year has been cancelled since we neglected to apply for an orienteering permit in time from the university administration. (We still need you to solve the problem so that we can organize it for next year.)\n-----Input-----\nThe input consists of:\n - one line with two integers $n$ ($2\\leq n \\leq 14$) and $L$ ($1 \\leq L \\leq 10^{15}$), the number of control points and the desired length of the race, respectively;\n - $n$ lines with $n$ integers each. The $j$th integer on the $i$th line, $d_{ij}$, denotes the distance between control point $i$ and $j$ ($1\\leq d_{ij} \\leq L$ for $i \\not= j$, and $d_{ii} = 0$). For all $1 \\leq i,j,k \\leq N$ it is the case that $d_{ij} = d_{ji}$ and $d_{ij} \\leq d_{ik} + d_{kj}$.\n-----Output-----\nOutput one line with \u201cpossible\u201d if it is possible to visit all control points once in some order and directly return to the first one such that the total distance is exactly\u00a0$L$, and \u201cimpossible\u201d otherwise.\n-----Examples-----\nSample Input:\n4 10\n0 3 2 1\n3 0 1 3\n2 1 0 2\n1 3 2 0\nSample Output:\npossible\n\ndef",
        "answer": "def dist(a,b):\n    return abs(a[0]-b[0])+abs(a[1]-b[1])",
        "difficulty": "competition"
    },
    {
        "task_id": 3573,
        "prompt": "Complete the Python function given the prompt below:Cesar and Raul like betting and good food, in no particular order. They want to try out a new fancy restaurant and they decided to make a bet \u2013 they are going to play a game and the loser pays for dinner.\nThey have a box with $N$ balls. Each ball contains a distinct number between $1$ and $N$. Then, the game proceeds with these steps:\n - Initially, each person picks $C$ distinct numbers between $1$ and $N$ and writes them down on a separate card.\n - In each round, $D$ balls are drawn from the box uniformly at random. Cesar and Raul mark the ball numbers that appear on their respective card. The $D$ balls are then returned to the box.\n - The game stops when a player has marked all the numbers he chose. That player is the winner. If both players finish at the same time, it is a draw and they will split the dinner.\nThey are quite eager to try out this new restaurant and they\u2019re now wondering: how many rounds will the game last until at least one of the players has marked all his numbers?\n-----Task-----\nGiven the number $N$ of balls, the number $D$ of balls they draw from the box in each round, the amount $C$ of numbers in their cards and the numbers they wrote down, find the expected number of rounds the game will last.\n-----Input-----\nThe first line of the input consists of three space separated integers: $N$, $D$, and $C$. $N$ is the number of balls, $D$ is the number of balls drawn in each round, and $C$ is the cards\u2019 size. Each of the following two lines contains $C$ space separated integers: the numbers Cesar and Raul wrote down, respectively.\n-----Constraints-----\n$1$\n$\\leq $\n$N$\n$\\leq $\n$50$\nNumber of balls in the box\n$1$\n$\\leq $\n$D$\n$\\leq $\n$\\min (10, N)$\nNumber of balls drawn in each round\n$1$\n$\\leq $\n$C$\n$\\leq $\n$\\min (10, N)$\nCards\u2019 sizeOutput\nThe output is the expected number of rounds of the game.\nThe result will be considered correct as long as the absolute error does not exceed $10^{-3}$.\n-----Explanation for Sample Input 1-----\nThere are $2$ balls. Cesar picked number $1$ and Raul picked number $2$. In the first round, either number $1$ or $2$ will be drawn and so one of them wins right away.\n-----Examples-----\nSample Input:\n2 1 1\n1\n2\nSample Output:\n1.00000000\n\ndef",
        "answer": "def game(N, D, C):\n    return N // (C * D)",
        "difficulty": "competition"
    },
    {
        "task_id": 3574,
        "prompt": "Complete the Python function given the prompt below:Young Luka is about to enter a house with the evil witch Marica inside. As soon as he enters the house, she asks him questions about her array of $N$ numbers. Luka fearfully asks for a clarification of the questions. Marica explains to him that each query consists of two integers $L$ and $R$ which represent the positions of a contiguous sub-array in her array.\nIt is Luka\u2019s task to answer for each query what the longest contiguous sub-array of that contiguous sub-array (it can be the entire sub-array) having the property of being magical. An array is called magical if all the values are between the values of the first and last number in that array. For example, $[1\\ 3\\ 1\\ 2\\ 4]$ is magical, the same as $[4\\ 1\\ 1\\ 2\\ 1]$, whereas $[3\\ 3\\ 4\\ 1]$ is not magical.\n-----Input-----\nThe first line of input contains the integer $N$ ($1 \\leq N \\leq 500000$), the number of numbers in the array. The second line contains $N$ integers $a_ i$ ($1 \\leq a_ i \\leq 10^9$). The third line contains the integer $Q$ ($1 \\leq Q \\leq 500000$), the number of queries. Each of the following $Q$ lines contains two integers, $L$ and $R$ ($1 \\leq L \\leq R \\leq N$), representing the sub-array from the query.\n-----Output-----\nThe $i$-th line of output must contain a single integer\u2014the answer to the $i$-th query.\n-----Examples-----\nSample Input:\n5\n5 4 3 3 2\n3\n1 2\n1 1\n2 4\nSample Output:\n2\n1\n3\n\ndef",
        "answer": "def magical_subarray(n, arr, queries):\n    # Write your code here\n    arr.sort()\n    result = []\n    for query in queries:\n        l, r = query\n        result.append(arr[r] - arr[l - 1])\n    return result",
        "difficulty": "competition"
    },
    {
        "task_id": 3575,
        "prompt": "Complete the Python function given the prompt below:MTR (subway) stations are common meetup locations in Hong Kong. Alice and Bob are going to meet up at one of the MTR stations. They each show up at the meeting spot in one of the stations right at noon, without remembering which station they plan to meet at. Having poor cellphone connection at the stations, they fail to contact the other person. Fortunately, they have agreed to look for each other with the following strategy.\nEach station has a unique designated meeting spot. Every minute starting from noon, Alice and Bob look for the other person at the meeting spot of their current stations. If they happen to be at the same station, they can finally meet up. Otherwise, they each takes a train to reach a neighbouring station, uniformly at random from among the neighbouring stations. Upon arrival, they look for the other person at the meeting spot of their current stations. If they still cannot find each other, each of them again takes a train to reach a neighbouring station, uniformly at random. This process goes on until they are at (the meeting spot of) the same station at the same time.\nTrains move very fast, so Alice and Bob will not see each other while on trains running in opposite directions. Suppose it takes exactly one minute to get from the meeting spot of one station to that of a neighbouring station. What is the expected time they will meet?\n-----Input-----\nThe first line of input contains two integers $n$ and $m$. $n$ is the number of MTR stations ($1 \\leq n \\leq 20$, $0 \\leq m \\leq n(n-1)/2$) and $m$ is the number of pairs of stations that are neighbours.\nEach of the following $m$ lines contains two distinct integers, $u$ and $v$ ($0 \\leq u, v < n$, $u \\neq v$), indicating that stations $u$ and $v$ are neighbours. Every unordered pair of neighbours $(u,v)$ will appear at most once in the input.\nThe last line consists of two integers $s$ and $t$ ($0 \\leq s, t < n$), denoting the initial stations of Alice and Bob, respectively.\n-----Output-----\nIf Alice and Bob will never meet, output \u201cnever meet\u201d without the quotes. Otherwise, output a real number indicating the expected time (in minutes past noon) they will meet at the meeting spot of a certain station. Any solution with a relative or absolute error of $10^{-6}$ will be accepted.\n-----Examples-----\nSample Input:\n3 2\n0 1\n1 2\n0 2\nSample Output:\n1\n\ndef",
        "answer": "def MTR(n, m, s, t):\n    if n == 1:\n        return 0\n    if m == 0:\n        return 0\n    if m == 1:\n        return 1\n    if m == n - 1:\n        return 1\n    if m == n:\n        return 1\n    if m == n - 2:\n        return 1\n    if m == n - 3:\n        return 1\n    if m == n - 4:\n        return 1\n    if m == n - 5:\n        return 1\n    if m == n - 6:\n        return 1\n    if m == n - 7:\n        return 1\n    if m == n - 8:\n        return 1\n    if m == n - 9:\n        return 1\n    if m == n - 10:\n        return 1\n    if m == n - 11:\n        return 1\n    if m == n - 12:\n        return 1\n    if m == n - 13:\n        return 1\n    if m == n - 14:\n        return 1\n    if m == n - 15:\n        return 1\n    if m == n - 16:\n        return 1\n    if m == n - 17:\n        return 1\n    if m == n - 18:\n        return 1\n    if m == n - 19:\n        return 1\n    if m == n - 20:\n        return 1\n    if m == n - 21:\n        return 1\n    if m == n - 22:\n        return 1\n    if m == n - 23:\n        return 1\n    if m == n - 24:\n        return 1\n    if m == n - 25:\n        return 1\n    if m == n - 26:\n        return 1\n    if m == n - 27:\n        return 1\n    if m == n - 28:\n        return 1\n    if m == n - 29:\n        return 1\n    if m == n - 30:\n        return 1\n    if m == n - 31:\n        return 1\n    if m == n - 32:\n        return 1\n    if m == n - 33:\n        return 1\n    if m == n - 34:\n        return 1\n    if",
        "difficulty": "competition"
    },
    {
        "task_id": 3576,
        "prompt": "Complete the Python function given the prompt below:\u201cThe power to arrest\u00ad\u2013to deprive a citizen of liberty\u00ad\u2013must be used fairly, responsibly, and without bias.\u201d \u00ad\u2013Loretta Lynch.\nDue to desperation caused by the global financial crisis, you, left with no other options, decided to rob a bank to survive. Unfortunately, while you were able to escape with a small fortune, the city\u2019s police is now out in full force trying to hunt you down.\nThe city can be represented as a grid with $R$ rows and $C$ columns. Each block in the city is represented as a cell in this grid. The city has very strict border controls and has shut down all its borders for $24$ hours after the bank robbery to find and arrest you.\nYou have intercepted the officer\u2019s calls and have discovered that the police force intends to, for the next $24$ hours, search all blocks within $K$ blocks of their current location (that is, all blocks that can be reached by traveling a total of at most $K$ blocks horizontally or vertically). Unfortunately, you don\u2019t know their current location, so you can only assume that they are at some random block, each block with equal probability.\nYou hence also intend to hide at a random location in the city. You will choose a block uniformly at random and hide there, hoping that it is not a block the police will search. Since you have no idea where the police are, this may unfortunately also be a block the police is currently at (and will definitely search).\nYou can assume that, unfortunately, the police are very thorough in their search and they will definitely catch you if they search the block you are in. However, if the $24$ hours elapse without the block you are in being searched, you will surely be able to escape as the borders are reopened.\nWhat is the probability that you will evade capture?\n-----Input-----\nThe first and only line of input contains three integers, $R$, $C$ ($1 \\leq R, C \\leq 10^{11}$) and $K$ ($1 \\leq K \\leq 2\\cdot 10^{11}$), the number of rows in the city, the number of columns in the city and the number of blocks the police will search, respectively.\n-----Output-----\nIt can be shown that the probability of evading capture can be uniquely represented as an irreducible fraction $p/q$.\nOutput a single integer on a line by itself, containing the remainder after dividing $p\\cdot q^{-1}$ by $10^{11}+3$, where $q^{-1}$ denotes the modular multiplicative inverse of $q$ with respect to the modulus $10^{11}+3$.\nThe input will be such that $q^{-1}$ always exists.\n-----Examples-----\nSample Input:\n5 4 2\nSample Output:\n14500000001\n\ndef",
        "answer": "def solve(R, C, K):\n    return (R * C) % (10 ** 11 + 3)",
        "difficulty": "competition"
    },
    {
        "task_id": 3577,
        "prompt": "Complete the Python function given the prompt below:On a faraway planet, strange plants with two stems can be found. Every plant on the planet can be described by three numbers: the $x$-coordinates $L$ and $R$ of the two stems, and the height $H$ at which the stems are connected. The following image depicts a plant with $L=2$, $R=5$ and $H=4$.\nEvery day a new plant grows on the planet. The plant that grows on day $1$ is of height $1$, and every subsequent plant is one higher than the previous one.\nWhen a stem of a new plant intersects the horizontal segment of another plant, a small flower grows (if one was not there already). If segments merely touch in a point, a flower will not grow there.\nThe following images are a visualization of the first sample input. \u2003  \u2003  \u2003 \nWrite a program that, given the coordinates of all plants, calculates the number of new flower every day.\n-----Input-----\nThe first line contains an integer $N$ ($1 \\le N \\le 100000$), the number of days.\nEach of the following $N$ lines contains two integers $L$ and $R$ ($1 \\le L < R \\le 100000$). The $i$\u2019th of these lines describes the coordinates of the plant that grows on day $i$.\n-----Output-----\nOutput $N$ lines, the number of new flowers after each plant grows.\n-----Examples-----\nSample Input:\n4\n1 4\n3 7\n1 6\n2 6\nSample Output:\n0\n1\n1\n2\n\ndef",
        "answer": "def count_flowers(days):\n    flowers = [0] * days\n    for i in range(days):\n        for j in range(i+1, days):\n            if (j-i) % 2 == 0:\n                if (j-i) == 2:\n                    if (j-i) == 2:\n                        if (j-i) == 2:\n                            if (j-i) == 2:\n                                if (j-i) == 2:\n                                    if (j-i) == 2:\n                                        if (j-i) == 2:\n                                            if (j-i) == 2:\n                                                if (j-i) == 2:\n                                                    if (j-i) == 2:\n                                                        if (j-i) == 2:\n                                                            if (j-i) == 2:\n                                                                if (j-i) == 2:\n                                                                    if (j-i) == 2:\n                                                                        if (j-i) == 2:\n                                                                            if (j-i) == 2:\n                                                                                if (j-i) == 2:\n                                                                                    if (j-i) == 2:\n                                                                                        if (j-i) == 2:\n                                                                                            if (j-i) == 2:\n                                                                                                if (j-i) == 2:\n                                                                                                    if (j-i) == 2:\n                                                                                                        if (j-i) == 2:\n                                                                                                            if (j-i) == 2:\n                                                                                                                if (j-i) == 2:\n                                                                                                                    if (j-i) == 2:\n                                                                                                                        if (j-i) == 2:\n                                                                                                                            if (j-i) == 2:\n                                                                                                                                if (j-i) == 2:\n                                                                                                                                    if (j-i) == 2:\n                                                                                                                             ",
        "difficulty": "competition"
    },
    {
        "task_id": 3578,
        "prompt": "Complete the Python function given the prompt below:Note that this is a bit harder version of the problem foodreview.\nFrida is a writer for Cosmopolitan who writes restaurant reviews. She enjoys it a lot, but it seems that, throughout the years, she has reviewed all the restaurants on Earth. It\u2019s now time to move one level up; she is going to review the food served by the airlines, so that the readers can make better decisions on which flights to take.\nHer boss gave her a list of flight connections that she needs to review for the upcoming issue of Cosmopolitan. She knows that they serve the same food in both directions of every flight, so she only needs to take it once. She realized that she will need to take some additional flights, because she can not make all reviews using only flights in the list from her boss. Therefore she did some quick research and made a list of additional flights which she might take. She will not review the food on these flights; they will only be used so that she can make all the reviews.\nFrida\u2019s goal is to make all the reviews while spending the least money on flight tickets. Her office is in Stockholm, so she starts and ends her journey there. Each flight is both ways between two cities and has a fixed price in both directions. You can assume that it is possible to make all the reviews using some of the additional flights.\nFor the purposes of this problem we ignore the price Frida has to pay for accommodation and we also ignore the departure and arrival times of flights by assuming that every flight is very often and reasonably short. We only focus on the total price of the flights.\n-----Input-----\nThe first line contains $2$ space separated integers $N, R, (2\\leq N\\leq 15, 0\\leq R\\leq 105)$, where $N$ is the number of airports mentioned in the input and $R$ is the number of flights to review. The airports are numbered $1, \\dots, N$ and Stockholm has number $1$.\nThe next $R$ lines describe the $R$ flights to review. Each line contains 3 space separated integers $a, b, c, (1\\leq a, b\\leq N, 1\\leq c\\leq 10000)$, where $a, b$ denote 2 distinct airports and $c$ is the cost of the flight in Swedish kronor in both directions. No pair of $2$ cities is listed twice.\nThe next line contains an integer $F$, $(0\\leq F\\leq 250)$, the number of additional flights available. The next $F$ lines contain descriptions of flights in the same format as above. There may be more flights between a pair of cities. You may assume that it is possible to make all the reviews using some of these additional flights.\n-----Output-----\nOutput one line with one integer \u2013 the lowest total cost of flight tickets, such that Frida can make all the reviews and return back to Stockholm.\n-----Examples-----\nSample Input:\n5 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\nSample Output:\n3100\n\ndef",
        "answer": "def get_min_cost(flights, additional_flights):\n    flights_cost = {}\n    for flight in flights:\n        flights_cost[flight] = flights_cost.get(flight, 0) + flight[2]\n    for flight in additional_flights:\n        flights_cost[flight] = flights_cost.get(flight, 0) + flight[2]\n    return min(flights_cost.values())",
        "difficulty": "competition"
    },
    {
        "task_id": 3579,
        "prompt": "Complete the Python function given the prompt below:Statisticians like to create a lot of statistics. One simple measure is the mean value: the sum of all values divided by the number of values. Another is the median: the middle among all values when they have been sorted. If there are an even number of values, the mean of the two middle values will form the median.\nThese kinds of measures can be used for example to describe the population in a country or even some parts of the population in the country. Anne Jensen, Maria Virtanen, Jan Hansen, Erik Johansson and J\u00f3n \u00de\u00f3rsson want to find a statistical measurement of how many statisticians there are in the Nordic countries. To be more precise, they want to find out how many statisticians there are per unit area. As the population in the Nordic countries are well spread out they will try the new measurement MAD, Median of All Densities. First put a square grid on the map. Then draw a rectangle aligned with the grid and calculate the density of statisticians in that area, i.e. the mean number of statisticians per area unit. After that, repeat the procedure until all possible rectangles have been covered. Finally the MAD is the median of all statistician densities.\n-----Input-----\nThe first line of the input contains of two space separated numbers $h$ and $w$ describing the height and width of the square grid, where $1 \\leq h \\leq 140$ and $1 \\leq w \\leq 120$. The next line contains two space separated numbers $a$ and $b$ which are the lower and upper bound of the allowed rectangle areas, i.e. $1 \\leq a \\leq rectangle area \\leq b \\leq w \\times h$. Then there will follow $h$ lines with $w$ space separated numbers $s$ describing the number of statisticians in each square of the map, $0 \\leq s \\leq 10000$. There will always exist a rectangle with an area in $[a,b]$.\n-----Output-----\nThe output contains of one line with the MAD. The number should be printed in number of statisticians per square and have absolute error at most $< 10^{-3}$.\n-----Examples-----\nSample Input:\n4 2\n1 8\n6 5\n2 5\n2 9\n7 13\nSample Output:\n5.250000000\n\ndef",
        "answer": "def get_input():\n    return [int(x) for x in input().split()]",
        "difficulty": "competition"
    },
    {
        "task_id": 3580,
        "prompt": "Complete the Python function given the prompt below:The problem is simple. You are given a long sequence of integers $a_1, a_2, \\ldots, a_ n$. Then you are given a query consisting of a start index $i$ and a subset of integers $B$. What is the longest consecutive subsequence of the given sequence that starts at position $i$ and contains only integers in $B$?\nSimple, right?\n-----Input-----\nThe first line of input contains a single integer $1 \\leq n \\leq 10^5$. The second line contains $n$ integers $a_1, \\ldots, a_ n$. Each integer $a_ j$ lies between 0 and $2^{31}-1$.\nThe third line contains a single integer $q \\geq 1$ indicating the number of queries to process. Then $q$ lines follow, each starting with two integers $1 \\leq i \\leq n$ and $1 \\leq m \\leq 10^5$, followed by $m$ distinct integers $b_1, \\ldots, b_ m$. Each integer $b_ j$ lies between 0 and $2^{31}-1$.\nFinally, you are guaranteed the sum of all values $m$ over all queries is at most $10^5$.\n-----Output-----\nFor each query, output a single line with the length of the longest prefix of $a_ i, a_{i+1}, \\ldots, a_ n$ that only contains integers from $B$.\n-----Examples-----\nSample Input:\n7\n1 2 3 1 2 1 1\n5\n1 3 1 2 3\n1 2 1 2\n2 2 2 3\n3 2 1 2\n4 2 1 2\nSample Output:\n7\n2\n2\n0\n4\n\ndef",
        "answer": "def longest_subsequence(n, a, q):\n    # Write your code here\n    # a = [1, 2, 3, 1, 2, 1, 1]\n    # q = [1, 3, 1, 2, 3]\n    # n = 7\n    # a = [1, 2, 3, 1, 2, 1, 1]\n    # q = [1, 3, 1, 2, 3]\n    # n = 7\n    # a = [1, 2, 3, 1, 2, 1, 1]\n    # q = [1, 3, 1, 2, 3]\n    # n = 7\n    # a = [1, 2, 3, 1, 2, 1, 1]\n    # q = [1, 3, 1, 2, 3]\n    # n = 7\n    # a = [1, 2, 3, 1, 2, 1, 1]\n    # q = [1, 3, 1, 2, 3]\n    # n = 7\n    # a = [1, 2, 3, 1, 2, 1, 1]\n    # q = [1, 3, 1, 2, 3]\n    # n = 7\n    # a = [1, 2, 3, 1, 2, 1, 1]\n    # q = [1, 3, 1, 2, 3]\n    # n = 7\n    # a = [1, 2, 3, 1, 2, 1, 1]\n    # q = [1, 3, 1, 2, 3]\n    # n = 7\n    # a = [1, 2, 3, 1, 2, 1, 1]\n    # q = [1, 3, 1, 2, 3]\n    # n = 7\n    # a = [1, 2, 3, 1, 2, 1, 1]\n    # q = [1, 3, 1, 2, 3]\n    # n = 7\n    # a = [1, 2, 3, 1, 2, 1, 1]\n    # q = [1, 3, 1, 2, 3]\n    # n = 7\n    # a = [1, 2, 3, 1, 2, 1, 1]",
        "difficulty": "competition"
    },
    {
        "task_id": 3581,
        "prompt": "Complete the Python function given the prompt below:Have you recently visited an arcade? Arcade games seem to have become more boring over the years, requiring less and less skill. In fact, most arcade games these days seem to depend entirely on luck. Consider the arcade game shown in the picture, which consists of different holes arranged in a triangular shape. A ball is dropped near the hole at the top. The ball either falls into the hole, in which case the game ends, or it bounces to one of its (up to) $4$ neighbors, denoted by the red arrows. Different holes have different payouts \u2014 some may even be negative! If the ball reaches another hole, the process repeats: the ball either falls into the hole, ending the game \u2014 or it bounces to one of its neighbors, possibly ad infinitum! \nWrite a program that computes the expected payout when dropping a ball into the machine!\n-----Input-----\nThe input consists of a single test case. The first line contains an integer $N$ ($1 \\le N \\le 32$) describing the number of rows of the arcade machine. The second line contains $H = N (N+1) / 2$ integers $v_ i$ ($-100 \\le v_ i \\le 100$) describing the payout (positive or negative) if the ball drops into hole $i$. Holes are numbered such that hole $1$ is in the first row, holes $2$ and $3$ are in the second row, etc. The $k^{\\textrm{th}}$ row starts with hole number $k (k-1) / 2 + 1$ and contains exactly $k$ holes.\nThese two lines are followed by $H$ lines, each of which contains $5$ real numbers $p_0 \\ p_1 \\ p_2 \\ p_3 \\ p_4$, denoting the probability that the ball bounces to its top-left ($p_0$), top-right ($p_1$), bottom-left ($p_2$), or bottom-right ($p_3$) neighbors or that the ball enters the hole ($p_4$). Each probability is given with at most $3$ decimal digits after the period. It is guaranteed that $0.0 \\le p_ i \\le 1.0$ and $\\sum p_ i = 1.0$. If a hole does not have certain neighbors because it is located near the boundary of the arcade machine, the probability of bouncing to these non-existent neighbors is always zero. For instance, for hole number $1$, the probabilities to jump to the top-left and top-right neighbors are both given as $0.0$.\nYou can assume that after the ball has bounced $b$ times, the probability that it has not fallen into a hole is at most $(1 - 10^{-3})^{\\lfloor b/H \\rfloor }$.\n-----Output-----\nOutput a single number, the expected value from playing one game. Your answer is considered correct if its absolute or relative error is less than $10^{-4}$.\nHint: Using Monte Carlo-style simulation (throwing many balls in the machine and simulating which hole they fall into using randomly generated choices) does not yield the required accuracy!\n-----Examples-----\nSample Input:\n4\n40 30 30 40 20 40 50 30 30 50\n0.0 0.0 0.45 0.45 0.1\n0.0 0.3 0.3 0.3 0.1\n0.3 0.0 0.3 0.3 0.1\n0.0 0.3 0.3 0.3 0.1\n0.2 0.2 0.2 0.2 0.2\n0.3 0.0 0.3 0.3 0.1\n0.0 0.8 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.2\n0.8 0.0 0.0 0.0 0.2\nSample Output:\n32.6405451448\n\ndef",
        "answer": "def expected_payout(N, H, v):\n    # N = number of rows\n    # H = number of holes\n    # v = list of payouts for each hole\n    # v[i] = payout for hole i\n    # v[i] = payout for hole i\n    # v[i] = payout for hole i\n    # v[i] = payout for hole i\n    # v[i] = payout for hole i\n    # v[i] = payout for hole i\n    # v[i] = payout for hole i\n    # v[i] = payout for hole i\n    # v[i] = payout for hole i\n    # v[i] = payout for hole i\n    # v[i] = payout for hole i\n    # v[i] = payout for hole i\n    # v[i] = payout for hole i\n    # v[i] = payout for hole i\n    # v[i] = payout for hole i\n    # v[i] = payout for hole i\n    # v[i] = payout for hole i\n    # v[i] = payout for hole i\n    # v[i] = payout for hole i\n    # v[i] = payout for hole i\n    # v[i] = payout for hole i\n    # v[i] = payout for hole i\n    # v[i] = payout for hole i\n    # v[i] = payout for hole i\n    # v[i] = payout for hole i\n    # v[i] = payout for hole i\n    # v[i] = payout for hole i\n    # v[i] = payout for hole i\n    # v[i] = payout for hole i\n    # v[i] = payout for hole i\n    # v[i] = payout for hole i\n    # v[i] = payout for hole i\n    # v[i] = payout for hole i\n    # v[i] = payout for hole i\n    # v[i] = payout for hole i\n    # v[i] = payout for hole i\n    # v[i] = payout for hole i\n    # v[i] = payout for hole i\n    # v[",
        "difficulty": "competition"
    },
    {
        "task_id": 3582,
        "prompt": "Complete the Python function given the prompt below:At the new start-up company Gaggle, we have rejected the oppressive corporate structures of old, with all of their managers and subordinates and hierarchies and so on. Instead we have embraced a free and open corporate culture in which all employees (called Gagglers) are in charge of themselves and allowed to roam free. \nRather than having managers overseeing the work, the main method used to coordinate work at Gaggle is a mentor system: each Gaggler designates some other Gaggler as their mentor, with whom they discuss their ongoing projects. This mentor relation may or may not be symmetric (in other words you may or may not be the mentor of your mentor) but you can never be the mentor of yourself.\nInitially, all Gagglers were able to pick anyone they liked as their mentor, but after a while it was discovered that this lead to two problems:\n - Some people were more popular than others and had too many choosing them as their mentor, causing them not to have time to do their actual work.\n - Some flocks of Gagglers ended up isolated from the rest of the company (e.g.,\u00a0if Gagglers $A$ and $B$ are each other\u2019s mentors and they are not the mentor of anyone else), causing failure of these flocks to coordinate with the rest of the company.\nIn order to remedy these two flaws, it was (collectively) decided that:\n - Every Gaggler must be the mentor of exactly one other Gaggler, and\n - Assuming every Gaggler only communicates with their mentor and their mentee, it must still be possible for any information that any Gaggler has to reach any other Gaggler.\nIn order to reward lower-numbered (more senior) Gagglers while introducing this new policy, it was decided that lower-numbered Gagglers should get to keep their current mentor if possible, and if they have to change, their new mentor should be as low-numbered (more senior, and therefore more experienced) as possible.\nConcretely, consider two possible new assignments of mentors, and suppose the lowest-numbered Gaggler where these assignments differ is Gaggler number $i$. Then if one of the two assignments assigns Gaggler $i$ the same mentor as they originally had, we prefer that assignment. Otherwise, if Gaggler $i$ gets a new mentor in both of the two assignments, then we prefer the assignment where the number of the new mentor of Gaggler $i$ is smaller.\nFor example, consider Sample Input 2 below. One possible new assignment of mentors would be to simply change so that Gaggler $1$ becomes mentored by Gaggler $2$. However, in the best assignment, shown in Sample Output 2, we let Gaggler $1$ keep their current mentor and instead change the mentors of both Gagglers $2$ and $3$.\n-----Input-----\nThe first line of input contains a single integer $n$ ($2 \\le n \\le 500000$), the number of Gagglers. Then follows a line containing $n$ integers $a_1, a_2, \\ldots, a_ n$ ($1 \\le a_ i \\le n$ and $a_ i \\ne i$ for each $i$) where $a_ i$ is the current mentor of Gaggler $i$ (the Gagglers are numbered from $1$ to $n$).\n-----Output-----\nThen output a line with the new assignment $b_1, \\ldots, b_ n$ of mentors, in the same format as in the input. The new list should be a valid assignment according to the new requirements, and be the best according to the tie-breaking rule described above.\n-----Examples-----\nSample Input:\n4\n2 1 4 3\nSample Output:\n2 3 4 1\n\ndef",
        "answer": "def gaggle(n, a):\n    b = [0] * n\n    for i in range(n):\n        b[i] = a[i]\n    for i in range(n):\n        for j in range(n):\n            if a[i] == a[j] and i!= j:\n                b[i] = a[j]\n    return b",
        "difficulty": "competition"
    },
    {
        "task_id": 3583,
        "prompt": "Complete the Python function given the prompt below:Near the great desert of Byteland lies a technologically advanced kingdom of hamsters. In the year 2020, to protect better their territories, the hamsters have decided to build a great wall surrounding crucial parts of their kingdom.\nThe kingdom of hamsters is represented by a convex polygon with $n$ vertices. Vertices are numbered from $1$ to $n$, either in clockwise or counter-clockwise order. The $i$-th vertex\u2019s coordinate is $(x_ i, y_ i)$. The hamsters want to choose $6$ unique vertices (among the $n$ vertices) and build a convex hexagonal wall connecting these $6$ vertices. Furthermore, the hamsters want their wall to be as long as possible. In other words, the hexagonal wall should have largest circumference.\nThe hamsters want to know, for each vertex of their kingdom, if they choose this vertex as one of the vertices of the hexagonal wall (along with $5$ other vertices), what is the longest wall they can build?\nEven though the hamsters are technologically advanced, their computers crashed when they executed a brute force code for this problem. Please help them!\n-----Input-----\n - The first line of the input contains a single integer $n$ $(6 \\le n \\le 2000)$.\n - In the next $n$ lines, the $i$-th line contains two integers $x_ i$ and $y_ i$$(-10^9 \\leq x_ i, y_ i \\leq 10^9)$.\n-----Output-----\nPrint exactly $n$ lines, the $i$-th line contains the maximum circumference of the convex hexagonal wall, such that the hexagon has the $i$-th vertex.\nYour answer will be considered correct if its relative or absolute error doesn\u2019t exceed $10^{-3}$.\nNamely: let\u2019s assume that your answer is $a$, and the answer of the jury is $b$. The checker program will consider your answer correct, if $\\frac{|a-b|}{max(1,b)} \\leq 10^{-3}$.\n-----Explanation of the sample input-----\nThe left figure shows the first sample. There is only one way to create a convex hexagon. Its circumference is $2 + 4 \\cdot \\sqrt{2}$.\nThe right figure shows the second sample. The hexagon with the maximum circumference containing the first vertex is shown below. Its circumference is $6 + 2 \\cdot \\sqrt{29} + 4 \\cdot \\sqrt{2}$. Due to the symmetry of the polygon, the hexagons with the maximum circumference containing other vertices should have the same result.\n-----Examples-----\nSample Input:\n6\n1 2\n1 3\n2 4\n3 3\n3 2\n2 1\nSample Output:\n7.656854249492381\n7.656854249492381\n7.656854249492381\n7.656854249492381\n7.656854249492381\n7.656854249492381\n\ndef",
        "answer": "def polygon_circumference(vertices):\n    vertices.sort()\n    vertices.append(vertices[0])\n    return sum(vertices[i] + vertices[i+1] for i in range(len(vertices)-1))",
        "difficulty": "competition"
    },
    {
        "task_id": 3584,
        "prompt": "Complete the Python function given the prompt below:Note that this is an easier version of the problem fancy\nOskar really loves onions. Unfortunately, the onions he loves belong to the local vegetable farmer, L\u00f6kas Tomatcek. Since Oskar is very cheap, he simply steals L\u00f6kas\u2019 onions from the large, convex, onion field. For obvious reasons, L\u00f6kas does not approve of this. Rather than going to the police, however, L\u00f6kas wants to raise a high-energy laser fence around the onions to replace his wooden fence.\nAs laser fences are rather expensive, L\u00f6kas can only afford to upgrade $K$ of the fence posts to laser fence posts. If a set of posts are upgraded, the lasers will protect all the onions lying strictly within the convex hull of the selected fence posts. This may not be all of the onions though. L\u00f6kas wonders which posts he should upgrade if he wants to protect as many of his $N$ onions as possible.\nThe original fence has the shape of a convex polygon with $M$ fence posts as vertices, and all the onions lie strictly within the fence.\n-----Input-----\nThe first line of input consists of three space-separated integers $3 \\le N \\le 1000$, $3 \\le M \\le 100$ and $3 \\le K \\le 100$. These are the number of onions, the number of old fence posts, and the number of fence posts L\u00f6kas can upgrade.\nThen follow $N$ lines with two space-separated integers $0 \\le X_ i, Y_ i \\le 10^9$ each. $(X_ i, Y_ i)$ gives the coordinate of the $i$-th onion.\nThen follow $M$ lines with two space-separated integers $0 \\le A_ i, B_ i \\le 10^9$ each. $(A_ i, B_ i)$ gives the coordinate of the $i$-th fence post.\nThe fence posts will be given in clockwise order of the old fence. No three fence posts will lie on a line.\n-----Output-----\nOutput should be a single integer; the maximum number of onions L\u00f6kas can protect.\n-----Examples-----\nSample Input:\n3 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\nSample Output:\n2\n\ndef",
        "answer": "def convex_hull(points):\n    # sort the points lexicographically\n    points = sorted(points)\n    # build upper hull\n    upper = []\n    for p in points:\n        while len(upper) >= 2 and cross_product(upper[-2], upper[-1], p) <= 0:\n            upper.pop()\n        upper.append(p)\n    # build lower hull\n    lower = []\n    for p in reversed(points):\n        while len(lower) >= 2 and cross_product(lower[-2], lower[-1], p) <= 0:\n            lower.pop()\n        lower.append(p)\n    # remove duplicates\n    return list(set(upper + lower))",
        "difficulty": "competition"
    },
    {
        "task_id": 3585,
        "prompt": "Complete the Python function given the prompt below:You have some bags of coins. Each bag contains exactly $k$ coins. Exactly one bag contains only counterfeit coins (we\u2019ll call this the fake bag), while all other bags contain only real coins. All real coins weigh exactly the same number of grams. All counterfeit coins weigh exactly the same number of grams. You don\u2019t know the exact weights of a real or counterfeit coin. You do know a counterfeit coin is strictly heavier than a real coin, but you do not know exactly how much heavier it is. The weights of the coins are positive real numbers.\nYou have a scale which you can use at most $m$ times. The scale has a left and right side. To use the scale, you can place any number of coins, taken from any of the bags, on each side of the scale, as long as the total number of coins on the left and right sides are exactly equal. The scale will return a single real number $s$. If $s$ is zero, both sides of the scale weigh exactly the same. If $s$ is negative, the left side is $|s|$ grams heavier than the right side. If $s$ is positive, the right side is $s$ grams heavier than the left side. Coins can be reused multiple times for different weighings, and you are able to keep track of which bag each coin came from. You must specify beforehand all weighings you want to perform (so you cannot adjust what gets weighed in future trials based on the results of previous trials). After using the scale $m$ times, you would like to be able to determine which bag is the fake bag.\nYou are now wondering: given $m$ and $k$, what is the maximum number of bags for which you can always determine the fake bag? This number can get large, so output it modulo the large prime $998244353$.\n-----Input-----\nThe single line of input contains two space-separated integers $m$ and $k$ ($1 \\leq m, k \\leq 10^6$), where $m$ is the number of weighings available to you and $k$ is the number of coins in each bag.\n-----Output-----\nOutput a single integer, which is the maximum number of bags for which you can determine the fake bag in $m$ weighings, modulo the large prime $998244353$.\n\n-----Sample Explanation-----\nOne way we can use $2$ weighings to determine the fake bag among $9$ bags, each containing $1$ coin, is as follows:\n - On the first weighing, put the coins from bags $1,2,3$ on the left, and the coins from bags $7,8,9$ on the right.\n - On the second weighing, put the coins from bags $1,4,7$ on the left, and the coins from bags $3,6,9$ on the right.\nWe can determine the fake bag as follows:\n - The first weighing tells us which group of bags $(1,2,3)$, $(4,5,6)$, $(7,8,9)$ contains the fake bag (e.g. if the left side is heavier, then group $(1,2,3)$ contains the fake bag, if both sides are equal, then group $(4,5,6)$ contains the fake bag, otherwise group $(7,8,9)$ contains the fake bag).\n - The second weighing will tell us which group of bags $(1,4,7)$, $(2,5,8)$, $(3,6,9)$ contains the fake bag. The resulting fake bag can be uniquely determined as a result.\n-----Examples-----\nSample Input:\n2 1\nSample Output:\n9\n\ndef",
        "answer": "def max_bags(m, k):\n    return (m * k) % 998244353",
        "difficulty": "competition"
    },
    {
        "task_id": 3586,
        "prompt": "Complete the Python function given the prompt below:Given $S$, a set of integers, find the largest $d$ such that $a + b + c = d$ where $a, b, c$ and $d$ are distinct elements of $S$.\n-----Input-----\nThe input starts with an integer $1 \\le N \\le 4000$, the number of elements in $S$. It is followed by $N$ lines containing the elements of $s$, one per line. Each element of $S$ is a distinct integer between $-536870912$ and $+536870911$, inclusive.\n-----Output-----\nOutput a single line containing the maximum $d$ as described in the statement. If no such $d$ exists, output a single line containing no solution.\n-----Examples-----\nSample Input:\n5\n2\n3\n5\n7\n12\nSample Output:\n12\n\ndef",
        "answer": "def largest_sum(S):\n    S.sort()\n    for i in range(len(S)):\n        for j in range(i+1, len(S)):\n            for k in range(j+1, len(S)):\n                if S[i] + S[j] + S[k] == 0:\n                    return S[i] + S[j] + S[k]\n    return 0",
        "difficulty": "competition"
    },
    {
        "task_id": 3587,
        "prompt": "Complete the Python function given the prompt below:Taboo is a popular party game. In this game one player, the Clue Giver, prompts his/her teammates to guess a keyword by giving clues. The Clue Giver is also given a list of taboo strings that must not appear in the clues. For example, if the keyword is \u201cBruce Lee\u201d, the famous kung-fu star, then the taboo strings may be \u201cactor\u201d, \u201ckung-fu\u201d, \u201cfighting\u201d, \u201cmartial arts\u201d and \u201cThe Game of Death\u201d (Bruce Lee\u2019s final film). The Clue Giver may try such clues as \u201cFist of Fury star\u201d and \u201cJeet Kune Do master\u201d to avoid the taboo. Taboo strings bring challenges and fun to the guessing game.\nShort clues are preferred, but now you are interested in the opposite: what is the longest clue? Given $N$ taboo strings $s_1, \\dots, s_ N$, what is the longest clue string $s$ such that none of $s_1, \\dots, s_ N$ appears as a substring of $s$? For simplicity, all taboo strings and your clue are represented as binary strings consisting only of 0\u2019s and 1\u2019s.\n-----Input-----\nThe first line contains an integer, $N$, the number of taboo strings ($1 \\leq N \\leq 15000$). The following $N$ lines each contains a non-empty binary string $s_ i$, for $1 \\leq i \\leq N$. The sum of lengths of $s_1, \\dots, s_ N$ will be at most $200000$.\n-----Output-----\nIf your clue can be arbitrarily long, output -1. Otherwise, output a line containing the longest binary string that does not contain $s_1, \\dots, s_ N$ as a substring. If there is more than one such longest string, output the one that is also smallest in lexicographic order.\n-----Examples-----\nSample Input:\n5\n00\n01\n10\n110\n111\nSample Output:\n11\n\ndef",
        "answer": "def taboo(s):\n    n = len(s)\n    if n == 1:\n        return 0\n    if n == 2:\n        if s[0] == s[1]:\n            return 1\n        else:\n            return 0\n    if n == 3:\n        if s[0] == s[1] or s[0] == s[2] or s[1] == s[2]:\n            return 1\n        else:\n            return 0\n    if n == 4:\n        if s[0] == s[1] or s[0] == s[2] or s[0] == s[3] or s[1] == s[2] or s[1] == s[3] or s[2] == s[3]:\n            return 1\n        else:\n            return 0\n    if n == 5:\n        if s[0] == s[1] or s[0] == s[2] or s[0] == s[3] or s[0] == s[4] or s[1] == s[2] or s[1] == s[3] or s[1] == s[4] or s[2] == s[3] or s[2] == s[4] or s[3] == s[4]:\n            return 1\n        else:\n            return 0\n    if n == 6:\n        if s[0] == s[1] or s[0] == s[2] or s[0] == s[3] or s[0] == s[4] or s[0] == s[5] or s[1] == s[2] or s[1] == s[3] or s[1] == s[4] or s[1] == s[5] or s[2] == s[3] or s[2] == s[4] or s[2] == s[5] or s[3] == s[4] or s[3] == s[5] or s[4] == s[5]:\n            return 1\n        else:\n            return 0\n    if n == 7:\n        if s[0] == s[1] or s[",
        "difficulty": "competition"
    },
    {
        "task_id": 3588,
        "prompt": "Complete the Python function given the prompt below:You are an experienced investor who is investing in multiple companies. At the end of the year you are expected to file your taxes, which requires you to track and report the total number of shares you held during any of your trading days during the year.\nThe records you have kept are sorted by company: for each company, you have a list of notes stating how many shares of that company you owned on a given day.\nYour tax accountant has asked you to produce a list of the total number of shares across all companies you have held on each of the days on which you have traded and recorded your holdings.\n-----Input-----\nThe first line of input contains an integer $C$ ($1 \\le C \\le 20$), the total number of companies of which you hold shares. Next will be $C$ blocks of records, one for each company.\nEach record block starts with an integer $K$ ($1 \\le K \\le 50$), which is the number of records you have kept for this company. This is followed by $K$ lines of input, each containing two integers $N$ ($1 \\le N \\le 1000$) and $D$ ($1 \\le D \\le 365$), denoting that you held $N$ shares of this company on day $D$. The days in the input may be specified in any order.\n-----Output-----\nPrint, on a single line, for each day for which you have at least one record, the total number of shares held on that day. The share totals shall be printed in increasing order of trading days.\n-----Examples-----\nSample Input:\n3\n2\n20 100\n100 10\n1\n150 50\n1\n150 100\nSample Output:\n100 250 320\n\ndef",
        "answer": "def get_shares(companies):\n    shares = []\n    for company in companies:\n        shares.append(sum(company[1:]))\n    return shares",
        "difficulty": "competition"
    },
    {
        "task_id": 3589,
        "prompt": "Complete the Python function given the prompt below:Nikolaj works at a company that sells a large number of products. Each product has a product ID, which is a large integer. For error detection, in particular in connection with manual database entry, it would be useful if each product also had a single \u201ccheck\u201d digit between $1$ and $9$ that can be quickly computed from the product ID. Nikolaj has been tasked with implementing this. He recently solved the problem \u201cDigit Product\u201d on Open Kattis and considers using the procedure described there.\nHe recalls that the idea is to start with a positive integer $x$ and repeatedly multiply all its nonzero digits, until only a single digit is left. For instance, if $x$ is $808$ then the resulting digit is $8$, because $8 \\cdot 8 = 64$, $6 \\cdot 4 = 24$, and $2 \\cdot 4 = 8$.\nHowever, Nikolaj is unsure about using this method, because the distribution of resulting digits seems uneven to him. To determine how the distribution looks, he writes a program that given two integers $L$ and $R$ determines how many numbers in the interval $[L, R]$ result in each digit.\n-----Input-----\nA single line consisting of two integers $L$ and $R$ with $1 \\leq L \\leq R \\leq 10^{15}$.\n-----Output-----\nPrint $9$ integers $a_1, a_2, \\ldots, a_9$ on a single line. The $i$th number $a_ i$ is the number of integers $x$ satisfying $L \\leq x \\leq R$ such that repeated multiplication of the nonzero digits of $x$ results in the digit $i$.\n-----Examples-----\nSample Input:\n50 100\nSample Output:\n3 7 4 6 5 7 2 15 2\n\ndef",
        "answer": "def digit_product(l, r):\n    count = [0] * 10\n    for i in range(l, r + 1):\n        product = 1\n        for j in str(i):\n            product *= int(j)\n        count[product % 10] += 1\n    return count",
        "difficulty": "competition"
    },
    {
        "task_id": 3590,
        "prompt": "Complete the Python function given the prompt below:You are given two convex polygons $A$ and $B$. It is guaranteed that $B$ is strictly contained inside of $A$.\nYou would like to make a sequence of cuts to cut out $B$ from $A$. To do this, you draw a straight line completely through $A$ that is incident to one of the edges of $B$, which separates $A$ into two pieces. You cut along this line and discard the piece that doesn\u2019t contain $B$. You repeat this until the piece that you have left is exactly B.\nThe cost of making a cut is equal to the length of the cut (i.e. the length of the line through the remainder of $A$). Given $A$ and $B$, find the minimum cost needed to cut $B$ out.\n-----Input-----\nEach input will consist of a single test case. Note that your program may be run multiple times on different inputs. Each test case will begin with a line containing a single integer $a$ ($3 \\le a \\le 200$), which is the number of points in polygon $A$. Each of the next $a$ lines will contain two integers $x$ and $y$ ($-10^6 \\le x,y \\le 10^6$), which are the vertices of polygon $A$, in clockwise order. It is guaranteed that polygon $A$ will be convex.\nThe next line will contain a single integer $b$ ($3 \\le b \\le 200$), which is the number of points in polygon $B$. Each of the next $b$ lines will contain two integers $x$ and $y$ ($-10^6 < x,y < 10^6$), which are the vertices of polygon $B$, in clockwise order. It is guaranteed that polygon $B$ will be convex. It is also guaranteed that polygon $B$ will reside entirely within the interior of polygon $A$.\nNo three points, within a polygon or across polygons, will be collinear.\n-----Output-----\nOutput a single floating point number, which is the minimum cost to cut $B$ out of $A$. To be considered correct, this number must be within a relative error of $10^{-6}$ of the judges\u2019 answer.\n-----Examples-----\nSample Input:\n4\n0 0\n0 14\n15 14\n15 0\n4\n8 3\n4 6\n7 10\n11 7\nSample Output:\n40.0000000000\n\ndef",
        "answer": "def min_cut(A, B):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3591,
        "prompt": "Complete the Python function given the prompt below:You are looking for a particular family photo with you and your favorite relatives Alice and Bob. Each family photo contains a line-up of $n$ people. On the photo you\u2019re looking for, you remember that Alice, who is taller than you, was somewhere on your left from the perspective of the photographer. Also, Bob who is taller than both you and Alice, was standing somewhere on your right.\nSince you have a large number of family photos, you want to use your computer to assist in finding the photo. Many of the photos are quite blurry, so facial recognition has proven ineffective. Luckily, the Batch Apex Photo Classifier, which detects each person in a photo and outputs the sequence of their (distinct) heights in pixels, has produced excellent results. Given this sequence of heights for $k$ photos, determine which of these photos could potentially be the photo you\u2019re looking for.\n-----Input-----\n - The first line contains $1\\leq k\\leq 1000$, the number of photos you have to process.\n - Then follow two lines for each photo.\n - The first line contains a single integer $3 \\leq n \\leq 3\\cdot 10^5$, the number of people on this photo.\n - The second line contains $n$ distinct integers $1\\leq h_1, \\dots, h_ n \\leq 10^9$, the heights of the people in the photo, from left to right.\nIt is guaranteed that the total number of people in all photos is at most $3\\cdot 10^5$.\n-----Output-----\n - On the first line, output the number of photos $k$ that need further investigation.\n - Then print $k$ lines each containing a single integer $1\\leq a_ i \\leq n$, the sorted indices of the photos you need to look at.\n-----Examples-----\nSample Input:\n1\n3\n2 1 3\nSample Output:\n1\n1\n\ndef",
        "answer": "def find_photo(n, heights):\n    heights.sort()\n    for i in range(n):\n        if heights[i] > heights[i+1]:\n            return i+1\n    return n+1",
        "difficulty": "competition"
    },
    {
        "task_id": 3592,
        "prompt": "Complete the Python function given the prompt below:Peter is co-owner of the incredibly successful Pete and Pat\u2019s Pitas and Pizzas and his sales are on fire! But unfortunately, so is his building, due to carelessly laid delivery boxes placed too close to Pete\u2019s famous wood burning pizza oven. After sifting though the remnants, one of the few things Pete is able to salvage is a ledger book, but the only thing he can make out on the charred pages is the profit he made during the last month. The insurance company would like to know how many pitas and how many pizzas Pete actually delivered over that period. Pete does recall how much profit he makes on each of these products, so he\u2019s pretty confident that he can determine how many of each were sold during the last month given the total profit. Well perhaps \u201cconfident\u201d is not the exact word Peter is looking for \u2013 it\u2019s more like clueless. Can you help Pete out? I\u2019m sure there are some discount coupons in it for you, or at least a really cheap price on a used pizza oven.\n-----Input-----\nInput consists of a single line containing $3$ values $p_ t$ $p_1$ $p_2$, where $0 \\leq p_ t \\leq 10000.00$ is the profit for the month and $0 < p_1, p_2 \\leq 100.00$ are the profits Pete makes on a pita ($p_1$) and on a pizza ($p_2$). All values are in dollars and cents.\n-----Output-----\nDisplay two integers: the number of pitas sold and the number of pizzas sold so that the total profit equals the value given. If there is more than one combination of pitas and pizzas that give the specified profit, list them all, one combination per line, listing the combination with the smallest number of pitas first, then the combination with the second smallest number of pitas, and so on. If there are no combinations of pizza and pita sales that realize the profit, output none.\n-----Examples-----\nSample Input:\n725.85 1.71 2.38\nSample Output:\n199 162\n\ndef",
        "answer": "def pitas_pizzas(p):\n    p1 = p[0]\n    p2 = p[1]\n    p3 = p[2]\n    p4 = p[3]\n    p5 = p[4]\n    p6 = p[5]\n    p7 = p[6]\n    p8 = p[7]\n    p9 = p[8]\n    p10 = p[9]\n    p11 = p[10]\n    p12 = p[11]\n    p13 = p[12]\n    p14 = p[13]\n    p15 = p[14]\n    p16 = p[15]\n    p17 = p[16]\n    p18 = p[17]\n    p19 = p[18]\n    p20 = p[19]\n    p21 = p[20]\n    p22 = p[21]\n    p23 = p[22]\n    p24 = p[23]\n    p25 = p[24]\n    p26 = p[25]\n    p27 = p[26]\n    p28 = p[27]\n    p29 = p[28]\n    p30 = p[29]\n    p31 = p[30]\n    p32 = p[31]\n    p33 = p[32]\n    p34 = p[33]\n    p35 = p[34]\n    p36 = p[35]\n    p37 = p[36]\n    p38 = p[37]\n    p39 = p[38]\n    p40 = p[39]\n    p41 = p[40]\n    p42 = p[41]\n    p43 = p[42]\n    p44 = p[43]\n    p45 = p[44]\n    p46 = p[45]\n    p47 = p[46]\n    p48 = p[47]\n    p49 = p[48]\n    p50 = p[49]\n    p51 = p[50]\n    p52 = p[51]\n    p53 = p[52]\n    p54 = p[53]\n    p55 =",
        "difficulty": "competition"
    },
    {
        "task_id": 3593,
        "prompt": "Complete the Python function given the prompt below:Mirko has a chessboard with $N$ rows and just three columns. Slavica has written an integer on each field. Mirko has $K$ dominoes at his disposal, their dimensions being $2 \\times 1$, and has to arrange all of them on the board without overlapping, in a way that each domino covers exactly two fields of the board. He can rotate the dominoes as he please\nHelp Mirko cover the largest sum of numbers possible with the dominoes!\n-----Input-----\nThe first line of input contains the integer $N$ ($1 \\le N \\le 1000$), the number of rows, and $K$ ($1 \\le K \\le 1000$), the number of dominoes available.\nEach of the following $N$ lines contains three integers written in the $i$\u2019th row of the board. All numbers will be less than $10^6$ in absolute value.\n-----Output-----\nThe first and only line of output must contain the maximal sum possible to cover with exactly $K$ dominoes.\n-----Examples-----\nSample Input:\n5 3\n2 1 -1\n1 3 2\n0 2 3\n2 1 1\n3 3 0\nSample Output:\n16\n\ndef",
        "answer": "def chessboard(n, k):\n    if k == 1:\n        return n * (n + 1) // 2\n    if k == 2:\n        return n * (n + 1) * (n + 2) // 6\n    if k == 3:\n        return n * (n + 1) * (n + 2) * (n + 3) // 24\n    if k == 4:\n        return n * (n + 1) * (n + 2) * (n + 3) * (n + 4) // 120\n    if k == 5:\n        return n * (n + 1) * (n + 2) * (n + 3) * (n + 4) * (n + 5) // 720\n    if k == 6:\n        return n * (n + 1) * (n + 2) * (n + 3) * (n + 4) * (n + 5) * (n + 6) // 5040\n    if k == 7:\n        return n * (n + 1) * (n + 2) * (n + 3) * (n + 4) * (n + 5) * (n + 6) * (n + 7) // 40320\n    if k == 8:\n        return n * (n + 1) * (n + 2) * (n + 3) * (n + 4) * (n + 5) * (n + 6) * (n + 7) * (n + 8) // 362880\n    if k == 9:\n        return n * (n + 1) * (n + 2) * (n + 3) * (n + 4) * (n + 5) * (n + 6) * (n + 7) * (n + 8) * (n + 9) // 3628800\n    if k == 10:\n        return n * (n + 1) * (n + 2) * (n + 3) * (n + 4) * (n + 5) * (n + 6) * (n + 7) * (n + 8) * (n + 9) * (n + 10) // 39916800\n    if k == 11:\n        return n * (n + 1) * (n + 2) * (",
        "difficulty": "competition"
    },
    {
        "task_id": 3594,
        "prompt": "Complete the Python function given the prompt below:Odd and Even have had their share of fun times playing the good old prime game:\nThey start with an arbitrary natural number, and take turns either adding $1$ or dividing by a prime (assuming the result is still a natural number), and the one to reach $1$ is the winner. However, now that they have a new friend, Ingmariay, they have decided to expand the rules of the game to allow for three-player action:\nInstead of determining a winner for each round of play, they instead score points; the lowest number each of them has claimed during the round is the amount of points they get. (If any of them did not have the opportunity to claim any numbers, the starting number will be their score for that round.) At the end of the day, the player with the fewest points wins. And to avoid bad blood between themselves, they have all agreed that each of them only will focus on minimizing their own scores, and that whenever a player can choose different numbers that will result in the same score, that player will choose the lowest of those numbers. They have also agreed on a fixed order of play: Odd $\\rightarrow $ Even $\\rightarrow $ Ingmariay $\\rightarrow...$, but they alternate who gets to start.\nYou recently missed one of their exciting evenings of play, because you had to make problems for the NCPC event. Fortunately for you, they had recorded the numbers and starting players for each round, and told you that since they always play optimally (minimizing their own score), you could use this to simulate the event for yourself. Oh joy!\nAs an example round, assume that Even is chosen as the starting player, and with the starting number $15$. Then Even claims $16$, Ingmariay $8$, Odd $4$, Even $2$ and Ingmariay $1$. Odd gets $4$ points, Even $2$ and Ingmariay $1$.\n-----Input-----\nThe first line of input contains a single integer $n$ ($1 \\leq n \\leq 1000$), the number of rounds they played that evening.\nThen follow $n$ lines each beginning with the first character of the name of the starting player (either \u2019O\u2019, \u2019E\u2019 or \u2019I\u2019), followed by a space and then the starting number for that round, in the range $[1, 10000]$\nNote: If the starting number is $1$, all players receive $1$ point for that round.\n-----Output-----\nOutput a single line with the score at the end of the day for each of the three contestants, in the order \u201cOdd\u201d, \u201cEven\u201d, \u201cIngmariay\u201d.\n-----Examples-----\nSample Input:\n1\nO 4\nSample Output:\n2 1 4\n\ndef",
        "answer": "def odd_even(n):\n    odd = 0\n    even = 0\n    for i in range(n):\n        player, number = input().split()\n        number = int(number)\n        if player == \"O\":\n            if number == 1:\n                odd += 1\n            else:\n                even += 1\n        else:\n            if number == 1:\n                even += 1\n            else:\n                odd += 1\n    return odd, even",
        "difficulty": "competition"
    },
    {
        "task_id": 3595,
        "prompt": "Complete the Python function given the prompt below:As captain of your space ship you have never encountered a more fierce enemy than the one you have snuck upon now. You immediately bring out the big phaser cannon hoping to take out the flagship before they discover you. There is no room for mistakes and the shot will have to be perfect if you are to stand any chance at all against the flagship of the enemy. \nYou start charging the phaser beam and retrieve the room layout of the flagship from the archives. You are situated directly above the enemy, from where the layout of the flagship can be modeled by a two-dimensional map of the rooms of the flagship. In this map, each room is a rectangle with sides parallel to the $x$ and $y$ axes (rectilinear), and no two rooms intersect (not even in a single point).\nThe phaser beam is configured by giving a point\u00a0$(x, y)$ and an angle\u00a0$\\vartheta $. The phaser beam will start at\u00a0$(x, y)$ and travel a distance\u00a0$\\ell $ in the direction specified by\u00a0$\\vartheta $, causing severe damage to every room touched by the phaser beam. Due to this, you aim at hitting as many rooms as possible.\nThe phaser beam is almost fully charged and the only missing piece is an optimal configuration of the weapon. Unfortunately, it turns out to be harder than you expected. However, there are still ten seconds before the charging is completed and hence you decide to make a computer program to solve the problem.\n-----Input-----\nThe first line of input consists of two integers $r$ and $\\ell $ ($1 \\le r \\le 15$, $1 \\le \\ell \\le 1000$) where $r$ is the number of rooms in the flagship and $\\ell $ is the length of a shot of the phaser.\nThen follow $r$ lines, each of which contains four integers $x_1$, $y_1$, $x_2$, $y_2$ ($0 \\le x_1 < x_2 \\le 1000$, $0 \\le y_1 < y_2 \\le 1000$), indicating that there is a room in the flagship with lower left corner $(x_1, y_1)$ and upper right corner $(x_2, y_2)$.\n-----Output-----\nOutput one line with the maximum number of rooms that can be hit by one phaser beam. Recall that if the beam touches a room it is counted as a hit.\nYou may assume that the answer is numerically stable in the following sense: if all rooms are expanded by a distance of $10^{-6}$ in all four directions, the answer does not change.\n-----Examples-----\nSample Input:\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\nSample Output:\n4\n\ndef",
        "answer": "def hit_rooms(rooms, shot):\n    # Write your code here\n    rooms_hit = 0\n    for room in rooms:\n        if shot[0] >= room[0] and shot[0] <= room[2] and shot[1] >= room[1] and shot[1] <= room[3]:\n            rooms_hit += 1\n    return rooms_hit",
        "difficulty": "competition"
    },
    {
        "task_id": 3596,
        "prompt": "Complete the Python function given the prompt below:Arnar is playing his favourite video game Association of Myths. He\u2019s playing a character by the name of Lumen. Lumen has a special ability where she can shoot a laser beam across the entire map killing all enemies it hits. The only drawback is that the beam is rather narrow and Arnar isn\u2019t always sure where the enemies are located. He now needs your help to determine where the enemies are hiding so he can hit them (and hopefully win the game).\nArnar is very serious about this game and is therefore willing to meticulously research how the opponents move. He knows they only travel in a straight path called the \u2019medial path\u2019. We can therefore describe their location as a function $f$ of a single variable. After much thought Arnar has concluded that $f$ can be described by\\[ c\\int _ a^b \\left(t_1\\Gamma (x) + \\sqrt [t_2]{\\log (\\operatorname {erf}(t_3 x))} - J_ k(x)^{t_4}\\right)dx \\]\nwhere $\\log $ is the natural logarithm,\\[ \\Gamma (z) = \\int _0^{\\infty } x^{z - 1} e^{-x} dx, \\]\\[ \\operatorname {erf}(x) = \\frac{2}{\\sqrt {\\pi }} \\int _0^x e^{-t^2} dt, \\]\nand\\[ J_ k(x) = \\frac{1}{\\pi } \\int _0^{\\pi } \\cos (k \\tau - x \\sin \\tau ) d \\tau. \\]\nArnar thinks that it maybe a bit tough for you to compute $f$ as previously described so he tells you it is enough to calculate the $r$-th degree Taylor polynomial around $0$, i.e.\\[ P(x) = \\sum _{i = 0}^r \\frac{f^{(i)}(0)}{i!}x^i. \\]\nArnar is a afraid he was too aggressive when approximating $f$ with $P$ so he would like to modify $P$ a little bit further. He knows that as the game progresses his opponent will have more in-game currency and will therefore buy better, more agile shoes. To account for this Arnar recursively defines a sequence of polynomials by\\[ P_0(x) = P(x), \\quad P_ n(x) = \\sum _{i = 0}^{r + n} P_{n - 1}(i) x^i. \\]\nArnar finally notes that during the endgame phase the opponent will probably have to go to the bathroom and to account for that he wants reduce the size of the final polynomial in his sequence. He therefore takes $P_ s$ and differentiates it $\\operatorname {deg}(P_ s) + 1$ times and calls the outcome $g$. Arnar is now satisfied that\\[ \\frac{(g(n) + l)^2}{\\pi e} + \\frac{1}{l + 1} \\]\ngives the location of his opponent. Why does Arnar take the last step? Well, Arnar won\u2019t tell you because he\u2019s afraid you will be able to beat him in Association of Myths if he tells you all his secrets. He also requests that you give him the answer to at least two correct decimal places since his mouse can track changes as small as a hundredth of an in-game unit of length.\n-----Input-----\nThe first line of the input starts with three real numbers $a, b, c$, $-10^9 \\leq a \\leq b \\leq 10^9$ and $1 \\leq c \\leq 10^9$. These numbers will have at most 6 digits after the decimal point. The second line has four integers $t_1, t_2, t_3, t_4$, $1 \\leq t_ i \\leq 10^9$. The third line has five integers $n, k, r, s, l$, $1 \\leq n, k, r, s, l \\leq 10^3$.\n-----Output-----\nThe output should consist of one line containing the location of Arnar\u2019s opponent as described above.\n-----Examples-----\nSample Input:\n-99.99 99.99 9999.99\n99 9 999 9999\n9 99 9 99 9\nSample Output:\n9.585073\n\ndef",
        "answer": "def polynomial(x, a, b, c, t1, t2, t3, t4, n, k, r, s, l):\n    return a + b * x + c * x ** 2 + t1 * x ** 3 + t2 * x ** 4 + t3 * x ** 5 + t4 * x ** 6 + n * polynomial(x, a, b, c, t1, t2, t3, t4, n - 1, k, r, s, l) + k * polynomial(x, a, b, c, t1, t2, t3, t4, n - 1, k - 1, r, s, l) + r * polynomial(x, a, b, c, t1, t2, t3, t4, n - 1, k, r - 1, s, l) + s * polynomial(x, a, b, c, t1, t2, t3, t4, n - 1, k, r, s - 1, l) + l",
        "difficulty": "competition"
    },
    {
        "task_id": 3597,
        "prompt": "Complete the Python function given the prompt below:Your game development studio, Ad Hoc Entertainment, is currently working on a billiards-based app they\u2019re calling Pool Shark. Players face a sequence of increasingly devious pool puzzles in which they need to carefully position and aim a single billiards shot to sink multiple pool balls.\nYou\u2019ve just done the first round of user testing and the feedback is terrible \u2014 players complain that the physics of your pool game is neither fun nor intuitive. After digging into it, you realize that the problem isn\u2019t that your physics code is bad, but rather that most people just don\u2019t have much intuition about how physics works. Fortunately, no one requires your physics to be realistic. After this liberating realization, your team experiments with a few models, eventually settling on the following rule for how to resolve pool-ball collisions:\nWhen a moving pool ball B hits a stationary ball A, A begins moving in the direction given by the vector from the center of B to the center of A at the time of the collision. Ball B\u2019s new velocity vector is B\u2019s original vector reflected across A\u2019s new vector (Figure H.1). Note that A\u2019s resulting vector is what real physics predicts, but B\u2019s is not (unless A is glued to the table or has infinite mass). For the purposes of this problem, the speed at which the balls move is irrelevant.\n\u00a0\nFigure H.1\u00a0\nFigure H.2\nThis actually allows for more interesting challenges, but requires new code to determine whether a particular level is feasible. You\u2019ve been tasked with solving a very particular case:\nThree balls labelled $1$, $2$, and $3$ are placed on a table with width $w$ and length $l$ (Figure\u00a0H.2). The player must place the cue ball somewhere on a dashed line lying $h$ units above the bottom edge of the table. The goal is to pick a distance $d$ from the left side, and an angle $\\theta $ such that when the cue ball is shot, the following events happen:\n - The cue ball strikes ball $1$, and then ricochets into ball $2$, sinking ball $2$ in the top left hole.\n - Ball $1$, having been struck by the cue ball, hits ball $3$, sinking ball $3$ in the top right hole.\nFor simplicity, assume that sinking a ball requires the center of the ball to pass directly over the center of the hole. Further assume that the table has no sides \u2014 a ball that goes out of the $w$-by-$l$ region simply falls into a digital abyss \u2014 and thus you don\u2019t need to worry about balls colliding with the table itself.\nYou need to write a program that, given values for $w$, $l$, $h$, the position of balls $1$\u2013$3$, and the radius $r$ of the balls, determines whether the trick shot is possible.\n-----Input-----\nThe input begins with a line containing two positive integers $w$ $l$, the width and length of the pool table, where $w, l \\leq 120$. The left hole is at location $(0,l)$ and the right hole is at location $(w,l)$.\nThe next line will contain 8 positive integers $r$ $x_1$ $y_1$ $x_2$ $y_2$ $x_3$ $y_3$ $h$, where $r \\leq 5$ is the radius of all the balls (including the cue ball), $x_ i$ $y_ i$ is the location of ball $i,1 \\leq i \\leq 3$, and $h$ is the distance the dashed line is from the front of the pool table (see the figure above, where $r \\leq h \\leq (1/2)l$). No two balls will ever overlap, though they may touch at a point, and all balls will lie between the dashed line and the back of the table. All balls will lie completely on the table, and the cue ball must also lie completely on the table (otherwise the shot is impossible).\n-----Output-----\nFor each test case, display the distance $d$ to place the ball on the dashed line and the angle $\\theta $ to shoot the ball, or the word \u201cimpossible\u201d if the trick shot cannot be done. Output $\\theta $ in degrees, and round both $d$ and $\\theta $ to the nearest hundredth. Always show two digits after the decimal point, even if the digits are zero.\n-----Examples-----\nSample Input:\n20 30\n2 10 20 2 24 18 28 10\nSample Output:\n12.74 127.83\n\ndef",
        "answer": "def collision(x1, y1, x2, y2, x3, y3, r1, r2, r3, h):\n    if x1 == x2 and y1 == y2:\n        if x3 == x2 and y3 == y2:\n            return \"impossible\"\n        else:\n            return \"impossible\"\n    else:\n        if x3 == x2 and y3 == y2:\n            return \"impossible\"\n        else:\n            if x1 == x3 and y1 == y3:\n                return \"impossible\"\n            else:\n                if x2 == x3 and y2 == y3:\n                    return \"impossible\"\n                else:\n                    if x1 == x2 and y1 == y2:\n                        return \"impossible\"\n                    else:\n                        if x1 == x3 and y1 == y3:\n                            return \"impossible\"\n                        else:\n                            if x2 == x3 and y2 == y3:\n                                return \"impossible\"\n                            else:\n                                if x1 == x2 and y1 == y2:\n                                    return \"impossible\"\n                                else:\n                                    if x1 == x3 and y1 == y3:\n                                        return \"impossible\"\n                                    else:\n                                        if x2 == x3 and y2 == y3:\n                                            return \"impossible\"\n                                        else:\n                                            if x1 == x2 and y1 == y2:\n                                                return \"impossible\"\n                                            else:\n                                                if x1 == x3 and y1 == y3:\n                                                    return \"impossible\"\n                                                else:\n                                                    if x2 == x3 and y2 == y3:\n                                                        return \"impossible\"\n                                                    else:\n                                                        if x1 == x2 and y1 == y2:\n                                                            return \"impossible\"\n                                                        else:\n                                      ",
        "difficulty": "competition"
    },
    {
        "task_id": 3598,
        "prompt": "Complete the Python function given the prompt below:Instead of worrying about the current hyperinflation you decide to go down to the local bar and have a drink.\nThe prices at the bar are displayed using magnetic signs with numbers printed on them, with each magnet showing one or more digits. For instance, the price of $1106$ megacredits is displayed like this:\nWhile the bartender is busy serving the next customer, you have just enough time to rearrange the price of your favourite beverage to make it as cheap as possible. But be quick about it!\nInvidual magnets can be moved around in any order and turned upside-down. The numbers are shown in a script that makes it difficult for the bartender to distinguish $0$, $1$, and $8$ from their upside-down counterpart. Moreover, $6$ and $9$ look the same when one is turned upside-down. The example price above could be made almost ten times cheaper by turning the first magnet:\nYou have to use all the magnets, otherwise the bartender will immediately suspect foul play.\n-----Input-----\nOn the first line, the number $n$ of magnets, with $1\\in \\{ 1,\\ldots, 1000\\} $. On each of the following $n$ lines, exactly one sequence $m_ i$ of digits describing the $i$th magnet. Each magnet $m_ i$ for $i\\in \\{ 1,\\ldots, n\\} $ consists of at least one and at most $10$ digits from $0$, $1$, $\\ldots $, $9$. The price currently displayed on the bar is the integer described by the juxtaposition $m_1\\cdots m_ n$ of the magnets in the order they are given, from left to right. Note that a magnet can be all $0$s, even though the current price at the bar, alas!, is certainly not.\n-----Output-----\nA single line containing the cheapest price formed by the magnets $m_1,\\ldots,m_ n$, rearranged in any order, and each of them possibly turned upside-down.\n-----Examples-----\nSample Input:\n2\n110\n6\nSample Output:\n0116\n\ndef",
        "answer": "def cheapest_price(n, m):\n    # Write your code here\n    if n == 1:\n        return str(m[0])\n    if n == 2:\n        if m[0] == m[1]:\n            return str(m[0]) + str(m[1])\n        else:\n            return str(min(m[0], m[1])) + str(max(m[0], m[1]))\n    if n == 3:\n        if m[0] == m[1] == m[2]:\n            return str(m[0]) + str(m[1]) + str(m[2])\n        else:\n            return str(min(m[0], m[1], m[2])) + str(max(m[0], m[1], m[2]))\n    if n == 4:\n        if m[0] == m[1] == m[2] == m[3]:\n            return str(m[0]) + str(m[1]) + str(m[2]) + str(m[3])\n        else:\n            return str(min(m[0], m[1], m[2], m[3])) + str(max(m[0], m[1], m[2], m[3]))\n    if n == 5:\n        if m[0] == m[1] == m[2] == m[3] == m[4]:\n            return str(m[0]) + str(m[1]) + str(m[2]) + str(m[3]) + str(m[4])\n        else:\n            return str(min(m[0], m[1], m[2], m[3], m[4])) + str(max(m[0], m[1], m[2], m[3], m[4]))\n    if n == 6:\n        if m[0] == m[1] == m[2] == m[3] == m[4] == m[5]:\n            return str(m[0]) + str(m[1]) + str(m[2]) + str(m[3]) + str(m",
        "difficulty": "competition"
    },
    {
        "task_id": 3599,
        "prompt": "Complete the Python function given the prompt below:\u201cThe Drinking Musicians\u201d, a widely known and popular folk group, are coming to your town. The musicians are known not only by their playing skills, but also their rough character. They never arrive on time, don\u2019t know which town they\u2019re in, and frequently have trouble finding the stage.\nAdditionally, during the concert, each of the musicians at one point takes a break. If three or more of them are on a break at the same time, they start stirring trouble in town and the rest of the group start panicking and playing the wrong chords.\nThe concert will be $T$ minutes long, during which each of the $N$ members will take a break. The length of the break is known for each member.\nHelp the organizer of the concert by writing a program that determines how to schedule the breaks of the members so that, at any given moment, at most two are absent from the stage. All breaks must be entirely during the concert.\n-----Input-----\nThe first line of input contains the integers $T$ and $N$ ($1 \\le T \\le 5000$, $1 \\le N \\le 500$), the length of the concert in minutes and the number of musicians in the group.\nThe next line contains $N$ integers (each between $1$ and $T$ inclusive) separated by single spaces, the length of the break in minutes for each member.\nNote: The input data will be such that a solution, although not necessarily unique, will always exist.\n-----Output-----\nFor each musician output one integer, the number of minutes the musician will spend on stage before going on the break. Output the musicians in the same order they were given in the input.\n-----Examples-----\nSample Input:\n8 3\n4 4 4\nSample Output:\n0 2 4\n\ndef",
        "answer": "def main():\n    T, N = map(int, input().split())\n    breaks = list(map(int, input().split()))\n    breaks.sort()\n    breaks.append(T)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0",
        "difficulty": "competition"
    }
]