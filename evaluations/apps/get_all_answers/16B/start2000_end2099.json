[
    {
        "task_id": 2000,
        "prompt": "Complete the Python function given the prompt below:You are given n integers a_1, a_2,..., a_{n}. Find the number of pairs of indexes i, j (i < j) that a_{i} + a_{j} is a power of 2 (i. e. some integer x exists so that a_{i} + a_{j} = 2^{x}).\n-----Input-----\nThe first line contains the single positive integer n (1 \u2264 n \u2264 10^5) \u2014 the number of integers.\nThe second line contains n positive integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^9).\n-----Output-----\nPrint the number of pairs of indexes i, j (i < j) that a_{i} + a_{j} is a power of 2.\n-----Examples-----\nInput\n4\n7 3 2 1\nOutput\n2\nInput\n3\n1 1 1\nOutput\n3\n-----Note-----\nIn the first example the following pairs of indexes include in answer: (1, 4) and (2, 4).\nIn the second example all pairs of indexes (i, j) (where i < j) include in answer.\n\ndef",
        "answer": "def power_of_two(n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (a[i] + a[j]) % 2 == 0:\n                count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 2001,
        "prompt": "Complete the Python function given the prompt below:JATC loves Banh-mi (a Vietnamese food). His affection for Banh-mi is so much that he always has it for breakfast. This morning, as usual, he buys a Banh-mi and decides to enjoy it in a special way.\nFirst, he splits the Banh-mi into $n$ parts, places them on a row and numbers them from $1$ through $n$. For each part $i$, he defines the deliciousness of the part as $x_i \\in \\{0, 1\\}$. JATC's going to eat those parts one by one. At each step, he chooses arbitrary remaining part and eats it. Suppose that part is the $i$-th part then his enjoyment of the Banh-mi will increase by $x_i$ and the deliciousness of all the remaining parts will also increase by $x_i$. The initial enjoyment of JATC is equal to $0$.\nFor example, suppose the deliciousness of $3$ parts are $[0, 1, 0]$. If JATC eats the second part then his enjoyment will become $1$ and the deliciousness of remaining parts will become $[1, \\_, 1]$. Next, if he eats the first part then his enjoyment will become $2$ and the remaining parts will become $[\\_, \\_, 2]$. After eating the last part, JATC's enjoyment will become $4$.\nHowever, JATC doesn't want to eat all the parts but to save some for later. He gives you $q$ queries, each of them consisting of two integers $l_i$ and $r_i$. For each query, you have to let him know what is the maximum enjoyment he can get if he eats all the parts with indices in the range $[l_i, r_i]$ in some order.\nAll the queries are independent of each other. Since the answer to the query could be very large, print it modulo $10^9+7$.\n-----Input-----\nThe first line contains two integers $n$ and $q$ ($1 \\le n, q \\le 100\\,000$).\nThe second line contains a string of $n$ characters, each character is either '0' or '1'. The $i$-th character defines the deliciousness of the $i$-th part.\nEach of the following $q$ lines contains two integers $l_i$ and $r_i$ ($1 \\le l_i \\le r_i \\le n$)\u00a0\u2014 the segment of the corresponding query.\n-----Output-----\nPrint $q$ lines, where $i$-th of them contains a single integer\u00a0\u2014 the answer to the $i$-th query modulo $10^9 + 7$.\n-----Examples-----\nInput\n4 2\n1011\n1 4\n3 4\nOutput\n14\n3\nInput\n3 2\n111\n1 2\n3 3\nOutput\n3\n1\n-----Note-----\nIn the first example:   For query $1$: One of the best ways for JATC to eats those parts is in this order: $1$, $4$, $3$, $2$.  For query $2$: Both $3$, $4$ and $4$, $3$ ordering give the same answer. \nIn the second example, any order of eating parts leads to the same answer.\n\ndef",
        "answer": "def jatc(n, q, arr):\n    arr = [int(i) for i in arr]\n    dp = [0] * n\n    dp[0] = arr[0]\n    for i in range(1, n):\n        dp[i] = dp[i - 1] + arr[i]\n    for _ in range(q):\n        l, r = map(int, input().split())\n        print(dp[r - 1] - dp[l - 1])",
        "difficulty": "interview"
    },
    {
        "task_id": 2002,
        "prompt": "Complete the Python function given the prompt below:Kamil likes streaming the competitive programming videos. His MeTube channel has recently reached $100$ million subscribers. In order to celebrate this, he posted a video with an interesting problem he couldn't solve yet. Can you help him?\nYou're given a tree \u2014 a connected undirected graph consisting of $n$ vertices connected by $n - 1$ edges. The tree is rooted at vertex $1$. A vertex $u$ is called an ancestor of $v$ if it lies on the shortest path between the root and $v$. In particular, a vertex is an ancestor of itself.\nEach vertex $v$ is assigned its beauty $x_v$ \u2014 a non-negative integer not larger than $10^{12}$. This allows us to define the beauty of a path. Let $u$ be an ancestor of $v$. Then we define the beauty $f(u, v)$ as the greatest common divisor of the beauties of all vertices on the shortest path between $u$ and $v$. Formally, if $u=t_1, t_2, t_3, \\dots, t_k=v$ are the vertices on the shortest path between $u$ and $v$, then $f(u, v) = \\gcd(x_{t_1}, x_{t_2}, \\dots, x_{t_k})$. Here, $\\gcd$ denotes the greatest common divisor of a set of numbers. In particular, $f(u, u) = \\gcd(x_u) = x_u$.\nYour task is to find the sum\n$$ \\sum_{u\\text{ is an ancestor of }v} f(u, v). $$\nAs the result might be too large, please output it modulo $10^9 + 7$.\nNote that for each $y$, $\\gcd(0, y) = \\gcd(y, 0) = y$. In particular, $\\gcd(0, 0) = 0$.\n-----Input-----\nThe first line contains a single integer $n$ ($2 \\le n \\le 100\\,000$) \u2014 the number of vertices in the tree.\nThe following line contains $n$ integers $x_1, x_2, \\dots, x_n$ ($0 \\le x_i \\le 10^{12}$). The value $x_v$ denotes the beauty of vertex $v$.\nThe following $n - 1$ lines describe the edges of the tree. Each of them contains two integers $a, b$ ($1 \\le a, b \\le n$, $a \\neq b$) \u2014 the vertices connected by a single edge.\n-----Output-----\nOutput the sum of the beauties on all paths $(u, v)$ such that $u$ is ancestor of $v$. This sum should be printed modulo $10^9 + 7$.\n-----Examples-----\nInput\n5\n4 5 6 0 8\n1 2\n1 3\n1 4\n4 5\nOutput\n42\nInput\n7\n0 2 3 0 0 0 0\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\nOutput\n30\n-----Note-----\nThe following figure shows all $10$ possible paths for which one endpoint is an ancestor of another endpoint. The sum of beauties of all these paths is equal to $42$: [Image]\n\ndef",
        "answer": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)",
        "difficulty": "interview"
    },
    {
        "task_id": 2003,
        "prompt": "Complete the Python function given the prompt below:Author has gone out of the stories about Vasiliy, so here is just a formal task description.\nYou are given q queries and a multiset A, initially containing only integer 0. There are three types of queries:  \"+ x\"\u00a0\u2014 add integer x to multiset A. \"- x\"\u00a0\u2014 erase one occurrence of integer x from multiset A. It's guaranteed that at least one x is present in the multiset A before this query. \"? x\"\u00a0\u2014 you are given integer x and need to compute the value $\\operatorname{max}_{y \\in A}(x \\oplus y)$, i.e. the maximum value of bitwise exclusive OR (also know as XOR) of integer x and some integer y from the multiset A.\nMultiset is a set, where equal elements are allowed.\n-----Input-----\nThe first line of the input contains a single integer q (1 \u2264 q \u2264 200 000)\u00a0\u2014 the number of queries Vasiliy has to perform.\nEach of the following q lines of the input contains one of three characters '+', '-' or '?' and an integer x_{i} (1 \u2264 x_{i} \u2264 10^9). It's guaranteed that there is at least one query of the third type.\nNote, that the integer 0 will always be present in the set A.\n-----Output-----\nFor each query of the type '?' print one integer\u00a0\u2014 the maximum value of bitwise exclusive OR (XOR) of integer x_{i} and some integer from the multiset A.\n-----Example-----\nInput\n10\n+ 8\n+ 9\n+ 11\n+ 6\n+ 1\n? 3\n- 8\n? 3\n? 8\n? 11\nOutput\n11\n10\n14\n13\n-----Note-----\nAfter first five operations multiset A contains integers 0, 8, 9, 11, 6 and 1.\nThe answer for the sixth query is integer $11 = 3 \\oplus 8$\u00a0\u2014 maximum among integers $3 \\oplus 0 = 3$, $3 \\oplus 9 = 10$, $3 \\oplus 11 = 8$, $3 \\oplus 6 = 5$ and $3 \\oplus 1 = 2$.\n\ndef",
        "answer": "def XOR(a, b):\n    return a ^ b",
        "difficulty": "interview"
    },
    {
        "task_id": 2004,
        "prompt": "Complete the Python function given the prompt below:Slava plays his favorite game \"Peace Lightning\". Now he is flying a bomber on a very specific map.\nFormally, map is a checkered field of size 1 \u00d7 n, the cells of which are numbered from 1 to n, in each cell there can be one or several tanks. Slava doesn't know the number of tanks and their positions, because he flies very high, but he can drop a bomb in any cell. All tanks in this cell will be damaged.\nIf a tank takes damage for the first time, it instantly moves to one of the neighboring cells (a tank in the cell n can only move to the cell n - 1, a tank in the cell 1 can only move to the cell 2). If a tank takes damage for the second time, it's counted as destroyed and never moves again. The tanks move only when they are damaged for the first time, they do not move by themselves.\nHelp Slava to destroy all tanks using as few bombs as possible.\n-----Input-----\nThe first line contains a single integer n (2 \u2264 n \u2264 100 000) \u2014 the size of the map.\n-----Output-----\nIn the first line print m \u2014 the minimum number of bombs Slava needs to destroy all tanks.\nIn the second line print m integers k_1, k_2,..., k_{m}. The number k_{i} means that the i-th bomb should be dropped at the cell k_{i}.\nIf there are multiple answers, you can print any of them.\n-----Examples-----\nInput\n2\nOutput\n3\n2 1 2 \nInput\n3\nOutput\n4\n2 1 3 2\n\ndef",
        "answer": "def check_neighbors(field, x, y):\n    neighbors = []\n    if x > 0:\n        neighbors.append(field[x - 1][y])\n    if x < len(field) - 1:\n        neighbors.append(field[x + 1][y])\n    if y > 0:\n        neighbors.append(field[x][y - 1])\n    if y < len(field[0]) - 1:\n        neighbors.append(field[x][y + 1])\n    return neighbors",
        "difficulty": "interview"
    },
    {
        "task_id": 2005,
        "prompt": "Complete the Python function given the prompt below:Local authorities have heard a lot about combinatorial abilities of Ostap Bender so they decided to ask his help in the question of urbanization. There are n people who plan to move to the cities. The wealth of the i of them is equal to a_{i}. Authorities plan to build two cities, first for n_1 people and second for n_2 people. Of course, each of n candidates can settle in only one of the cities. Thus, first some subset of candidates of size n_1 settle in the first city and then some subset of size n_2 is chosen among the remaining candidates and the move to the second city. All other candidates receive an official refuse and go back home.\nTo make the statistic of local region look better in the eyes of their bosses, local authorities decided to pick subsets of candidates in such a way that the sum of arithmetic mean of wealth of people in each of the cities is as large as possible. Arithmetic mean of wealth in one city is the sum of wealth a_{i} among all its residents divided by the number of them (n_1 or n_2 depending on the city). The division should be done in real numbers without any rounding.\nPlease, help authorities find the optimal way to pick residents for two cities.\n-----Input-----\nThe first line of the input contains three integers n, n_1 and n_2 (1 \u2264 n, n_1, n_2 \u2264 100 000, n_1 + n_2 \u2264 n)\u00a0\u2014 the number of candidates who want to move to the cities, the planned number of residents of the first city and the planned number of residents of the second city.\nThe second line contains n integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 100 000), the i-th of them is equal to the wealth of the i-th candidate.\n-----Output-----\nPrint one real value\u00a0\u2014 the maximum possible sum of arithmetic means of wealth of cities' residents. You answer will be considered correct if its absolute or relative error does not exceed 10^{ - 6}. \nNamely: let's assume that your answer is a, and the answer of the jury is b. The checker program will consider your answer correct, if $\\frac{|a - b|}{\\operatorname{max}(1, b)} \\leq 10^{-6}$.\n-----Examples-----\nInput\n2 1 1\n1 5\nOutput\n6.00000000\nInput\n4 2 1\n1 4 2 3\nOutput\n6.50000000\n-----Note-----\nIn the first sample, one of the optimal solutions is to move candidate 1 to the first city and candidate 2 to the second.\nIn the second sample, the optimal solution is to pick candidates 3 and 4 for the first city, and candidate 2 for the second one. Thus we obtain (a_3 + a_4) / 2 + a_2 = (3 + 2) / 2 + 4 = 6.5\n\ndef",
        "answer": "def solve(n, n_1, n_2, a):\n    a.sort()\n    a_1 = a[:n_1]\n    a_2 = a[n_1:]\n    return sum(a_1) / n_1 + sum(a_2) / n_2",
        "difficulty": "interview"
    },
    {
        "task_id": 2006,
        "prompt": "Complete the Python function given the prompt below:Inna likes sweets and a game called the \"Candy Matrix\". Today, she came up with the new game \"Candy Matrix 2: Reload\".\nThe field for the new game is a rectangle table of size n \u00d7 m. Each line of the table contains one cell with a dwarf figurine, one cell with a candy, the other cells of the line are empty. The game lasts for several moves. During each move the player should choose all lines of the matrix where dwarf is not on the cell with candy and shout \"Let's go!\". After that, all the dwarves from the chosen lines start to simultaneously move to the right. During each second, each dwarf goes to the adjacent cell that is located to the right of its current cell. The movement continues until one of the following events occurs:\n  some dwarf in one of the chosen lines is located in the rightmost cell of his row;  some dwarf in the chosen lines is located in the cell with the candy. \nThe point of the game is to transport all the dwarves to the candy cells.\nInna is fabulous, as she came up with such an interesting game. But what about you? Your task is to play this game optimally well. Specifically, you should say by the given game field what minimum number of moves the player needs to reach the goal of the game.\n-----Input-----\nThe first line of the input contains two integers n and m (1 \u2264 n \u2264 1000;\u00a02 \u2264 m \u2264 1000). \nNext n lines each contain m characters \u2014 the game field for the \"Candy Martix 2: Reload\". Character \"*\" represents an empty cell of the field, character \"G\" represents a dwarf and character \"S\" represents a candy. The matrix doesn't contain other characters. It is guaranteed that each line contains exactly one character \"G\" and one character \"S\".\n-----Output-----\nIn a single line print a single integer \u2014 either the minimum number of moves needed to achieve the aim of the game, or -1, if the aim cannot be achieved on the given game field.\n-----Examples-----\nInput\n3 4\n*G*S\nG**S\n*G*S\nOutput\n2\nInput\n1 3\nS*G\nOutput\n-1\n\ndef",
        "answer": "def candy_matrix(n, m, field):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2007,
        "prompt": "Complete the Python function given the prompt below:You are given a graph with $n$ nodes and $m$ directed edges. One lowercase letter is assigned to each node. We define a path's value as the number of the most frequently occurring letter. For example, if letters on a path are \"abaca\", then the value of that path is $3$. Your task is find a path whose value is the largest.\n-----Input-----\nThe first line contains two positive integers $n, m$ ($1 \\leq n, m \\leq 300\\,000$), denoting that the graph has $n$ nodes and $m$ directed edges.\nThe second line contains a string $s$ with only lowercase English letters. The $i$-th character is the letter assigned to the $i$-th node.\nThen $m$ lines follow. Each line contains two integers $x, y$ ($1 \\leq x, y \\leq n$), describing a directed edge from $x$ to $y$. Note that $x$ can be equal to $y$ and there can be multiple edges between $x$ and $y$. Also the graph can be not connected.\n-----Output-----\nOutput a single line with a single integer denoting the largest value. If the value can be arbitrarily large, output -1 instead.\n-----Examples-----\nInput\n5 4\nabaca\n1 2\n1 3\n3 4\n4 5\nOutput\n3\nInput\n6 6\nxzyabc\n1 2\n3 1\n2 3\n5 4\n4 3\n6 4\nOutput\n-1\nInput\n10 14\nxzyzyzyzqx\n1 2\n2 4\n3 5\n4 5\n2 6\n6 8\n6 5\n2 10\n3 9\n10 9\n4 6\n1 10\n2 8\n3 7\nOutput\n4\n-----Note-----\nIn the first sample, the path with largest value is $1 \\to 3 \\to 4 \\to 5$. The value is $3$ because the letter 'a' appears $3$ times.\n\ndef",
        "answer": "def largest_value(n, m, s):\n    d = {}\n    for i in range(n):\n        d[i] = 0\n    for i in range(m):\n        x, y = map(int, input().split())\n        d[x] += 1\n        d[y] += 1\n    max_val = 0\n    max_key = 0\n    for key, val in d.items():\n        if val > max_val:\n            max_val = val\n            max_key = key\n    if max_val == 0:\n        return -1\n    else:\n        return max_key",
        "difficulty": "interview"
    },
    {
        "task_id": 2008,
        "prompt": "Complete the Python function given the prompt below:During a break in the buffet of the scientific lyceum of the Kingdom of Kremland, there was formed a queue of $n$ high school students numbered from $1$ to $n$. Initially, each student $i$ is on position $i$. Each student $i$ is characterized by two numbers\u00a0\u2014 $a_i$ and $b_i$. Dissatisfaction of the person $i$ equals the product of $a_i$ by the number of people standing to the left of his position, add the product $b_i$ by the number of people standing to the right of his position. Formally, the dissatisfaction of the student $i$, which is on the position $j$, equals $a_i \\cdot (j-1) + b_i \\cdot (n-j)$.\nThe director entrusted Stas with the task: rearrange the people in the queue so that minimize the total dissatisfaction.\nAlthough Stas is able to solve such problems, this was not given to him. He turned for help to you.\n-----Input-----\nThe first line contains a single integer $n$ ($1 \\leq n \\leq 10^5$)\u00a0\u2014 the number of people in the queue.\nEach of the following $n$ lines contains two integers $a_i$ and $b_i$ ($1 \\leq a_i, b_i \\leq 10^8$)\u00a0\u2014 the characteristic of the student $i$, initially on the position $i$.\n-----Output-----\nOutput one integer\u00a0\u2014 minimum total dissatisfaction which can be achieved by rearranging people in the queue.\n-----Examples-----\nInput\n3\n4 2\n2 3\n6 1\nOutput\n12\nInput\n4\n2 4\n3 3\n7 1\n2 3\nOutput\n25\nInput\n10\n5 10\n12 4\n31 45\n20 55\n30 17\n29 30\n41 32\n7 1\n5 5\n3 15\nOutput\n1423\n-----Note-----\nIn the first example it is optimal to put people in this order: ($3, 1, 2$). The first person is in the position of $2$, then his dissatisfaction will be equal to $4 \\cdot 1+2 \\cdot 1=6$. The second person is in the position of $3$, his dissatisfaction will be equal to $2 \\cdot 2+3 \\cdot 0=4$. The third person is in the position of $1$, his dissatisfaction will be equal to $6 \\cdot 0+1 \\cdot 2=2$. The total dissatisfaction will be $12$.\nIn the second example, you need to put people in this order: ($3, 2, 4, 1$). The total dissatisfaction will be $25$.\n\ndef",
        "answer": "def dissatisfaction(n, a, b):\n    diss = 0\n    for i in range(1, n+1):\n        diss += a[i-1]*(i-1) + b[i-1]*(n-i)\n    return diss",
        "difficulty": "interview"
    },
    {
        "task_id": 2009,
        "prompt": "Complete the Python function given the prompt below:Alice lives on a flat planet that can be modeled as a square grid of size $n \\times n$, with rows and columns enumerated from $1$ to $n$. We represent the cell at the intersection of row $r$ and column $c$ with ordered pair $(r, c)$. Each cell in the grid is either land or water.\n [Image] An example planet with $n = 5$. It also appears in the first sample test. \nAlice resides in land cell $(r_1, c_1)$. She wishes to travel to land cell $(r_2, c_2)$. At any moment, she may move to one of the cells adjacent to where she is\u2014in one of the four directions (i.e., up, down, left, or right).\nUnfortunately, Alice cannot swim, and there is no viable transportation means other than by foot (i.e., she can walk only on land). As a result, Alice's trip may be impossible.\nTo help Alice, you plan to create at most one tunnel between some two land cells. The tunnel will allow Alice to freely travel between the two endpoints. Indeed, creating a tunnel is a lot of effort: the cost of creating a tunnel between cells $(r_s, c_s)$ and $(r_t, c_t)$ is $(r_s-r_t)^2 + (c_s-c_t)^2$.\nFor now, your task is to find the minimum possible cost of creating at most one tunnel so that Alice could travel from $(r_1, c_1)$ to $(r_2, c_2)$. If no tunnel needs to be created, the cost is $0$.\n-----Input-----\nThe first line contains one integer $n$ ($1 \\leq n \\leq 50$) \u2014 the width of the square grid.\nThe second line contains two space-separated integers $r_1$ and $c_1$ ($1 \\leq r_1, c_1 \\leq n$) \u2014 denoting the cell where Alice resides.\nThe third line contains two space-separated integers $r_2$ and $c_2$ ($1 \\leq r_2, c_2 \\leq n$) \u2014 denoting the cell to which Alice wishes to travel.\nEach of the following $n$ lines contains a string of $n$ characters. The $j$-th character of the $i$-th such line ($1 \\leq i, j \\leq n$) is 0 if $(i, j)$ is land or 1 if $(i, j)$ is water.\nIt is guaranteed that $(r_1, c_1)$ and $(r_2, c_2)$ are land.\n-----Output-----\nPrint an integer that is the minimum possible cost of creating at most one tunnel so that Alice could travel from $(r_1, c_1)$ to $(r_2, c_2)$.\n-----Examples-----\nInput\n5\n1 1\n5 5\n00001\n11111\n00111\n00110\n00110\nOutput\n10\nInput\n3\n1 3\n3 1\n010\n101\n010\nOutput\n8\n-----Note-----\nIn the first sample, a tunnel between cells $(1, 4)$ and $(4, 5)$ should be created. The cost of doing so is $(1-4)^2 + (4-5)^2 = 10$, which is optimal. This way, Alice could walk from $(1, 1)$ to $(1, 4)$, use the tunnel from $(1, 4)$ to $(4, 5)$, and lastly walk from $(4, 5)$ to $(5, 5)$.\nIn the second sample, clearly a tunnel between cells $(1, 3)$ and $(3, 1)$ needs to be created. The cost of doing so is $(1-3)^2 + (3-1)^2 = 8$.\n\ndef",
        "answer": "def min_cost(n, r1, c1, r2, c2):\n    if r1 == r2 and c1 == c2:\n        return 0\n    if r1 == r2:\n        return abs(c1 - c2)\n    if c1 == c2:\n        return abs(r1 - r2)\n    return min(abs(r1 - r2), abs(c1 - c2))",
        "difficulty": "interview"
    },
    {
        "task_id": 2010,
        "prompt": "Complete the Python function given the prompt below:Sereja has got an array, consisting of n integers, a_1, a_2,..., a_{n}. Sereja is an active boy, so he is now going to complete m operations. Each operation will have one of the three forms:  Make v_{i}-th array element equal to x_{i}. In other words, perform the assignment a_{v}_{i} = x_{i}.  Increase each array element by y_{i}. In other words, perform n assignments a_{i} = a_{i} + y_{i} (1 \u2264 i \u2264 n).  Take a piece of paper and write out the q_{i}-th array element. That is, the element a_{q}_{i}. \nHelp Sereja, complete all his operations.\n-----Input-----\nThe first line contains integers n, m (1 \u2264 n, m \u2264 10^5). The second line contains n space-separated integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^9) \u2014 the original array.\nNext m lines describe operations, the i-th line describes the i-th operation. The first number in the i-th line is integer t_{i} (1 \u2264 t_{i} \u2264 3) that represents the operation type. If t_{i} = 1, then it is followed by two integers v_{i} and x_{i}, (1 \u2264 v_{i} \u2264 n, 1 \u2264 x_{i} \u2264 10^9). If t_{i} = 2, then it is followed by integer y_{i} (1 \u2264 y_{i} \u2264 10^4). And if t_{i} = 3, then it is followed by integer q_{i} (1 \u2264 q_{i} \u2264 n).\n-----Output-----\nFor each third type operation print value a_{q}_{i}. Print the values in the order, in which the corresponding queries follow in the input.\n-----Examples-----\nInput\n10 11\n1 2 3 4 5 6 7 8 9 10\n3 2\n3 9\n2 10\n3 1\n3 10\n1 1 10\n2 10\n2 10\n3 1\n3 10\n3 9\nOutput\n2\n9\n11\n20\n30\n40\n39\n\ndef",
        "answer": "def arrayManipulation(n, queries):\n    arr = [0] * n\n    for i in queries:\n        arr[i[0] - 1] += i[2]\n        if i[1]!= len(arr):\n            arr[i[1]] -= i[2]\n    max_value = 0\n    running_sum = 0\n    for i in arr:\n        running_sum += i\n        if running_sum > max_value:\n            max_value = running_sum\n    return max_value",
        "difficulty": "interview"
    },
    {
        "task_id": 2011,
        "prompt": "Complete the Python function given the prompt below:There are $n$ people in this world, conveniently numbered $1$ through $n$. They are using burles to buy goods and services. Occasionally, a person might not have enough currency to buy what he wants or needs, so he borrows money from someone else, with the idea that he will repay the loan later with interest. Let $d(a,b)$ denote the debt of $a$ towards $b$, or $0$ if there is no such debt.\nSometimes, this becomes very complex, as the person lending money can run into financial troubles before his debtor is able to repay his debt, and finds himself in the need of borrowing money. \nWhen this process runs for a long enough time, it might happen that there are so many debts that they can be consolidated. There are two ways this can be done:  Let $d(a,b) > 0$ and $d(c,d) > 0$ such that $a \\neq c$ or $b \\neq d$. We can decrease the $d(a,b)$ and $d(c,d)$ by\u00a0$z$ and increase $d(c,b)$ and $d(a,d)$ by\u00a0$z$, where $0 < z \\leq \\min(d(a,b),d(c,d))$.  Let $d(a,a) > 0$. We can set $d(a,a)$ to $0$. \nThe total debt is defined as the sum of all debts:\n$$\\Sigma_d = \\sum_{a,b} d(a,b)$$\nYour goal is to use the above rules in any order any number of times, to make the total debt as small as possible. Note that you don't have to minimise the number of non-zero debts, only the total debt.\n-----Input-----\nThe first line contains two space separated integers $n$\u00a0($1 \\leq n \\leq 10^5$) and $m$\u00a0($0 \\leq m \\leq 3\\cdot 10^5$), representing the number of people and the number of debts, respectively.\n$m$ lines follow, each of which contains three space separated integers $u_i$, $v_i$\u00a0($1 \\leq u_i, v_i \\leq n, u_i \\neq v_i$), $d_i$\u00a0($1 \\leq d_i \\leq 10^9$), meaning that the person $u_i$ borrowed $d_i$ burles from person $v_i$.\n-----Output-----\nOn the first line print an integer $m'$\u00a0($0 \\leq m' \\leq 3\\cdot 10^5$), representing the number of debts after the consolidation. It can be shown that an answer always exists with this additional constraint.\nAfter that print $m'$ lines, $i$-th of which contains three space separated integers $u_i, v_i, d_i$, meaning that the person $u_i$ owes the person $v_i$ exactly $d_i$ burles. The output must satisfy $1 \\leq u_i, v_i \\leq n$, $u_i \\neq v_i$ and $0 < d_i \\leq 10^{18}$.\nFor each pair $i \\neq j$, it should hold that $u_i \\neq u_j$ or $v_i \\neq v_j$. In other words, each pair of people can be included at most once in the output.\n-----Examples-----\nInput\n3 2\n1 2 10\n2 3 5\nOutput\n2\n1 2 5\n1 3 5\nInput\n3 3\n1 2 10\n2 3 15\n3 1 10\nOutput\n1\n2 3 5\nInput\n4 2\n1 2 12\n3 4 8\nOutput\n2\n1 2 12\n3 4 8\nInput\n3 4\n2 3 1\n2 3 2\n2 3 4\n2 3 8\nOutput\n1\n2 3 15\n-----Note-----\nIn the first example the optimal sequence of operations can be the following:  Perform an operation of the first type with $a = 1$, $b = 2$, $c = 2$, $d = 3$ and $z = 5$. The resulting debts are: $d(1, 2) = 5$, $d(2, 2) = 5$, $d(1, 3) = 5$, all other debts are $0$;  Perform an operation of the second type with $a = 2$. The resulting debts are: $d(1, 2) = 5$, $d(1, 3) = 5$, all other debts are $0$. \nIn the second example the optimal sequence of operations can be the following:  Perform an operation of the first type with $a = 1$, $b = 2$, $c = 3$, $d = 1$ and $z = 10$. The resulting debts are: $d(3, 2) = 10$, $d(2, 3) = 15$, $d(1, 1) = 10$, all other debts are $0$;  Perform an operation of the first type with $a = 2$, $b = 3$, $c = 3$, $d = 2$ and $z = 10$. The resulting debts are: $d(2, 2) = 10$, $d(3, 3) = 10$, $d(2, 3) = 5$, $d(1, 1) = 10$, all other debts are $0$;  Perform an operation of the second type with $a = 2$. The resulting debts are: $d(3, 3) = 10$, $d(2, 3) = 5$, $d(1, 1) = 10$, all other debts are $0$;  Perform an operation of the second type with $a = 3$. The resulting debts are: $d(2, 3) = 5$, $d(1, 1) = 10$, all other debts are $0$;  Perform an operation of the second type with $a = 1$. The resulting debts are: $d(2, 3) = 5$, all other debts are $0$.\n\ndef",
        "answer": "def consolidate(n, debts):\n    # Write your code here\n    # n = len(debts)\n    # debts = sorted(debts, key=lambda x: x[0])\n    # debts = sorted(debts, key=lambda x: x[1])\n    # debts = sorted(debts, key=lambda x: x[2])\n    # debts = sorted(debts, key=lambda x: x[3])\n    # debts = sorted(debts, key=lambda x: x[4])\n    # debts = sorted(debts, key=lambda x: x[5])\n    # debts = sorted(debts, key=lambda x: x[6])\n    # debts = sorted(debts, key=lambda x: x[7])\n    # debts = sorted(debts, key=lambda x: x[8])\n    # debts = sorted(debts, key=lambda x: x[9])\n    # debts = sorted(debts, key=lambda x: x[10])\n    # debts = sorted(debts, key=lambda x: x[11])\n    # debts = sorted(debts, key=lambda x: x[12])\n    # debts = sorted(debts, key=lambda x: x[13])\n    # debts = sorted(debts, key=lambda x: x[14])\n    # debts = sorted(debts, key=lambda x: x[15])\n    # debts = sorted(debts, key=lambda x: x[16])\n    # debts = sorted(debts, key=lambda x: x[17])\n    # debts = sorted(debts, key=lambda x: x[18])\n    # debts = sorted(debts, key=lambda x: x",
        "difficulty": "interview"
    },
    {
        "task_id": 2012,
        "prompt": "Complete the Python function given the prompt below:Stepan had a favorite string s which consisted of the lowercase letters of the Latin alphabet. \nAfter graduation, he decided to remember it, but it was a long time ago, so he can't now remember it. But Stepan remembers some information about the string, namely the sequence of integers c_1, c_2,..., c_{n}, where n equals the length of the string s, and c_{i} equals the number of substrings in the string s with the length i, consisting of the same letters. The substring is a sequence of consecutive characters in the string s.\nFor example, if the Stepan's favorite string is equal to \"tttesst\", the sequence c looks like: c = [7, 3, 1, 0, 0, 0, 0].\nStepan asks you to help to repair his favorite string s according to the given sequence c_1, c_2,..., c_{n}. \n-----Input-----\nThe first line contains the integer n (1 \u2264 n \u2264 2000) \u2014 the length of the Stepan's favorite string.\nThe second line contains the sequence of integers c_1, c_2,..., c_{n} (0 \u2264 c_{i} \u2264 2000), where c_{i} equals the number of substrings of the string s with the length i, consisting of the same letters.\nIt is guaranteed that the input data is such that the answer always exists.\n-----Output-----\nPrint the repaired Stepan's favorite string. If there are several answers, it is allowed to print any of them. The string should contain only lowercase letters of the English alphabet. \n-----Examples-----\nInput\n6\n6 3 1 0 0 0\nOutput\nkkrrrq\nInput\n4\n4 0 0 0\nOutput\nabcd\n-----Note-----\nIn the first test Stepan's favorite string, for example, can be the string \"kkrrrq\", because it contains 6 substrings with the length 1, consisting of identical letters (they begin in positions 1, 2, 3, 4, 5 and 6), 3 substrings with the length 2, consisting of identical letters (they begin in positions 1, 3 and 4), and 1 substring with the length 3, consisting of identical letters (it begins in the position 3).\n\ndef",
        "answer": "def substring_count(s, n):\n    count = [0] * n\n    for i in range(n):\n        count[i] = s.count(s[i])\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 2013,
        "prompt": "Complete the Python function given the prompt below:Petya has a rectangular Board of size $n \\times m$. Initially, $k$ chips are placed on the board, $i$-th chip is located in the cell at the intersection of $sx_i$-th row and $sy_i$-th column.\nIn one action, Petya can move all the chips to the left, right, down or up by $1$ cell.\nIf the chip was in the $(x, y)$ cell, then after the operation:   left, its coordinates will be $(x, y - 1)$;  right, its coordinates will be $(x, y + 1)$;  down, its coordinates will be $(x + 1, y)$;  up, its coordinates will be $(x - 1, y)$. \nIf the chip is located by the wall of the board, and the action chosen by Petya moves it towards the wall, then the chip remains in its current position.\nNote that several chips can be located in the same cell.\nFor each chip, Petya chose the position which it should visit. Note that it's not necessary for a chip to end up in this position.\nSince Petya does not have a lot of free time, he is ready to do no more than $2nm$ actions.\nYou have to find out what actions Petya should do so that each chip visits the position that Petya selected for it at least once. Or determine that it is not possible to do this in $2nm$ actions.\n-----Input-----\nThe first line contains three integers $n, m, k$ ($1 \\le n, m, k \\le 200$) \u2014 the number of rows and columns of the board and the number of chips, respectively.\nThe next $k$ lines contains two integers each $sx_i, sy_i$ ($ 1 \\le sx_i \\le n, 1 \\le sy_i \\le m$) \u2014 the starting position of the $i$-th chip.\nThe next $k$ lines contains two integers each $fx_i, fy_i$ ($ 1 \\le fx_i \\le n, 1 \\le fy_i \\le m$) \u2014 the position that the $i$-chip should visit at least once.\n-----Output-----\nIn the first line print the number of operations so that each chip visits the position that Petya selected for it at least once.\nIn the second line output the sequence of operations. To indicate operations left, right, down, and up, use the characters $L, R, D, U$ respectively.\nIf the required sequence does not exist, print -1 in the single line.\n-----Examples-----\nInput\n3 3 2\n1 2\n2 1\n3 3\n3 2\nOutput\n3\nDRD\nInput\n5 4 3\n3 4\n3 1\n3 3\n5 3\n1 3\n1 4\nOutput\n9\nDDLUUUURR\n\ndef",
        "answer": "def move_chips(n, m, k, sx, sy, fx, fy):\n    # Write your code here\n    # print(n, m, k, sx, sy, fx, fy)\n    # print(sx, sy, fx, fy)\n    # print(sx, sy, fx, fy)\n    # print(sx, sy, fx, fy)\n    # print(sx, sy, fx, fy)\n    # print(sx, sy, fx, fy)\n    # print(sx, sy, fx, fy)\n    # print(sx, sy, fx, fy)\n    # print(sx, sy, fx, fy)\n    # print(sx, sy, fx, fy)\n    # print(sx, sy, fx, fy)\n    # print(sx, sy, fx, fy)\n    # print(sx, sy, fx, fy)\n    # print(sx, sy, fx, fy)\n    # print(sx, sy, fx, fy)\n    # print(sx, sy, fx, fy)\n    # print(sx, sy, fx, fy)\n    # print(sx, sy, fx, fy)\n    # print(sx, sy, fx, fy)\n    # print(sx, sy, fx, fy)\n    # print(sx, sy, fx, fy)\n    # print(sx, sy, fx, fy)\n    # print(sx, sy, fx,",
        "difficulty": "interview"
    },
    {
        "task_id": 2014,
        "prompt": "Complete the Python function given the prompt below:Gargari got bored to play with the bishops and now, after solving the problem about them, he is trying to do math homework. In a math book he have found k permutations. Each of them consists of numbers 1, 2,..., n in some order. Now he should find the length of the longest common subsequence of these permutations. Can you help Gargari?\nYou can read about longest common subsequence there: https://en.wikipedia.org/wiki/Longest_common_subsequence_problem\n-----Input-----\nThe first line contains two integers n and k (1 \u2264 n \u2264 1000;\u00a02 \u2264 k \u2264 5). Each of the next k lines contains integers 1, 2,..., n in some order \u2014 description of the current permutation.\n-----Output-----\nPrint the length of the longest common subsequence.\n-----Examples-----\nInput\n4 3\n1 4 2 3\n4 1 2 3\n1 2 4 3\nOutput\n3\n-----Note-----\nThe answer for the first test sample is subsequence [1, 2, 3].\n\ndef",
        "answer": "def lcs(X, Y, m, n):\n    if m == 0 or n == 0:\n        return 0\n    elif X[m-1] == Y[n-1]:\n        return 1 + lcs(X, Y, m-1, n-1)\n    else:\n        return max(lcs(X, Y, m, n-1), lcs(X, Y, m-1, n))",
        "difficulty": "interview"
    },
    {
        "task_id": 2015,
        "prompt": "Complete the Python function given the prompt below:Polycarp is sad \u2014 New Year is coming in few days but there is still no snow in his city. To bring himself New Year mood, he decided to decorate his house with some garlands.\nThe local store introduced a new service this year, called \"Build your own garland\". So you can buy some red, green and blue lamps, provide them and the store workers will solder a single garland of them. The resulting garland will have all the lamps you provided put in a line. Moreover, no pair of lamps of the same color will be adjacent to each other in this garland!\nFor example, if you provide $3$ red, $3$ green and $3$ blue lamps, the resulting garland can look like this: \"RGBRBGBGR\" (\"RGB\" being the red, green and blue color, respectively). Note that it's ok to have lamps of the same color on the ends of the garland.\nHowever, if you provide, say, $1$ red, $10$ green and $2$ blue lamps then the store workers won't be able to build any garland of them. Any garland consisting of these lamps will have at least one pair of lamps of the same color adjacent to each other. Note that the store workers should use all the lamps you provided.\nSo Polycarp has bought some sets of lamps and now he wants to know if the store workers can build a garland from each of them.\n-----Input-----\nThe first line contains a single integer $t$ ($1 \\le t \\le 100$) \u2014 the number of sets of lamps Polycarp has bought.\nEach of the next $t$ lines contains three integers $r$, $g$ and $b$ ($1 \\le r, g, b \\le 10^9$) \u2014 the number of red, green and blue lamps in the set, respectively.\n-----Output-----\nPrint $t$ lines \u2014 for each set of lamps print \"Yes\" if the store workers can build a garland from them and \"No\" otherwise.\n-----Example-----\nInput\n3\n3 3 3\n1 10 2\n2 1 1\nOutput\nYes\nNo\nYes\n-----Note-----\nThe first two sets are desribed in the statement.\nThe third set produces garland \"RBRG\", for example.\n\ndef",
        "answer": "def garland(lamps):\n    lamps = sorted(lamps)\n    for i in range(len(lamps) - 1):\n        if lamps[i] == lamps[i + 1]:\n            return False\n    return True",
        "difficulty": "interview"
    },
    {
        "task_id": 2016,
        "prompt": "Complete the Python function given the prompt below:Vova plays a computer game known as Mages and Monsters. Vova's character is a mage. Though as he has just started, his character knows no spells.\nVova's character can learn new spells during the game. Every spell is characterized by two values x_{i} and y_{i} \u2014 damage per second and mana cost per second, respectively. Vova doesn't have to use a spell for an integer amount of seconds. More formally, if he uses a spell with damage x and mana cost y for z seconds, then he will deal x\u00b7z damage and spend y\u00b7z mana (no rounding). If there is no mana left (mana amount is set in the start of the game and it remains the same at the beginning of every fight), then character won't be able to use any spells. It is prohibited to use multiple spells simultaneously.\nAlso Vova can fight monsters. Every monster is characterized by two values t_{j} and h_{j} \u2014 monster kills Vova's character in t_{j} seconds and has h_{j} health points. Mana refills after every fight (or Vova's character revives with full mana reserve), so previous fights have no influence on further ones.\nVova's character kills a monster, if he deals h_{j} damage to it in no more than t_{j} seconds using his spells (it is allowed to use more than one spell in a fight) and spending no more mana than he had at the beginning of the fight. If monster's health becomes zero exactly in t_{j} seconds (it means that the monster and Vova's character kill each other at the same time), then Vova wins the fight.\nYou have to write a program which can answer two types of queries:\n  1 x y \u2014 Vova's character learns new spell which deals x damage per second and costs y mana per second.  2 t h \u2014 Vova fights the monster which kills his character in t seconds and has h health points. \nNote that queries are given in a different form. Also remember that Vova's character knows no spells at the beginning of the game.\nFor every query of second type you have to determine if Vova is able to win the fight with corresponding monster.\n-----Input-----\nThe first line contains two integer numbers q and m (2 \u2264 q \u2264 10^5, 1 \u2264 m \u2264 10^12) \u2014 the number of queries and the amount of mana at the beginning of every fight.\ni-th of each next q lines contains three numbers k_{i}, a_{i} and b_{i} (1 \u2264 k_{i} \u2264 2, 1 \u2264 a_{i}, b_{i} \u2264 10^6). \nUsing them you can restore queries this way: let j be the index of the last query of second type with positive answer (j = 0 if there were none of these).   If k_{i} = 1, then character learns spell with x = (a_{i} + j) mod 10^6 + 1, y = (b_{i} + j) mod 10^6 + 1.  If k_{i} = 2, then you have to determine if Vova is able to win the fight against monster with t = (a_{i} + j) mod 10^6 + 1, h = (b_{i} + j) mod 10^6 + 1. \n-----Output-----\nFor every query of second type print YES if Vova is able to win the fight with corresponding monster and NO otherwise.\n-----Example-----\nInput\n3 100\n1 4 9\n2 19 49\n2 19 49\nOutput\nYES\nNO\n-----Note-----\nIn first example Vova's character at first learns the spell with 5 damage and 10 mana cost per second. Next query is a fight with monster which can kill character in 20 seconds and has 50 health points. Vova kills it in 10 seconds (spending 100 mana). Next monster has 52 health, so Vova can't deal that much damage with only 100 mana.\n\ndef",
        "answer": "def solve(n, m, a, b):\n    for i in range(n):\n        if a[i] == 1:\n            m -= 1\n            a[i] = (a[i] + m) % 10 ** 6 + 1\n            b[i] = (b[i] + m) % 10 ** 6 + 1\n        elif a[i] == 2:\n            m -= 1\n            a[i] = (a[i] + m) % 10 ** 6 + 1\n            b[i] = (b[i] + m) % 10 ** 6 + 1\n        else:\n            m -= 1\n            a[i] = (a[i] + m) % 10 ** 6 + 1\n            b[i] = (b[i] + m) % 10 ** 6 + 1\n    return \"YES\" if m == 0 else \"NO\"",
        "difficulty": "interview"
    },
    {
        "task_id": 2017,
        "prompt": "Complete the Python function given the prompt below:There is an infinite sequence consisting of all positive integers in the increasing order: p = {1, 2, 3,...}. We performed n swap operations with this sequence. A swap(a, b) is an operation of swapping the elements of the sequence on positions a and b. Your task is to find the number of inversions in the resulting sequence, i.e. the number of such index pairs (i, j), that i < j and p_{i} > p_{j}.\n-----Input-----\nThe first line contains a single integer n (1 \u2264 n \u2264 10^5)\u00a0\u2014 the number of swap operations applied to the sequence.\nEach of the next n lines contains two integers a_{i} and b_{i} (1 \u2264 a_{i}, b_{i} \u2264 10^9, a_{i} \u2260 b_{i})\u00a0\u2014 the arguments of the swap operation.\n-----Output-----\nPrint a single integer \u2014 the number of inversions in the resulting sequence.\n-----Examples-----\nInput\n2\n4 2\n1 4\nOutput\n4\nInput\n3\n1 6\n3 4\n2 5\nOutput\n15\n-----Note-----\nIn the first sample the sequence is being modified as follows: $\\{1,2,3,4,5, \\ldots \\} \\rightarrow \\{1,4,3,2,5, \\ldots \\} \\rightarrow \\{2,4,3,1,5 \\ldots \\}$. It has 4 inversions formed by index pairs (1, 4), (2, 3), (2, 4) and (3, 4).\n\ndef",
        "answer": "def swap(a, b):\n    a, b = b, a\n    return a, b",
        "difficulty": "interview"
    },
    {
        "task_id": 2018,
        "prompt": "Complete the Python function given the prompt below:Amugae is in a very large round corridor. The corridor consists of two areas. The inner area is equally divided by $n$ sectors, and the outer area is equally divided by $m$ sectors. A wall exists between each pair of sectors of same area (inner or outer), but there is no wall between the inner area and the outer area. A wall always exists at the 12 o'clock position.\n $0$ \nThe inner area's sectors are denoted as $(1,1), (1,2), \\dots, (1,n)$ in clockwise direction. The outer area's sectors are denoted as $(2,1), (2,2), \\dots, (2,m)$ in the same manner. For a clear understanding, see the example image above.\nAmugae wants to know if he can move from one sector to another sector. He has $q$ questions.\nFor each question, check if he can move between two given sectors.\n-----Input-----\nThe first line contains three integers $n$, $m$ and $q$ ($1 \\le n, m \\le 10^{18}$, $1 \\le q \\le 10^4$)\u00a0\u2014 the number of sectors in the inner area, the number of sectors in the outer area and the number of questions.\nEach of the next $q$ lines contains four integers $s_x$, $s_y$, $e_x$, $e_y$ ($1 \\le s_x, e_x \\le 2$; if $s_x = 1$, then $1 \\le s_y \\le n$, otherwise $1 \\le s_y \\le m$; constraints on $e_y$ are similar). Amague wants to know if it is possible to move from sector $(s_x, s_y)$ to sector $(e_x, e_y)$.\n-----Output-----\nFor each question, print \"YES\" if Amugae can move from $(s_x, s_y)$ to $(e_x, e_y)$, and \"NO\" otherwise.\nYou can print each letter in any case (upper or lower).\n-----Example-----\nInput\n4 6 3\n1 1 2 3\n2 6 1 2\n2 6 2 4\nOutput\nYES\nNO\nYES\n-----Note-----\nExample is shown on the picture in the statement.\n\ndef",
        "answer": "def can_move(n, m, q):\n    for _ in range(q):\n        sx, sy, ex, ey = map(int, input().split())\n        if sx == 1:\n            if sy <= n and ey <= n:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            if sy <= m and ey <= m:\n                print(\"YES\")\n            else:\n                print(\"NO\")",
        "difficulty": "interview"
    },
    {
        "task_id": 2019,
        "prompt": "Complete the Python function given the prompt below:Alica and Bob are playing a game.\nInitially they have a binary string $s$ consisting of only characters 0 and 1.\nAlice and Bob make alternating moves: Alice makes the first move, Bob makes the second move, Alice makes the third one, and so on. During each move, the current player must choose two different adjacent characters of string $s$ and delete them. For example, if $s = 1011001$ then the following moves are possible:   delete $s_1$ and $s_2$: $\\textbf{10}11001 \\rightarrow 11001$;  delete $s_2$ and $s_3$: $1\\textbf{01}1001 \\rightarrow 11001$;  delete $s_4$ and $s_5$: $101\\textbf{10}01 \\rightarrow 10101$;  delete $s_6$ and $s_7$: $10110\\textbf{01} \\rightarrow 10110$. \nIf a player can't make any move, they lose. Both players play optimally. You have to determine if Alice can win.\n-----Input-----\nFirst line contains one integer $t$ ($1 \\le t \\le 1000$)\u00a0\u2014 the number of test cases.\nOnly line of each test case contains one string $s$ ($1 \\le |s| \\le 100$), consisting of only characters 0 and 1.\n-----Output-----\nFor each test case print answer in the single line.\nIf Alice can win print DA (YES in Russian) in any register. Otherwise print NET (NO in Russian) in any register.\n-----Example-----\nInput\n3\n01\n1111\n0011\nOutput\nDA\nNET\nNET\n-----Note-----\nIn the first test case after Alice's move string $s$ become empty and Bob can not make any move.\nIn the second test case Alice can not make any move initially.\nIn the third test case after Alice's move string $s$ turn into $01$. Then, after Bob's move string $s$ become empty and Alice can not make any move.\n\ndef",
        "answer": "def game(s):\n    if len(s) == 0:\n        return False\n    if len(s) == 1:\n        return True\n    if s[0] == s[1]:\n        return game(s[1:])\n    else:\n        return game(s[2:])",
        "difficulty": "interview"
    },
    {
        "task_id": 2020,
        "prompt": "Complete the Python function given the prompt below:Inna loves sleeping very much, so she needs n alarm clocks in total to wake up. Let's suppose that Inna's room is a 100 \u00d7 100 square with the lower left corner at point (0, 0) and with the upper right corner at point (100, 100). Then the alarm clocks are points with integer coordinates in this square.\nThe morning has come. All n alarm clocks in Inna's room are ringing, so Inna wants to turn them off. For that Inna has come up with an amusing game:  First Inna chooses a type of segments that she will use throughout the game. The segments can be either vertical or horizontal.  Then Inna makes multiple moves. In a single move, Inna can paint a segment of any length on the plane, she chooses its type at the beginning of the game (either vertical or horizontal), then all alarm clocks that are on this segment switch off. The game ends when all the alarm clocks are switched off. \nInna is very sleepy, so she wants to get through the alarm clocks as soon as possible. Help her, find the minimum number of moves in the game that she needs to turn off all the alarm clocks!\n-----Input-----\nThe first line of the input contains integer n (1 \u2264 n \u2264 10^5) \u2014 the number of the alarm clocks. The next n lines describe the clocks: the i-th line contains two integers x_{i}, y_{i} \u2014 the coordinates of the i-th alarm clock (0 \u2264 x_{i}, y_{i} \u2264 100).\nNote that a single point in the room can contain any number of alarm clocks and the alarm clocks can lie on the sides of the square that represents the room.\n-----Output-----\nIn a single line print a single integer \u2014 the minimum number of segments Inna will have to draw if she acts optimally.\n-----Examples-----\nInput\n4\n0 0\n0 1\n0 2\n1 0\nOutput\n2\nInput\n4\n0 0\n0 1\n1 0\n1 1\nOutput\n2\nInput\n4\n1 1\n1 2\n2 3\n3 3\nOutput\n3\n-----Note-----\nIn the first sample, Inna first chooses type \"vertical segments\", and then she makes segments with ends at : (0, 0), (0, 2); and, for example, (1, 0), (1, 1). If she paints horizontal segments, she will need at least 3 segments.\nIn the third sample it is important to note that Inna doesn't have the right to change the type of the segments during the game. That's why she will need 3 horizontal or 3 vertical segments to end the game.\n\ndef",
        "answer": "def min_segments(n):\n    return n + 1",
        "difficulty": "interview"
    },
    {
        "task_id": 2021,
        "prompt": "Complete the Python function given the prompt below:You came to a local shop and want to buy some chocolate bars. There are $n$ bars in the shop, $i$-th of them costs $a_i$ coins (and you want to buy all of them).\nYou have $m$ different coupons that allow you to buy chocolate bars. $i$-th coupon allows you to buy $q_i$ chocolate bars while you have to pay only for the $q_i - 1$ most expensive ones (so, the cheapest bar of those $q_i$ bars is for free).\nYou can use only one coupon; if you use coupon $i$, you have to choose $q_i$ bars and buy them using the coupon, and buy all the remaining $n - q_i$ bars without any discounts.\nTo decide which coupon to choose, you want to know what will be the minimum total amount of money you have to pay if you use one of the coupons optimally.\n-----Input-----\nThe first line contains one integer $n$ ($2 \\le n \\le 3 \\cdot 10^5$) \u2014 the number of chocolate bars in the shop.\nThe second line contains $n$ integers $a_1$, $a_2$,..., $a_n$ ($1 \\le a_i \\le 10^9$), where $a_i$ is the cost of $i$-th chocolate bar.\nThe third line contains one integer $m$ ($1 \\le m \\le n - 1$) \u2014 the number of coupons you have.\nThe fourth line contains $m$ integers $q_1$, $q_2$,..., $q_m$ ($2 \\le q_i \\le n$), where $q_i$ is the number of chocolate bars you have to buy using $i$-th coupon so that the least expensive of them will be for free. All values of $q_i$ are pairwise distinct.\n-----Output-----\nPrint $m$ integers, $i$-th of them should be the minimum amount of money you have to pay if you buy $q_i$ bars with $i$-th coupon, and all the remaining bars one by one for their full price.\n-----Example-----\nInput\n7\n7 1 3 1 4 10 8\n2\n3 4\nOutput\n27\n30\n-----Note-----\nConsider the first example.\nIf we use the first coupon, we may choose chocolate bars having indices $1$, $6$ and $7$, and we pay $18$ coins for them and $9$ coins for all other bars.\nIf we use the second coupon, we may choose chocolate bars having indices $1$, $5$, $6$ and $7$, and we pay $25$ coins for them and $5$ coins for all other bars.\n\ndef",
        "answer": "def solve(n, a, m, q):\n    a.sort()\n    q.sort()\n    res = 0\n    for i in range(m):\n        res += a[i] * q[i]\n    for i in range(m, n):\n        res += a[i]\n    return res",
        "difficulty": "interview"
    },
    {
        "task_id": 2022,
        "prompt": "Complete the Python function given the prompt below:Given a connected undirected graph with $n$ vertices and an integer $k$, you have to either:  either find an independent set that has exactly $\\lceil\\frac{k}{2}\\rceil$ vertices. or find a simple cycle of length at most $k$. \nAn independent set is a set of vertices such that no two of them are connected by an edge. A simple cycle is a cycle that doesn't contain any vertex twice. \nI have a proof that for any input you can always solve at least one of these problems, but it's left as an exercise for the reader.\n-----Input-----\nThe first line contains three integers $n$, $m$, and $k$ ($3 \\le k \\le n \\le 10^5$, $n-1 \\le m \\le 2 \\cdot 10^5$)\u00a0\u2014 the number of vertices and edges in the graph, and the parameter $k$ from the statement.\nEach of the next $m$ lines contains two integers $u$ and $v$ ($1 \\le u,v \\le n$) that mean there's an edge between vertices $u$ and $v$. It's guaranteed that the graph is connected and doesn't contain any self-loops or multiple edges.\n-----Output-----\nIf you choose to solve the first problem, then on the first line print $1$, followed by a line containing $\\lceil\\frac{k}{2}\\rceil$ distinct integers not exceeding $n$, the vertices in the desired independent set.\nIf you, however, choose to solve the second problem, then on the first line print $2$, followed by a line containing one integer, $c$, representing the length of the found cycle, followed by a line containing $c$ distinct integers not exceeding $n$, the vertices in the desired cycle, in the order they appear in the cycle.\n-----Examples-----\nInput\n4 4 3\n1 2\n2 3\n3 4\n4 1\nOutput\n1\n1 3 \nInput\n4 5 3\n1 2\n2 3\n3 4\n4 1\n2 4\nOutput\n2\n3\n2 3 4 \nInput\n4 6 3\n1 2\n2 3\n3 4\n4 1\n1 3\n2 4\nOutput\n2\n3\n1 2 3 \nInput\n5 4 5\n1 2\n1 3\n2 4\n2 5\nOutput\n1\n1 4 5 \n-----Note-----\nIn the first sample:\n[Image]\nNotice that printing the independent set $\\{2,4\\}$ is also OK, but printing the cycle $1-2-3-4$ isn't, because its length must be at most $3$.\nIn the second sample:\n$N$\nNotice that printing the independent set $\\{1,3\\}$ or printing the cycle $2-1-4$ is also OK.\nIn the third sample:\n[Image]\nIn the fourth sample:\n$A$\n\ndef",
        "answer": "def find_cycle(graph, k):\n    # Write your code here\n    # print(graph)\n    # print(k)\n    # print(graph[0])\n    # print(graph[1])\n    # print(graph[2])\n    # print(graph[3])\n    # print(graph[4])\n    # print(graph[5])\n    # print(graph[6])\n    # print(graph[7])\n    # print(graph[8])\n    # print(graph[9])\n    # print(graph[10])\n    # print(graph[11])\n    # print(graph[12])\n    # print(graph[13])\n    # print(graph[14])\n    # print(graph[15])\n    # print(graph[16])\n    # print(graph[17])\n    # print(graph[18])\n    # print(graph[19])\n    # print(graph[20])\n    # print(graph[21])\n    # print(graph[22])\n    # print(graph[23])\n    # print(graph[24])\n    # print(graph[25])\n    # print(graph[26])\n    # print(graph[27])\n    # print(graph[28])\n    # print(graph[29])\n    # print(graph[30])\n    # print(graph[31])\n    # print(graph[32])\n    # print(graph[33])\n    # print(graph[34])\n    # print(graph[35])\n    # print(graph[36])\n    # print(graph[37])\n    # print(graph[38])\n    # print(graph[39])\n    # print(graph[40])\n    ",
        "difficulty": "interview"
    },
    {
        "task_id": 2023,
        "prompt": "Complete the Python function given the prompt below:We often have to copy large volumes of information. Such operation can take up many computer resources. Therefore, in this problem you are advised to come up with a way to copy some part of a number array into another one, quickly.\nMore formally, you've got two arrays of integers a_1, a_2,..., a_{n} and b_1, b_2,..., b_{n} of length n. Also, you've got m queries of two types:  Copy the subsegment of array a of length k, starting from position x, into array b, starting from position y, that is, execute b_{y} + q = a_{x} + q for all integer q (0 \u2264 q < k). The given operation is correct \u2014 both subsegments do not touch unexistent elements.  Determine the value in position x of array b, that is, find value b_{x}. \nFor each query of the second type print the result \u2014 the value of the corresponding element of array b.\n-----Input-----\nThe first line contains two space-separated integers n and m (1 \u2264 n, m \u2264 10^5) \u2014 the number of elements in the arrays and the number of queries, correspondingly. The second line contains an array of integers a_1, a_2,..., a_{n} (|a_{i}| \u2264 10^9). The third line contains an array of integers b_1, b_2,..., b_{n} (|b_{i}| \u2264 10^9).\nNext m lines contain the descriptions of the queries. The i-th line first contains integer t_{i} \u2014 the type of the i-th query (1 \u2264 t_{i} \u2264 2). If t_{i} = 1, then the i-th query means the copying operation. If t_{i} = 2, then the i-th query means taking the value in array b. If t_{i} = 1, then the query type is followed by three integers x_{i}, y_{i}, k_{i} (1 \u2264 x_{i}, y_{i}, k_{i} \u2264 n) \u2014 the parameters of the copying query. If t_{i} = 2, then the query type is followed by integer x_{i} (1 \u2264 x_{i} \u2264 n) \u2014 the position in array b.\nAll numbers in the lines are separated with single spaces. It is guaranteed that all the queries are correct, that is, the copying borders fit into the borders of arrays a and b.\n-----Output-----\nFor each second type query print the result on a single line.\n-----Examples-----\nInput\n5 10\n1 2 0 -1 3\n3 1 5 -2 0\n2 5\n1 3 3 3\n2 5\n2 4\n2 1\n1 2 1 4\n2 1\n2 4\n1 4 2 1\n2 2\nOutput\n0\n3\n-1\n3\n2\n3\n-1\n\ndef",
        "answer": "def arrayManipulation(n, queries):\n    arr = [0] * n\n    for i in queries:\n        if i[0] == 1:\n            for j in range(i[1] - 1, i[2]):\n                arr[j] += i[3]\n        else:\n            arr[i[1] - 1] = arr[i[1] - 1] + i[2]\n    return max(arr)",
        "difficulty": "interview"
    },
    {
        "task_id": 2024,
        "prompt": "Complete the Python function given the prompt below:$n$ fishermen have just returned from a fishing vacation. The $i$-th fisherman has caught a fish of weight $a_i$.\nFishermen are going to show off the fish they caught to each other. To do so, they firstly choose an order in which they show their fish (each fisherman shows his fish exactly once, so, formally, the order of showing fish is a permutation of integers from $1$ to $n$). Then they show the fish they caught according to the chosen order. When a fisherman shows his fish, he might either become happy, become sad, or stay content.\nSuppose a fisherman shows a fish of weight $x$, and the maximum weight of a previously shown fish is $y$ ($y = 0$ if that fisherman is the first to show his fish). Then:\n  if $x \\ge 2y$, the fisherman becomes happy;  if $2x \\le y$, the fisherman becomes sad;  if none of these two conditions is met, the fisherman stays content. \nLet's call an order in which the fishermen show their fish emotional if, after all fishermen show their fish according to this order, each fisherman becomes either happy or sad. Calculate the number of emotional orders modulo $998244353$.\n-----Input-----\nThe first line contains one integer $n$ ($2 \\le n \\le 5000$).\nThe second line contains $n$ integers $a_1$, $a_2$,..., $a_n$ ($1 \\le a_i \\le 10^9$).\n-----Output-----\nPrint one integer \u2014 the number of emotional orders, taken modulo $998244353$.\n-----Examples-----\nInput\n4\n1 1 4 9\nOutput\n20\nInput\n4\n4 3 2 1\nOutput\n0\nInput\n3\n4 2 1\nOutput\n6\nInput\n8\n42 1337 13 37 420 666 616 97\nOutput\n19200\n\ndef",
        "answer": "def fish_order(n, a):\n    a.sort()\n    res = 0\n    for i in range(n):\n        if a[i] >= 2 * a[0]:\n            res += 1\n        elif 2 * a[i] <= a[0]:\n            res += 2\n    return res % 998244353",
        "difficulty": "interview"
    },
    {
        "task_id": 2025,
        "prompt": "Complete the Python function given the prompt below:You are given several queries. In the i-th query you are given a single positive integer n_{i}. You are to represent n_{i} as a sum of maximum possible number of composite summands and print this maximum number, or print -1, if there are no such splittings.\nAn integer greater than 1 is composite, if it is not prime, i.e. if it has positive divisors not equal to 1 and the integer itself.\n-----Input-----\nThe first line contains single integer q (1 \u2264 q \u2264 10^5)\u00a0\u2014 the number of queries.\nq lines follow. The (i + 1)-th line contains single integer n_{i} (1 \u2264 n_{i} \u2264 10^9)\u00a0\u2014 the i-th query.\n-----Output-----\nFor each query print the maximum possible number of summands in a valid splitting to composite summands, or -1, if there are no such splittings.\n-----Examples-----\nInput\n1\n12\nOutput\n3\nInput\n2\n6\n8\nOutput\n1\n2\nInput\n3\n1\n2\n3\nOutput\n-1\n-1\n-1\n-----Note-----\n12 = 4 + 4 + 4 = 4 + 8 = 6 + 6 = 12, but the first splitting has the maximum possible number of summands.\n8 = 4 + 4, 6 can't be split into several composite summands.\n1, 2, 3 are less than any composite number, so they do not have valid splittings.\n\ndef",
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "difficulty": "interview"
    },
    {
        "task_id": 2026,
        "prompt": "Complete the Python function given the prompt below:Santa Claus has Robot which lives on the infinite grid and can move along its lines. He can also, having a sequence of m points p_1, p_2,..., p_{m} with integer coordinates, do the following: denote its initial location by p_0. First, the robot will move from p_0 to p_1 along one of the shortest paths between them (please notice that since the robot moves only along the grid lines, there can be several shortest paths). Then, after it reaches p_1, it'll move to p_2, again, choosing one of the shortest ways, then to p_3, and so on, until he has visited all points in the given order. Some of the points in the sequence may coincide, in that case Robot will visit that point several times according to the sequence order.\nWhile Santa was away, someone gave a sequence of points to Robot. This sequence is now lost, but Robot saved the protocol of its unit movements. Please, find the minimum possible length of the sequence.\n-----Input-----\nThe first line of input contains the only positive integer n (1 \u2264 n \u2264 2\u00b710^5) which equals the number of unit segments the robot traveled. The second line contains the movements protocol, which consists of n letters, each being equal either L, or R, or U, or D. k-th letter stands for the direction which Robot traveled the k-th unit segment in: L means that it moved to the left, R\u00a0\u2014 to the right, U\u00a0\u2014 to the top and D\u00a0\u2014 to the bottom. Have a look at the illustrations for better explanation.\n-----Output-----\nThe only line of input should contain the minimum possible length of the sequence.\n-----Examples-----\nInput\n4\nRURD\nOutput\n2\nInput\n6\nRRULDD\nOutput\n2\nInput\n26\nRRRULURURUULULLLDLDDRDRDLD\nOutput\n7\nInput\n3\nRLL\nOutput\n2\nInput\n4\nLRLR\nOutput\n4\n-----Note-----\nThe illustrations to the first three tests are given below.\n[Image] [Image] [Image]\nThe last example illustrates that each point in the sequence should be counted as many times as it is presented in the sequence.\n\ndef",
        "answer": "def shortest_path(path):\n    # your code here\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 2027,
        "prompt": "Complete the Python function given the prompt below:There are n integers b_1, b_2,..., b_{n} written in a row. For all i from 1 to n, values a_{i} are defined by the crows performing the following procedure:\n  The crow sets a_{i} initially 0.  The crow then adds b_{i} to a_{i}, subtracts b_{i} + 1, adds the b_{i} + 2 number, and so on until then'th number. Thus, a_{i} = b_{i} - b_{i} + 1 + b_{i} + 2 - b_{i} + 3.... \nMemory gives you the values a_1, a_2,..., a_{n}, and he now wants you to find the initial numbers b_1, b_2,..., b_{n} written in the row? Can you do it?\n-----Input-----\nThe first line of the input contains a single integer n (2 \u2264 n \u2264 100 000)\u00a0\u2014 the number of integers written in the row.\nThe next line contains n, the i'th of which is a_{i} ( - 10^9 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 the value of the i'th number.\n-----Output-----\nPrint n integers corresponding to the sequence b_1, b_2,..., b_{n}. It's guaranteed that the answer is unique and fits in 32-bit integer type.\n-----Examples-----\nInput\n5\n6 -4 8 -2 3\nOutput\n2 4 6 1 3 \nInput\n5\n3 -2 -1 5 6\nOutput\n1 -3 4 11 6 \n-----Note-----\nIn the first sample test, the crows report the numbers 6, - 4, 8, - 2, and 3 when he starts at indices 1, 2, 3, 4 and 5 respectively. It is easy to check that the sequence 2 4 6 1 3 satisfies the reports. For example, 6 = 2 - 4 + 6 - 1 + 3, and  - 4 = 4 - 6 + 1 - 3.\nIn the second sample test, the sequence 1,  - 3, 4, 11, 6 satisfies the reports. For example, 5 = 11 - 6 and 6 = 6.\n\ndef",
        "answer": "def crow_sequence(n, a):\n    b = [0] * n\n    for i in range(n):\n        b[i] = a[i] - i - 1\n    return b",
        "difficulty": "interview"
    },
    {
        "task_id": 2028,
        "prompt": "Complete the Python function given the prompt below:A new set of desks just arrived, and it's about time! Things were getting quite cramped in the office. You've been put in charge of creating a new seating chart for the engineers. The desks are numbered, and you sent out a survey to the engineering team asking each engineer the number of the desk they currently sit at, and the number of the desk they would like to sit at (which may be the same as their current desk). Each engineer must either remain where they sit, or move to the desired seat they indicated in the survey. No two engineers currently sit at the same desk, nor may any two engineers sit at the same desk in the new seating arrangement.\nHow many seating arrangements can you create that meet the specified requirements? The answer may be very large, so compute it modulo 1000000007 = 10^9 + 7.\n-----Input-----\nInput will begin with a line containing N (1 \u2264 N \u2264 100000), the number of engineers. \nN lines follow, each containing exactly two integers. The i-th line contains the number of the current desk of the i-th engineer and the number of the desk the i-th engineer wants to move to. Desks are numbered from 1 to 2\u00b7N. It is guaranteed that no two engineers sit at the same desk.\n-----Output-----\nPrint the number of possible assignments, modulo 1000000007 = 10^9 + 7.\n-----Examples-----\nInput\n4\n1 5\n5 2\n3 7\n7 3\nOutput\n6\nInput\n5\n1 10\n2 10\n3 10\n4 10\n5 5\nOutput\n5\n-----Note-----\nThese are the possible assignments for the first example:   1 5 3 7  1 2 3 7  5 2 3 7  1 5 7 3  1 2 7 3  5 2 7 3\n\ndef",
        "answer": "def solve(n, a, b):\n    return (fact(n) // fact(a) // fact(n - a)) % 1000000007",
        "difficulty": "interview"
    },
    {
        "task_id": 2029,
        "prompt": "Complete the Python function given the prompt below:You are given a tree (an undirected connected graph without cycles) and an integer $s$.\nVanya wants to put weights on all edges of the tree so that all weights are non-negative real numbers and their sum is $s$. At the same time, he wants to make the diameter of the tree as small as possible.\nLet's define the diameter of a weighed tree as the maximum sum of the weights of the edges lying on the path between two some vertices of the tree. In other words, the diameter of a weighed tree is the length of the longest simple path in the tree, where length of a path is equal to the sum of weights over all edges in the path.\nFind the minimum possible diameter that Vanya can get.\n-----Input-----\nThe first line contains two integer numbers $n$ and $s$ ($2 \\leq n \\leq 10^5$, $1 \\leq s \\leq 10^9$) \u2014 the number of vertices in the tree and the sum of edge weights.\nEach of the following $n\u22121$ lines contains two space-separated integer numbers $a_i$ and $b_i$ ($1 \\leq a_i, b_i \\leq n$, $a_i \\neq b_i$) \u2014 the indexes of vertices connected by an edge. The edges are undirected.\nIt is guaranteed that the given edges form a tree.\n-----Output-----\nPrint the minimum diameter of the tree that Vanya can get by placing some non-negative real weights on its edges with the sum equal to $s$.\nYour answer will be considered correct if its absolute or relative error does not exceed $10^{-6}$.\nFormally, let your answer be $a$, and the jury's answer be $b$. Your answer is considered correct if $\\frac {|a-b|} {max(1, b)} \\leq 10^{-6}$.\n-----Examples-----\nInput\n4 3\n1 2\n1 3\n1 4\nOutput\n2.000000000000000000\nInput\n6 1\n2 1\n2 3\n2 5\n5 4\n5 6\nOutput\n0.500000000000000000\nInput\n5 5\n1 2\n2 3\n3 4\n3 5\nOutput\n3.333333333333333333\n-----Note-----\nIn the first example it is necessary to put weights like this: [Image] \nIt is easy to see that the diameter of this tree is $2$. It can be proved that it is the minimum possible diameter.\nIn the second example it is necessary to put weights like this: [Image]\n\ndef",
        "answer": "def find_diameter(n, s):\n    diameter = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if s - (graph[i][j] + graph[j][i]) > 0:\n                diameter = max(diameter, graph[i][j] + graph[j][i])\n    return diameter",
        "difficulty": "interview"
    },
    {
        "task_id": 2030,
        "prompt": "Complete the Python function given the prompt below:Little Artyom decided to study probability theory. He found a book with a lot of nice exercises and now wants you to help him with one of them.\nConsider two dices. When thrown each dice shows some integer from 1 to n inclusive. For each dice the probability of each outcome is given (of course, their sum is 1), and different dices may have different probability distributions.\nWe throw both dices simultaneously and then calculate values max(a, b) and min(a, b), where a is equal to the outcome of the first dice, while b is equal to the outcome of the second dice. You don't know the probability distributions for particular values on each dice, but you know the probability distributions for max(a, b) and min(a, b). That is, for each x from 1 to n you know the probability that max(a, b) would be equal to x and the probability that min(a, b) would be equal to x. Find any valid probability distribution for values on the dices. It's guaranteed that the input data is consistent, that is, at least one solution exists.\n-----Input-----\nFirst line contains the integer n (1 \u2264 n \u2264 100 000)\u00a0\u2014 the number of different values for both dices.\nSecond line contains an array consisting of n real values with up to 8 digits after the decimal point \u00a0\u2014 probability distribution for max(a, b), the i-th of these values equals to the probability that max(a, b) = i. It's guaranteed that the sum of these values for one dice is 1. The third line contains the description of the distribution min(a, b) in the same format.\n-----Output-----\nOutput two descriptions of the probability distribution for a on the first line and for b on the second line. \nThe answer will be considered correct if each value of max(a, b) and min(a, b) probability distribution values does not differ by more than 10^{ - 6} from ones given in input. Also, probabilities should be non-negative and their sums should differ from 1 by no more than 10^{ - 6}.\n-----Examples-----\nInput\n2\n0.25 0.75\n0.75 0.25\nOutput\n0.5 0.5 \n0.5 0.5 \nInput\n3\n0.125 0.25 0.625\n0.625 0.25 0.125\nOutput\n0.25 0.25 0.5 \n0.5 0.25 0.25\n\ndef",
        "answer": "def probability_distribution(n, a, b):\n    a_prob = [0] * (n + 1)\n    b_prob = [0] * (n + 1)\n    for i in range(n + 1):\n        a_prob[i] = a[i] / a[-1]\n        b_prob[i] = b[i] / b[-1]\n    return a_prob, b_prob",
        "difficulty": "interview"
    },
    {
        "task_id": 2031,
        "prompt": "Complete the Python function given the prompt below:This is the easier version of the problem. In this version $1 \\le n, m \\le 100$. You can hack this problem only if you solve and lock both problems.\nYou are given a sequence of integers $a=[a_1,a_2,\\dots,a_n]$ of length $n$. Its subsequence is obtained by removing zero or more elements from the sequence $a$ (they do not necessarily go consecutively). For example, for the sequence $a=[11,20,11,33,11,20,11]$:\n  $[11,20,11,33,11,20,11]$, $[11,20,11,33,11,20]$, $[11,11,11,11]$, $[20]$, $[33,20]$ are subsequences (these are just some of the long list);  $[40]$, $[33,33]$, $[33,20,20]$, $[20,20,11,11]$ are not subsequences. \nSuppose that an additional non-negative integer $k$ ($1 \\le k \\le n$) is given, then the subsequence is called optimal if:\n  it has a length of $k$ and the sum of its elements is the maximum possible among all subsequences of length $k$;  and among all subsequences of length $k$ that satisfy the previous item, it is lexicographically minimal. \nRecall that the sequence $b=[b_1, b_2, \\dots, b_k]$ is lexicographically smaller than the sequence $c=[c_1, c_2, \\dots, c_k]$ if the first element (from the left) in which they differ less in the sequence $b$ than in $c$. Formally: there exists $t$ ($1 \\le t \\le k$) such that $b_1=c_1$, $b_2=c_2$,..., $b_{t-1}=c_{t-1}$ and at the same time $b_t<c_t$. For example:\n  $[10, 20, 20]$ lexicographically less than $[10, 21, 1]$,  $[7, 99, 99]$ is lexicographically less than $[10, 21, 1]$,  $[10, 21, 0]$ is lexicographically less than $[10, 21, 1]$. \nYou are given a sequence of $a=[a_1,a_2,\\dots,a_n]$ and $m$ requests, each consisting of two numbers $k_j$ and $pos_j$ ($1 \\le k \\le n$, $1 \\le pos_j \\le k_j$). For each query, print the value that is in the index $pos_j$ of the optimal subsequence of the given sequence $a$ for $k=k_j$.\nFor example, if $n=4$, $a=[10,20,30,20]$, $k_j=2$, then the optimal subsequence is $[20,30]$ \u2014 it is the minimum lexicographically among all subsequences of length $2$ with the maximum total sum of items. Thus, the answer to the request $k_j=2$, $pos_j=1$ is the number $20$, and the answer to the request $k_j=2$, $pos_j=2$ is the number $30$.\n-----Input-----\nThe first line contains an integer $n$ ($1 \\le n \\le 100$) \u2014 the length of the sequence $a$.\nThe second line contains elements of the sequence $a$: integer numbers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$).\nThe third line contains an integer $m$ ($1 \\le m \\le 100$) \u2014 the number of requests.\nThe following $m$ lines contain pairs of integers $k_j$ and $pos_j$ ($1 \\le k \\le n$, $1 \\le pos_j \\le k_j$) \u2014 the requests.\n-----Output-----\nPrint $m$ integers $r_1, r_2, \\dots, r_m$ ($1 \\le r_j \\le 10^9$) one per line: answers to the requests in the order they appear in the input. The value of $r_j$ should be equal to the value contained in the position $pos_j$ of the optimal subsequence for $k=k_j$.\n-----Examples-----\nInput\n3\n10 20 10\n6\n1 1\n2 1\n2 2\n3 1\n3 2\n3 3\nOutput\n20\n10\n20\n10\n20\n10\nInput\n7\n1 2 1 3 1 2 1\n9\n2 1\n2 2\n3 1\n3 2\n3 3\n1 1\n7 1\n7 7\n7 4\nOutput\n2\n3\n2\n3\n2\n3\n1\n1\n3\n-----Note-----\nIn the first example, for $a=[10,20,10]$ the optimal subsequences are:   for $k=1$: $[20]$,  for $k=2$: $[10,20]$,  for $k=3$: $[10,20,10]$.\n\ndef",
        "answer": "def subsequence(a, k, pos):\n    if k == 1:\n        return a[pos]\n    else:\n        return max(subsequence(a, k - 1, i) + a[i] for i in range(k) if i!= pos)",
        "difficulty": "interview"
    },
    {
        "task_id": 2032,
        "prompt": "Complete the Python function given the prompt below:You play a strategic video game (yeah, we ran out of good problem legends). In this game you control a large army, and your goal is to conquer $n$ castles of your opponent.\nLet's describe the game process in detail. Initially you control an army of $k$ warriors. Your enemy controls $n$ castles; to conquer the $i$-th castle, you need at least $a_i$ warriors (you are so good at this game that you don't lose any warriors while taking over a castle, so your army stays the same after the fight). After you take control over a castle, you recruit new warriors into your army \u2014 formally, after you capture the $i$-th castle, $b_i$ warriors join your army. Furthermore, after capturing a castle (or later) you can defend it: if you leave at least one warrior in a castle, this castle is considered defended. Each castle has an importance parameter $c_i$, and your total score is the sum of importance values over all defended castles. There are two ways to defend a castle:\n  if you are currently in the castle $i$, you may leave one warrior to defend castle $i$;  there are $m$ one-way portals connecting the castles. Each portal is characterised by two numbers of castles $u$ and $v$ (for each portal holds $u > v$). A portal can be used as follows: if you are currently in the castle $u$, you may send one warrior to defend castle $v$. \nObviously, when you order your warrior to defend some castle, he leaves your army.\nYou capture the castles in fixed order: you have to capture the first one, then the second one, and so on. After you capture the castle $i$ (but only before capturing castle $i + 1$) you may recruit new warriors from castle $i$, leave a warrior to defend castle $i$, and use any number of portals leading from castle $i$ to other castles having smaller numbers. As soon as you capture the next castle, these actions for castle $i$ won't be available to you.\nIf, during some moment in the game, you don't have enough warriors to capture the next castle, you lose. Your goal is to maximize the sum of importance values over all defended castles (note that you may hire new warriors in the last castle, defend it and use portals leading from it even after you capture it \u2014 your score will be calculated afterwards).\nCan you determine an optimal strategy of capturing and defending the castles?\n-----Input-----\nThe first line contains three integers $n$, $m$ and $k$ ($1 \\le n \\le 5000$, $0 \\le m \\le \\min(\\frac{n(n - 1)}{2}, 3 \\cdot 10^5)$, $0 \\le k \\le 5000$) \u2014 the number of castles, the number of portals and initial size of your army, respectively.\nThen $n$ lines follow. The $i$-th line describes the $i$-th castle with three integers $a_i$, $b_i$ and $c_i$ ($0 \\le a_i, b_i, c_i \\le 5000$) \u2014 the number of warriors required to capture the $i$-th castle, the number of warriors available for hire in this castle and its importance value.\nThen $m$ lines follow. The $i$-th line describes the $i$-th portal with two integers $u_i$ and $v_i$ ($1 \\le v_i < u_i \\le n$), meaning that the portal leads from the castle $u_i$ to the castle $v_i$. There are no two same portals listed.\nIt is guaranteed that the size of your army won't exceed $5000$ under any circumstances (i. e. $k + \\sum\\limits_{i = 1}^{n} b_i \\le 5000$).\n-----Output-----\nIf it's impossible to capture all the castles, print one integer $-1$.\nOtherwise, print one integer equal to the maximum sum of importance values of defended castles.\n-----Examples-----\nInput\n4 3 7\n7 4 17\n3 0 8\n11 2 0\n13 3 5\n3 1\n2 1\n4 3\nOutput\n5\nInput\n4 3 7\n7 4 17\n3 0 8\n11 2 0\n13 3 5\n3 1\n2 1\n4 1\nOutput\n22\nInput\n4 3 7\n7 4 17\n3 0 8\n11 2 0\n14 3 5\n3 1\n2 1\n4 3\nOutput\n-1\n-----Note-----\nThe best course of action in the first example is as follows:\n  capture the first castle;  hire warriors from the first castle, your army has $11$ warriors now;  capture the second castle;  capture the third castle;  hire warriors from the third castle, your army has $13$ warriors now;  capture the fourth castle;  leave one warrior to protect the fourth castle, your army has $12$ warriors now. \nThis course of action (and several other ones) gives $5$ as your total score.\nThe best course of action in the second example is as follows:\n  capture the first castle;  hire warriors from the first castle, your army has $11$ warriors now;  capture the second castle;  capture the third castle;  hire warriors from the third castle, your army has $13$ warriors now;  capture the fourth castle;  leave one warrior to protect the fourth castle, your army has $12$ warriors now;  send one warrior to protect the first castle through the third portal, your army has $11$ warriors now. \nThis course of action (and several other ones) gives $22$ as your total score.\nIn the third example it's impossible to capture the last castle: you need $14$ warriors to do so, but you can accumulate no more than $13$ without capturing it.\n\ndef",
        "answer": "def castle_capture(n, m, k, castles):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2033,
        "prompt": "Complete the Python function given the prompt below:The map of Bertown can be represented as a set of $n$ intersections, numbered from $1$ to $n$ and connected by $m$ one-way roads. It is possible to move along the roads from any intersection to any other intersection. The length of some path from one intersection to another is the number of roads that one has to traverse along the path. The shortest path from one intersection $v$ to another intersection $u$ is the path that starts in $v$, ends in $u$ and has the minimum length among all such paths.\nPolycarp lives near the intersection $s$ and works in a building near the intersection $t$. Every day he gets from $s$ to $t$ by car. Today he has chosen the following path to his workplace: $p_1$, $p_2$,..., $p_k$, where $p_1 = s$, $p_k = t$, and all other elements of this sequence are the intermediate intersections, listed in the order Polycarp arrived at them. Polycarp never arrived at the same intersection twice, so all elements of this sequence are pairwise distinct. Note that you know Polycarp's path beforehand (it is fixed), and it is not necessarily one of the shortest paths from $s$ to $t$.\nPolycarp's car has a complex navigation system installed in it. Let's describe how it works. When Polycarp starts his journey at the intersection $s$, the system chooses some shortest path from $s$ to $t$ and shows it to Polycarp. Let's denote the next intersection in the chosen path as $v$. If Polycarp chooses to drive along the road from $s$ to $v$, then the navigator shows him the same shortest path (obviously, starting from $v$ as soon as he arrives at this intersection). However, if Polycarp chooses to drive to another intersection $w$ instead, the navigator rebuilds the path: as soon as Polycarp arrives at $w$, the navigation system chooses some shortest path from $w$ to $t$ and shows it to Polycarp. The same process continues until Polycarp arrives at $t$: if Polycarp moves along the road recommended by the system, it maintains the shortest path it has already built; but if Polycarp chooses some other path, the system rebuilds the path by the same rules.\nHere is an example. Suppose the map of Bertown looks as follows, and Polycarp drives along the path $[1, 2, 3, 4]$ ($s = 1$, $t = 4$): \nWhen Polycarp starts at $1$, the system chooses some shortest path from $1$ to $4$. There is only one such path, it is $[1, 5, 4]$;  Polycarp chooses to drive to $2$, which is not along the path chosen by the system. When Polycarp arrives at $2$, the navigator rebuilds the path by choosing some shortest path from $2$ to $4$, for example, $[2, 6, 4]$ (note that it could choose $[2, 3, 4]$);  Polycarp chooses to drive to $3$, which is not along the path chosen by the system. When Polycarp arrives at $3$, the navigator rebuilds the path by choosing the only shortest path from $3$ to $4$, which is $[3, 4]$;  Polycarp arrives at $4$ along the road chosen by the navigator, so the system does not have to rebuild anything. \nOverall, we get $2$ rebuilds in this scenario. Note that if the system chose $[2, 3, 4]$ instead of $[2, 6, 4]$ during the second step, there would be only $1$ rebuild (since Polycarp goes along the path, so the system maintains the path $[3, 4]$ during the third step).\nThe example shows us that the number of rebuilds can differ even if the map of Bertown and the path chosen by Polycarp stays the same. Given this information (the map and Polycarp's path), can you determine the minimum and the maximum number of rebuilds that could have happened during the journey?\n-----Input-----\nThe first line contains two integers $n$ and $m$ ($2 \\le n \\le m \\le 2 \\cdot 10^5$) \u2014 the number of intersections and one-way roads in Bertown, respectively.\nThen $m$ lines follow, each describing a road. Each line contains two integers $u$ and $v$ ($1 \\le u, v \\le n$, $u \\ne v$) denoting a road from intersection $u$ to intersection $v$. All roads in Bertown are pairwise distinct, which means that each ordered pair $(u, v)$ appears at most once in these $m$ lines (but if there is a road $(u, v)$, the road $(v, u)$ can also appear).\nThe following line contains one integer $k$ ($2 \\le k \\le n$) \u2014 the number of intersections in Polycarp's path from home to his workplace.\nThe last line contains $k$ integers $p_1$, $p_2$,..., $p_k$ ($1 \\le p_i \\le n$, all these integers are pairwise distinct) \u2014 the intersections along Polycarp's path in the order he arrived at them. $p_1$ is the intersection where Polycarp lives ($s = p_1$), and $p_k$ is the intersection where Polycarp's workplace is situated ($t = p_k$). It is guaranteed that for every $i \\in [1, k - 1]$ the road from $p_i$ to $p_{i + 1}$ exists, so the path goes along the roads of Bertown. \n-----Output-----\nPrint two integers: the minimum and the maximum number of rebuilds that could have happened during the journey.\n-----Examples-----\nInput\n6 9\n1 5\n5 4\n1 2\n2 3\n3 4\n4 1\n2 6\n6 4\n4 2\n4\n1 2 3 4\nOutput\n1 2\nInput\n7 7\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 1\n7\n1 2 3 4 5 6 7\nOutput\n0 0\nInput\n8 13\n8 7\n8 6\n7 5\n7 4\n6 5\n6 4\n5 3\n5 2\n4 3\n4 2\n3 1\n2 1\n1 8\n5\n8 7 5 2 1\nOutput\n0 3\n\ndef",
        "answer": "def find_path(graph, start, end, path=[]):\n    path = path + [start]\n    if start == end:\n        return path\n    if not start in graph:\n        return None\n    for node in graph[start]:\n        if node not in path:\n            newpath = find_path(graph, node, end, path)\n            if newpath: return newpath\n    return None",
        "difficulty": "interview"
    },
    {
        "task_id": 2034,
        "prompt": "Complete the Python function given the prompt below:Berland has n cities connected by m bidirectional roads. No road connects a city to itself, and each pair of cities is connected by no more than one road. It is not guaranteed that you can get from any city to any other one, using only the existing roads.\nThe President of Berland decided to make changes to the road system and instructed the Ministry of Transport to make this reform. Now, each road should be unidirectional (only lead from one city to another).\nIn order not to cause great resentment among residents, the reform needs to be conducted so that there can be as few separate cities as possible. A city is considered separate, if no road leads into it, while it is allowed to have roads leading from this city.\nHelp the Ministry of Transport to find the minimum possible number of separate cities after the reform.\n-----Input-----\nThe first line of the input contains two positive integers, n and m \u2014 the number of the cities and the number of roads in Berland (2 \u2264 n \u2264 100 000, 1 \u2264 m \u2264 100 000). \nNext m lines contain the descriptions of the roads: the i-th road is determined by two distinct integers x_{i}, y_{i} (1 \u2264 x_{i}, y_{i} \u2264 n, x_{i} \u2260 y_{i}), where x_{i} and y_{i} are the numbers of the cities connected by the i-th road.\nIt is guaranteed that there is no more than one road between each pair of cities, but it is not guaranteed that from any city you can get to any other one, using only roads.\n-----Output-----\nPrint a single integer\u00a0\u2014 the minimum number of separated cities after the reform.\n-----Examples-----\nInput\n4 3\n2 1\n1 3\n4 3\nOutput\n1\nInput\n5 5\n2 1\n1 3\n2 3\n2 5\n4 3\nOutput\n0\nInput\n6 5\n1 2\n2 3\n4 5\n4 6\n5 6\nOutput\n1\n-----Note-----\nIn the first sample the following road orientation is allowed: $1 \\rightarrow 2$, $1 \\rightarrow 3$, $3 \\rightarrow 4$.\nThe second sample: $1 \\rightarrow 2$, $3 \\rightarrow 1$, $2 \\rightarrow 3$, $2 \\rightarrow 5$, $3 \\rightarrow 4$.\nThe third sample: $1 \\rightarrow 2$, $2 \\rightarrow 3$, $4 \\rightarrow 5$, $5 \\rightarrow 6$, $6 \\rightarrow 4$.\n\ndef",
        "answer": "def roads(roads):\n    roads_dict = {}\n    for road in roads:\n        if road[0] not in roads_dict:\n            roads_dict[road[0]] = [road[1]]\n        else:\n            roads_dict[road[0]].append(road[1])\n        if road[1] not in roads_dict:\n            roads_dict[road[1]] = [road[0]]\n        else:\n            roads_dict[road[1]].append(road[0])",
        "difficulty": "interview"
    },
    {
        "task_id": 2035,
        "prompt": "Complete the Python function given the prompt below:The map of the capital of Berland can be viewed on the infinite coordinate plane. Each point with integer coordinates contains a building, and there are streets connecting every building to four neighbouring buildings. All streets are parallel to the coordinate axes.\nThe main school of the capital is located in $(s_x, s_y)$. There are $n$ students attending this school, the $i$-th of them lives in the house located in $(x_i, y_i)$. It is possible that some students live in the same house, but no student lives in $(s_x, s_y)$.\nAfter classes end, each student walks from the school to his house along one of the shortest paths. So the distance the $i$-th student goes from the school to his house is $|s_x - x_i| + |s_y - y_i|$.\nThe Provision Department of Berland has decided to open a shawarma tent somewhere in the capital (at some point with integer coordinates). It is considered that the $i$-th student will buy a shawarma if at least one of the shortest paths from the school to the $i$-th student's house goes through the point where the shawarma tent is located. It is forbidden to place the shawarma tent at the point where the school is located, but the coordinates of the shawarma tent may coincide with the coordinates of the house of some student (or even multiple students).\nYou want to find the maximum possible number of students buying shawarma and the optimal location for the tent itself.\n-----Input-----\nThe first line contains three integers $n$, $s_x$, $s_y$ ($1 \\le n \\le 200\\,000$, $0 \\le s_x, s_y \\le 10^{9}$) \u2014 the number of students and the coordinates of the school, respectively.\nThen $n$ lines follow. The $i$-th of them contains two integers $x_i$, $y_i$ ($0 \\le x_i, y_i \\le 10^{9}$) \u2014 the location of the house where the $i$-th student lives. Some locations of houses may coincide, but no student lives in the same location where the school is situated.\n-----Output-----\nThe output should consist of two lines. The first of them should contain one integer $c$ \u2014 the maximum number of students that will buy shawarmas at the tent. \nThe second line should contain two integers $p_x$ and $p_y$ \u2014 the coordinates where the tent should be located. If there are multiple answers, print any of them. Note that each of $p_x$ and $p_y$ should be not less than $0$ and not greater than $10^{9}$.\n-----Examples-----\nInput\n4 3 2\n1 3\n4 2\n5 1\n4 1\nOutput\n3\n4 2\nInput\n3 100 100\n0 0\n0 0\n100 200\nOutput\n2\n99 100\nInput\n7 10 12\n5 6\n20 23\n15 4\n16 5\n4 54\n12 1\n4 15\nOutput\n4\n10 11\n-----Note-----\nIn the first example, If we build the shawarma tent in $(4, 2)$, then the students living in $(4, 2)$, $(4, 1)$ and $(5, 1)$ will visit it.\nIn the second example, it is possible to build the shawarma tent in $(1, 1)$, then both students living in $(0, 0)$ will visit it.\n\ndef",
        "answer": "def shawarma(n, s_x, s_y, x, y):\n    houses = []\n    for i in range(n):\n        houses.append((x[i], y[i]))\n    houses.append((s_x, s_y))\n    houses = sorted(houses, key=lambda x: x[0])\n    houses = sorted(houses, key=lambda x: x[1])\n    houses = sorted(houses, key=lambda x: x[0] + x[1])\n    houses = sorted(houses, key=lambda x: x[0] - x[1])\n    houses = sorted(houses, key=lambda x: x[0] + x[1])\n    houses = sorted(houses, key=lambda x: x[0] - x[1])\n    houses = sorted(houses, key=lambda x: x[0] + x[1])\n    houses = sorted(houses, key=lambda x: x[0] - x[1])\n    houses = sorted(houses, key=lambda x: x[0] + x[1])\n    houses = sorted(houses, key=lambda x: x[0] - x[1])\n    houses = sorted(houses, key=lambda x: x[0] + x[1])\n    houses = sorted(houses, key=lambda x: x[0] - x[1])\n    houses = sorted(houses, key=lambda x: x[0] + x[1])\n    houses = sorted(houses, key=lambda x: x[0] - x[1])\n    houses = sorted(houses, key=lambda x: x[0] + x[1])\n    houses = sorted(houses, key=lambda x: x[0] - x",
        "difficulty": "interview"
    },
    {
        "task_id": 2036,
        "prompt": "Complete the Python function given the prompt below:Boboniu likes playing chess with his employees. As we know, no employee can beat the boss in the chess game, so Boboniu has never lost in any round.\nYou are a new applicant for his company. Boboniu will test you with the following chess question:\nConsider a $n\\times m$ grid (rows are numbered from $1$ to $n$, and columns are numbered from $1$ to $m$). You have a chess piece, and it stands at some cell $(S_x,S_y)$ which is not on the border (i.e. $2 \\le S_x \\le n-1$ and $2 \\le S_y \\le m-1$).\nFrom the cell $(x,y)$, you can move your chess piece to $(x,y')$ ($1\\le y'\\le m, y' \\neq y$) or $(x',y)$ ($1\\le x'\\le n, x'\\neq x$). In other words, the chess piece moves as a rook. From the cell, you can move to any cell on the same row or column.\nYour goal is to visit each cell exactly once. Can you find a solution?\nNote that cells on the path between two adjacent cells in your route are not counted as visited, and it is not required to return to the starting point.\n-----Input-----\nThe only line of the input contains four integers $n$, $m$, $S_x$ and $S_y$ ($3\\le n,m\\le 100$, $2 \\le S_x \\le n-1$, $2 \\le S_y \\le m-1$) \u2014 the number of rows, the number of columns, and the initial position of your chess piece, respectively.\n-----Output-----\nYou should print $n\\cdot m$ lines.\nThe $i$-th line should contain two integers $x_i$ and $y_i$ ($1 \\leq x_i \\leq n$, $1 \\leq y_i \\leq m$), denoting the $i$-th cell that you visited. You should print exactly $nm$ pairs $(x_i, y_i)$, they should cover all possible pairs $(x_i, y_i)$, such that $1 \\leq x_i \\leq n$, $1 \\leq y_i \\leq m$.\nWe can show that under these constraints there always exists a solution. If there are multiple answers, print any.\n-----Examples-----\nInput\n3 3 2 2\nOutput\n2 2\n1 2\n1 3\n2 3\n3 3\n3 2\n3 1\n2 1\n1 1\nInput\n3 4 2 2\nOutput\n2 2\n2 1\n2 3\n2 4\n1 4\n3 4\n3 3\n3 2\n3 1\n1 1\n1 2\n1 3\n-----Note-----\nPossible routes for two examples: [Image]\n\ndef",
        "answer": "def chess(n, m, s_x, s_y):\n    # Write your code here\n    if n == 1 or m == 1:\n        return n * m\n    if s_x == n - 1 and s_y == m - 1:\n        return 1\n    if s_x == n - 1:\n        return m\n    if s_y == m - 1:\n        return n\n    return chess(n - 1, m, s_x, s_y) + chess(n, m - 1, s_x, s_y)",
        "difficulty": "interview"
    },
    {
        "task_id": 2037,
        "prompt": "Complete the Python function given the prompt below:Arkady coordinates rounds on some not really famous competitive programming platform. Each round features $n$ problems of distinct difficulty, the difficulties are numbered from $1$ to $n$.\nTo hold a round Arkady needs $n$ new (not used previously) problems, one for each difficulty. As for now, Arkady creates all the problems himself, but unfortunately, he can't just create a problem of a desired difficulty. Instead, when he creates a problem, he evaluates its difficulty from $1$ to $n$ and puts it into the problems pool.\nAt each moment when Arkady can choose a set of $n$ new problems of distinct difficulties from the pool, he holds a round with these problems and removes them from the pool. Arkady always creates one problem at a time, so if he can hold a round after creating a problem, he immediately does it.\nYou are given a sequence of problems' difficulties in the order Arkady created them. For each problem, determine whether Arkady held the round right after creating this problem, or not. Initially the problems pool is empty.\n-----Input-----\nThe first line contains two integers $n$ and $m$ ($1 \\le n, m \\le 10^5$)\u00a0\u2014 the number of difficulty levels and the number of problems Arkady created.\nThe second line contains $m$ integers $a_1, a_2, \\ldots, a_m$ ($1 \\le a_i \\le n$)\u00a0\u2014 the problems' difficulties in the order Arkady created them.\n-----Output-----\nPrint a line containing $m$ digits. The $i$-th digit should be $1$ if Arkady held the round after creation of the $i$-th problem, and $0$ otherwise.\n-----Examples-----\nInput\n3 11\n2 3 1 2 2 2 3 2 2 3 1\nOutput\n00100000001\nInput\n4 8\n4 1 3 3 2 3 3 3\nOutput\n00001000\n-----Note-----\nIn the first example Arkady held the round after the first three problems, because they are of distinct difficulties, and then only after the last problem.\n\ndef",
        "answer": "def arkady(n, m, a):\n    res = [0] * m\n    for i in range(m):\n        for j in range(n):\n            if a[i] == j + 1:\n                res[i] = 1\n    return res",
        "difficulty": "interview"
    },
    {
        "task_id": 2038,
        "prompt": "Complete the Python function given the prompt below:You are given a permutation $p$ of integers from $1$ to $n$, where $n$ is an even number. \nYour goal is to sort the permutation. To do so, you can perform zero or more operations of the following type:   take two indices $i$ and $j$ such that $2 \\cdot |i - j| \\geq n$ and swap $p_i$ and $p_j$. \nThere is no need to minimize the number of operations, however you should use no more than $5 \\cdot n$ operations. One can show that it is always possible to do that.\n-----Input-----\nThe first line contains a single integer $n$ ($2 \\leq n \\leq 3 \\cdot 10^5$, $n$ is even)\u00a0\u2014 the length of the permutation. \nThe second line contains $n$ distinct integers $p_1, p_2, \\ldots, p_n$ ($1 \\le p_i \\le n$)\u00a0\u2014 the given permutation.\n-----Output-----\nOn the first line print $m$ ($0 \\le m \\le 5 \\cdot n$)\u00a0\u2014 the number of swaps to perform.\nEach of the following $m$ lines should contain integers $a_i, b_i$ ($1 \\le a_i, b_i \\le n$, $|a_i - b_i| \\ge \\frac{n}{2}$)\u00a0\u2014 the indices that should be swapped in the corresponding swap.\nNote that there is no need to minimize the number of operations. We can show that an answer always exists.\n-----Examples-----\nInput\n2\n2 1\nOutput\n1\n1 2\nInput\n4\n3 4 1 2\nOutput\n4\n1 4\n1 4\n1 3\n2 4\nInput\n6\n2 5 3 1 4 6\nOutput\n3\n1 5\n2 5\n1 4\n-----Note-----\nIn the first example, when one swap elements on positions $1$ and $2$, the array becomes sorted.\nIn the second example, pay attention that there is no need to minimize number of swaps.\nIn the third example, after swapping elements on positions $1$ and $5$ the array becomes: $[4, 5, 3, 1, 2, 6]$. After swapping elements on positions $2$ and $5$ the array becomes $[4, 2, 3, 1, 5, 6]$ and finally after swapping elements on positions $1$ and $4$ the array becomes sorted: $[1, 2, 3, 4, 5, 6]$.\n\ndef",
        "answer": "def swap(p, i, j):\n    p[i], p[j] = p[j], p[i]\n    return p",
        "difficulty": "interview"
    },
    {
        "task_id": 2039,
        "prompt": "Complete the Python function given the prompt below:You are given an array a. Some element of this array a_{i} is a local minimum iff it is strictly less than both of its neighbours (that is, a_{i} < a_{i} - 1 and a_{i} < a_{i} + 1). Also the element can be called local maximum iff it is strictly greater than its neighbours (that is, a_{i} > a_{i} - 1 and a_{i} > a_{i} + 1). Since a_1 and a_{n} have only one neighbour each, they are neither local minima nor local maxima.\nAn element is called a local extremum iff it is either local maximum or local minimum. Your task is to calculate the number of local extrema in the given array.\n-----Input-----\nThe first line contains one integer n (1 \u2264 n \u2264 1000) \u2014 the number of elements in array a.\nThe second line contains n integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 1000) \u2014 the elements of array a.\n-----Output-----\nPrint the number of local extrema in the given array.\n-----Examples-----\nInput\n3\n1 2 3\nOutput\n0\nInput\n4\n1 5 2 5\nOutput\n2\n\ndef",
        "answer": "def local_extrema(a):\n    count = 0\n    for i in range(1, len(a)-1):\n        if a[i] > a[i-1] and a[i] > a[i+1]:\n            count += 1\n        elif a[i] < a[i-1] and a[i] < a[i+1]:\n            count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 2040,
        "prompt": "Complete the Python function given the prompt below:Vasya had a strictly increasing sequence of positive integers a_1,..., a_{n}. Vasya used it to build a new sequence b_1,..., b_{n}, where b_{i} is the sum of digits of a_{i}'s decimal representation. Then sequence a_{i} got lost and all that remained is sequence b_{i}.\nVasya wonders what the numbers a_{i} could be like. Of all the possible options he likes the one sequence with the minimum possible last number a_{n}. Help Vasya restore the initial sequence.\nIt is guaranteed that such a sequence always exists.\n-----Input-----\nThe first line contains a single integer number n (1 \u2264 n \u2264 300).\nNext n lines contain integer numbers b_1,..., b_{n} \u00a0\u2014 the required sums of digits. All b_{i} belong to the range 1 \u2264 b_{i} \u2264 300.\n-----Output-----\nPrint n integer numbers, one per line\u00a0\u2014 the correct option for numbers a_{i}, in order of following in sequence. The sequence should be strictly increasing. The sum of digits of the i-th number should be equal to b_{i}. \nIf there are multiple sequences with least possible number a_{n}, print any of them. Print the numbers without leading zeroes.\n-----Examples-----\nInput\n3\n1\n2\n3\nOutput\n1\n2\n3\nInput\n3\n3\n2\n1\nOutput\n3\n11\n100\n\ndef",
        "answer": "def sum_of_digits(n):\n    return sum([int(i) for i in str(n)])",
        "difficulty": "interview"
    },
    {
        "task_id": 2041,
        "prompt": "Complete the Python function given the prompt below:This is the harder version of the problem. In this version, $1 \\le n, m \\le 2\\cdot10^5$. You can hack this problem if you locked it. But you can hack the previous problem only if you locked both problems.\nYou are given a sequence of integers $a=[a_1,a_2,\\dots,a_n]$ of length $n$. Its subsequence is obtained by removing zero or more elements from the sequence $a$ (they do not necessarily go consecutively). For example, for the sequence $a=[11,20,11,33,11,20,11]$:  $[11,20,11,33,11,20,11]$, $[11,20,11,33,11,20]$, $[11,11,11,11]$, $[20]$, $[33,20]$ are subsequences (these are just some of the long list);  $[40]$, $[33,33]$, $[33,20,20]$, $[20,20,11,11]$ are not subsequences. \nSuppose that an additional non-negative integer $k$ ($1 \\le k \\le n$) is given, then the subsequence is called optimal if:  it has a length of $k$ and the sum of its elements is the maximum possible among all subsequences of length $k$;  and among all subsequences of length $k$ that satisfy the previous item, it is lexicographically minimal. \nRecall that the sequence $b=[b_1, b_2, \\dots, b_k]$ is lexicographically smaller than the sequence $c=[c_1, c_2, \\dots, c_k]$ if the first element (from the left) in which they differ less in the sequence $b$ than in $c$. Formally: there exists $t$ ($1 \\le t \\le k$) such that $b_1=c_1$, $b_2=c_2$,..., $b_{t-1}=c_{t-1}$ and at the same time $b_t<c_t$. For example:  $[10, 20, 20]$ lexicographically less than $[10, 21, 1]$,  $[7, 99, 99]$ is lexicographically less than $[10, 21, 1]$,  $[10, 21, 0]$ is lexicographically less than $[10, 21, 1]$. \nYou are given a sequence of $a=[a_1,a_2,\\dots,a_n]$ and $m$ requests, each consisting of two numbers $k_j$ and $pos_j$ ($1 \\le k \\le n$, $1 \\le pos_j \\le k_j$). For each query, print the value that is in the index $pos_j$ of the optimal subsequence of the given sequence $a$ for $k=k_j$.\nFor example, if $n=4$, $a=[10,20,30,20]$, $k_j=2$, then the optimal subsequence is $[20,30]$ \u2014 it is the minimum lexicographically among all subsequences of length $2$ with the maximum total sum of items. Thus, the answer to the request $k_j=2$, $pos_j=1$ is the number $20$, and the answer to the request $k_j=2$, $pos_j=2$ is the number $30$.\n-----Input-----\nThe first line contains an integer $n$ ($1 \\le n \\le 2\\cdot10^5$) \u2014 the length of the sequence $a$.\nThe second line contains elements of the sequence $a$: integer numbers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$).\nThe third line contains an integer $m$ ($1 \\le m \\le 2\\cdot10^5$) \u2014 the number of requests.\nThe following $m$ lines contain pairs of integers $k_j$ and $pos_j$ ($1 \\le k \\le n$, $1 \\le pos_j \\le k_j$) \u2014 the requests.\n-----Output-----\nPrint $m$ integers $r_1, r_2, \\dots, r_m$ ($1 \\le r_j \\le 10^9$) one per line: answers to the requests in the order they appear in the input. The value of $r_j$ should be equal to the value contained in the position $pos_j$ of the optimal subsequence for $k=k_j$.\n-----Examples-----\nInput\n3\n10 20 10\n6\n1 1\n2 1\n2 2\n3 1\n3 2\n3 3\nOutput\n20\n10\n20\n10\n20\n10\nInput\n7\n1 2 1 3 1 2 1\n9\n2 1\n2 2\n3 1\n3 2\n3 3\n1 1\n7 1\n7 7\n7 4\nOutput\n2\n3\n2\n3\n2\n3\n1\n1\n3\n-----Note-----\nIn the first example, for $a=[10,20,10]$ the optimal subsequences are:   for $k=1$: $[20]$,  for $k=2$: $[10,20]$,  for $k=3$: $[10,20,10]$.\n\ndef",
        "answer": "def subsequence(a, k, pos):\n    if k == 1:\n        return a[pos]\n    else:\n        return max(subsequence(a, k - 1, i) + a[i] for i in range(k))",
        "difficulty": "interview"
    },
    {
        "task_id": 2042,
        "prompt": "Complete the Python function given the prompt below:Igor is in the museum and he wants to see as many pictures as possible.\nMuseum can be represented as a rectangular field of n \u00d7 m cells. Each cell is either empty or impassable. Empty cells are marked with '.', impassable cells are marked with '*'. Every two adjacent cells of different types (one empty and one impassable) are divided by a wall containing one picture.\nAt the beginning Igor is in some empty cell. At every moment he can move to any empty cell that share a side with the current one.\nFor several starting positions you should calculate the maximum number of pictures that Igor can see. Igor is able to see the picture only if he is in the cell adjacent to the wall with this picture. Igor have a lot of time, so he will examine every picture he can see.\n-----Input-----\nFirst line of the input contains three integers n, m and k (3 \u2264 n, m \u2264 1000, 1 \u2264 k \u2264 min(n\u00b7m, 100 000))\u00a0\u2014 the museum dimensions and the number of starting positions to process.\nEach of the next n lines contains m symbols '.', '*' \u2014 the description of the museum. It is guaranteed that all border cells are impassable, so Igor can't go out from the museum.\nEach of the last k lines contains two integers x and y (1 \u2264 x \u2264 n, 1 \u2264 y \u2264 m)\u00a0\u2014 the row and the column of one of Igor's starting positions respectively. Rows are numbered from top to bottom, columns \u2014 from left to right. It is guaranteed that all starting positions are empty cells.\n-----Output-----\nPrint k integers\u00a0\u2014 the maximum number of pictures, that Igor can see if he starts in corresponding position.\n-----Examples-----\nInput\n5 6 3\n******\n*..*.*\n******\n*....*\n******\n2 2\n2 5\n4 3\nOutput\n6\n4\n10\nInput\n4 4 1\n****\n*..*\n*.**\n****\n3 2\nOutput\n8\n\ndef",
        "answer": "def get_picture_count(picture, x, y):\n    count = 0\n    for i in range(len(picture)):\n        for j in range(len(picture[i])):\n            if picture[i][j] == '*':\n                if i == x and j == y:\n                    continue\n                if i == x and j == y + 1:\n                    continue\n                if i == x + 1 and j == y:\n                    continue\n                if i == x + 1 and j == y + 1:\n                    continue\n                count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 2043,
        "prompt": "Complete the Python function given the prompt below:A Martian boy is named s \u2014 he has got this name quite recently from his parents for his coming of age birthday. Now he enjoys looking for his name everywhere. If he sees that he can obtain his name from some string by removing zero or more letters (at that, the remaining letters remain in the same order), he gets happy. For example, if s=\u00ababa\u00bb, then strings \u00abbaobab\u00bb, \u00abaabbaa\u00bb, \u00abhelloabahello\u00bb make him very happy and strings \u00abaab\u00bb, \u00abbaaa\u00bb and \u00abhelloabhello\u00bb do not.\nHowever rather than being happy once, he loves twice as much being happy twice! So, when he got string t as a present, he wanted to cut it in two parts (the left part and the right part) so that each part made him happy.\nHelp s determine the number of distinct ways to cut the given string t into two parts in the required manner.\n-----Input-----\nThe first line contains string s, consisting of lowercase English letters. The length of string s is from 1 to 1000 letters.\nThe second line contains string t, that also consists of lowercase English letters. The length of string t is from 1 to 10^6 letters.\n-----Output-----\nPrint the sought number of ways to cut string t in two so that each part made s happy. \n-----Examples-----\nInput\naba\nbaobababbah\nOutput\n2\nInput\nmars\nsunvenusearthmarsjupitersaturnuranusneptune\nOutput\n0\n\ndef",
        "answer": "def happy_strings(s, t):\n    return happy_strings_helper(s, t, {})",
        "difficulty": "interview"
    },
    {
        "task_id": 2044,
        "prompt": "Complete the Python function given the prompt below:You received a notebook which is called Death Note. This notebook has infinite number of pages. A rule is written on the last page (huh) of this notebook. It says: \"You have to write names in this notebook during $n$ consecutive days. During the $i$-th day you have to write exactly $a_i$ names.\". You got scared (of course you got scared, who wouldn't get scared if he just receive a notebook which is named Death Note with a some strange rule written in it?).\nOf course, you decided to follow this rule. When you calmed down, you came up with a strategy how you will write names in the notebook. You have calculated that each page of the notebook can contain exactly $m$ names. You will start writing names from the first page. You will write names on the current page as long as the limit on the number of names on this page is not exceeded. When the current page is over, you turn the page. Note that you always turn the page when it ends, it doesn't matter if it is the last day or not. If after some day the current page still can hold at least one name, during the next day you will continue writing the names from the current page.\nNow you are interested in the following question: how many times will you turn the page during each day? You are interested in the number of pages you will turn each day from $1$ to $n$.\n-----Input-----\nThe first line of the input contains two integers $n$, $m$ ($1 \\le n \\le 2 \\cdot 10^5$, $1 \\le m \\le 10^9$) \u2014 the number of days you will write names in the notebook and the number of names which can be written on each page of the notebook.\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$), where $a_i$ means the number of names you will write in the notebook during the $i$-th day.\n-----Output-----\nPrint exactly $n$ integers $t_1, t_2, \\dots, t_n$, where $t_i$ is the number of times you will turn the page during the $i$-th day.\n-----Examples-----\nInput\n3 5\n3 7 9\nOutput\n0 2 1 \nInput\n4 20\n10 9 19 2\nOutput\n0 0 1 1 \nInput\n1 100\n99\nOutput\n0 \n-----Note-----\nIn the first example pages of the Death Note will look like this $[1, 1, 1, 2, 2], [2, 2, 2, 2, 2], [3, 3, 3, 3, 3], [3, 3, 3, 3]$. Each number of the array describes during which day name on the corresponding position will be written. It is easy to see that you should turn the first and the second page during the second day and the third page during the third day.\n\ndef",
        "answer": "def pageCount(n, m, A):\n    page = 0\n    for i in range(n):\n        page += A[i] // m\n        if A[i] % m > 0:\n            page += 1\n    return page",
        "difficulty": "interview"
    },
    {
        "task_id": 2045,
        "prompt": "Complete the Python function given the prompt below:Amugae has a sentence consisting of $n$ words. He want to compress this sentence into one word. Amugae doesn't like repetitions, so when he merges two words into one word, he removes the longest prefix of the second word that coincides with a suffix of the first word. For example, he merges \"sample\" and \"please\" into \"samplease\".\nAmugae will merge his sentence left to right (i.e. first merge the first two words, then merge the result with the third word and so on). Write a program that prints the compressed word after the merging process ends.\n-----Input-----\nThe first line contains an integer $n$ ($1 \\le n \\le 10^5$), the number of the words in Amugae's sentence.\nThe second line contains $n$ words separated by single space. Each words is non-empty and consists of uppercase and lowercase English letters and digits ('A', 'B',..., 'Z', 'a', 'b',..., 'z', '0', '1',..., '9'). The total length of the words does not exceed $10^6$.\n-----Output-----\nIn the only line output the compressed word after the merging process ends as described in the problem.\n-----Examples-----\nInput\n5\nI want to order pizza\nOutput\nIwantorderpizza\nInput\n5\nsample please ease in out\nOutput\nsampleaseinout\n\ndef",
        "answer": "def merge_the_tools(string, k):\n    # your code goes here\n    for i in range(0, len(string), k):\n        sub = string[i:i+k]\n        print(''.join(dict.fromkeys(sub)))",
        "difficulty": "interview"
    },
    {
        "task_id": 2046,
        "prompt": "Complete the Python function given the prompt below:According to an old legeng, a long time ago Ankh-Morpork residents did something wrong to miss Fortune, and she cursed them. She said that at some time n snacks of distinct sizes will fall on the city, and the residents should build a Snacktower of them by placing snacks one on another. Of course, big snacks should be at the bottom of the tower, while small snacks should be at the top.\nYears passed, and once different snacks started to fall onto the city, and the residents began to build the Snacktower. [Image] \nHowever, they faced some troubles. Each day exactly one snack fell onto the city, but their order was strange. So, at some days the residents weren't able to put the new stack on the top of the Snacktower: they had to wait until all the bigger snacks fell. Of course, in order to not to anger miss Fortune again, the residents placed each snack on the top of the tower immediately as they could do it.\nWrite a program that models the behavior of Ankh-Morpork residents.\n-----Input-----\nThe first line contains single integer n (1 \u2264 n \u2264 100 000)\u00a0\u2014 the total number of snacks.\nThe second line contains n integers, the i-th of them equals the size of the snack which fell on the i-th day. Sizes are distinct integers from 1 to n. \n-----Output-----\nPrint n lines. On the i-th of them print the sizes of the snacks which the residents placed on the top of the Snacktower on the i-th day in the order they will do that. If no snack is placed on some day, leave the corresponding line empty.\n-----Examples-----\nInput\n3\n3 1 2\nOutput\n3\n\u00a0\n2 1\nInput\n5\n4 5 1 2 3\nOutput\n\u00a0\n5 4\n\u00a0\n\u00a0\n3 2 1\n-----Note-----\nIn the example a snack of size 3 fell on the first day, and the residents immediately placed it. On the second day a snack of size 1 fell, and the residents weren't able to place it because they were missing the snack of size 2. On the third day a snack of size 2 fell, and the residents immediately placed it. Right after that they placed the snack of size 1 which had fallen before.\n\ndef",
        "answer": "def SnackTower(n, arr):\n    arr.sort()\n    for i in range(n):\n        print(arr[i], end=\" \")",
        "difficulty": "interview"
    },
    {
        "task_id": 2047,
        "prompt": "Complete the Python function given the prompt below:Igor is a post-graduate student of chemistry faculty in Berland State University (BerSU). He needs to conduct a complicated experiment to write his thesis, but laboratory of BerSU doesn't contain all the materials required for this experiment.\nFortunately, chemical laws allow material transformations (yes, chemistry in Berland differs from ours). But the rules of transformation are a bit strange.\nBerland chemists are aware of n materials, numbered in the order they were discovered. Each material can be transformed into some other material (or vice versa). Formally, for each i (2 \u2264 i \u2264 n) there exist two numbers x_{i} and k_{i} that denote a possible transformation: k_{i} kilograms of material x_{i} can be transformed into 1 kilogram of material i, and 1 kilogram of material i can be transformed into 1 kilogram of material x_{i}. Chemical processing equipment in BerSU allows only such transformation that the amount of resulting material is always an integer number of kilograms.\nFor each i (1 \u2264 i \u2264 n) Igor knows that the experiment requires a_{i} kilograms of material i, and the laboratory contains b_{i} kilograms of this material. Is it possible to conduct an experiment after transforming some materials (or none)?\n-----Input-----\nThe first line contains one integer number n (1 \u2264 n \u2264 10^5) \u2014 the number of materials discovered by Berland chemists.\nThe second line contains n integer numbers b_1, b_2... b_{n} (1 \u2264 b_{i} \u2264 10^12) \u2014 supplies of BerSU laboratory.\nThe third line contains n integer numbers a_1, a_2... a_{n} (1 \u2264 a_{i} \u2264 10^12) \u2014 the amounts required for the experiment.\nThen n - 1 lines follow. j-th of them contains two numbers x_{j} + 1 and k_{j} + 1 that denote transformation of (j + 1)-th material (1 \u2264 x_{j} + 1 \u2264 j, 1 \u2264 k_{j} + 1 \u2264 10^9).\n-----Output-----\nPrint YES if it is possible to conduct an experiment. Otherwise print NO.\n-----Examples-----\nInput\n3\n1 2 3\n3 2 1\n1 1\n1 1\nOutput\nYES\nInput\n3\n3 2 1\n1 2 3\n1 1\n1 2\nOutput\nNO\n\ndef",
        "answer": "def transform(a, b, n):\n    for i in range(n):\n        if a[i] > b[i]:\n            return False\n    return True",
        "difficulty": "interview"
    },
    {
        "task_id": 2048,
        "prompt": "Complete the Python function given the prompt below:It is the middle of 2018 and Maria Stepanovna, who lives outside Krasnokamensk (a town in Zabaikalsky region), wants to rent three displays to highlight an important problem.\nThere are $n$ displays placed along a road, and the $i$-th of them can display a text with font size $s_i$ only. Maria Stepanovna wants to rent such three displays with indices $i < j < k$ that the font size increases if you move along the road in a particular direction. Namely, the condition $s_i < s_j < s_k$ should be held.\nThe rent cost is for the $i$-th display is $c_i$. Please determine the smallest cost Maria Stepanovna should pay.\n-----Input-----\nThe first line contains a single integer $n$ ($3 \\le n \\le 3\\,000$)\u00a0\u2014 the number of displays.\nThe second line contains $n$ integers $s_1, s_2, \\ldots, s_n$ ($1 \\le s_i \\le 10^9$)\u00a0\u2014 the font sizes on the displays in the order they stand along the road.\nThe third line contains $n$ integers $c_1, c_2, \\ldots, c_n$ ($1 \\le c_i \\le 10^8$)\u00a0\u2014 the rent costs for each display.\n-----Output-----\nIf there are no three displays that satisfy the criteria, print -1. Otherwise print a single integer\u00a0\u2014 the minimum total rent cost of three displays with indices $i < j < k$ such that $s_i < s_j < s_k$.\n-----Examples-----\nInput\n5\n2 4 5 4 10\n40 30 20 10 40\nOutput\n90\nInput\n3\n100 101 100\n2 4 5\nOutput\n-1\nInput\n10\n1 2 3 4 5 6 7 8 9 10\n10 13 11 14 15 12 13 13 18 13\nOutput\n33\n-----Note-----\nIn the first example you can, for example, choose displays $1$, $4$ and $5$, because $s_1 < s_4 < s_5$ ($2 < 4 < 10$), and the rent cost is $40 + 10 + 40 = 90$.\nIn the second example you can't select a valid triple of indices, so the answer is -1.\n\ndef",
        "answer": "def min_rent(s, c):\n    s.sort()\n    c.sort()\n    for i in range(len(s)):\n        if s[i] < c[i]:\n            return s[i] * len(c)\n    return -1",
        "difficulty": "interview"
    },
    {
        "task_id": 2049,
        "prompt": "Complete the Python function given the prompt below:You've got an array, consisting of n integers a_1, a_2,..., a_{n}. Also, you've got m queries, the i-th query is described by two integers l_{i}, r_{i}. Numbers l_{i}, r_{i} define a subsegment of the original array, that is, the sequence of numbers a_{l}_{i}, a_{l}_{i} + 1, a_{l}_{i} + 2,..., a_{r}_{i}. For each query you should check whether the corresponding segment is a ladder. \nA ladder is a sequence of integers b_1, b_2,..., b_{k}, such that it first doesn't decrease, then doesn't increase. In other words, there is such integer x (1 \u2264 x \u2264 k), that the following inequation fulfills: b_1 \u2264 b_2 \u2264... \u2264 b_{x} \u2265 b_{x} + 1 \u2265 b_{x} + 2... \u2265 b_{k}. Note that the non-decreasing and the non-increasing sequences are also considered ladders.\n-----Input-----\nThe first line contains two integers n and m (1 \u2264 n, m \u2264 10^5) \u2014 the number of array elements and the number of queries. The second line contains the sequence of integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^9), where number a_{i} stands for the i-th array element.\nThe following m lines contain the description of the queries. The i-th line contains the description of the i-th query, consisting of two integers l_{i}, r_{i} (1 \u2264 l_{i} \u2264 r_{i} \u2264 n) \u2014 the boundaries of the subsegment of the initial array.\nThe numbers in the lines are separated by single spaces.\n-----Output-----\nPrint m lines, in the i-th line print word \"Yes\" (without the quotes), if the subsegment that corresponds to the i-th query is the ladder, or word \"No\" (without the quotes) otherwise. \n-----Examples-----\nInput\n8 6\n1 2 1 3 3 5 2 1\n1 3\n2 3\n2 4\n8 8\n1 4\n5 8\nOutput\nYes\nYes\nNo\nYes\nNo\nYes\n\ndef",
        "answer": "def isLadder(a, l, r):\n    for i in range(l, r):\n        if a[i] > a[i+1]:\n            return False\n    return True",
        "difficulty": "interview"
    },
    {
        "task_id": 2050,
        "prompt": "Complete the Python function given the prompt below:Dreamoon likes to play with sets, integers and $gcd$. $\\operatorname{gcd}(a, b)$ is defined as the largest positive integer that divides both a and b.\nLet S be a set of exactly four distinct integers greater than 0. Define S to be of rank k if and only if for all pairs of distinct elements s_{i}, s_{j} from S, $\\operatorname{gcd}(s_{i}, s_{j}) = k$.\nGiven k and n, Dreamoon wants to make up n sets of rank k using integers from 1 to m such that no integer is used in two different sets (of course you can leave some integers without use). Calculate the minimum m that makes it possible and print one possible solution.\n-----Input-----\nThe single line of the input contains two space separated integers n, k (1 \u2264 n \u2264 10 000, 1 \u2264 k \u2264 100).\n-----Output-----\nOn the first line print a single integer \u2014 the minimal possible m. \nOn each of the next n lines print four space separated integers representing the i-th set.\nNeither the order of the sets nor the order of integers within a set is important. If there are multiple possible solutions with minimal m, print any one of them.\n-----Examples-----\nInput\n1 1\nOutput\n5\n1 2 3 5\nInput\n2 2\nOutput\n22\n2 4 6 22\n14 18 10 16\n-----Note-----\nFor the first example it's easy to see that set {1, 2, 3, 4} isn't a valid set of rank 1 since $\\operatorname{gcd}(2,4) = 2 \\neq 1$.\n\ndef",
        "answer": "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)",
        "difficulty": "interview"
    },
    {
        "task_id": 2051,
        "prompt": "Complete the Python function given the prompt below:Arseniy is already grown-up and independent. His mother decided to leave him alone for m days and left on a vacation. She have prepared a lot of food, left some money and washed all Arseniy's clothes. \nTen minutes before her leave she realized that it would be also useful to prepare instruction of which particular clothes to wear on each of the days she will be absent. Arseniy's family is a bit weird so all the clothes is enumerated. For example, each of Arseniy's n socks is assigned a unique integer from 1 to n. Thus, the only thing his mother had to do was to write down two integers l_{i} and r_{i} for each of the days\u00a0\u2014 the indices of socks to wear on the day i (obviously, l_{i} stands for the left foot and r_{i} for the right). Each sock is painted in one of k colors.\nWhen mother already left Arseniy noticed that according to instruction he would wear the socks of different colors on some days. Of course, that is a terrible mistake cause by a rush. Arseniy is a smart boy, and, by some magical coincidence, he posses k jars with the paint\u00a0\u2014 one for each of k colors.\nArseniy wants to repaint some of the socks in such a way, that for each of m days he can follow the mother's instructions and wear the socks of the same color. As he is going to be very busy these days he will have no time to change the colors of any socks so he has to finalize the colors now.\nThe new computer game Bota-3 was just realised and Arseniy can't wait to play it. What is the minimum number of socks that need their color to be changed in order to make it possible to follow mother's instructions and wear the socks of the same color during each of m days.\n-----Input-----\nThe first line of input contains three integers n, m and k (2 \u2264 n \u2264 200 000, 0 \u2264 m \u2264 200 000, 1 \u2264 k \u2264 200 000)\u00a0\u2014 the number of socks, the number of days and the number of available colors respectively.\nThe second line contain n integers c_1, c_2,..., c_{n} (1 \u2264 c_{i} \u2264 k)\u00a0\u2014 current colors of Arseniy's socks.\nEach of the following m lines contains two integers l_{i} and r_{i} (1 \u2264 l_{i}, r_{i} \u2264 n, l_{i} \u2260 r_{i})\u00a0\u2014 indices of socks which Arseniy should wear during the i-th day.\n-----Output-----\nPrint one integer\u00a0\u2014 the minimum number of socks that should have their colors changed in order to be able to obey the instructions and not make people laugh from watching the socks of different colors.\n-----Examples-----\nInput\n3 2 3\n1 2 3\n1 2\n2 3\nOutput\n2\nInput\n3 2 2\n1 1 2\n1 2\n2 1\nOutput\n0\n-----Note-----\nIn the first sample, Arseniy can repaint the first and the third socks to the second color.\nIn the second sample, there is no need to change any colors.\n\ndef",
        "answer": "def socks(n, m, k, arr):\n    arr.sort()\n    count = 0\n    for i in range(m):\n        if arr[i][0]!= arr[i][1]:\n            count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 2052,
        "prompt": "Complete the Python function given the prompt below:A lot of frogs want to cross a river. A river is $w$ units width, but frogs can only jump $l$ units long, where $l < w$. Frogs can also jump on lengths shorter than $l$. but can't jump longer. Hopefully, there are some stones in the river to help them.\nThe stones are located at integer distances from the banks. There are $a_i$ stones at the distance of $i$ units from the bank the frogs are currently at. Each stone can only be used once by one frog, after that it drowns in the water.\nWhat is the maximum number of frogs that can cross the river, given that then can only jump on the stones?\n-----Input-----\nThe first line contains two integers $w$ and $l$ ($1 \\le l < w \\le 10^5$)\u00a0\u2014 the width of the river and the maximum length of a frog's jump.\nThe second line contains $w - 1$ integers $a_1, a_2, \\ldots, a_{w-1}$ ($0 \\le a_i \\le 10^4$), where $a_i$ is the number of stones at the distance $i$ from the bank the frogs are currently at.\n-----Output-----\nPrint a single integer\u00a0\u2014 the maximum number of frogs that can cross the river.\n-----Examples-----\nInput\n10 5\n0 0 1 0 2 0 0 1 0\nOutput\n3\nInput\n10 3\n1 1 1 1 2 1 1 1 1\nOutput\n3\n-----Note-----\nIn the first sample two frogs can use the different stones at the distance $5$, and one frog can use the stones at the distances $3$ and then $8$.\nIn the second sample although there are two stones at the distance $5$, that does not help. The three paths are: $0 \\to 3 \\to 6 \\to 9 \\to 10$, $0 \\to 2 \\to 5 \\to 8 \\to 10$, $0 \\to 1 \\to 4 \\to 7 \\to 10$.\n\ndef",
        "answer": "def solution(w, l, a):\n    n = len(a)\n    dp = [[0] * (w + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(w + 1):\n            if j - a[i - 1] >= 0:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - a[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][w]",
        "difficulty": "interview"
    },
    {
        "task_id": 2053,
        "prompt": "Complete the Python function given the prompt below:Professor GukiZ has two arrays of integers, a and b. Professor wants to make the sum of the elements in the array a s_{a} as close as possible to the sum of the elements in the array b s_{b}. So he wants to minimize the value v = |s_{a} - s_{b}|.\nIn one operation professor can swap some element from the array a and some element from the array b. For example if the array a is [5, 1, 3, 2, 4] and the array b is [3, 3, 2] professor can swap the element 5 from the array a and the element 2 from the array b and get the new array a [2, 1, 3, 2, 4] and the new array b [3, 3, 5].\nProfessor doesn't want to make more than two swaps. Find the minimal value v and some sequence of no more than two swaps that will lead to the such value v. Professor makes swaps one by one, each new swap he makes with the new arrays a and b.\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 2000) \u2014 the number of elements in the array a.\nThe second line contains n integers a_{i} ( - 10^9 \u2264 a_{i} \u2264 10^9) \u2014 the elements of the array a.\nThe third line contains integer m (1 \u2264 m \u2264 2000) \u2014 the number of elements in the array b.\nThe fourth line contains m integers b_{j} ( - 10^9 \u2264 b_{j} \u2264 10^9) \u2014 the elements of the array b.\n-----Output-----\nIn the first line print the minimal value v = |s_{a} - s_{b}| that can be got with no more than two swaps.\nThe second line should contain the number of swaps k (0 \u2264 k \u2264 2).\nEach of the next k lines should contain two integers x_{p}, y_{p} (1 \u2264 x_{p} \u2264 n, 1 \u2264 y_{p} \u2264 m) \u2014 the index of the element in the array a and the index of the element in the array b in the p-th swap.\nIf there are several optimal solutions print any of them. Print the swaps in order the professor did them.\n-----Examples-----\nInput\n5\n5 4 3 2 1\n4\n1 1 1 1\nOutput\n1\n2\n1 1\n4 2\nInput\n5\n1 2 3 4 5\n1\n15\nOutput\n0\n0\nInput\n5\n1 2 3 4 5\n4\n1 2 3 4\nOutput\n1\n1\n3 1\n\ndef",
        "answer": "def swap(a, b):\n    a[0], b[0] = b[0], a[0]\n    a[1], b[1] = b[1], a[1]\n    return a, b",
        "difficulty": "interview"
    },
    {
        "task_id": 2054,
        "prompt": "Complete the Python function given the prompt below:Polycarp plays a well-known computer game (we won't mention its name). In this game, he can craft tools of two types \u2014 shovels and swords. To craft a shovel, Polycarp spends two sticks and one diamond; to craft a sword, Polycarp spends two diamonds and one stick.\nEach tool can be sold for exactly one emerald. How many emeralds can Polycarp earn, if he has $a$ sticks and $b$ diamonds?\n-----Input-----\nThe first line contains one integer $t$ ($1 \\le t \\le 1000$) \u2014 the number of test cases.\nThe only line of each test case contains two integers $a$ and $b$ ($0 \\le a, b \\le 10^9$)\u00a0\u2014 the number of sticks and the number of diamonds, respectively.\n-----Output-----\nFor each test case print one integer \u2014 the maximum number of emeralds Polycarp can earn.\n-----Example-----\nInput\n4\n4 4\n1000000000 0\n7 15\n8 7\nOutput\n2\n0\n7\n5\n-----Note-----\nIn the first test case Polycarp can earn two emeralds as follows: craft one sword and one shovel.\nIn the second test case Polycarp does not have any diamonds, so he cannot craft anything.\n\ndef",
        "answer": "def polycarp(sticks, diamonds):\n    return sticks // 2 + diamonds // 2",
        "difficulty": "interview"
    },
    {
        "task_id": 2055,
        "prompt": "Complete the Python function given the prompt below:The government of Berland decided to improve network coverage in his country. Berland has a unique structure: the capital in the center and $n$ cities in a circle around the capital. The capital already has a good network coverage (so the government ignores it), but the $i$-th city contains $a_i$ households that require a connection.\nThe government designed a plan to build $n$ network stations between all pairs of neighboring cities which will maintain connections only for these cities. In other words, the $i$-th network station will provide service only for the $i$-th and the $(i + 1)$-th city (the $n$-th station is connected to the $n$-th and the $1$-st city).\nAll network stations have capacities: the $i$-th station can provide the connection to at most $b_i$ households.\nNow the government asks you to check can the designed stations meet the needs of all cities or not \u2014 that is, is it possible to assign each household a network station so that each network station $i$ provides the connection to at most $b_i$ households.\n-----Input-----\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$)\u00a0\u2014 the number of test cases.\nThe first line of each test case contains the single integer $n$ ($2 \\le n \\le 10^6$)\u00a0\u2014 the number of cities and stations.\nThe second line of each test case contains $n$ integers ($1 \\le a_i \\le 10^9$)\u00a0\u2014 the number of households in the $i$-th city.\nThe third line of each test case contains $n$ integers ($1 \\le b_i \\le 10^9$)\u00a0\u2014 the capacities of the designed stations.\nIt's guaranteed that the sum of $n$ over test cases doesn't exceed $10^6$.\n-----Output-----\nFor each test case, print YES, if the designed stations can meet the needs of all cities, or NO otherwise (case insensitive).\n-----Example-----\nInput\n5\n3\n2 3 4\n3 3 3\n3\n3 3 3\n2 3 4\n4\n2 3 4 5\n3 7 2 2\n4\n4 5 2 3\n2 3 2 7\n2\n1 1\n10 10\nOutput\nYES\nYES\nNO\nYES\nYES\n-----Note-----\nIn the first test case:   the first network station can provide $2$ connections to the first city and $1$ connection to the second city;  the second station can provide $2$ connections to the second city and $1$ connection to the third city;  the third station can provide $3$ connections to the third city. \nIn the second test case:   the $1$-st station can provide $2$ connections to the $1$-st city;  the $2$-nd station can provide $3$ connections to the $2$-nd city;  the $3$-rd station can provide $3$ connections to the $3$-rd city and $1$ connection to the $1$-st station. \nIn the third test case, the fourth city needs $5$ connections, but the third and the fourth station has $4$ connections in total.\n\ndef",
        "answer": "def network(n, a, b):\n    a.sort()\n    b.sort()\n    if n == 1:\n        return True\n    if n == 2:\n        return a[0] <= b[0]\n    if n == 3:\n        return a[0] <= b[0] and a[1] <= b[1]\n    if n == 4:\n        return a[0] <= b[0] and a[1] <= b[1] and a[2] <= b[2]\n    if n == 5:\n        return a[0] <= b[0] and a[1] <= b[1] and a[2] <= b[2] and a[3] <= b[3]\n    if n == 6:\n        return a[0] <= b[0] and a[1] <= b[1] and a[2] <= b[2] and a[3] <= b[3] and a[4] <= b[4]\n    if n == 7:\n        return a[0] <= b[0] and a[1] <= b[1] and a[2] <= b[2] and a[3] <= b[3] and a[4] <= b[4] and a[5] <= b[5]\n    if n == 8:\n        return a[0] <= b[0] and a[1] <= b[1] and a[2] <= b[2] and a[3] <= b[3] and a[4] <= b[4] and a[5] <= b[5] and a[6] <= b[6]\n    if n == 9:\n        return a[0] <= b[0] and a[1] <= b",
        "difficulty": "interview"
    },
    {
        "task_id": 2056,
        "prompt": "Complete the Python function given the prompt below:Gottfried learned about binary number representation. He then came up with this task and presented it to you.\nYou are given a collection of $n$ non-negative integers $a_1, \\ldots, a_n$. You are allowed to perform the following operation: choose two distinct indices $1 \\leq i, j \\leq n$. If before the operation $a_i = x$, $a_j = y$, then after the operation $a_i = x~\\mathsf{AND}~y$, $a_j = x~\\mathsf{OR}~y$, where $\\mathsf{AND}$ and $\\mathsf{OR}$ are bitwise AND and OR respectively (refer to the Notes section for formal description). The operation may be performed any number of times (possibly zero).\nAfter all operations are done, compute $\\sum_{i=1}^n a_i^2$\u00a0\u2014 the sum of squares of all $a_i$. What is the largest sum of squares you can achieve?\n-----Input-----\nThe first line contains a single integer $n$ ($1 \\leq n \\leq 2 \\cdot 10^5$).\nThe second line contains $n$ integers $a_1, \\ldots, a_n$ ($0 \\leq a_i < 2^{20}$).\n-----Output-----\nPrint a single integer\u00a0\u2014 the largest possible sum of squares that can be achieved after several (possibly zero) operations.\n-----Examples-----\nInput\n1\n123\nOutput\n15129\nInput\n3\n1 3 5\nOutput\n51\nInput\n2\n349525 699050\nOutput\n1099509530625\n-----Note-----\nIn the first sample no operation can be made, thus the answer is $123^2$.\nIn the second sample we can obtain the collection $1, 1, 7$, and $1^2 + 1^2 + 7^2 = 51$.\nIf $x$ and $y$ are represented in binary with equal number of bits (possibly with leading zeros), then each bit of $x~\\mathsf{AND}~y$ is set to $1$ if and only if both corresponding bits of $x$ and $y$ are set to $1$. Similarly, each bit of $x~\\mathsf{OR}~y$ is set to $1$ if and only if at least one of the corresponding bits of $x$ and $y$ are set to $1$. For example, $x = 3$ and $y = 5$ are represented as $011_2$ and $101_2$ (highest bit first). Then, $x~\\mathsf{AND}~y = 001_2 = 1$, and $x~\\mathsf{OR}~y = 111_2 = 7$.\n\ndef",
        "answer": "def bitwise_and_or(a):\n    max_sum = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] & a[j] == 0:\n                max_sum = max(max_sum, a[i]**2 + a[j]**2)\n            if a[i] | a[j] == 0:\n                max_sum = max(max_sum, a[i]**2 + a[j]**2)\n    return max_sum",
        "difficulty": "interview"
    },
    {
        "task_id": 2057,
        "prompt": "Complete the Python function given the prompt below:A very brave explorer Petya once decided to explore Paris catacombs. Since Petya is not really experienced, his exploration is just walking through the catacombs.\nCatacombs consist of several rooms and bidirectional passages between some pairs of them. Some passages can connect a room to itself and since the passages are built on different depths they do not intersect each other. Every minute Petya arbitrary chooses a passage from the room he is currently in and then reaches the room on the other end of the passage in exactly one minute. When he enters a room at minute i, he makes a note in his logbook with number t_{i}:   If Petya has visited this room before, he writes down the minute he was in this room last time;  Otherwise, Petya writes down an arbitrary non-negative integer strictly less than current minute i. \nInitially, Petya was in one of the rooms at minute 0, he didn't write down number t_0.\nAt some point during his wandering Petya got tired, threw out his logbook and went home. Vasya found his logbook and now he is curious: what is the minimum possible number of rooms in Paris catacombs according to Petya's logbook?\n-----Input-----\nThe first line contains a single integer n (1 \u2264 n \u2264 2\u00b710^5) \u2014 then number of notes in Petya's logbook.\nThe second line contains n non-negative integers t_1, t_2,..., t_{n} (0 \u2264 t_{i} < i) \u2014 notes in the logbook.\n-----Output-----\nIn the only line print a single integer \u2014 the minimum possible number of rooms in Paris catacombs.\n-----Examples-----\nInput\n2\n0 0\nOutput\n2\nInput\n5\n0 1 0 1 3\nOutput\n3\n-----Note-----\nIn the first sample, sequence of rooms Petya visited could be, for example 1 \u2192 1 \u2192 2, 1 \u2192 2 \u2192 1 or 1 \u2192 2 \u2192 3. The minimum possible number of rooms is 2.\nIn the second sample, the sequence could be 1 \u2192 2 \u2192 3 \u2192 1 \u2192 2 \u2192 1.\n\ndef",
        "answer": "def catacombs(n):\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 4\n    if n == 4:\n        return 5\n    if n == 5:\n        return 6\n    if n == 6:\n        return 7\n    if n == 7:\n        return 8\n    if n == 8:\n        return 9\n    if n == 9:\n        return 10\n    if n == 10:\n        return 11\n    if n == 11:\n        return 12\n    if n == 12:\n        return 13\n    if n == 13:\n        return 14\n    if n == 14:\n        return 15\n    if n == 15:\n        return 16\n    if n == 16:\n        return 17\n    if n == 17:\n        return 18\n    if n == 18:\n        return 19\n    if n == 19:\n        return 20\n    if n == 20:\n        return 21\n    if n == 21:\n        return 22\n    if n == 22:\n        return 23\n    if n == 23:\n        return 24\n    if n == 24:\n        return 25\n    if n == 25:\n        return 26\n    if n == 26:\n        return 27\n    if n == 27:\n        return 28\n    if n == 28:\n        return 29\n    if n == 29:\n        return 30\n    if n == 30:\n        return 31\n    if n == 31:\n        return 32\n    if n == 32:\n        return 33\n    if n == 33:\n        return 34\n    if n == 34:\n        return 35\n    if n == 35:\n        return 36\n    if n == 36:\n        ",
        "difficulty": "interview"
    },
    {
        "task_id": 2058,
        "prompt": "Complete the Python function given the prompt below:Genos needs your help. He was asked to solve the following programming problem by Saitama:\nThe length of some string s is denoted |s|. The Hamming distance between two strings s and t of equal length is defined as $\\sum_{i = 1}^{|s|}|s_{i} - t_{i}|$, where s_{i} is the i-th character of s and t_{i} is the i-th character of t. For example, the Hamming distance between string \"0011\" and string \"0110\" is |0 - 0| + |0 - 1| + |1 - 1| + |1 - 0| = 0 + 1 + 0 + 1 = 2.\nGiven two binary strings a and b, find the sum of the Hamming distances between a and all contiguous substrings of b of length |a|.\n-----Input-----\nThe first line of the input contains binary string a (1 \u2264 |a| \u2264 200 000).\nThe second line of the input contains binary string b (|a| \u2264 |b| \u2264 200 000).\nBoth strings are guaranteed to consist of characters '0' and '1' only.\n-----Output-----\nPrint a single integer\u00a0\u2014 the sum of Hamming distances between a and all contiguous substrings of b of length |a|.\n-----Examples-----\nInput\n01\n00111\nOutput\n3\nInput\n0011\n0110\nOutput\n2\n-----Note-----\nFor the first sample case, there are four contiguous substrings of b of length |a|: \"00\", \"01\", \"11\", and \"11\". The distance between \"01\" and \"00\" is |0 - 0| + |1 - 0| = 1. The distance between \"01\" and \"01\" is |0 - 0| + |1 - 1| = 0. The distance between \"01\" and \"11\" is |0 - 1| + |1 - 1| = 1. Last distance counts twice, as there are two occurrences of string \"11\". The sum of these edit distances is 1 + 0 + 1 + 1 = 3.\nThe second sample case is described in the statement.\n\ndef",
        "answer": "def HammingDistance(a, b):\n    count = 0\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 2059,
        "prompt": "Complete the Python function given the prompt below:Let's call an array of non-negative integers $a_1, a_2, \\ldots, a_n$ a $k$-extension for some non-negative integer $k$ if for all possible pairs of indices $1 \\leq i, j \\leq n$ the inequality $k \\cdot |i - j| \\leq min(a_i, a_j)$ is satisfied. The expansion coefficient of the array $a$ is the maximal integer $k$ such that the array $a$ is a $k$-extension. Any array is a 0-expansion, so the expansion coefficient always exists.\nYou are given an array of non-negative integers $a_1, a_2, \\ldots, a_n$. Find its expansion coefficient.\n-----Input-----\nThe first line contains one positive integer $n$\u00a0\u2014 the number of elements in the array $a$ ($2 \\leq n \\leq 300\\,000$). The next line contains $n$ non-negative integers $a_1, a_2, \\ldots, a_n$, separated by spaces ($0 \\leq a_i \\leq 10^9$).\n-----Output-----\nPrint one non-negative integer\u00a0\u2014 expansion coefficient of the array $a_1, a_2, \\ldots, a_n$.\n-----Examples-----\nInput\n4\n6 4 5 5\nOutput\n1\nInput\n3\n0 1 2\nOutput\n0\nInput\n4\n821 500 479 717\nOutput\n239\n-----Note-----\nIn the first test, the expansion coefficient of the array $[6, 4, 5, 5]$ is equal to $1$ because $|i-j| \\leq min(a_i, a_j)$, because all elements of the array satisfy $a_i \\geq 3$. On the other hand, this array isn't a $2$-extension, because $6 = 2 \\cdot |1 - 4| \\leq min(a_1, a_4) = 5$ is false.\nIn the second test, the expansion coefficient of the array $[0, 1, 2]$ is equal to $0$ because this array is not a $1$-extension, but it is $0$-extension.\n\ndef",
        "answer": "def k_extension(a):\n    n = len(a)\n    k = 1\n    for i in range(n):\n        for j in range(i+1, n):\n            if k*abs(i-j) <= min(a[i], a[j]):\n                k = max(k, abs(i-j))\n    return k",
        "difficulty": "interview"
    },
    {
        "task_id": 2060,
        "prompt": "Complete the Python function given the prompt below:Ivan's classes at the university have just finished, and now he wants to go to the local CFK cafe and eat some fried chicken.\nCFK sells chicken chunks in small and large portions. A small portion contains 3 chunks; a large one \u2014 7 chunks. Ivan wants to eat exactly x chunks. Now he wonders whether he can buy exactly this amount of chicken.\nFormally, Ivan wants to know if he can choose two non-negative integers a and b in such a way that a small portions and b large ones contain exactly x chunks.\nHelp Ivan to answer this question for several values of x!\n-----Input-----\nThe first line contains one integer n (1 \u2264 n \u2264 100) \u2014 the number of testcases.\nThe i-th of the following n lines contains one integer x_{i} (1 \u2264 x_{i} \u2264 100) \u2014 the number of chicken chunks Ivan wants to eat.\n-----Output-----\nPrint n lines, in i-th line output YES if Ivan can buy exactly x_{i} chunks. Otherwise, print NO.\n-----Example-----\nInput\n2\n6\n5\nOutput\nYES\nNO\n-----Note-----\nIn the first example Ivan can buy two small portions.\nIn the second example Ivan cannot buy exactly 5 chunks, since one small portion is not enough, but two small portions or one large is too much.\n\ndef",
        "answer": "def chicken(x):\n    if x % 7 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "difficulty": "interview"
    },
    {
        "task_id": 2061,
        "prompt": "Complete the Python function given the prompt below:The map of Berland is a rectangle of the size n \u00d7 m, which consists of cells of size 1 \u00d7 1. Each cell is either land or water. The map is surrounded by the ocean. \nLakes are the maximal regions of water cells, connected by sides, which are not connected with the ocean. Formally, lake is a set of water cells, such that it's possible to get from any cell of the set to any other without leaving the set and moving only to cells adjacent by the side, none of them is located on the border of the rectangle, and it's impossible to add one more water cell to the set such that it will be connected with any other cell.\nYou task is to fill up with the earth the minimum number of water cells so that there will be exactly k lakes in Berland. Note that the initial number of lakes on the map is not less than k. \n-----Input-----\nThe first line of the input contains three integers n, m and k (1 \u2264 n, m \u2264 50, 0 \u2264 k \u2264 50)\u00a0\u2014 the sizes of the map and the number of lakes which should be left on the map.\nThe next n lines contain m characters each \u2014 the description of the map. Each of the characters is either '.' (it means that the corresponding cell is water) or '*' (it means that the corresponding cell is land).\nIt is guaranteed that the map contain at least k lakes.\n-----Output-----\nIn the first line print the minimum number of cells which should be transformed from water to land. \nIn the next n lines print m symbols \u2014 the map after the changes. The format must strictly follow the format of the map in the input data (there is no need to print the size of the map). If there are several answers, print any of them. \nIt is guaranteed that the answer exists on the given data.\n-----Examples-----\nInput\n5 4 1\n****\n*..*\n****\n**.*\n..**\nOutput\n1\n****\n*..*\n****\n****\n..**\nInput\n3 3 0\n***\n*.*\n***\nOutput\n1\n***\n***\n***\n-----Note-----\nIn the first example there are only two lakes \u2014 the first consists of the cells (2, 2) and (2, 3), the second consists of the cell (4, 3). It is profitable to cover the second lake because it is smaller. Pay attention that the area of water in the lower left corner is not a lake because this area share a border with the ocean.\n\ndef",
        "answer": "def Berland(n, m, k):\n    # Write your code here",
        "difficulty": "interview"
    },
    {
        "task_id": 2062,
        "prompt": "Complete the Python function given the prompt below:Little Vlad is fond of popular computer game Bota-2. Recently, the developers announced the new add-on named Bota-3. Of course, Vlad immediately bought only to find out his computer is too old for the new game and needs to be updated.\nThere are n video cards in the shop, the power of the i-th video card is equal to integer value a_{i}. As Vlad wants to be sure the new game will work he wants to buy not one, but several video cards and unite their powers using the cutting-edge technology. To use this technology one of the cards is chosen as the leading one and other video cards are attached to it as secondary. For this new technology to work it's required that the power of each of the secondary video cards is divisible by the power of the leading video card. In order to achieve that the power of any secondary video card can be reduced to any integer value less or equal than the current power. However, the power of the leading video card should remain unchanged, i.e. it can't be reduced.\nVlad has an infinite amount of money so he can buy any set of video cards. Help him determine which video cards he should buy such that after picking the leading video card and may be reducing some powers of others to make them work together he will get the maximum total value of video power.\n-----Input-----\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 200 000)\u00a0\u2014 the number of video cards in the shop.\nThe second line contains n integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 200 000)\u00a0\u2014 powers of video cards.\n-----Output-----\nThe only line of the output should contain one integer value\u00a0\u2014 the maximum possible total power of video cards working together.\n-----Examples-----\nInput\n4\n3 2 15 9\nOutput\n27\nInput\n4\n8 2 2 7\nOutput\n18\n-----Note-----\nIn the first sample, it would be optimal to buy video cards with powers 3, 15 and 9. The video card with power 3 should be chosen as the leading one and all other video cards will be compatible with it. Thus, the total power would be 3 + 15 + 9 = 27. If he buys all the video cards and pick the one with the power 2 as the leading, the powers of all other video cards should be reduced by 1, thus the total power would be 2 + 2 + 14 + 8 = 26, that is less than 27. Please note, that it's not allowed to reduce the power of the leading video card, i.e. one can't get the total power 3 + 1 + 15 + 9 = 28.\nIn the second sample, the optimal answer is to buy all video cards and pick the one with the power 2 as the leading. The video card with the power 7 needs it power to be reduced down to 6. The total power would be 8 + 2 + 2 + 6 = 18.\n\ndef",
        "answer": "def max_power(a):\n    a.sort()\n    max_power = a[0]\n    for i in range(1, len(a)):\n        max_power = max(max_power, a[i] * i)\n    return max_power",
        "difficulty": "interview"
    },
    {
        "task_id": 2063,
        "prompt": "Complete the Python function given the prompt below:Little beaver is a beginner programmer, so informatics is his favorite subject. Soon his informatics teacher is going to have a birthday and the beaver has decided to prepare a present for her. He planted n flowers in a row on his windowsill and started waiting for them to grow. However, after some time the beaver noticed that the flowers stopped growing. The beaver thinks it is bad manners to present little flowers. So he decided to come up with some solutions. \nThere are m days left to the birthday. The height of the i-th flower (assume that the flowers in the row are numbered from 1 to n from left to right) is equal to a_{i} at the moment. At each of the remaining m days the beaver can take a special watering and water w contiguous flowers (he can do that only once at a day). At that each watered flower grows by one height unit on that day. The beaver wants the height of the smallest flower be as large as possible in the end. What maximum height of the smallest flower can he get?\n-----Input-----\nThe first line contains space-separated integers n, m and w (1 \u2264 w \u2264 n \u2264 10^5;\u00a01 \u2264 m \u2264 10^5). The second line contains space-separated integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^9).\n-----Output-----\nPrint a single integer \u2014 the maximum final height of the smallest flower.\n-----Examples-----\nInput\n6 2 3\n2 2 2 2 1 1\nOutput\n2\nInput\n2 5 1\n5 8\nOutput\n9\n-----Note-----\nIn the first sample beaver can water the last 3 flowers at the first day. On the next day he may not to water flowers at all. In the end he will get the following heights: [2, 2, 2, 3, 2, 2]. The smallest flower has height equal to 2. It's impossible to get height 3 in this test.\n\ndef",
        "answer": "def solution(n, m, w, a):\n    a.sort()\n    res = 0\n    for i in range(m):\n        res += a[i] - w\n    return res",
        "difficulty": "interview"
    },
    {
        "task_id": 2064,
        "prompt": "Complete the Python function given the prompt below:Stepan has the newest electronic device with a display. Different digits can be shown on it. Each digit is shown on a seven-section indicator like it is shown on the picture below. [Image] \nSo, for example, to show the digit 3 on the display, 5 sections must be highlighted; and for the digit 6, 6 sections must be highlighted. \nThe battery of the newest device allows to highlight at most n sections on the display. \nStepan wants to know the maximum possible integer number which can be shown on the display of his newest device. Your task is to determine this number. Note that this number must not contain leading zeros. Assume that the size of the display is enough to show any integer.\n-----Input-----\nThe first line contains the integer n (2 \u2264 n \u2264 100 000) \u2014 the maximum number of sections which can be highlighted on the display.\n-----Output-----\nPrint the maximum integer which can be shown on the display of Stepan's newest device.\n-----Examples-----\nInput\n2\nOutput\n1\nInput\n3\nOutput\n7\n\ndef",
        "answer": "def show_max_number(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n == 5:\n        return 9\n    if n == 6:\n        return 11\n    if n == 7:\n        return 13\n    if n == 8:\n        return 15\n    if n == 9:\n        return 17\n    if n == 10:\n        return 19\n    if n == 11:\n        return 21\n    if n == 12:\n        return 23\n    if n == 13:\n        return 25\n    if n == 14:\n        return 27\n    if n == 15:\n        return 29\n    if n == 16:\n        return 31\n    if n == 17:\n        return 33\n    if n == 18:\n        return 35\n    if n == 19:\n        return 37\n    if n == 20:\n        return 39\n    if n == 21:\n        return 41\n    if n == 22:\n        return 43\n    if n == 23:\n        return 45\n    if n == 24:\n        return 47\n    if n == 25:\n        return 49\n    if n == 26:\n        return 51\n    if n == 27:\n        return 53\n    if n == 28:\n        return 55\n    if n == 29:\n        return 57\n    if n == 30:\n        return 59\n    if n == 31:\n        return 61\n    if n == 32:\n        return 63\n    if n == 33:\n        return 65\n    if n == 34:\n        return 67\n    if n == 35:\n        return 69\n    if n == 36:",
        "difficulty": "interview"
    },
    {
        "task_id": 2065,
        "prompt": "Complete the Python function given the prompt below:Sasha lives in a big happy family. At the Man's Day all the men of the family gather to celebrate it following their own traditions. There are n men in Sasha's family, so let's number them with integers from 1 to n.\nEach man has at most one father but may have arbitrary number of sons.\nMan number A is considered to be the ancestor of the man number B if at least one of the following conditions is satisfied:   A = B;  the man number A is the father of the man number B;  there is a man number C, such that the man number A is his ancestor and the man number C is the father of the man number B. \nOf course, if the man number A is an ancestor of the man number B and A \u2260 B, then the man number B is not an ancestor of the man number A.\nThe tradition of the Sasha's family is to give gifts at the Man's Day. Because giving gifts in a normal way is boring, each year the following happens.  A list of candidates is prepared, containing some (possibly all) of the n men in some order.  Each of the n men decides to give a gift.  In order to choose a person to give a gift to, man A looks through the list and picks the first man B in the list, such that B is an ancestor of A and gives him a gift. Note that according to definition it may happen that a person gives a gift to himself.  If there is no ancestor of a person in the list, he becomes sad and leaves the celebration without giving a gift to anyone. \nThis year you have decided to help in organizing celebration and asked each of the n men, who do they want to give presents to (this person is chosen only among ancestors). Are you able to make a list of candidates, such that all the wishes will be satisfied if they give gifts according to the process described above?\n-----Input-----\nIn the first line of the input two integers n and m (0 \u2264 m < n \u2264 100 000) are given\u00a0\u2014 the number of the men in the Sasha's family and the number of family relations in it respectively.\nThe next m lines describe family relations: the (i + 1)^{th} line consists of pair of integers p_{i} and q_{i} (1 \u2264 p_{i}, q_{i} \u2264 n, p_{i} \u2260 q_{i}) meaning that the man numbered p_{i} is the father of the man numbered q_{i}. It is guaranteed that every pair of numbers appears at most once, that among every pair of two different men at least one of them is not an ancestor of another and that every man has at most one father.\nThe next line contains n integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 n), i^{th} of which means that the man numbered i wants to give a gift to the man numbered a_{i}. It is guaranteed that for every 1 \u2264 i \u2264 n the man numbered a_{i} is an ancestor of the man numbered i.\n-----Output-----\nPrint an integer k (1 \u2264 k \u2264 n)\u00a0\u2014 the number of the men in the list of candidates, in the first line.\nPrint then k pairwise different positive integers not exceeding n \u2014 the numbers of the men in the list in an order satisfying every of the men's wishes, one per line.\nIf there are more than one appropriate lists, print any of them. If there is no appropriate list print  - 1 in the only line.\n-----Examples-----\nInput\n3 2\n1 2\n2 3\n1 2 1\nOutput\n-1\nInput\n4 2\n1 2\n3 4\n1 2 3 3\nOutput\n3\n2\n1\n3\n-----Note-----\nThe first sample explanation:   if there would be no 1 in the list then the first and the third man's wishes would not be satisfied (a_1 = a_3 = 1);  if there would be no 2 in the list then the second man wish would not be satisfied (a_2 = 2);  if 1 would stay before 2 in the answer then the second man would have to give his gift to the first man, but he wants to give it to himself (a_2 = 2).  if, at the other hand, the man numbered 2 would stay before the man numbered 1, then the third man would have to give his gift to the second man, but not to the first (a_3 = 1).\n\ndef",
        "answer": "def ancestors(a, b):\n    if a == b:\n        return True\n    if b in ancestors_dict[a]:\n        return True\n    for k, v in ancestors_dict.items():\n        if b in v:\n            return True\n    return False",
        "difficulty": "interview"
    },
    {
        "task_id": 2066,
        "prompt": "Complete the Python function given the prompt below:You are given a string, consisting of lowercase Latin letters.\nA pair of neighbouring letters in a string is considered ugly if these letters are also neighbouring in a alphabet. For example, string \"abaca\" contains ugly pairs at positions $(1, 2)$ \u2014 \"ab\" and $(2, 3)$ \u2014 \"ba\". Letters 'a' and 'z' aren't considered neighbouring in a alphabet.\nCan you rearrange the letters of a given string so that there are no ugly pairs? You can choose any order of the letters of the given string but you can't add any new letters or remove the existing ones. You can also leave the order the same.\nIf there are multiple answers, print any of them.\nYou also have to answer $T$ separate queries.\n-----Input-----\nThe first line contains a single integer $T$ ($1 \\le T \\le 100$) \u2014 the number of queries.\nEach of the next $T$ lines contains string $s$ $(1 \\le |s| \\le 100)$ \u2014 the string for the next query. It is guaranteed that it contains only lowercase Latin letters.\nNote that in hacks you have to set $T = 1$.\n-----Output-----\nPrint $T$ lines. The $i$-th line should contain the answer to the $i$-th query.\nIf the answer for the $i$-th query exists, then print such a rearrangment of letters of the given string that it contains no ugly pairs. You can choose any order of the letters of the given string but you can't add any new letters or remove the existing ones. You can also leave the order the same.\nIf there are multiple answers, print any of them.\nOtherwise print \"No answer\" for that query.\n-----Example-----\nInput\n4\nabcd\ngg\ncodeforces\nabaca\nOutput\ncadb\ngg\ncodfoerces\nNo answer\n-----Note-----\nIn the first example answer \"bdac\" is also correct.\nThe second example showcases the fact that only neighbouring in alphabet letters are not allowed. The same letter is ok.\nThere are lots of valid answers for the third example.\n\ndef",
        "answer": "def ugly_string(s):\n    s = list(s)\n    for i in range(len(s)):\n        if s[i] == 'a':\n            s[i] = 'z'\n        elif s[i] == 'z':\n            s[i] = 'a'\n    return ''.join(s)",
        "difficulty": "interview"
    },
    {
        "task_id": 2067,
        "prompt": "Complete the Python function given the prompt below:On a chessboard with a width of $10^9$ and a height of $10^9$, the rows are numbered from bottom to top from $1$ to $10^9$, and the columns are numbered from left to right from $1$ to $10^9$. Therefore, for each cell of the chessboard you can assign the coordinates $(x,y)$, where $x$ is the column number and $y$ is the row number.\nEvery day there are fights between black and white pieces on this board. Today, the black ones won, but at what price? Only the rook survived, and it was driven into the lower left corner\u00a0\u2014 a cell with coordinates $(1,1)$. But it is still happy, because the victory has been won and it's time to celebrate it! In order to do this, the rook needs to go home, namely\u00a0\u2014 on the upper side of the field (that is, in any cell that is in the row with number $10^9$).\nEverything would have been fine, but the treacherous white figures put spells on some places of the field before the end of the game. There are two types of spells:   Vertical. Each of these is defined by one number $x$. Such spells create an infinite blocking line between the columns $x$ and $x+1$.  Horizontal. Each of these is defined by three numbers $x_1$, $x_2$, $y$. Such spells create a blocking segment that passes through the top side of the cells, which are in the row $y$ and in columns from $x_1$ to $x_2$ inclusive. The peculiarity of these spells is that it is impossible for a certain pair of such spells to have a common point. Note that horizontal spells can have common points with vertical spells. \n [Image] \n An example of a chessboard. \nLet's recall that the rook is a chess piece that in one move can move to any point that is in the same row or column with its initial position. In our task, the rook can move from the cell $(r_0,c_0)$ into the cell $(r_1,c_1)$ only under the condition that $r_1 = r_0$ or $c_1 = c_0$ and there is no blocking lines or blocking segments between these cells (For better understanding, look at the samples).\nFortunately, the rook can remove spells, but for this it has to put tremendous efforts, therefore, it wants to remove the minimum possible number of spells in such way, that after this it can return home. Find this number!\n-----Input-----\nThe first line contains two integers $n$ and $m$ ($0 \\le n,m \\le 10^5$)\u00a0\u2014 the number of vertical and horizontal spells.\nEach of the following $n$ lines contains one integer $x$ ($1 \\le x < 10^9$)\u00a0\u2014 the description of the vertical spell. It will create a blocking line between the columns of $x$ and $x+1$.\nEach of the following $m$ lines contains three integers $x_1$, $x_2$ and $y$ ($1 \\le x_{1} \\le x_{2} \\le 10^9$, $1 \\le y < 10^9$)\u00a0\u2014 the numbers that describe the horizontal spell. It will create a blocking segment that passes through the top sides of the cells that are in the row with the number $y$, in columns from $x_1$ to $x_2$ inclusive.\nIt is guaranteed that all spells are different, as well as the fact that for each pair of horizontal spells it is true that the segments that describe them do not have common points.\n-----Output-----\nIn a single line print one integer\u00a0\u2014 the minimum number of spells the rook needs to remove so it can get from the cell $(1,1)$ to at least one cell in the row with the number $10^9$\n-----Examples-----\nInput\n2 3\n6\n8\n1 5 6\n1 9 4\n2 4 2\nOutput\n1\nInput\n1 3\n4\n1 5 3\n1 9 4\n4 6 6\nOutput\n1\nInput\n0 2\n1 1000000000 4\n1 1000000000 2\nOutput\n2\nInput\n0 0\nOutput\n0\nInput\n2 3\n4\n6\n1 4 3\n1 5 2\n1 6 5\nOutput\n2\n-----Note-----\nIn the first sample, in order for the rook return home, it is enough to remove the second horizontal spell.\n [Image] Illustration for the first sample. On the left it shows how the field looked at the beginning. On the right it shows how the field looked after the deletion of the second horizontal spell. It also shows the path, on which the rook would be going home. \nIn the second sample, in order for the rook to return home, it is enough to remove the only vertical spell. If we tried to remove just one of the horizontal spells, it would not allow the rook to get home, because it would be blocked from above by one of the remaining horizontal spells (either first one or second one), and to the right it would be blocked by a vertical spell.\n $m$ Illustration for the second sample. On the left it shows how the field looked at the beginning. On the right it shows how it looked after the deletion of the vertical spell. It also shows the path, on which the rook would be going home. \nIn the third sample, we have two horizontal spells that go through the whole field. These spells can not be bypassed, so we need to remove both of them.\n [Image] Illustration for the third sample. On the left it shows how the field looked at the beginning. On the right it shows how the field looked after the deletion of the horizontal spells. It also shows the path, on which the rook would be going home. \nIn the fourth sample, we have no spells, which means that we do not need to remove anything.\nIn the fifth example, we can remove the first vertical and third horizontal spells.\n [Image] Illustration for the fifth sample. On the left it shows how the field looked at the beginning. On the right it shows how it looked after the deletions. It also shows the path, on which the rook would be going home.\n\ndef",
        "answer": "def rook(n, m, a):\n    a.sort()\n    res = 0\n    for i in range(n):\n        if a[i][0] == 10 ** 9:\n            res += 1\n        else:\n            break\n    for i in range(m):\n        if a[i][0] == 10 ** 9:\n            res += 1\n        else:\n            break\n    return res",
        "difficulty": "interview"
    },
    {
        "task_id": 2068,
        "prompt": "Complete the Python function given the prompt below:One day Polycarp published a funny picture in a social network making a poll about the color of his handle. Many of his friends started reposting Polycarp's joke to their news feed. Some of them reposted the reposts and so on.\nThese events are given as a sequence of strings \"name1 reposted name2\", where name1 is the name of the person who reposted the joke, and name2 is the name of the person from whose news feed the joke was reposted. It is guaranteed that for each string \"name1 reposted name2\" user \"name1\" didn't have the joke in his feed yet, and \"name2\" already had it in his feed by the moment of repost. Polycarp was registered as \"Polycarp\" and initially the joke was only in his feed.\nPolycarp measures the popularity of the joke as the length of the largest repost chain. Print the popularity of Polycarp's joke.\n-----Input-----\nThe first line of the input contains integer n (1 \u2264 n \u2264 200) \u2014 the number of reposts. Next follow the reposts in the order they were made. Each of them is written on a single line and looks as \"name1 reposted name2\". All the names in the input consist of lowercase or uppercase English letters and/or digits and have lengths from 2 to 24 characters, inclusive.\nWe know that the user names are case-insensitive, that is, two names that only differ in the letter case correspond to the same social network user.\n-----Output-----\nPrint a single integer \u2014 the maximum length of a repost chain.\n-----Examples-----\nInput\n5\ntourist reposted Polycarp\nPetr reposted Tourist\nWJMZBMR reposted Petr\nsdya reposted wjmzbmr\nvepifanov reposted sdya\nOutput\n6\nInput\n6\nMike reposted Polycarp\nMax reposted Polycarp\nEveryOne reposted Polycarp\n111 reposted Polycarp\nVkCup reposted Polycarp\nCodeforces reposted Polycarp\nOutput\n2\nInput\n1\nSoMeStRaNgEgUe reposted PoLyCaRp\nOutput\n2\n\ndef",
        "answer": "def find_max_repost_chain(reposts):\n    reposts_dict = {}\n    for repost in reposts:\n        repost_name, reposted_name = repost.split(' reposted ')\n        if repost_name not in reposts_dict:\n            reposts_dict[repost_name] = [reposted_name]\n        else:\n            reposts_dict[repost_name].append(reposted_name)\n    max_repost_chain = 0\n    for repost_name, reposted_names in reposts_dict.items():\n        if len(reposted_names) > max_repost_chain:\n            max_repost_chain = len(reposted_names)\n    return max_repost_chain",
        "difficulty": "interview"
    },
    {
        "task_id": 2069,
        "prompt": "Complete the Python function given the prompt below:You are given a permutation p of length n. Also you are given m foe pairs (a_{i}, b_{i}) (1 \u2264 a_{i}, b_{i} \u2264 n, a_{i} \u2260 b_{i}). \nYour task is to count the number of different intervals (x, y) (1 \u2264 x \u2264 y \u2264 n) that do not contain any foe pairs. So you shouldn't count intervals (x, y) that contain at least one foe pair in it (the positions and order of the values from the foe pair are not important).\nConsider some example: p = [1, 3, 2, 4] and foe pairs are {(3, 2), (4, 2)}. The interval (1, 3) is incorrect because it contains a foe pair (3, 2). The interval (1, 4) is also incorrect because it contains two foe pairs (3, 2) and (4, 2). But the interval (1, 2) is correct because it doesn't contain any foe pair.\n-----Input-----\nThe first line contains two integers n and m (1 \u2264 n, m \u2264 3\u00b710^5) \u2014 the length of the permutation p and the number of foe pairs.\nThe second line contains n distinct integers p_{i} (1 \u2264 p_{i} \u2264 n) \u2014 the elements of the permutation p.\nEach of the next m lines contains two integers (a_{i}, b_{i}) (1 \u2264 a_{i}, b_{i} \u2264 n, a_{i} \u2260 b_{i}) \u2014 the i-th foe pair. Note a foe pair can appear multiple times in the given list.\n-----Output-----\nPrint the only integer c \u2014 the number of different intervals (x, y) that does not contain any foe pairs.\nNote that the answer can be too large, so you should use 64-bit integer type to store it. In C++ you can use the long long integer type and in Java you can use long integer type.\n-----Examples-----\nInput\n4 2\n1 3 2 4\n3 2\n2 4\nOutput\n5\nInput\n9 5\n9 7 2 3 1 4 6 5 8\n1 6\n4 5\n2 7\n7 2\n2 7\nOutput\n20\n-----Note-----\nIn the first example the intervals from the answer are (1, 1), (1, 2), (2, 2), (3, 3) and (4, 4).\n\ndef",
        "answer": "def foe(p, m):\n    foe_pairs = []\n    for i in range(m):\n        foe_pairs.append(list(map(int, input().split())))\n    foe_pairs = set(foe_pairs)\n    count = 0\n    for i in range(len(p)):\n        for j in range(i+1, len(p)):\n            if (p[i], p[j]) in foe_pairs or (p[j], p[i]) in foe_pairs:\n                break\n            else:\n                count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 2070,
        "prompt": "Complete the Python function given the prompt below:A and B are preparing themselves for programming contests.\nAfter several years of doing sports programming and solving many problems that require calculating all sorts of abstract objects, A and B also developed rather peculiar tastes.\nA likes lowercase letters of the Latin alphabet. He has assigned to each letter a number that shows how much he likes that letter (he has assigned negative numbers to the letters he dislikes). \nB likes substrings. He especially likes the ones that start and end with the same letter (their length must exceed one).\nAlso, A and B have a string s. Now they are trying to find out how many substrings t of a string s are interesting to B (that is, t starts and ends with the same letter and its length is larger than one), and also the sum of values of all letters (assigned by A), except for the first and the last one is equal to zero.\nNaturally, A and B have quickly found the number of substrings t that are interesting to them. Can you do it? \n-----Input-----\nThe first line contains 26 integers x_{a}, x_{b},..., x_{z} ( - 10^5 \u2264 x_{i} \u2264 10^5) \u2014 the value assigned to letters a, b, c,..., z respectively.\nThe second line contains string s of length between 1 and 10^5 characters, consisting of Lating lowercase letters\u2014 the string for which you need to calculate the answer. \n-----Output-----\nPrint the answer to the problem. \n-----Examples-----\nInput\n1 1 -1 1 1 1 1 1 1 1 1 1 1 1 1 7 1 1 1 8 1 1 1 1 1 1\nxabcab\nOutput\n2\nInput\n1 1 -1 1 1 1 1 1 1 1 1 1 1 1 1 7 1 1 1 8 1 1 1 1 1 1\naaa\nOutput\n2\n-----Note-----\nIn the first sample test strings satisfying the condition above are abca and bcab.\nIn the second sample test strings satisfying the condition above are two occurences of aa.\n\ndef",
        "answer": "def solution(A, B, S):\n    # write your code in Python 3.6",
        "difficulty": "interview"
    },
    {
        "task_id": 2071,
        "prompt": "Complete the Python function given the prompt below:Vasya's house is situated in a forest, and there is a mushroom glade near it. The glade consists of two rows, each of which can be divided into n consecutive cells. For each cell Vasya knows how fast the mushrooms grow in this cell (more formally, how many grams of mushrooms grow in this cell each minute). Vasya spends exactly one minute to move to some adjacent cell. Vasya cannot leave the glade. Two cells are considered adjacent if they share a common side. When Vasya enters some cell, he instantly collects all the mushrooms growing there.\nVasya begins his journey in the left upper cell. Every minute Vasya must move to some adjacent cell, he cannot wait for the mushrooms to grow. He wants to visit all the cells exactly once and maximize the total weight of the collected mushrooms. Initially, all mushrooms have a weight of 0. Note that Vasya doesn't need to return to the starting cell.\nHelp Vasya! Calculate the maximum total weight of mushrooms he can collect.\n-----Input-----\nThe first line contains the number n\u00a0(1 \u2264 n \u2264 3\u00b710^5) \u2014 the length of the glade.\nThe second line contains n numbers a_1, a_2,..., a_{n}\u00a0(1 \u2264 a_{i} \u2264 10^6) \u2014 the growth rate of mushrooms in the first row of the glade.\nThe third line contains n numbers b_1, b_2,..., b_{n}\u00a0(1 \u2264 b_{i} \u2264 10^6) is the growth rate of mushrooms in the second row of the glade.\n-----Output-----\nOutput one number \u2014 the maximum total weight of mushrooms that Vasya can collect by choosing the optimal route. Pay attention that Vasya must visit every cell of the glade exactly once.\n-----Examples-----\nInput\n3\n1 2 3\n6 5 4\nOutput\n70\nInput\n3\n1 1000 10000\n10 100 100000\nOutput\n543210\n-----Note-----\nIn the first test case, the optimal route is as follows:  [Image]  Thus, the collected weight of mushrooms will be 0\u00b71 + 1\u00b72 + 2\u00b73 + 3\u00b74 + 4\u00b75 + 5\u00b76 = 70.\nIn the second test case, the optimal route is as follows:  [Image]  Thus, the collected weight of mushrooms will be 0\u00b71 + 1\u00b710 + 2\u00b7100 + 3\u00b71000 + 4\u00b710000 + 5\u00b7100000 = 543210.\n\ndef",
        "answer": "def mushrooms(a, b, n):\n    m = [[0 for _ in range(n)] for _ in range(2)]\n    m[0][0] = a[0]\n    m[1][0] = b[0]\n    for i in range(1, n):\n        m[0][i] = max(m[0][i - 1], m[1][i - 1] + a[i])\n        m[1][i] = max(m[0][i - 1] + b[i], m[1][i - 1])\n    return max(m[0][n - 1], m[1][n - 1])",
        "difficulty": "interview"
    },
    {
        "task_id": 2072,
        "prompt": "Complete the Python function given the prompt below:The main road in Bytecity is a straight line from south to north. Conveniently, there are coordinates measured in meters from the southernmost building in north direction.\nAt some points on the road there are n friends, and i-th of them is standing at the point x_{i} meters and can move with any speed no greater than v_{i} meters per second in any of the two directions along the road: south or north.\nYou are to compute the minimum time needed to gather all the n friends at some point on the road. Note that the point they meet at doesn't need to have integer coordinate. \n-----Input-----\nThe first line contains single integer n (2 \u2264 n \u2264 60 000)\u00a0\u2014 the number of friends.\nThe second line contains n integers x_1, x_2,..., x_{n} (1 \u2264 x_{i} \u2264 10^9)\u00a0\u2014 the current coordinates of the friends, in meters.\nThe third line contains n integers v_1, v_2,..., v_{n} (1 \u2264 v_{i} \u2264 10^9)\u00a0\u2014 the maximum speeds of the friends, in meters per second.\n-----Output-----\nPrint the minimum time (in seconds) needed for all the n friends to meet at some point on the road. \nYour answer will be considered correct, if its absolute or relative error isn't greater than 10^{ - 6}. Formally, let your answer be a, while jury's answer be b. Your answer will be considered correct if $\\frac{|a - b|}{\\operatorname{max}(1, b)} \\leq 10^{-6}$ holds.\n-----Examples-----\nInput\n3\n7 1 3\n1 2 1\nOutput\n2.000000000000\nInput\n4\n5 10 3 2\n2 3 2 4\nOutput\n1.400000000000\n-----Note-----\nIn the first sample, all friends can gather at the point 5 within 2 seconds. In order to achieve this, the first friend should go south all the time at his maximum speed, while the second and the third friends should go north at their maximum speeds.\n\ndef",
        "answer": "def main():\n    n = int(input())\n    x = list(map(int, input().split()))\n    v = list(map(int, input().split()))\n    x.sort()\n    v.sort()\n    ans = 0\n    for i in range(n):\n        ans += (x[i] - x[i - 1]) / (v[i] + v[i - 1])\n    print(ans)",
        "difficulty": "interview"
    },
    {
        "task_id": 2073,
        "prompt": "Complete the Python function given the prompt below:ZS the Coder and Chris the Baboon has explored Udayland for quite some time. They realize that it consists of n towns numbered from 1 to n. \nThere are n directed roads in the Udayland. i-th of them goes from town i to some other town a_{i} (a_{i} \u2260 i). ZS the Coder can flip the direction of any road in Udayland, i.e. if it goes from town A to town B before the flip, it will go from town B to town A after.\nZS the Coder considers the roads in the Udayland confusing, if there is a sequence of distinct towns A_1, A_2,..., A_{k} (k > 1) such that for every 1 \u2264 i < k there is a road from town A_{i} to town A_{i} + 1 and another road from town A_{k} to town A_1. In other words, the roads are confusing if some of them form a directed cycle of some towns.\nNow ZS the Coder wonders how many sets of roads (there are 2^{n} variants) in initial configuration can he choose to flip such that after flipping each road in the set exactly once, the resulting network will not be confusing.\nNote that it is allowed that after the flipping there are more than one directed road from some town and possibly some towns with no roads leading out of it, or multiple roads between any pair of cities.\n-----Input-----\nThe first line of the input contains single integer n (2 \u2264 n \u2264 2\u00b710^5)\u00a0\u2014 the number of towns in Udayland.\nThe next line contains n integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 n, a_{i} \u2260 i), a_{i} denotes a road going from town i to town a_{i}.\n-----Output-----\nPrint a single integer\u00a0\u2014 the number of ways to flip some set of the roads so that the resulting whole set of all roads is not confusing. Since this number may be too large, print the answer modulo 10^9 + 7.\n-----Examples-----\nInput\n3\n2 3 1\nOutput\n6\nInput\n4\n2 1 1 1\nOutput\n8\nInput\n5\n2 4 2 5 3\nOutput\n28\n-----Note-----\nConsider the first sample case. There are 3 towns and 3 roads. The towns are numbered from 1 to 3 and the roads are $1 \\rightarrow 2$, $2 \\rightarrow 3$, $3 \\rightarrow 1$ initially. Number the roads 1 to 3 in this order. \nThe sets of roads that ZS the Coder can flip (to make them not confusing) are {1}, {2}, {3}, {1, 2}, {1, 3}, {2, 3}. Note that the empty set is invalid because if no roads are flipped, then towns 1, 2, 3 is form a directed cycle, so it is confusing. Similarly, flipping all roads is confusing too. Thus, there are a total of 6 possible sets ZS the Coder can flip.\nThe sample image shows all possible ways of orienting the roads from the first sample such that the network is not confusing.\n[Image]\n\ndef",
        "answer": "def roads_confusing(n):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    return roads_confusing(n-1) + roads_confusing(n-2) + roads_confusing(n-3)",
        "difficulty": "interview"
    },
    {
        "task_id": 2074,
        "prompt": "Complete the Python function given the prompt below:Jack decides to invite Emma out for a dinner. Jack is a modest student, he doesn't want to go to an expensive restaurant. Emma is a girl with high taste, she prefers elite places.\nMunhattan consists of n streets and m avenues. There is exactly one restaurant on the intersection of each street and avenue. The streets are numbered with integers from 1 to n and the avenues are numbered with integers from 1 to m. The cost of dinner in the restaurant at the intersection of the i-th street and the j-th avenue is c_{ij}.\nJack and Emma decide to choose the restaurant in the following way. Firstly Emma chooses the street to dinner and then Jack chooses the avenue. Emma and Jack makes their choice optimally: Emma wants to maximize the cost of the dinner, Jack wants to minimize it. Emma takes into account that Jack wants to minimize the cost of the dinner. Find the cost of the dinner for the couple in love.\n-----Input-----\nThe first line contains two integers n, m (1 \u2264 n, m \u2264 100) \u2014 the number of streets and avenues in Munhattan.\nEach of the next n lines contains m integers c_{ij} (1 \u2264 c_{ij} \u2264 10^9) \u2014 the cost of the dinner in the restaurant on the intersection of the i-th street and the j-th avenue.\n-----Output-----\nPrint the only integer a \u2014 the cost of the dinner for Jack and Emma.\n-----Examples-----\nInput\n3 4\n4 1 3 5\n2 2 2 2\n5 4 5 1\nOutput\n2\nInput\n3 3\n1 2 3\n2 3 1\n3 1 2\nOutput\n1\n-----Note-----\nIn the first example if Emma chooses the first or the third streets Jack can choose an avenue with the cost of the dinner 1. So she chooses the second street and Jack chooses any avenue. The cost of the dinner is 2.\nIn the second example regardless of Emma's choice Jack can choose a restaurant with the cost of the dinner 1.\n\ndef",
        "answer": "def cost_of_dinner(n, m, c):\n    c = sorted(c, reverse=True)\n    return c[0]",
        "difficulty": "interview"
    },
    {
        "task_id": 2075,
        "prompt": "Complete the Python function given the prompt below:As Famil Door\u2019s birthday is coming, some of his friends (like Gabi) decided to buy a present for him. His friends are going to buy a string consisted of round brackets since Famil Door loves string of brackets of length n more than any other strings!\nThe sequence of round brackets is called valid if and only if:   the total number of opening brackets is equal to the total number of closing brackets;  for any prefix of the sequence, the number of opening brackets is greater or equal than the number of closing brackets. \nGabi bought a string s of length m (m \u2264 n) and want to complete it to obtain a valid sequence of brackets of length n. He is going to pick some strings p and q consisting of round brackets and merge them in a string p + s + q, that is add the string p at the beginning of the string s and string q at the end of the string s.\nNow he wonders, how many pairs of strings p and q exists, such that the string p + s + q is a valid sequence of round brackets. As this number may be pretty large, he wants to calculate it modulo 10^9 + 7.\n-----Input-----\nFirst line contains n and m (1 \u2264 m \u2264 n \u2264 100 000, n - m \u2264 2000)\u00a0\u2014 the desired length of the string and the length of the string bought by Gabi, respectively.\nThe second line contains string s of length m consisting of characters '(' and ')' only.\n-----Output-----\nPrint the number of pairs of string p and q such that p + s + q is a valid sequence of round brackets modulo 10^9 + 7.\n-----Examples-----\nInput\n4 1\n(\nOutput\n4\nInput\n4 4\n(())\nOutput\n1\nInput\n4 3\n(((\nOutput\n0\n-----Note-----\nIn the first sample there are four different valid pairs:   p = \"(\", q = \"))\"  p = \"()\", q = \")\"  p = \"\", q = \"())\"  p = \"\", q = \")()\" \nIn the second sample the only way to obtain a desired string is choose empty p and q.\nIn the third sample there is no way to get a valid sequence of brackets.\n\ndef",
        "answer": "def solve(s, n):\n    count = 0\n    for i in range(n):\n        if s[i] == '(':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return 0\n    return count == 0",
        "difficulty": "interview"
    },
    {
        "task_id": 2076,
        "prompt": "Complete the Python function given the prompt below:Alice is playing with some stones.\nNow there are three numbered heaps of stones. The first of them contains $a$ stones, the second of them contains $b$ stones and the third of them contains $c$ stones.\nEach time she can do one of two operations:  take one stone from the first heap and two stones from the second heap (this operation can be done only if the first heap contains at least one stone and the second heap contains at least two stones);  take one stone from the second heap and two stones from the third heap (this operation can be done only if the second heap contains at least one stone and the third heap contains at least two stones). \nShe wants to get the maximum number of stones, but she doesn't know what to do. Initially, she has $0$ stones. Can you help her?\n-----Input-----\nThe first line contains one integer $t$ ($1 \\leq t \\leq 100$) \u00a0\u2014 the number of test cases. Next $t$ lines describe test cases in the following format:\nLine contains three non-negative integers $a$, $b$ and $c$, separated by spaces ($0 \\leq a,b,c \\leq 100$)\u00a0\u2014 the number of stones in the first, the second and the third heap, respectively.\nIn hacks it is allowed to use only one test case in the input, so $t = 1$ should be satisfied.\n-----Output-----\nPrint $t$ lines, the answers to the test cases in the same order as in the input. The answer to the test case is the integer \u00a0\u2014 the maximum possible number of stones that Alice can take after making some operations. \n-----Example-----\nInput\n3\n3 4 5\n1 0 5\n5 3 2\nOutput\n9\n0\n6\n-----Note-----\nFor the first test case in the first test, Alice can take two stones from the second heap and four stones from the third heap, making the second operation two times. Then she can take one stone from the first heap and two stones from the second heap, making the first operation one time. The summary number of stones, that Alice will take is $9$. It is impossible to make some operations to take more than $9$ stones, so the answer is $9$.\n\ndef",
        "answer": "def alice(a, b, c):\n    if a == 0 or b == 0 or c == 0:\n        return 0\n    if a > b and a > c:\n        return a + alice(a - b, b, c)\n    elif b > a and b > c:\n        return b + alice(a, b - c, c)\n    else:\n        return c + alice(a, b, c - c)",
        "difficulty": "interview"
    },
    {
        "task_id": 2077,
        "prompt": "Complete the Python function given the prompt below:Today Johnny wants to increase his contribution. His plan assumes writing $n$ blogs. One blog covers one topic, but one topic can be covered by many blogs. Moreover, some blogs have references to each other. Each pair of blogs that are connected by a reference has to cover different topics because otherwise, the readers can notice that they are split just for more contribution. Set of blogs and bidirectional references between some pairs of them is called blogs network.\nThere are $n$ different topics, numbered from $1$ to $n$ sorted by Johnny's knowledge. The structure of the blogs network is already prepared. Now Johnny has to write the blogs in some order. He is lazy, so each time before writing a blog, he looks at it's already written neighbors (the blogs referenced to current one) and chooses the topic with the smallest number which is not covered by neighbors. It's easy to see that this strategy will always allow him to choose a topic because there are at most $n - 1$ neighbors.\nFor example, if already written neighbors of the current blog have topics number $1$, $3$, $1$, $5$, and $2$, Johnny will choose the topic number $4$ for the current blog, because topics number $1$, $2$ and $3$ are already covered by neighbors and topic number $4$ isn't covered.\nAs a good friend, you have done some research and predicted the best topic for each blog. Can you tell Johnny, in which order he has to write the blogs, so that his strategy produces the topic assignment chosen by you?\n-----Input-----\nThe first line contains two integers $n$ $(1 \\leq n \\leq 5 \\cdot 10^5)$ and $m$ $(0 \\leq m \\leq 5 \\cdot 10^5)$\u00a0\u2014 the number of blogs and references, respectively.\nEach of the following $m$ lines contains two integers $a$ and $b$ ($a \\neq b$; $1 \\leq a, b \\leq n$), which mean that there is a reference between blogs $a$ and $b$. It's guaranteed that the graph doesn't contain multiple edges.\nThe last line contains $n$ integers $t_1, t_2, \\ldots, t_n$, $i$-th of them denotes desired topic number of the $i$-th blog ($1 \\le t_i \\le n$).\n-----Output-----\nIf the solution does not exist, then write $-1$. Otherwise, output $n$ distinct integers $p_1, p_2, \\ldots, p_n$ $(1 \\leq p_i \\leq n)$, which describe the numbers of blogs in order which Johnny should write them. If there are multiple answers, print any.\n-----Examples-----\nInput\n3 3\n1 2\n2 3\n3 1\n2 1 3\nOutput\n2 1 3\nInput\n3 3\n1 2\n2 3\n3 1\n1 1 1\nOutput\n-1\nInput\n5 3\n1 2\n2 3\n4 5\n2 1 2 2 1\nOutput\n2 5 1 3 4\n-----Note-----\nIn the first example, Johnny starts with writing blog number $2$, there are no already written neighbors yet, so it receives the first topic. Later he writes blog number $1$, it has reference to the already written second blog, so it receives the second topic. In the end, he writes blog number $3$, it has references to blogs number $1$ and $2$ so it receives the third topic.\nSecond example: There does not exist any permutation fulfilling given conditions.\nThird example: First Johnny writes blog $2$, it receives the topic $1$. Then he writes blog $5$, it receives the topic $1$ too because it doesn't have reference to single already written blog $2$. Then he writes blog number $1$, it has reference to blog number $2$ with topic $1$, so it receives the topic $2$. Then he writes blog number $3$ which has reference to blog $2$, so it receives the topic $2$. Then he ends with writing blog number $4$ which has reference to blog $5$ and receives the topic $2$.\n\ndef",
        "answer": "def solution(n, m, ref, topics):\n    graph = [[] for _ in range(n)]\n    for a, b in ref:\n        graph[a - 1].append(b - 1)\n        graph[b - 1].append(a - 1)\n    visited = [False] * n\n    def dfs(i):\n        if visited[i]:\n            return\n        visited[i] = True\n        for j in graph[i]:\n            dfs(j)\n    dfs(0)\n    res = []\n    for i in range(n):\n        if not visited[i]:\n            res.append(topics[i])\n    return res",
        "difficulty": "interview"
    },
    {
        "task_id": 2078,
        "prompt": "Complete the Python function given the prompt below:There is a square of size $10^6 \\times 10^6$ on the coordinate plane with four points $(0, 0)$, $(0, 10^6)$, $(10^6, 0)$, and $(10^6, 10^6)$ as its vertices.\nYou are going to draw segments on the plane. All segments are either horizontal or vertical and intersect with at least one side of the square.\nNow you are wondering how many pieces this square divides into after drawing all segments. Write a program calculating the number of pieces of the square.\n-----Input-----\nThe first line contains two integers $n$ and $m$ ($0 \\le n, m \\le 10^5$)\u00a0\u2014 the number of horizontal segments and the number of vertical segments.\nThe next $n$ lines contain descriptions of the horizontal segments. The $i$-th line contains three integers $y_i$, $lx_i$ and $rx_i$ ($0 < y_i < 10^6$; $0 \\le lx_i < rx_i \\le 10^6$), which means the segment connects $(lx_i, y_i)$ and $(rx_i, y_i)$.\nThe next $m$ lines contain descriptions of the vertical segments. The $i$-th line contains three integers $x_i$, $ly_i$ and $ry_i$ ($0 < x_i < 10^6$; $0 \\le ly_i < ry_i \\le 10^6$), which means the segment connects $(x_i, ly_i)$ and $(x_i, ry_i)$.\nIt's guaranteed that there are no two segments on the same line, and each segment intersects with at least one of square's sides.\n-----Output-----\nPrint the number of pieces the square is divided into after drawing all the segments.\n-----Example-----\nInput\n3 3\n2 3 1000000\n4 0 4\n3 0 1000000\n4 0 1\n2 0 5\n3 1 1000000\nOutput\n7\n-----Note-----\n The sample is like this: [Image]\n\ndef",
        "answer": "def count_pieces(n, m):\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2079,
        "prompt": "Complete the Python function given the prompt below:In the Bus of Characters there are $n$ rows of seat, each having $2$ seats. The width of both seats in the $i$-th row is $w_i$ centimeters. All integers $w_i$ are distinct.\nInitially the bus is empty. On each of $2n$ stops one passenger enters the bus. There are two types of passengers:   an introvert always chooses a row where both seats are empty. Among these rows he chooses the one with the smallest seats width and takes one of the seats in it;  an extrovert always chooses a row where exactly one seat is occupied (by an introvert). Among these rows he chooses the one with the largest seats width and takes the vacant place in it. \nYou are given the seats width in each row and the order the passengers enter the bus. Determine which row each passenger will take.\n-----Input-----\nThe first line contains a single integer $n$ ($1 \\le n \\le 200\\,000$) \u2014 the number of rows in the bus.\nThe second line contains the sequence of integers $w_1, w_2, \\dots, w_n$ ($1 \\le w_i \\le 10^{9}$), where $w_i$ is the width of each of the seats in the $i$-th row. It is guaranteed that all $w_i$ are distinct.\nThe third line contains a string of length $2n$, consisting of digits '0' and '1' \u2014 the description of the order the passengers enter the bus. If the $j$-th character is '0', then the passenger that enters the bus on the $j$-th stop is an introvert. If the $j$-th character is '1', the the passenger that enters the bus on the $j$-th stop is an extrovert. It is guaranteed that the number of extroverts equals the number of introverts (i.\u00a0e. both numbers equal $n$), and for each extrovert there always is a suitable row.\n-----Output-----\nPrint $2n$ integers \u2014 the rows the passengers will take. The order of passengers should be the same as in input.\n-----Examples-----\nInput\n2\n3 1\n0011\nOutput\n2 1 1 2 \nInput\n6\n10 8 9 11 13 5\n010010011101\nOutput\n6 6 2 3 3 1 4 4 1 2 5 5 \n-----Note-----\nIn the first example the first passenger (introvert) chooses the row $2$, because it has the seats with smallest width. The second passenger (introvert) chooses the row $1$, because it is the only empty row now. The third passenger (extrovert) chooses the row $1$, because it has exactly one occupied seat and the seat width is the largest among such rows. The fourth passenger (extrovert) chooses the row $2$, because it is the only row with an empty place.\n\ndef",
        "answer": "def bus_of_characters(n, w):\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2080,
        "prompt": "Complete the Python function given the prompt below:Ivan is developing his own computer game. Now he tries to create some levels for his game. But firstly for each level he needs to draw a graph representing the structure of the level.\nIvan decided that there should be exactly n_{i} vertices in the graph representing level i, and the edges have to be bidirectional. When constructing the graph, Ivan is interested in special edges called bridges. An edge between two vertices u and v is called a bridge if this edge belongs to every path between u and v (and these vertices will belong to different connected components if we delete this edge). For each level Ivan wants to construct a graph where at least half of the edges are bridges. He also wants to maximize the number of edges in each constructed graph.\nSo the task Ivan gave you is: given q numbers n_1, n_2,..., n_{q}, for each i tell the maximum number of edges in a graph with n_{i} vertices, if at least half of the edges are bridges. Note that the graphs cannot contain multiple edges or self-loops.\n-----Input-----\nThe first line of input file contains a positive integer q (1 \u2264 q \u2264 100 000) \u2014 the number of graphs Ivan needs to construct.\nThen q lines follow, i-th line contains one positive integer n_{i} (1 \u2264 n_{i} \u2264 2\u00b710^9) \u2014 the number of vertices in i-th graph.\nNote that in hacks you have to use q = 1.\n-----Output-----\nOutput q numbers, i-th of them must be equal to the maximum number of edges in i-th graph.\n-----Example-----\nInput\n3\n3\n4\n6\nOutput\n2\n3\n6\n-----Note-----\nIn the first example it is possible to construct these graphs:  1 - 2, 1 - 3;  1 - 2, 1 - 3, 2 - 4;  1 - 2, 1 - 3, 2 - 3, 1 - 4, 2 - 5, 3 - 6.\n\ndef",
        "answer": "def bridge(n):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 10\n    if n == 12:\n        return 11\n    if n == 13:\n        return 12\n    if n == 14:\n        return 13\n    if n == 15:\n        return 14\n    if n == 16:\n        return 15\n    if n == 17:\n        return 16\n    if n == 18:\n        return 17\n    if n == 19:\n        return 18\n    if n == 20:\n        return 19\n    if n == 21:\n        return 20\n    if n == 22:\n        return 21\n    if n == 23:\n        return 22\n    if n == 24:\n        return 23\n    if n == 25:\n        return 24\n    if n == 26:\n        return 25\n    if n == 27:\n        return 26\n    if n == 28:\n        return 27\n    if n == 29:\n        return 28\n    if n == 30:\n        return 29\n    if n == 31:\n        return 30\n    if n == 32:\n        return 31\n    if n == 33:\n        return 32\n    if n == 34:\n        return 33\n    if n == 35:\n        return 34\n    if n == 36:\n        return 35",
        "difficulty": "interview"
    },
    {
        "task_id": 2081,
        "prompt": "Complete the Python function given the prompt below:You are given an array a consisting of n elements. The imbalance value of some subsegment of this array is the difference between the maximum and minimum element from this segment. The imbalance value of the array is the sum of imbalance values of all subsegments of this array.\nFor example, the imbalance value of array [1, 4, 1] is 9, because there are 6 different subsegments of this array:   [1] (from index 1 to index 1), imbalance value is 0;  [1, 4] (from index 1 to index 2), imbalance value is 3;  [1, 4, 1] (from index 1 to index 3), imbalance value is 3;  [4] (from index 2 to index 2), imbalance value is 0;  [4, 1] (from index 2 to index 3), imbalance value is 3;  [1] (from index 3 to index 3), imbalance value is 0; \nYou have to determine the imbalance value of the array a.\n-----Input-----\nThe first line contains one integer n (1 \u2264 n \u2264 10^6) \u2014 size of the array a.\nThe second line contains n integers a_1, a_2... a_{n} (1 \u2264 a_{i} \u2264 10^6) \u2014 elements of the array.\n-----Output-----\nPrint one integer \u2014 the imbalance value of a.\n-----Example-----\nInput\n3\n1 4 1\nOutput\n9\n\ndef",
        "answer": "def imbalance(a):\n    imbalance = 0\n    for i in range(len(a)):\n        if i == 0:\n            imbalance += a[i]\n        else:\n            imbalance += a[i] - a[i-1]\n    return imbalance",
        "difficulty": "interview"
    },
    {
        "task_id": 2082,
        "prompt": "Complete the Python function given the prompt below:Of course our child likes walking in a zoo. The zoo has n areas, that are numbered from 1 to n. The i-th area contains a_{i} animals in it. Also there are m roads in the zoo, and each road connects two distinct areas. Naturally the zoo is connected, so you can reach any area of the zoo from any other area using the roads.\nOur child is very smart. Imagine the child want to go from area p to area q. Firstly he considers all the simple routes from p to q. For each route the child writes down the number, that is equal to the minimum number of animals among the route areas. Let's denote the largest of the written numbers as f(p, q). Finally, the child chooses one of the routes for which he writes down the value f(p, q).\nAfter the child has visited the zoo, he thinks about the question: what is the average value of f(p, q) for all pairs p, q (p \u2260 q)? Can you answer his question?\n-----Input-----\nThe first line contains two integers n and m (2 \u2264 n \u2264 10^5; 0 \u2264 m \u2264 10^5). The second line contains n integers: a_1, a_2,..., a_{n} (0 \u2264 a_{i} \u2264 10^5). Then follow m lines, each line contains two integers x_{i} and y_{i} (1 \u2264 x_{i}, y_{i} \u2264 n; x_{i} \u2260 y_{i}), denoting the road between areas x_{i} and y_{i}.\nAll roads are bidirectional, each pair of areas is connected by at most one road.\n-----Output-----\nOutput a real number \u2014 the value of $\\frac{\\sum_{p, q, p \\neq q} f(p, q)}{n(n - 1)}$.\nThe answer will be considered correct if its relative or absolute error doesn't exceed 10^{ - 4}.\n-----Examples-----\nInput\n4 3\n10 20 30 40\n1 3\n2 3\n4 3\nOutput\n16.666667\nInput\n3 3\n10 20 30\n1 2\n2 3\n3 1\nOutput\n13.333333\nInput\n7 8\n40 20 10 30 20 50 40\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n1 4\n5 7\nOutput\n18.571429\n-----Note-----\nConsider the first sample. There are 12 possible situations:\n  p = 1, q = 3, f(p, q) = 10.  p = 2, q = 3, f(p, q) = 20.  p = 4, q = 3, f(p, q) = 30.  p = 1, q = 2, f(p, q) = 10.  p = 2, q = 4, f(p, q) = 20.  p = 4, q = 1, f(p, q) = 10. \nAnother 6 cases are symmetrical to the above. The average is $\\frac{(10 + 20 + 30 + 10 + 20 + 10) \\times 2}{12} \\approx 16.666667$.\nConsider the second sample. There are 6 possible situations:\n  p = 1, q = 2, f(p, q) = 10.  p = 2, q = 3, f(p, q) = 20.  p = 1, q = 3, f(p, q) = 10. \nAnother 3 cases are symmetrical to the above. The average is $\\frac{(10 + 20 + 10) \\times 2}{6} \\approx 13.333333$.\n\ndef",
        "answer": "def solution(n, m, a):\n    # write your code in Python 3.6\n    pass\n",
        "difficulty": "interview"
    },
    {
        "task_id": 2083,
        "prompt": "Complete the Python function given the prompt below:In this problem you will have to deal with a real algorithm that is used in the VK social network.\nAs in any other company that creates high-loaded websites, the VK developers have to deal with request statistics regularly. An important indicator reflecting the load of the site is the mean number of requests for a certain period of time of T seconds (for example, T = 60\u00a0seconds = 1\u00a0min and T = 86400\u00a0seconds = 1\u00a0day). For example, if this value drops dramatically, that shows that the site has access problem. If this value grows, that may be a reason to analyze the cause for the growth and add more servers to the website if it is really needed.\nHowever, even such a natural problem as counting the mean number of queries for some period of time can be a challenge when you process the amount of data of a huge social network. That's why the developers have to use original techniques to solve problems approximately, but more effectively at the same time.\nLet's consider the following formal model. We have a service that works for n seconds. We know the number of queries to this resource a_{t} at each moment of time t (1 \u2264 t \u2264 n). Let's formulate the following algorithm of calculating the mean with exponential decay. Let c be some real number, strictly larger than one.\n// setting this constant value correctly can adjust   \n// the time range for which statistics will be calculated\ndouble c = some constant value; \n// as the result of the algorithm's performance this variable will contain \n// the mean number of queries for the last \n// T seconds by the current moment of time\ndouble mean = 0.0; \nfor t = 1..n: // at each second, we do the following:\n    // a_{t} is the number of queries that came at the last second;\n    mean = (mean + a_{t} / T) / c;\nThus, the mean variable is recalculated each second using the number of queries that came at that second. We can make some mathematical calculations and prove that choosing the value of constant c correctly will make the value of mean not very different from the real mean value a_{x} at t - T + 1 \u2264 x \u2264 t. \nThe advantage of such approach is that it only uses the number of requests at the current moment of time and doesn't require storing the history of requests for a large time range. Also, it considers the recent values with the weight larger than the weight of the old ones, which helps to react to dramatic change in values quicker.\nHowever before using the new theoretical approach in industrial programming, there is an obligatory step to make, that is, to test its credibility practically on given test data sets. Your task is to compare the data obtained as a result of the work of an approximate algorithm to the real data. \nYou are given n values a_{t}, integer T and real number c. Also, you are given m moments p_{j} (1 \u2264 j \u2264 m), where we are interested in the mean value of the number of queries for the last T seconds. Implement two algorithms. The first one should calculate the required value by definition, i.e. by the formula $\\frac{a_{p_{j} - T + 1} + a_{p_{j}} - T + 2 + \\ldots + a_{p_{j}}}{T}$. The second algorithm should calculate the mean value as is described above. Print both values and calculate the relative error of the second algorithm by the formula $\\frac{|\\text{approx-real}|}{\\text{real}}$, where approx is the approximate value, obtained by the second algorithm, and real is the exact value obtained by the first algorithm.\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 2\u00b710^5), integer T (1 \u2264 T \u2264 n) and real number c (1 < c \u2264 100) \u2014 the time range when the resource should work, the length of the time range during which we need the mean number of requests and the coefficient c of the work of approximate algorithm. Number c is given with exactly six digits after the decimal point.\nThe next line contains n integers a_{t} (1 \u2264 a_{t} \u2264 10^6) \u2014 the number of queries to the service at each moment of time.\nThe next line contains integer m (1 \u2264 m \u2264 n) \u2014 the number of moments of time when we are interested in the mean number of queries for the last T seconds.\nThe next line contains m integers p_{j} (T \u2264 p_{j} \u2264 n), representing another moment of time for which we need statistics. Moments p_{j} are strictly increasing.\n-----Output-----\nPrint m lines. The j-th line must contain three numbers real, approx and error, where:  [Image] is the real mean number of queries for the last T seconds;  approx is calculated by the given algorithm and equals mean at the moment of time t = p_{j} (that is, after implementing the p_{j}-th iteration of the cycle);  $\\text{error} = \\frac{|\\text{approx-real}|}{\\text{real}}$ is the relative error of the approximate algorithm. \nThe numbers you printed will be compared to the correct numbers with the relative or absolute error 10^{ - 4}. It is recommended to print the numbers with at least five digits after the decimal point.\n-----Examples-----\nInput\n1 1 2.000000\n1\n1\n1\nOutput\n1.000000 0.500000 0.500000\nInput\n11 4 1.250000\n9 11 7 5 15 6 6 6 6 6 6\n8\n4 5 6 7 8 9 10 11\nOutput\n8.000000 4.449600 0.443800\n9.500000 6.559680 0.309507\n8.250000 6.447744 0.218455\n8.000000 6.358195 0.205226\n8.250000 6.286556 0.237993\n6.000000 6.229245 0.038207\n6.000000 6.183396 0.030566\n6.000000 6.146717 0.024453\nInput\n13 4 1.250000\n3 3 3 3 3 20 3 3 3 3 3 3 3\n10\n4 5 6 7 8 9 10 11 12 13\nOutput\n3.000000 1.771200 0.409600\n3.000000 2.016960 0.327680\n7.250000 5.613568 0.225715\n7.250000 5.090854 0.297813\n7.250000 4.672684 0.355492\n7.250000 4.338147 0.401635\n3.000000 4.070517 0.356839\n3.000000 3.856414 0.285471\n3.000000 3.685131 0.228377\n3.000000 3.548105 0.182702\n\ndef",
        "answer": "def mean_calc(n, T, c):\n    mean = 0.0\n    for t in range(1, n + 1):\n        mean = (mean + a[t - 1] / T) / c\n    return mean",
        "difficulty": "interview"
    },
    {
        "task_id": 2084,
        "prompt": "Complete the Python function given the prompt below:The marmots have prepared a very easy problem for this year's HC^2 \u2013 this one. It involves numbers n, k and a sequence of n positive integers a_1, a_2,..., a_{n}. They also came up with a beautiful and riveting story for the problem statement. It explains what the input means, what the program should output, and it also reads like a good criminal.\nHowever I, Heidi, will have none of that. As my joke for today, I am removing the story from the statement and replacing it with these two unhelpful paragraphs. Now solve the problem, fools!\n-----Input-----\nThe first line of the input contains two space-separated integers n and k (1 \u2264 k \u2264 n \u2264 2200). The second line contains n space-separated integers a_1,..., a_{n} (1 \u2264 a_{i} \u2264 10^4).\n-----Output-----\nOutput one number.\n-----Examples-----\nInput\n8 5\n1 1 1 1 1 1 1 1\nOutput\n5\nInput\n10 3\n16 8 2 4 512 256 32 128 64 1\nOutput\n7\nInput\n5 1\n20 10 50 30 46\nOutput\n10\nInput\n6 6\n6 6 6 6 6 6\nOutput\n36\nInput\n1 1\n100\nOutput\n100\n\ndef",
        "answer": "def f(n, k, a):\n    return n * k * max(a)",
        "difficulty": "interview"
    },
    {
        "task_id": 2085,
        "prompt": "Complete the Python function given the prompt below:Ridhiman challenged Ashish to find the maximum valued subsequence of an array $a$ of size $n$ consisting of positive integers. \nThe value of a non-empty subsequence of $k$ elements of $a$ is defined as $\\sum 2^i$ over all integers $i \\ge 0$ such that at least $\\max(1, k - 2)$ elements of the subsequence have the $i$-th bit set in their binary representation (value $x$ has the $i$-th bit set in its binary representation if $\\lfloor \\frac{x}{2^i} \\rfloor \\mod 2$ is equal to $1$). \nRecall that $b$ is a subsequence of $a$, if $b$ can be obtained by deleting some(possibly zero) elements from $a$.\nHelp Ashish find the maximum value he can get by choosing some subsequence of $a$.\n-----Input-----\nThe first line of the input consists of a single integer $n$ $(1 \\le n \\le 500)$\u00a0\u2014 the size of $a$.\nThe next line consists of $n$ space-separated integers\u00a0\u2014 the elements of the array $(1 \\le a_i \\le 10^{18})$.\n-----Output-----\nPrint a single integer\u00a0\u2014 the maximum value Ashish can get by choosing some subsequence of $a$.\n-----Examples-----\nInput\n3\n2 1 3\nOutput\n3\nInput\n3\n3 1 4\nOutput\n7\nInput\n1\n1\nOutput\n1\nInput\n4\n7 7 1 1\nOutput\n7\n-----Note-----\nFor the first test case, Ashish can pick the subsequence $\\{{2, 3}\\}$ of size $2$. The binary representation of $2$ is 10 and that of $3$ is 11. Since $\\max(k - 2, 1)$ is equal to $1$, the value of the subsequence is $2^0 + 2^1$ (both $2$ and $3$ have $1$-st bit set in their binary representation and $3$ has $0$-th bit set in its binary representation). Note that he could also pick the subsequence $\\{{3\\}}$ or $\\{{2, 1, 3\\}}$.\nFor the second test case, Ashish can pick the subsequence $\\{{3, 4\\}}$ with value $7$.\nFor the third test case, Ashish can pick the subsequence $\\{{1\\}}$ with value $1$.\nFor the fourth test case, Ashish can pick the subsequence $\\{{7, 7\\}}$ with value $7$.\n\ndef",
        "answer": "def max_subsequence(n, a):\n    max_sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            if sum(a[i:j+1]) > max_sum:\n                max_sum = sum(a[i:j+1])\n    return max_sum",
        "difficulty": "interview"
    },
    {
        "task_id": 2086,
        "prompt": "Complete the Python function given the prompt below:In distant future on Earth day lasts for n hours and that's why there are n timezones. Local times in adjacent timezones differ by one hour. For describing local time, hours numbers from 1 to n are used, i.e. there is no time \"0 hours\", instead of it \"n hours\" is used. When local time in the 1-st timezone is 1 hour, local time in the i-th timezone is i hours.\nSome online programming contests platform wants to conduct a contest that lasts for an hour in such a way that its beginning coincides with beginning of some hour (in all time zones). The platform knows, that there are a_{i} people from i-th timezone who want to participate in the contest. Each person will participate if and only if the contest starts no earlier than s hours 00 minutes local time and ends not later than f hours 00 minutes local time. Values s and f are equal for all time zones. If the contest starts at f hours 00 minutes local time, the person won't participate in it.\nHelp platform select such an hour, that the number of people who will participate in the contest is maximum. \n-----Input-----\nThe first line contains a single integer n (2 \u2264 n \u2264 100 000)\u00a0\u2014 the number of hours in day.\nThe second line contains n space-separated integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10 000), where a_{i} is the number of people in the i-th timezone who want to participate in the contest.\nThe third line contains two space-separated integers s and f (1 \u2264 s < f \u2264 n).\n-----Output-----\nOutput a single integer\u00a0\u2014 the time of the beginning of the contest (in the first timezone local time), such that the number of participants will be maximum possible. If there are many answers, output the smallest among them.\n-----Examples-----\nInput\n3\n1 2 3\n1 3\nOutput\n3\nInput\n5\n1 2 3 4 1\n1 3\nOutput\n4\n-----Note-----\nIn the first example, it's optimal to start competition at 3 hours (in first timezone). In this case, it will be 1 hour in the second timezone and 2 hours in the third timezone. Only one person from the first timezone won't participate.\nIn second example only people from the third and the fourth timezones will participate.\n\ndef",
        "answer": "def time_zone(n, a, s, f):\n    a.sort()\n    a.reverse()\n    a.append(0)\n    a.reverse()\n    a.append(0)\n    a.reverse()\n    a.append(0)\n    a.reverse()\n    a.append(0)\n    a.reverse()\n    a.append(0)\n    a.reverse()\n    a.append(0)\n    a.reverse()\n    a.append(0)\n    a.reverse()\n    a.append(0)\n    a.reverse()\n    a.append(0)\n    a.reverse()\n    a.append(0)\n    a.reverse()\n    a.append(0)\n    a.reverse()\n    a.append(0)\n    a.reverse()\n    a.append(0)\n    a.reverse()\n    a.append(0)\n    a.reverse()\n    a.append(0)\n    a.reverse()\n    a.append(0)\n    a.reverse()\n    a.append(0)\n    a.reverse()\n    a.append(0)\n    a.reverse()\n    a.append(0)\n    a.reverse()\n    a.append(0)\n    a.reverse()\n    a.append(0)\n    a.reverse()\n    a.append(0)\n    a.reverse()\n    a.append(0)\n    a.reverse()\n    a.append(0)\n    a.reverse()\n    a.append(0)\n    a.reverse()\n    a.append(0)\n    a.reverse()\n    a.append(0)\n    a.",
        "difficulty": "interview"
    },
    {
        "task_id": 2087,
        "prompt": "Complete the Python function given the prompt below:Given are three positive integers A, B, and C. Compute the following value modulo 998244353:\n\\sum_{a=1}^{A} \\sum_{b=1}^{B} \\sum_{c=1}^{C} abc\n-----Constraints-----\n - 1 \\leq A, B, C \\leq 10^9\n-----Input-----\nInput is given from standard input in the following format:\nA B C\n-----Output-----\nPrint the value modulo 998244353.\n-----Sample Input-----\n1 2 3\n-----Sample Output-----\n18\nWe have: (1 \\times 1 \\times 1) + (1 \\times 1 \\times 2) + (1 \\times 1 \\times 3) + (1 \\times 2 \\times 1) + (1 \\times 2 \\times 2) + (1 \\times 2 \\times 3) = 1 + 2 + 3 + 2 + 4 + 6 = 18.\n\ndef",
        "answer": "def modulo(a, b, c):\n    return (a * b * c) % 998244353",
        "difficulty": "interview"
    },
    {
        "task_id": 2088,
        "prompt": "Complete the Python function given the prompt below:There is one apple tree in Arkady's garden. It can be represented as a set of junctions connected with branches so that there is only one way to reach any junctions from any other one using branches. The junctions are enumerated from $1$ to $n$, the junction $1$ is called the root.\nA subtree of a junction $v$ is a set of junctions $u$ such that the path from $u$ to the root must pass through $v$. Note that $v$ itself is included in a subtree of $v$.\nA leaf is such a junction that its subtree contains exactly one junction.\nThe New Year is coming, so Arkady wants to decorate the tree. He will put a light bulb of some color on each leaf junction and then count the number happy junctions. A happy junction is such a junction $t$ that all light bulbs in the subtree of $t$ have different colors.\nArkady is interested in the following question: for each $k$ from $1$ to $n$, what is the minimum number of different colors needed to make the number of happy junctions be greater than or equal to $k$?\n-----Input-----\nThe first line contains a single integer $n$ ($1 \\le n \\le 10^5$)\u00a0\u2014 the number of junctions in the tree.\nThe second line contains $n - 1$ integers $p_2$, $p_3$,..., $p_n$ ($1 \\le p_i < i$), where $p_i$ means there is a branch between junctions $i$ and $p_i$. It is guaranteed that this set of branches forms a tree.\n-----Output-----\nOutput $n$ integers. The $i$-th of them should be the minimum number of colors needed to make the number of happy junctions be at least $i$.\n-----Examples-----\nInput\n3\n1 1\nOutput\n1 1 2 \nInput\n5\n1 1 3 3\nOutput\n1 1 1 2 3 \n-----Note-----\nIn the first example for $k = 1$ and $k = 2$ we can use only one color: the junctions $2$ and $3$ will be happy. For $k = 3$ you have to put the bulbs of different colors to make all the junctions happy.\nIn the second example for $k = 4$ you can, for example, put the bulbs of color $1$ in junctions $2$ and $4$, and a bulb of color $2$ into junction $5$. The happy junctions are the ones with indices $2$, $3$, $4$ and $5$ then.\n\ndef",
        "answer": "def happy_junctions(n, edges):\n    # Write your code here\n    # print(n, edges)\n    # print(n, edges)\n    # print(n, edges)\n    # print(n, edges)\n    # print(n, edges)\n    # print(n, edges)\n    # print(n, edges)\n    # print(n, edges)\n    # print(n, edges)\n    # print(n, edges)\n    # print(n, edges)\n    # print(n, edges)\n    # print(n, edges)\n    # print(n, edges)\n    # print(n, edges)\n    # print(n, edges)\n    # print(n, edges)\n    # print(n, edges)\n    # print(n, edges)\n    # print(n, edges)\n    # print(n, edges)\n    # print(n, edges)\n    # print(n, edges)\n    # print(n, edges)\n    # print(n, edges)\n    # print(n, edges)\n    # print(n, edges)\n    # print(n, edges)\n    # print(n, edges)\n    # print(n, edges)\n    # print(n, edges)\n    # print(n, edges)\n    # print(n, edges)\n    # print(n, edges)\n    # print(n, edges)\n    # print(n, edges)\n    # print(n, edges)\n    # print(n, edges)\n    # print(n, edges)\n    # print(n, edges)\n    # print(n, edges)\n    # print(n, edges)\n    # print(n",
        "difficulty": "interview"
    },
    {
        "task_id": 2089,
        "prompt": "Complete the Python function given the prompt below:Little town Nsk consists of n junctions connected by m bidirectional roads. Each road connects two distinct junctions and no two roads connect the same pair of junctions. It is possible to get from any junction to any other junction by these roads. The distance between two junctions is equal to the minimum possible number of roads on a path between them.\nIn order to improve the transportation system, the city council asks mayor to build one new road. The problem is that the mayor has just bought a wonderful new car and he really enjoys a ride from his home, located near junction s to work located near junction t. Thus, he wants to build a new road in such a way that the distance between these two junctions won't decrease. \nYou are assigned a task to compute the number of pairs of junctions that are not connected by the road, such that if the new road between these two junctions is built the distance between s and t won't decrease.\n-----Input-----\nThe firt line of the input contains integers n, m, s and t (2 \u2264 n \u2264 1000, 1 \u2264 m \u2264 1000, 1 \u2264 s, t \u2264 n, s \u2260 t)\u00a0\u2014 the number of junctions and the number of roads in Nsk, as well as the indices of junctions where mayors home and work are located respectively. The i-th of the following m lines contains two integers u_{i} and v_{i} (1 \u2264 u_{i}, v_{i} \u2264 n, u_{i} \u2260 v_{i}), meaning that this road connects junctions u_{i} and v_{i} directly. It is guaranteed that there is a path between any two junctions and no two roads connect the same pair of junctions.\n-----Output-----\nPrint one integer\u00a0\u2014 the number of pairs of junctions not connected by a direct road, such that building a road between these two junctions won't decrease the distance between junctions s and t.\n-----Examples-----\nInput\n5 4 1 5\n1 2\n2 3\n3 4\n4 5\nOutput\n0\nInput\n5 4 3 5\n1 2\n2 3\n3 4\n4 5\nOutput\n5\nInput\n5 6 1 5\n1 2\n1 3\n1 4\n4 5\n3 5\n2 5\nOutput\n3\n\ndef",
        "answer": "def roadsAndLibraries(n, c_lib, c_road, cities):\n    if c_lib < c_road:\n        return c_lib * n\n    else:\n        return c_road * n - c_lib",
        "difficulty": "interview"
    },
    {
        "task_id": 2090,
        "prompt": "Complete the Python function given the prompt below:You have a playlist consisting of $n$ songs. The $i$-th song is characterized by two numbers $t_i$ and $b_i$ \u2014 its length and beauty respectively. The pleasure of listening to set of songs is equal to the total length of the songs in the set multiplied by the minimum beauty among them. For example, the pleasure of listening to a set of $3$ songs having lengths $[5, 7, 4]$ and beauty values $[11, 14, 6]$ is equal to $(5 + 7 + 4) \\cdot 6 = 96$.\nYou need to choose at most $k$ songs from your playlist, so the pleasure of listening to the set of these songs them is maximum possible.\n-----Input-----\nThe first line contains two integers $n$ and $k$ ($1 \\le k \\le n \\le 3 \\cdot 10^5$) \u2013 the number of songs in the playlist and the maximum number of songs you can choose, respectively.\nEach of the next $n$ lines contains two integers $t_i$ and $b_i$ ($1 \\le t_i, b_i \\le 10^6$) \u2014 the length and beauty of $i$-th song.\n-----Output-----\nPrint one integer \u2014 the maximum pleasure you can get.\n-----Examples-----\nInput\n4 3\n4 7\n15 1\n3 6\n6 8\nOutput\n78\nInput\n5 3\n12 31\n112 4\n100 100\n13 55\n55 50\nOutput\n10000\n-----Note-----\nIn the first test case we can choose songs ${1, 3, 4}$, so the total pleasure is $(4 + 3 + 6) \\cdot 6 = 78$.\nIn the second test case we can choose song $3$. The total pleasure will be equal to $100 \\cdot 100 = 10000$.\n\ndef",
        "answer": "def max_p(n, k, arr):\n    arr.sort(key=lambda x: x[1])\n    return sum([arr[i][0] for i in range(k)]) * arr[k - 1][1]",
        "difficulty": "interview"
    },
    {
        "task_id": 2091,
        "prompt": "Complete the Python function given the prompt below:This is the hard version of the problem. The difference is the constraint on the sum of lengths of strings and the number of test cases. You can make hacks only if you solve all versions of this task.\nYou are given a string $s$, consisting of lowercase English letters. Find the longest string, $t$, which satisfies the following conditions:   The length of $t$ does not exceed the length of $s$.  $t$ is a palindrome.  There exists two strings $a$ and $b$ (possibly empty), such that $t = a + b$ ( \"$+$\" represents concatenation), and $a$ is prefix of $s$ while $b$ is suffix of $s$. \n-----Input-----\nThe input consists of multiple test cases. The first line contains a single integer $t$ ($1 \\leq t \\leq 10^5$), the number of test cases. The next $t$ lines each describe a test case.\nEach test case is a non-empty string $s$, consisting of lowercase English letters.\nIt is guaranteed that the sum of lengths of strings over all test cases does not exceed $10^6$.\n-----Output-----\nFor each test case, print the longest string which satisfies the conditions described above. If there exists multiple possible solutions, print any of them.\n-----Example-----\nInput\n5\na\nabcdfdcecba\nabbaxyzyx\ncodeforces\nacbba\nOutput\na\nabcdfdcba\nxyzyx\nc\nabba\n-----Note-----\nIn the first test, the string $s = $\"a\" satisfies all conditions.\nIn the second test, the string \"abcdfdcba\" satisfies all conditions, because:  Its length is $9$, which does not exceed the length of the string $s$, which equals $11$.  It is a palindrome.  \"abcdfdcba\" $=$ \"abcdfdc\" $+$ \"ba\", and \"abcdfdc\" is a prefix of $s$ while \"ba\" is a suffix of $s$. \nIt can be proven that there does not exist a longer string which satisfies the conditions.\nIn the fourth test, the string \"c\" is correct, because \"c\" $=$ \"c\" $+$ \"\" and $a$ or $b$ can be empty. The other possible solution for this test is \"s\".\n\ndef",
        "answer": "def longest_palindrome(s):\n    if len(s) == 1:\n        return s\n    if len(s) == 2:\n        if s[0] == s[1]:\n            return s\n        else:\n            return s[0]\n    if len(s) == 3:\n        if s[0] == s[2]:\n            return s\n        else:\n            return s[0]\n    if len(s) == 4:\n        if s[0] == s[3]:\n            return s\n        else:\n            return s[0]\n    if len(s) == 5:\n        if s[0] == s[4]:\n            return s\n        else:\n            return s[0]\n    if len(s) == 6:\n        if s[0] == s[5]:\n            return s\n        else:\n            return s[0]\n    if len(s) == 7:\n        if s[0] == s[6]:\n            return s\n        else:\n            return s[0]\n    if len(s) == 8:\n        if s[0] == s[7]:\n            return s\n        else:\n            return s[0]\n    if len(s) == 9:\n        if s[0] == s[8]:\n            return s\n        else:\n            return s[0]\n    if len(s) == 10:\n        if s[0] == s[9]:\n            return s\n        else:\n            return s[0]\n    if len(s) == 11:\n        if s[0] == s[10]:\n            return s\n        else:\n            return s[0]\n    if len(s) ==",
        "difficulty": "interview"
    },
    {
        "task_id": 2092,
        "prompt": "Complete the Python function given the prompt below:You are playing a computer game, where you lead a party of $m$ soldiers. Each soldier is characterised by his agility $a_i$.\nThe level you are trying to get through can be represented as a straight line segment from point $0$ (where you and your squad is initially located) to point $n + 1$ (where the boss is located).\nThe level is filled with $k$ traps. Each trap is represented by three numbers $l_i$, $r_i$ and $d_i$. $l_i$ is the location of the trap, and $d_i$ is the danger level of the trap: whenever a soldier with agility lower than $d_i$ steps on a trap (that is, moves to the point $l_i$), he gets instantly killed. Fortunately, you can disarm traps: if you move to the point $r_i$, you disarm this trap, and it no longer poses any danger to your soldiers. Traps don't affect you, only your soldiers.\nYou have $t$ seconds to complete the level \u2014 that is, to bring some soldiers from your squad to the boss. Before the level starts, you choose which soldiers will be coming with you, and which soldiers won't be. After that, you have to bring all of the chosen soldiers to the boss. To do so, you may perform the following actions:\n  if your location is $x$, you may move to $x + 1$ or $x - 1$. This action consumes one second;  if your location is $x$ and the location of your squad is $x$, you may move to $x + 1$ or to $x - 1$ with your squad in one second. You may not perform this action if it puts some soldier in danger (i. e. the point your squad is moving into contains a non-disarmed trap with $d_i$ greater than agility of some soldier from the squad). This action consumes one second;  if your location is $x$ and there is a trap $i$ with $r_i = x$, you may disarm this trap. This action is done instantly (it consumes no time). \nNote that after each action both your coordinate and the coordinate of your squad should be integers.\nYou have to choose the maximum number of soldiers such that they all can be brought from the point $0$ to the point $n + 1$ (where the boss waits) in no more than $t$ seconds.\n-----Input-----\nThe first line contains four integers $m$, $n$, $k$ and $t$ ($1 \\le m, n, k, t \\le 2 \\cdot 10^5$, $n < t$) \u2014 the number of soldiers, the number of integer points between the squad and the boss, the number of traps and the maximum number of seconds you may spend to bring the squad to the boss, respectively.\nThe second line contains $m$ integers $a_1$, $a_2$,..., $a_m$ ($1 \\le a_i \\le 2 \\cdot 10^5$), where $a_i$ is the agility of the $i$-th soldier.\nThen $k$ lines follow, containing the descriptions of traps. Each line contains three numbers $l_i$, $r_i$ and $d_i$ ($1 \\le l_i \\le r_i \\le n$, $1 \\le d_i \\le 2 \\cdot 10^5$) \u2014 the location of the trap, the location where the trap can be disarmed, and its danger level, respectively.\n-----Output-----\nPrint one integer \u2014 the maximum number of soldiers you may choose so that you may bring them all to the boss in no more than $t$ seconds.\n-----Example-----\nInput\n5 6 4 14\n1 2 3 4 5\n1 5 2\n1 2 5\n2 3 5\n3 5 3\nOutput\n3\n-----Note-----\nIn the first example you may take soldiers with agility $3$, $4$ and $5$ with you. The course of action is as follows:\n  go to $2$ without your squad;  disarm the trap $2$;  go to $3$ without your squad;  disartm the trap $3$;  go to $0$ without your squad;  go to $7$ with your squad. \nThe whole plan can be executed in $13$ seconds.\n\ndef",
        "answer": "def solution(m, n, k, t):\n    # write your code in Python 3.6\n    pass\n",
        "difficulty": "interview"
    },
    {
        "task_id": 2093,
        "prompt": "Complete the Python function given the prompt below:One day Polycarp decided to rewatch his absolute favourite episode of well-known TV series \"Tufurama\". He was pretty surprised when he got results only for season 7 episode 3 with his search query of \"Watch Tufurama season 3 episode 7 online full hd free\". This got Polycarp confused \u2014 what if he decides to rewatch the entire series someday and won't be able to find the right episodes to watch? Polycarp now wants to count the number of times he will be forced to search for an episode using some different method.\nTV series have n seasons (numbered 1 through n), the i-th season has a_{i} episodes (numbered 1 through a_{i}). Polycarp thinks that if for some pair of integers x and y (x < y) exist both season x episode y and season y episode x then one of these search queries will include the wrong results. Help Polycarp to calculate the number of such pairs!\n-----Input-----\nThe first line contains one integer n (1  \u2264 n  \u2264  2\u00b710^5) \u2014 the number of seasons.\nThe second line contains n integers separated by space a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^9) \u2014 number of episodes in each season.\n-----Output-----\nPrint one integer \u2014 the number of pairs x and y (x < y) such that there exist both season x episode y and season y episode x.\n-----Examples-----\nInput\n5\n1 2 3 4 5\nOutput\n0\nInput\n3\n8 12 7\nOutput\n3\nInput\n3\n3 2 1\nOutput\n2\n-----Note-----\nPossible pairs in the second example:  x = 1, y = 2 (season 1 episode 2 [Image] season 2 episode 1);  x = 2, y = 3 (season 2 episode 3 [Image] season 3 episode 2);  x = 1, y = 3 (season 1 episode 3 [Image] season 3 episode 1). \nIn the third example:  x = 1, y = 2 (season 1 episode 2 [Image] season 2 episode 1);  x = 1, y = 3 (season 1 episode 3 [Image] season 3 episode 1).\n\ndef",
        "answer": "def solve(n, a):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] < a[j]:\n                count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 2094,
        "prompt": "Complete the Python function given the prompt below:Your program fails again. This time it gets \"Wrong answer on test 233\".\nThis is the harder version of the problem. In this version, $1 \\le n \\le 2\\cdot10^5$. You can hack this problem if you locked it. But you can hack the previous problem only if you locked both problems.\nThe problem is to finish $n$ one-choice-questions. Each of the questions contains $k$ options, and only one of them is correct. The answer to the $i$-th question is $h_{i}$, and if your answer of the question $i$ is $h_{i}$, you earn $1$ point, otherwise, you earn $0$ points for this question. The values $h_1, h_2, \\dots, h_n$ are known to you in this problem.\nHowever, you have a mistake in your program. It moves the answer clockwise! Consider all the $n$ answers are written in a circle. Due to the mistake in your program, they are shifted by one cyclically.\nFormally, the mistake moves the answer for the question $i$ to the question $i \\bmod n + 1$. So it moves the answer for the question $1$ to question $2$, the answer for the question $2$ to the question $3$,..., the answer for the question $n$ to the question $1$.\nWe call all the $n$ answers together an answer suit. There are $k^n$ possible answer suits in total.\nYou're wondering, how many answer suits satisfy the following condition: after moving clockwise by $1$, the total number of points of the new answer suit is strictly larger than the number of points of the old one. You need to find the answer modulo $998\\,244\\,353$.\nFor example, if $n = 5$, and your answer suit is $a=[1,2,3,4,5]$, it will submitted as $a'=[5,1,2,3,4]$ because of a mistake. If the correct answer suit is $h=[5,2,2,3,4]$, the answer suit $a$ earns $1$ point and the answer suite $a'$ earns $4$ points. Since $4 > 1$, the answer suit $a=[1,2,3,4,5]$ should be counted.\n-----Input-----\nThe first line contains two integers $n$, $k$ ($1 \\le n \\le 2\\cdot10^5$, $1 \\le k \\le 10^9$)\u00a0\u2014 the number of questions and the number of possible answers to each question.\nThe following line contains $n$ integers $h_1, h_2, \\dots, h_n$, ($1 \\le h_{i} \\le k)$\u00a0\u2014 answers to the questions.\n-----Output-----\nOutput one integer: the number of answers suits satisfying the given condition, modulo $998\\,244\\,353$.\n-----Examples-----\nInput\n3 3\n1 3 1\nOutput\n9\nInput\n5 5\n1 1 4 2 2\nOutput\n1000\nInput\n6 2\n1 1 2 2 1 1\nOutput\n16\n-----Note-----\nFor the first example, valid answer suits are $[2,1,1], [2,1,2], [2,1,3], [3,1,1], [3,1,2], [3,1,3], [3,2,1], [3,2,2], [3,2,3]$.\n\ndef",
        "answer": "def f(n, k, h):\n    h = h[::-1]\n    h = h[:n]\n    h = h[::-1]\n    h = h[:n]\n    h = h[::-1]\n    h = h[:n]\n    h = h[::-1]\n    h = h[:n]\n    h = h[::-1]\n    h = h[:n]\n    h = h[::-1]\n    h = h[:n]\n    h = h[::-1]\n    h = h[:n]\n    h = h[::-1]\n    h = h[:n]\n    h = h[::-1]\n    h = h[:n]\n    h = h[::-1]\n    h = h[:n]\n    h = h[::-1]\n    h = h[:n]\n    h = h[::-1]\n    h = h[:n]\n    h = h[::-1]\n    h = h[:n]\n    h = h[::-1]\n    h = h[:n]\n    h = h[::-1]\n    h = h[:n]\n    h = h[::-1]\n    h = h[:n]\n    h = h[::-1]\n    h = h[:n]\n    h = h[::-1]\n    h = h[:n]\n    h = h[::-1]\n    h = h[:n]\n    h = h[::-1]\n    h = h[:n]\n    h = h[::-1]\n    ",
        "difficulty": "interview"
    },
    {
        "task_id": 2095,
        "prompt": "Complete the Python function given the prompt below:Little Susie, thanks to her older brother, likes to play with cars. Today she decided to set up a tournament between them. The process of a tournament is described in the next paragraph.\nThere are n toy cars. Each pair collides. The result of a collision can be one of the following: no car turned over, one car turned over, both cars turned over. A car is good if it turned over in no collision. The results of the collisions are determined by an n \u00d7 n matrix \u0410: there is a number on the intersection of the \u0456-th row and j-th column that describes the result of the collision of the \u0456-th and the j-th car:    - 1: if this pair of cars never collided.  - 1 occurs only on the main diagonal of the matrix.  0: if no car turned over during the collision.  1: if only the i-th car turned over during the collision.  2: if only the j-th car turned over during the collision.  3: if both cars turned over during the collision. \nSusie wants to find all the good cars. She quickly determined which cars are good. Can you cope with the task?\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 100) \u2014 the number of cars.\nEach of the next n lines contains n space-separated integers that determine matrix A. \nIt is guaranteed that on the main diagonal there are  - 1, and  - 1 doesn't appear anywhere else in the matrix.\nIt is guaranteed that the input is correct, that is, if A_{ij} = 1, then A_{ji} = 2, if A_{ij} = 3, then A_{ji} = 3, and if A_{ij} = 0, then A_{ji} = 0.\n-----Output-----\nPrint the number of good cars and in the next line print their space-separated indices in the increasing order.\n-----Examples-----\nInput\n3\n-1 0 0\n0 -1 1\n0 2 -1\nOutput\n2\n1 3 \nInput\n4\n-1 3 3 3\n3 -1 3 3\n3 3 -1 3\n3 3 3 -1\nOutput\n0\n\ndef",
        "answer": "def good_cars(matrix):\n    good_cars = []\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == 1:\n                good_cars.append([i, j])\n    return good_cars",
        "difficulty": "interview"
    },
    {
        "task_id": 2096,
        "prompt": "Complete the Python function given the prompt below:Valera has 2\u00b7n cubes, each cube contains an integer from 10 to 99. He arbitrarily chooses n cubes and puts them in the first heap. The remaining cubes form the second heap. \nValera decided to play with cubes. During the game he takes a cube from the first heap and writes down the number it has. Then he takes a cube from the second heap and write out its two digits near two digits he had written (to the right of them). In the end he obtained a single fourdigit integer \u2014 the first two digits of it is written on the cube from the first heap, and the second two digits of it is written on the second cube from the second heap.\nValera knows arithmetic very well. So, he can easily count the number of distinct fourdigit numbers he can get in the game. The other question is: how to split cubes into two heaps so that this number (the number of distinct fourdigit integers Valera can get) will be as large as possible?\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 100). The second line contains 2\u00b7n space-separated integers a_{i} (10 \u2264 a_{i} \u2264 99), denoting the numbers on the cubes.\n-----Output-----\nIn the first line print a single number \u2014 the maximum possible number of distinct four-digit numbers Valera can obtain. In the second line print 2\u00b7n numbers b_{i} (1 \u2264 b_{i} \u2264 2). The numbers mean: the i-th cube belongs to the b_{i}-th heap in your division.\nIf there are multiple optimal ways to split the cubes into the heaps, print any of them.\n-----Examples-----\nInput\n1\n10 99\nOutput\n1\n2 1 \nInput\n2\n13 24 13 45\nOutput\n4\n1 2 2 1 \n-----Note-----\nIn the first test case Valera can put the first cube in the first heap, and second cube \u2014 in second heap. In this case he obtain number 1099. If he put the second cube in the first heap, and the first cube in the second heap, then he can obtain number 9910. In both cases the maximum number of distinct integers is equal to one.\nIn the second test case Valera can obtain numbers 1313, 1345, 2413, 2445. Note, that if he put the first and the third cubes in the first heap, he can obtain only two numbers 1324 and 1345.\n\ndef",
        "answer": "def solve(n, a):\n    a.sort()\n    a.reverse()\n    b = []\n    for i in range(n):\n        b.append(a[i])\n        b.append(a[i])\n    b.sort()\n    b.reverse()\n    return b",
        "difficulty": "interview"
    },
    {
        "task_id": 2097,
        "prompt": "Complete the Python function given the prompt below:Guy-Manuel and Thomas have an array $a$ of $n$ integers [$a_1, a_2, \\dots, a_n$]. In one step they can add $1$ to any element of the array. Formally, in one step they can choose any integer index $i$ ($1 \\le i \\le n$) and do $a_i := a_i + 1$.\nIf either the sum or the product of all elements in the array is equal to zero, Guy-Manuel and Thomas do not mind to do this operation one more time.\nWhat is the minimum number of steps they need to do to make both the sum and the product of all elements in the array different from zero? Formally, find the minimum number of steps to make $a_1 + a_2 +$ $\\dots$ $+ a_n \\ne 0$ and $a_1 \\cdot a_2 \\cdot$ $\\dots$ $\\cdot a_n \\ne 0$.\n-----Input-----\nEach test contains multiple test cases. \nThe first line contains the number of test cases $t$ ($1 \\le t \\le 10^3$). The description of the test cases follows.\nThe first line of each test case contains an integer $n$ ($1 \\le n \\le 100$)\u00a0\u2014 the size of the array.\nThe second line of each test case contains $n$ integers $a_1, a_2, \\dots, a_n$ ($-100 \\le a_i \\le 100$)\u00a0\u2014 elements of the array.\n-----Output-----\nFor each test case, output the minimum number of steps required to make both sum and product of all elements in the array different from zero.\n-----Example-----\nInput\n4\n3\n2 -1 -1\n4\n-1 0 0 1\n2\n-1 2\n3\n0 -2 1\nOutput\n1\n2\n0\n2\n-----Note-----\nIn the first test case, the sum is $0$. If we add $1$ to the first element, the array will be $[3,-1,-1]$, the sum will be equal to $1$ and the product will be equal to $3$.\nIn the second test case, both product and sum are $0$. If we add $1$ to the second and the third element, the array will be $[-1,1,1,1]$, the sum will be equal to $2$ and the product will be equal to $-1$. It can be shown that fewer steps can't be enough.\nIn the third test case, both sum and product are non-zero, we don't need to do anything.\nIn the fourth test case, after adding $1$ twice to the first element the array will be $[2,-2,1]$, the sum will be $1$ and the product will be $-4$.\n\ndef",
        "answer": "def min_steps(a):\n    s = sum(a)\n    p = 1\n    for i in a:\n        p *= i\n    if s == 0:\n        return 0\n    if p == 0:\n        return 1\n    return min(s, p)",
        "difficulty": "interview"
    },
    {
        "task_id": 2098,
        "prompt": "Complete the Python function given the prompt below:Monocarp has drawn a tree (an undirected connected acyclic graph) and then has given each vertex an index. All indices are distinct numbers from $1$ to $n$. For every edge $e$ of this tree, Monocarp has written two numbers: the maximum indices of the vertices of the two components formed if the edge $e$ (and only this edge) is erased from the tree.\nMonocarp has given you a list of $n - 1$ pairs of numbers. He wants you to provide an example of a tree that will produce the said list if this tree exists. If such tree does not exist, say so.\n-----Input-----\nThe first line contains one integer $n$ ($2 \\le n \\le 1\\,000$)\u00a0\u2014 the number of vertices in the tree.\nEach of the next $n-1$ lines contains two integers $a_i$ and $b_i$ each ($1 \\le a_i < b_i \\le n$)\u00a0\u2014 the maximal indices of vertices in the components formed if the $i$-th edge is removed.\n-----Output-----\nIf there is no such tree that can produce the given list of pairs, print \"NO\" (without quotes).\nOtherwise print \"YES\" (without quotes) in the first line and the edges of the tree in the next $n - 1$ lines. Each of the last $n - 1$ lines should contain two integers $x_i$ and $y_i$ ($1 \\le x_i, y_i \\le n$)\u00a0\u2014 vertices connected by an edge.\nNote: The numeration of edges doesn't matter for this task. Your solution will be considered correct if your tree produces the same pairs as given in the input file (possibly reordered). That means that you can print the edges of the tree you reconstructed in any order.\n-----Examples-----\nInput\n4\n3 4\n1 4\n3 4\nOutput\nYES\n1 3\n3 2\n2 4\nInput\n3\n1 3\n1 3\nOutput\nNO\nInput\n3\n1 2\n2 3\nOutput\nNO\n-----Note-----\nPossible tree from the first example. Dotted lines show edges you need to remove to get appropriate pairs.  [Image]\n\ndef",
        "answer": "def check(a, b):\n    if a == b:\n        return True\n    else:\n        return False",
        "difficulty": "interview"
    },
    {
        "task_id": 2099,
        "prompt": "Complete the Python function given the prompt below:Polycarpus got an internship in one well-known social network. His test task is to count the number of unique users who have visited a social network during the day. Polycarpus was provided with information on all user requests for this time period. For each query, we know its time... and nothing else, because Polycarpus has already accidentally removed the user IDs corresponding to the requests from the database. Thus, it is now impossible to determine whether any two requests are made by the same person or by different people.\nBut wait, something is still known, because that day a record was achieved \u2014 M simultaneous users online! In addition, Polycarpus believes that if a user made a request at second s, then he was online for T seconds after that, that is, at seconds s, s + 1, s + 2,..., s + T - 1. So, the user's time online can be calculated as the union of time intervals of the form [s, s + T - 1] over all times s of requests from him.\nGuided by these thoughts, Polycarpus wants to assign a user ID to each request so that:  the number of different users online did not exceed M at any moment,  at some second the number of distinct users online reached value M,  the total number of users (the number of distinct identifiers) was as much as possible. \nHelp Polycarpus cope with the test.\n-----Input-----\nThe first line contains three integers n, M and T (1 \u2264 n, M \u2264 20 000, 1 \u2264 T \u2264 86400) \u2014 the number of queries, the record number of online users and the time when the user was online after a query was sent. Next n lines contain the times of the queries in the format \"hh:mm:ss\", where hh are hours, mm are minutes, ss are seconds. The times of the queries follow in the non-decreasing order, some of them can coincide. It is guaranteed that all the times and even all the segments of type [s, s + T - 1] are within one 24-hour range (from 00:00:00 to 23:59:59). \n-----Output-----\nIn the first line print number R \u2014 the largest possible number of distinct users. The following n lines should contain the user IDs for requests in the same order in which the requests are given in the input. User IDs must be integers from 1 to R. The requests of the same user must correspond to the same identifiers, the requests of distinct users must correspond to distinct identifiers. If there are multiple solutions, print any of them. If there is no solution, print \"No solution\" (without the quotes).\n-----Examples-----\nInput\n4 2 10\n17:05:53\n17:05:58\n17:06:01\n22:39:47\nOutput\n3\n1\n2\n2\n3\nInput\n1 2 86400\n00:00:00\nOutput\nNo solution\n-----Note-----\nConsider the first sample. The user who sent the first request was online from 17:05:53 to 17:06:02, the user who sent the second request was online from 17:05:58 to 17:06:07, the user who sent the third request, was online from 17:06:01 to 17:06:10. Thus, these IDs cannot belong to three distinct users, because in that case all these users would be online, for example, at 17:06:01. That is impossible, because M = 2. That means that some two of these queries belonged to the same user. One of the correct variants is given in the answer to the sample. For it user 1 was online from 17:05:53 to 17:06:02, user 2 \u2014 from 17:05:58 to 17:06:10 (he sent the second and third queries), user 3 \u2014 from 22:39:47 to 22:39:56.\nIn the second sample there is only one query. So, only one user visited the network within the 24-hour period and there couldn't be two users online on the network simultaneously. (The time the user spent online is the union of time intervals for requests, so users who didn't send requests could not be online in the network.)\n\ndef",
        "answer": "def solve(n, m, t):\n    # Write your code here\n    res = 0\n    for i in range(n):\n        s, e = map(int, input().split(':'))\n        res = max(res, e - s + 1)\n    return res",
        "difficulty": "interview"
    }
]