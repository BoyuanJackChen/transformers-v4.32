[
    {
        "task_id": 1400,
        "prompt": "Complete the Python function given the prompt below:Today Adilbek is taking his probability theory test. Unfortunately, when Adilbek arrived at the university, there had already been a long queue of students wanting to take the same test. Adilbek has estimated that he will be able to start the test only $T$ seconds after coming. \nFortunately, Adilbek can spend time without revising any boring theorems or formulas. He has an app on this smartphone which contains $n$ Japanese crosswords to solve. Adilbek has decided to solve them all one by one in the order they are listed in the app, without skipping any crossword. For each crossword, a number $t_i$ is given that represents the time it takes an average crossword expert to solve this crossword (the time is given in seconds).\nAdilbek is a true crossword expert, but, unfortunately, he is sometimes unlucky in choosing the way to solve the crossword. So, it takes him either $t_i$ seconds or $t_i + 1$ seconds to solve the $i$-th crossword, equiprobably (with probability $\\frac{1}{2}$ he solves the crossword in exactly $t_i$ seconds, and with probability $\\frac{1}{2}$ he has to spend an additional second to finish the crossword). All these events are independent.\nAfter $T$ seconds pass (or after solving the last crossword, if he manages to do it in less than $T$ seconds), Adilbek closes the app (if he finishes some crossword at the same moment, that crossword is considered solved; otherwise Adilbek does not finish solving the current crossword at all). He thinks it would be an interesting probability theory problem to calculate $E$ \u2014 the expected number of crosswords he will be able to solve completely. Can you calculate it? \nRecall that the expected value of a discrete random variable is the probability-weighted average of all possible values \u2014 in this problem it means that the expected value of the number of solved crosswords can be calculated as $E = \\sum \\limits_{i = 0}^{n} i p_i$, where $p_i$ is the probability that Adilbek will solve exactly $i$ crosswords. \nWe can represent $E$ as rational fraction $\\frac{P}{Q}$ with $Q > 0$. To give the answer, you should print $P \\cdot Q^{-1} \\bmod (10^9 + 7)$.\n-----Input-----\nThe first line contains two integers $n$ and $T$ ($1 \\le n \\le 2 \\cdot 10^5$, $1 \\le T \\le 2 \\cdot 10^{14}$) \u2014 the number of crosswords and the time Adilbek has to spend, respectively.\nThe second line contains $n$ integers $t_1, t_2, \\dots, t_n$ ($1 \\le t_i \\le 10^9$), where $t_i$ is the time it takes a crossword expert to solve the $i$-th crossword.\nNote that Adilbek solves the crosswords in the order they are given in the input without skipping any of them.\n-----Output-----\nPrint one integer \u2014 the expected value of the number of crosswords Adilbek solves in $T$ seconds, expressed in the form of $P \\cdot Q^{-1} \\bmod (10^9 + 7)$.\n-----Examples-----\nInput\n3 5\n2 2 2\nOutput\n750000007\nInput\n3 5\n2 1 2\nOutput\n125000003\n-----Note-----\nThe answer for the first sample is equal to $\\frac{14}{8}$.\nThe answer for the second sample is equal to $\\frac{17}{8}$.\n\ndef",
        "answer": "def solve(n, t):\n    return (n * sum(t) + sum(t)) * len(t) % 1000000007",
        "difficulty": "interview"
    },
    {
        "task_id": 1401,
        "prompt": "Complete the Python function given the prompt below:Alyona decided to go on a diet and went to the forest to get some apples. There she unexpectedly found a magic rooted tree with root in the vertex 1, every vertex and every edge of which has a number written on.\nThe girl noticed that some of the tree's vertices are sad, so she decided to play with them. Let's call vertex v sad if there is a vertex u in subtree of vertex v such that dist(v, u) > a_{u}, where a_{u} is the number written on vertex u, dist(v, u) is the sum of the numbers written on the edges on the path from v to u.\nLeaves of a tree are vertices connected to a single vertex by a single edge, but the root of a tree is a leaf if and only if the tree consists of a single vertex\u00a0\u2014 root.\nThus Alyona decided to remove some of tree leaves until there will be no any sad vertex left in the tree. What is the minimum number of leaves Alyona needs to remove?\n-----Input-----\nIn the first line of the input integer n (1 \u2264 n \u2264 10^5) is given\u00a0\u2014 the number of vertices in the tree.\nIn the second line the sequence of n integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^9) is given, where a_{i} is the number written on vertex i.\nThe next n - 1 lines describe tree edges: i^{th} of them consists of two integers p_{i} and c_{i} (1 \u2264 p_{i} \u2264 n,  - 10^9 \u2264 c_{i} \u2264 10^9), meaning that there is an edge connecting vertices i + 1 and p_{i} with number c_{i} written on it.\n-----Output-----\nPrint the only integer\u00a0\u2014 the minimum number of leaves Alyona needs to remove such that there will be no any sad vertex left in the tree.\n-----Example-----\nInput\n9\n88 22 83 14 95 91 98 53 11\n3 24\n7 -8\n1 67\n1 64\n9 65\n5 12\n6 -80\n3 8\nOutput\n5\n-----Note-----\nThe following image represents possible process of removing leaves from the tree:  [Image]\n\ndef",
        "answer": "def dfs(graph, start, visited=None):\n    if visited is None:\n        visited = set()\n    visited.add(start)\n    for next in graph[start] - visited:\n        dfs(graph, next, visited)\n    return visited",
        "difficulty": "interview"
    },
    {
        "task_id": 1402,
        "prompt": "Complete the Python function given the prompt below:Yaroslav thinks that two strings s and w, consisting of digits and having length n are non-comparable if there are two numbers, i and j (1 \u2264 i, j \u2264 n), such that s_{i} > w_{i} and s_{j} < w_{j}. Here sign s_{i} represents the i-th digit of string s, similarly, w_{j} represents the j-th digit of string w.\nA string's template is a string that consists of digits and question marks (\"?\").\nYaroslav has two string templates, each of them has length n. Yaroslav wants to count the number of ways to replace all question marks by some integers in both templates, so as to make the resulting strings incomparable. Note that the obtained strings can contain leading zeroes and that distinct question marks can be replaced by distinct or the same integers.\nHelp Yaroslav, calculate the remainder after dividing the described number of ways by 1000000007 (10^9 + 7).\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 10^5) \u2014 the length of both templates. The second line contains the first template \u2014 a string that consists of digits and characters \"?\". The string's length equals n. The third line contains the second template in the same format.\n-----Output-----\nIn a single line print the remainder after dividing the answer to the problem by number 1000000007 (10^9 + 7).\n-----Examples-----\nInput\n2\n90\n09\nOutput\n1\nInput\n2\n11\n55\nOutput\n0\nInput\n5\n?????\n?????\nOutput\n993531194\n-----Note-----\nThe first test contains no question marks and both strings are incomparable, so the answer is 1.\nThe second test has no question marks, but the given strings are comparable, so the answer is 0.\n\ndef",
        "answer": "def incomparable(s, w):\n    n = len(s)\n    m = len(w)\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if s[i] > w[j]:\n                count += 1\n            elif s[i] < w[j]:\n                count -= 1\n    return count % 1000000007",
        "difficulty": "interview"
    },
    {
        "task_id": 1403,
        "prompt": "Complete the Python function given the prompt below:You have a Petri dish with bacteria and you are preparing to dive into the harsh micro-world. But, unfortunately, you don't have any microscope nearby, so you can't watch them.\nYou know that you have $n$ bacteria in the Petri dish and size of the $i$-th bacteria is $a_i$. Also you know intergalactic positive integer constant $K$.\nThe $i$-th bacteria can swallow the $j$-th bacteria if and only if $a_i > a_j$ and $a_i \\le a_j + K$. The $j$-th bacteria disappear, but the $i$-th bacteria doesn't change its size. The bacteria can perform multiple swallows. On each swallow operation any bacteria $i$ can swallow any bacteria $j$ if $a_i > a_j$ and $a_i \\le a_j + K$. The swallow operations go one after another.\nFor example, the sequence of bacteria sizes $a=[101, 53, 42, 102, 101, 55, 54]$ and $K=1$. The one of possible sequences of swallows is: $[101, 53, 42, 102, \\underline{101}, 55, 54]$ $\\to$ $[101, \\underline{53}, 42, 102, 55, 54]$ $\\to$ $[\\underline{101}, 42, 102, 55, 54]$ $\\to$ $[42, 102, 55, \\underline{54}]$ $\\to$ $[42, 102, 55]$. In total there are $3$ bacteria remained in the Petri dish.\nSince you don't have a microscope, you can only guess, what the minimal possible number of bacteria can remain in your Petri dish when you finally will find any microscope.\n-----Input-----\nThe first line contains two space separated positive integers $n$ and $K$ ($1 \\le n \\le 2 \\cdot 10^5$, $1 \\le K \\le 10^6$) \u2014 number of bacteria and intergalactic constant $K$.\nThe second line contains $n$ space separated integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^6$) \u2014 sizes of bacteria you have.\n-----Output-----\nPrint the only integer \u2014 minimal possible number of bacteria can remain.\n-----Examples-----\nInput\n7 1\n101 53 42 102 101 55 54\nOutput\n3\nInput\n6 5\n20 15 10 15 20 25\nOutput\n1\nInput\n7 1000000\n1 1 1 1 1 1 1\nOutput\n7\n-----Note-----\nThe first example is clarified in the problem statement.\nIn the second example an optimal possible sequence of swallows is: $[20, 15, 10, 15, \\underline{20}, 25]$ $\\to$ $[20, 15, 10, \\underline{15}, 25]$ $\\to$ $[20, 15, \\underline{10}, 25]$ $\\to$ $[20, \\underline{15}, 25]$ $\\to$ $[\\underline{20}, 25]$ $\\to$ $[25]$.\nIn the third example no bacteria can swallow any other bacteria.\n\ndef",
        "answer": "def Bacteria(n,k,a):\n    a.sort()\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if a[i]>a[j]+k:\n                count+=1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 1404,
        "prompt": "Complete the Python function given the prompt below:Ivan unexpectedly saw a present from one of his previous birthdays. It is array of $n$ numbers from $1$ to $200$. Array is old and some numbers are hard to read. Ivan remembers that for all elements at least one of its neighbours ls not less than it, more formally:\n$a_{1} \\le a_{2}$,\n$a_{n} \\le a_{n-1}$ and\n$a_{i} \\le max(a_{i-1}, \\,\\, a_{i+1})$ for all $i$ from $2$ to $n-1$.\nIvan does not remember the array and asks to find the number of ways to restore it. Restored elements also should be integers from $1$ to $200$. Since the number of ways can be big, print it modulo $998244353$.\n-----Input-----\nFirst line of input contains one integer $n$ ($2 \\le n \\le 10^{5}$)\u00a0\u2014 size of the array.\nSecond line of input contains $n$ integers $a_{i}$\u00a0\u2014 elements of array. Either $a_{i} = -1$ or $1 \\le a_{i} \\le 200$. $a_{i} = -1$ means that $i$-th element can't be read.\n-----Output-----\nPrint number of ways to restore the array modulo $998244353$.\n-----Examples-----\nInput\n3\n1 -1 2\nOutput\n1\nInput\n2\n-1 -1\nOutput\n200\n-----Note-----\nIn the first example, only possible value of $a_{2}$ is $2$.\nIn the second example, $a_{1} = a_{2}$ so there are $200$ different values because all restored elements should be integers between $1$ and $200$.\n\ndef",
        "answer": "def count_ways(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    return count_ways(n-1) + count_ways(n-2) + count_ways(n-3)",
        "difficulty": "interview"
    },
    {
        "task_id": 1405,
        "prompt": "Complete the Python function given the prompt below:Yash has recently learnt about the Fibonacci sequence and is very excited about it. He calls a sequence Fibonacci-ish if   the sequence consists of at least two elements  f_0 and f_1 are arbitrary  f_{n} + 2 = f_{n} + 1 + f_{n} for all n \u2265 0. \nYou are given some sequence of integers a_1, a_2,..., a_{n}. Your task is rearrange elements of this sequence in such a way that its longest possible prefix is Fibonacci-ish sequence.\n-----Input-----\nThe first line of the input contains a single integer n (2 \u2264 n \u2264 1000)\u00a0\u2014 the length of the sequence a_{i}.\nThe second line contains n integers a_1, a_2,..., a_{n} (|a_{i}| \u2264 10^9).\n-----Output-----\nPrint the length of the longest possible Fibonacci-ish prefix of the given sequence after rearrangement.\n-----Examples-----\nInput\n3\n1 2 -1\nOutput\n3\nInput\n5\n28 35 7 14 21\nOutput\n4\n-----Note-----\nIn the first sample, if we rearrange elements of the sequence as  - 1, 2, 1, the whole sequence a_{i} would be Fibonacci-ish.\nIn the second sample, the optimal way to rearrange elements is $7$, $14$, $21$, $35$, 28.\n\ndef",
        "answer": "def fibonacci_ish(arr):\n    fib = [0, 1]\n    for i in range(2, len(arr) + 1):\n        fib.append(fib[i - 1] + fib[i - 2])\n    fib.sort()\n    fib.reverse()\n    for i in range(len(arr)):\n        if arr[i]!= fib[i]:\n            return i\n    return len(arr)",
        "difficulty": "interview"
    },
    {
        "task_id": 1406,
        "prompt": "Complete the Python function given the prompt below:Recently Pashmak has been employed in a transportation company. The company has k buses and has a contract with a school which has n students. The school planned to take the students to d different places for d days (each day in one place). Each day the company provides all the buses for the trip. Pashmak has to arrange the students in the buses. He wants to arrange the students in a way that no two students become close friends. In his ridiculous idea, two students will become close friends if and only if they are in the same buses for all d days.\nPlease help Pashmak with his weird idea. Assume that each bus has an unlimited capacity.\n-----Input-----\nThe first line of input contains three space-separated integers n, k, d (1 \u2264 n, d \u2264 1000;\u00a01 \u2264 k \u2264 10^9).\n-----Output-----\nIf there is no valid arrangement just print -1. Otherwise print d lines, in each of them print n integers. The j-th integer of the i-th line shows which bus the j-th student has to take on the i-th day. You can assume that the buses are numbered from 1 to k.\n-----Examples-----\nInput\n3 2 2\nOutput\n1 1 2 \n1 2 1 \nInput\n3 2 1\nOutput\n-1\n-----Note-----\nNote that two students become close friends only if they share a bus each day. But the bus they share can differ from day to day.\n\ndef",
        "answer": "def closeFriends(n, k, d):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36",
        "difficulty": "interview"
    },
    {
        "task_id": 1407,
        "prompt": "Complete the Python function given the prompt below:You've got an n \u00d7 m matrix. The matrix consists of integers. In one move, you can apply a single transformation to the matrix: choose an arbitrary element of the matrix and increase it by 1. Each element can be increased an arbitrary number of times.\nYou are really curious about prime numbers. Let us remind you that a prime number is a positive integer that has exactly two distinct positive integer divisors: itself and number one. For example, numbers 2, 3, 5 are prime and numbers 1, 4, 6 are not. \nA matrix is prime if at least one of the two following conditions fulfills:  the matrix has a row with prime numbers only;  the matrix has a column with prime numbers only; \nYour task is to count the minimum number of moves needed to get a prime matrix from the one you've got.\n-----Input-----\nThe first line contains two integers n, m (1 \u2264 n, m \u2264 500) \u2014 the number of rows and columns in the matrix, correspondingly.\nEach of the following n lines contains m integers \u2014 the initial matrix. All matrix elements are positive integers. All numbers in the initial matrix do not exceed 10^5.\nThe numbers in the lines are separated by single spaces.\n-----Output-----\nPrint a single integer \u2014 the minimum number of moves needed to get a prime matrix from the one you've got. If you've got a prime matrix, print 0.\n-----Examples-----\nInput\n3 3\n1 2 3\n5 6 1\n4 4 1\nOutput\n1\nInput\n2 3\n4 8 8\n9 2 9\nOutput\n3\nInput\n2 2\n1 3\n4 2\nOutput\n0\n-----Note-----\nIn the first sample you need to increase number 1 in cell (1, 1). Thus, the first row will consist of prime numbers: 2, 2, 3.\nIn the second sample you need to increase number 8 in cell (1, 2) three times. Thus, the second column will consist of prime numbers: 11, 2.\nIn the third sample you don't have to do anything as the second column already consists of prime numbers: 3, 2.\n\ndef",
        "answer": "def isPrime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True",
        "difficulty": "interview"
    },
    {
        "task_id": 1408,
        "prompt": "Complete the Python function given the prompt below:Shaass has n books. He wants to make a bookshelf for all his books. He wants the bookshelf's dimensions to be as small as possible. The thickness of the i-th book is t_{i} and its pages' width is equal to w_{i}. The thickness of each book is either 1 or 2. All books have the same page heights. $1$ \nShaass puts the books on the bookshelf in the following way. First he selects some of the books and put them vertically. Then he puts the rest of the books horizontally above the vertical books. The sum of the widths of the horizontal books must be no more than the total thickness of the vertical books. A sample arrangement of the books is depicted in the figure. [Image] \nHelp Shaass to find the minimum total thickness of the vertical books that we can achieve.\n-----Input-----\nThe first line of the input contains an integer n, (1 \u2264 n \u2264 100). Each of the next n lines contains two integers t_{i} and w_{i} denoting the thickness and width of the i-th book correspondingly, (1 \u2264 t_{i} \u2264 2, 1 \u2264 w_{i} \u2264 100).\n-----Output-----\nOn the only line of the output print the minimum total thickness of the vertical books that we can achieve.\n-----Examples-----\nInput\n5\n1 12\n1 3\n2 15\n2 5\n2 1\nOutput\n5\nInput\n3\n1 10\n2 1\n2 4\nOutput\n3\n\ndef",
        "answer": "def bookshelf(n,t,w):\n    t.sort()\n    w.sort()\n    t_sum=0\n    w_sum=0\n    for i in range(n):\n        if t[i]==1:\n            t_sum+=w[i]\n        else:\n            t_sum+=w[i]\n            w_sum+=t_sum\n    return w_sum\nn=int(input())\nt=[]\nw=[]\nfor i in range(n):\n    a,b=map(int,input().split())\n    t.append(a)\n    w.append(b)\nprint(bookshelf(n,t,w))\n",
        "difficulty": "interview"
    },
    {
        "task_id": 1409,
        "prompt": "Complete the Python function given the prompt below:The Saratov State University Olympiad Programmers Training Center (SSU OPTC) has n students. For each student you know the number of times he/she has participated in the ACM ICPC world programming championship. According to the ACM ICPC rules, each person can participate in the world championship at most 5 times.\nThe head of the SSU OPTC is recently gathering teams to participate in the world championship. Each team must consist of exactly three people, at that, any person cannot be a member of two or more teams. What maximum number of teams can the head make if he wants each team to participate in the world championship with the same members at least k times?\n-----Input-----\nThe first line contains two integers, n and k (1 \u2264 n \u2264 2000;\u00a01 \u2264 k \u2264 5). The next line contains n integers: y_1, y_2,..., y_{n} (0 \u2264 y_{i} \u2264 5), where y_{i} shows the number of times the i-th person participated in the ACM ICPC world championship.\n-----Output-----\nPrint a single number \u2014 the answer to the problem.\n-----Examples-----\nInput\n5 2\n0 4 5 1 0\nOutput\n1\nInput\n6 4\n0 1 2 3 4 5\nOutput\n0\nInput\n6 5\n0 0 0 0 0 0\nOutput\n2\n-----Note-----\nIn the first sample only one team could be made: the first, the fourth and the fifth participants.\nIn the second sample no teams could be created.\nIn the third sample two teams could be created. Any partition into two teams fits.\n\ndef",
        "answer": "def teams(n, k):\n    return int(n / (k + 1))",
        "difficulty": "interview"
    },
    {
        "task_id": 1410,
        "prompt": "Complete the Python function given the prompt below:You are given a tree consisting of $n$ vertices. A tree is an undirected connected acyclic graph. [Image] Example of a tree. \nYou have to paint each vertex into one of three colors. For each vertex, you know the cost of painting it in every color.\nYou have to paint the vertices so that any path consisting of exactly three distinct vertices does not contain any vertices with equal colors. In other words, let's consider all triples $(x, y, z)$ such that $x \\neq y, y \\neq z, x \\neq z$, $x$ is connected by an edge with $y$, and $y$ is connected by an edge with $z$. The colours of $x$, $y$ and $z$ should be pairwise distinct. Let's call a painting which meets this condition good.\nYou have to calculate the minimum cost of a good painting and find one of the optimal paintings. If there is no good painting, report about it.\n-----Input-----\nThe first line contains one integer $n$ $(3 \\le n \\le 100\\,000)$ \u2014 the number of vertices.\nThe second line contains a sequence of integers $c_{1, 1}, c_{1, 2}, \\dots, c_{1, n}$ $(1 \\le c_{1, i} \\le 10^{9})$, where $c_{1, i}$ is the cost of painting the $i$-th vertex into the first color.\nThe third line contains a sequence of integers $c_{2, 1}, c_{2, 2}, \\dots, c_{2, n}$ $(1 \\le c_{2, i} \\le 10^{9})$, where $c_{2, i}$ is the cost of painting the $i$-th vertex into the second color.\nThe fourth line contains a sequence of integers $c_{3, 1}, c_{3, 2}, \\dots, c_{3, n}$ $(1 \\le c_{3, i} \\le 10^{9})$, where $c_{3, i}$ is the cost of painting the $i$-th vertex into the third color.\nThen $(n - 1)$ lines follow, each containing two integers $u_j$ and $v_j$ $(1 \\le u_j, v_j \\le n, u_j \\neq v_j)$ \u2014 the numbers of vertices connected by the $j$-th undirected edge. It is guaranteed that these edges denote a tree.\n-----Output-----\nIf there is no good painting, print $-1$.\nOtherwise, print the minimum cost of a good painting in the first line. In the second line print $n$ integers $b_1, b_2, \\dots, b_n$ $(1 \\le b_i \\le 3)$, where the $i$-th integer should denote the color of the $i$-th vertex. If there are multiple good paintings with minimum cost, print any of them.\n-----Examples-----\nInput\n3\n3 2 3\n4 3 2\n3 1 3\n1 2\n2 3\nOutput\n6\n1 3 2 \nInput\n5\n3 4 2 1 2\n4 2 1 5 4\n5 3 2 1 1\n1 2\n3 2\n4 3\n5 3\nOutput\n-1\nInput\n5\n3 4 2 1 2\n4 2 1 5 4\n5 3 2 1 1\n1 2\n3 2\n4 3\n5 4\nOutput\n9\n1 3 2 1 3 \n-----Note-----\nAll vertices should be painted in different colors in the first example. The optimal way to do it is to paint the first vertex into color $1$, the second vertex \u2014 into color $3$, and the third vertex \u2014 into color $2$. The cost of this painting is $3 + 2 + 1 = 6$.\n\ndef",
        "answer": "def paint_graph(n, costs):\n    costs = sorted(costs)\n    costs.append(0)\n    costs.insert(0, 0)\n    dp = [[0 for _ in range(3)] for _ in range(n + 1)]\n    dp[1][0] = costs[1]\n    dp[1][1] = costs[2]\n    dp[1][2] = costs[3]\n    for i in range(2, n + 1):\n        dp[i][0] = min(dp[i - 1][1], dp[i - 1][2]) + costs[i]\n        dp[i][1] = min(dp[i - 1][0], dp[i - 1][2]) + costs[i + 1]\n        dp[i][2] = min(dp[i - 1][0], dp[i - 1][1]) + costs[i + 2]\n    min_cost = min(dp[n])\n    if min_cost == 0:\n        return -1\n    else:\n        return min_cost",
        "difficulty": "interview"
    },
    {
        "task_id": 1411,
        "prompt": "Complete the Python function given the prompt below:It's another Start[c]up finals, and that means there is pizza to order for the onsite contestants. There are only 2 types of pizza (obviously not, but let's just pretend for the sake of the problem), and all pizzas contain exactly S slices.\nIt is known that the i-th contestant will eat s_{i} slices of pizza, and gain a_{i} happiness for each slice of type 1 pizza they eat, and b_{i} happiness for each slice of type 2 pizza they eat. We can order any number of type 1 and type 2 pizzas, but we want to buy the minimum possible number of pizzas for all of the contestants to be able to eat their required number of slices. Given that restriction, what is the maximum possible total happiness that can be achieved?\n-----Input-----\nThe first line of input will contain integers N and S (1 \u2264 N \u2264 10^5, 1 \u2264 S \u2264 10^5), the number of contestants and the number of slices per pizza, respectively. N lines follow.\nThe i-th such line contains integers s_{i}, a_{i}, and b_{i} (1 \u2264 s_{i} \u2264 10^5, 1 \u2264 a_{i} \u2264 10^5, 1 \u2264 b_{i} \u2264 10^5), the number of slices the i-th contestant will eat, the happiness they will gain from each type 1 slice they eat, and the happiness they will gain from each type 2 slice they eat, respectively.\n-----Output-----\nPrint the maximum total happiness that can be achieved.\n-----Examples-----\nInput\n3 12\n3 5 7\n4 6 7\n5 9 5\nOutput\n84\nInput\n6 10\n7 4 7\n5 8 8\n12 5 8\n6 11 6\n3 3 7\n5 9 6\nOutput\n314\n-----Note-----\nIn the first example, you only need to buy one pizza. If you buy a type 1 pizza, the total happiness will be 3\u00b75 + 4\u00b76 + 5\u00b79 = 84, and if you buy a type 2 pizza, the total happiness will be 3\u00b77 + 4\u00b77 + 5\u00b75 = 74.\n\ndef",
        "answer": "def max_happiness(slices, types):\n    slices.sort()\n    types.sort()\n    happiness = 0\n    for i in range(len(slices)):\n        happiness += slices[i] * types[i]\n    return happiness",
        "difficulty": "interview"
    },
    {
        "task_id": 1412,
        "prompt": "Complete the Python function given the prompt below:All our characters have hobbies. The same is true for Fedor. He enjoys shopping in the neighboring supermarket. \nThe goods in the supermarket have unique integer ids. Also, for every integer there is a product with id equal to this integer. Fedor has n discount coupons, the i-th of them can be used with products with ids ranging from l_{i} to r_{i}, inclusive. Today Fedor wants to take exactly k coupons with him.\nFedor wants to choose the k coupons in such a way that the number of such products x that all coupons can be used with this product x is as large as possible (for better understanding, see examples). Fedor wants to save his time as well, so he asks you to choose coupons for him. Help Fedor!\n-----Input-----\nThe first line contains two integers n and k (1 \u2264 k \u2264 n \u2264 3\u00b710^5)\u00a0\u2014 the number of coupons Fedor has, and the number of coupons he wants to choose.\nEach of the next n lines contains two integers l_{i} and r_{i} ( - 10^9 \u2264 l_{i} \u2264 r_{i} \u2264 10^9)\u00a0\u2014 the description of the i-th coupon. The coupons can be equal.\n-----Output-----\nIn the first line print single integer\u00a0\u2014 the maximum number of products with which all the chosen coupons can be used. The products with which at least one coupon cannot be used shouldn't be counted.\nIn the second line print k distinct integers p_1, p_2,..., p_{k} (1 \u2264 p_{i} \u2264 n)\u00a0\u2014 the ids of the coupons which Fedor should choose.\nIf there are multiple answers, print any of them.\n-----Examples-----\nInput\n4 2\n1 100\n40 70\n120 130\n125 180\nOutput\n31\n1 2 \nInput\n3 2\n1 12\n15 20\n25 30\nOutput\n0\n1 2 \nInput\n5 2\n1 10\n5 15\n14 50\n30 70\n99 100\nOutput\n21\n3 4 \n-----Note-----\nIn the first example if we take the first two coupons then all the products with ids in range [40, 70] can be bought with both coupons. There are 31 products in total.\nIn the second example, no product can be bought with two coupons, that is why the answer is 0. Fedor can choose any two coupons in this example.\n\ndef",
        "answer": "def solve(n, k, l):\n    l.sort()\n    res = 0\n    for i in range(n - k + 1):\n        res = max(res, l[i + k - 1] - l[i])\n    return res",
        "difficulty": "interview"
    },
    {
        "task_id": 1413,
        "prompt": "Complete the Python function given the prompt below:You are given a string $s=s_1s_2\\dots s_n$ of length $n$, which only contains digits $1$, $2$,..., $9$.\nA substring $s[l \\dots r]$ of $s$ is a string $s_l s_{l + 1} s_{l + 2} \\ldots s_r$. A substring $s[l \\dots r]$ of $s$ is called even if the number represented by it is even. \nFind the number of even substrings of $s$. Note, that even if some substrings are equal as strings, but have different $l$ and $r$, they are counted as different substrings.\n-----Input-----\nThe first line contains an integer $n$ ($1 \\le n \\le 65000$)\u00a0\u2014 the length of the string $s$.\nThe second line contains a string $s$ of length $n$. The string $s$ consists only of digits $1$, $2$,..., $9$.\n-----Output-----\nPrint the number of even substrings of $s$.\n-----Examples-----\nInput\n4\n1234\nOutput\n6\nInput\n4\n2244\nOutput\n10\n-----Note-----\nIn the first example, the $[l, r]$ pairs corresponding to even substrings are:   $s[1 \\dots 2]$\n $s[2 \\dots 2]$\n $s[1 \\dots 4]$\n $s[2 \\dots 4]$\n $s[3 \\dots 4]$\n $s[4 \\dots 4]$ \nIn the second example, all $10$ substrings of $s$ are even substrings. Note, that while substrings $s[1 \\dots 1]$ and $s[2 \\dots 2]$ both define the substring \"2\", they are still counted as different substrings.\n\ndef",
        "answer": "def count_even_substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if int(s[i:j+1]) % 2 == 0:\n                count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 1414,
        "prompt": "Complete the Python function given the prompt below:Inna and Dima bought a table of size n \u00d7 m in the shop. Each cell of the table contains a single letter: \"D\", \"I\", \"M\", \"A\".\nInna loves Dima, so she wants to go through his name as many times as possible as she moves through the table. For that, Inna acts as follows:\n  initially, Inna chooses some cell of the table where letter \"D\" is written;  then Inna can move to some side-adjacent table cell that contains letter \"I\"; then from this cell she can go to one of the side-adjacent table cells that contains the written letter \"M\"; then she can go to a side-adjacent cell that contains letter \"A\". Then Inna assumes that she has gone through her sweetheart's name;  Inna's next move can be going to one of the side-adjacent table cells that contains letter \"D\" and then walk on through name DIMA in the similar manner. Inna never skips a letter. So, from the letter \"D\" she always goes to the letter \"I\", from the letter \"I\" she always goes the to letter \"M\", from the letter \"M\" she always goes to the letter \"A\", and from the letter \"A\" she always goes to the letter \"D\". \nDepending on the choice of the initial table cell, Inna can go through name DIMA either an infinite number of times or some positive finite number of times or she can't go through his name once. Help Inna find out what maximum number of times she can go through name DIMA.\n-----Input-----\nThe first line of the input contains two integers n and m (1 \u2264 n, m \u2264 10^3). \nThen follow n lines that describe Inna and Dima's table. Each line contains m characters. Each character is one of the following four characters: \"D\", \"I\", \"M\", \"A\". \nNote that it is not guaranteed that the table contains at least one letter \"D\".\n-----Output-----\nIf Inna cannot go through name DIMA once, print on a single line \"Poor Dima!\" without the quotes. If there is the infinite number of names DIMA Inna can go through, print \"Poor Inna!\" without the quotes. Otherwise print a single integer \u2014 the maximum number of times Inna can go through name DIMA.\n-----Examples-----\nInput\n1 2\nDI\nOutput\nPoor Dima!\nInput\n2 2\nMA\nID\nOutput\nPoor Inna!\nInput\n5 5\nDIMAD\nDIMAI\nDIMAM\nDDMAA\nAAMID\nOutput\n4\n-----Note-----\nNotes to the samples:\nIn the first test sample, Inna cannot go through name DIMA a single time.\nIn the second test sample, Inna can go through the infinite number of words DIMA. For that, she should move in the clockwise direction starting from the lower right corner.\nIn the third test sample the best strategy is to start from the cell in the upper left corner of the table. Starting from this cell, Inna can go through name DIMA four times.\n\ndef",
        "answer": "def Inna_Dima(n, m):\n    table = []\n    for i in range(n):\n        table.append(input())",
        "difficulty": "interview"
    },
    {
        "task_id": 1415,
        "prompt": "Complete the Python function given the prompt below:The Cybernetics Failures (CF) organisation made a prototype of a bomb technician robot. To find the possible problems it was decided to carry out a series of tests. At the beginning of each test the robot prototype will be placed in cell (x_0, y_0) of a rectangular squared field of size x \u00d7 y, after that a mine will be installed into one of the squares of the field. It is supposed to conduct exactly x\u00b7y tests, each time a mine is installed into a square that has never been used before. The starting cell of the robot always remains the same.\nAfter placing the objects on the field the robot will have to run a sequence of commands given by string s, consisting only of characters 'L', 'R', 'U', 'D'. These commands tell the robot to move one square to the left, to the right, up or down, or stay idle if moving in the given direction is impossible. As soon as the robot fulfills all the sequence of commands, it will blow up due to a bug in the code. But if at some moment of time the robot is at the same square with the mine, it will also blow up, but not due to a bug in the code.\nMoving to the left decreases coordinate y, and moving to the right increases it. Similarly, moving up decreases the x coordinate, and moving down increases it.\nThe tests can go on for very long, so your task is to predict their results. For each k from 0 to length(s) your task is to find in how many tests the robot will run exactly k commands before it blows up.\n-----Input-----\nThe first line of the input contains four integers x, y, x_0, y_0 (1 \u2264 x, y \u2264 500, 1 \u2264 x_0 \u2264 x, 1 \u2264 y_0 \u2264 y)\u00a0\u2014 the sizes of the field and the starting coordinates of the robot. The coordinate axis X is directed downwards and axis Y is directed to the right.\nThe second line contains a sequence of commands s, which should be fulfilled by the robot. It has length from 1 to 100 000 characters and only consists of characters 'L', 'R', 'U', 'D'.\n-----Output-----\nPrint the sequence consisting of (length(s) + 1) numbers. On the k-th position, starting with zero, print the number of tests where the robot will run exactly k commands before it blows up.\n-----Examples-----\nInput\n3 4 2 2\nUURDRDRL\nOutput\n1 1 0 1 1 1 1 0 6\nInput\n2 2 2 2\nULD\nOutput\n1 1 1 1\n-----Note-----\nIn the first sample, if we exclude the probable impact of the mines, the robot's route will look like that: $(2,2) \\rightarrow(1,2) \\rightarrow(1,2) \\rightarrow(1,3) \\rightarrow(2,3) \\rightarrow(2,4) \\rightarrow(3,4) \\rightarrow(3,4) \\rightarrow(3,3)$.\n\ndef",
        "answer": "def minesweeper(x, y, x_0, y_0, s):\n    # your code here\n    # return the number of tests where the robot will run exactly k commands before it blows up\n    # return the number of tests where the robot will run exactly k commands before it blows up\n    # return the number of tests where the robot will run exactly k commands before it blows up\n    # return the number of tests where the robot will run exactly k commands before it blows up\n    # return the number of tests where the robot will run exactly k commands before it blows up\n    # return the number of tests where the robot will run exactly k commands before it blows up\n    # return the number of tests where the robot will run exactly k commands before it blows up\n    # return the number of tests where the robot will run exactly k commands before it blows up\n    # return the number of tests where the robot will run exactly k commands before it blows up\n    # return the number of tests where the robot will run exactly k commands before it blows up\n    # return the number of tests where the robot will run exactly k commands before it blows up\n    # return the number of tests where the robot will run exactly k commands before it blows up\n    # return the number of tests where the robot will run exactly k commands before it blows up\n    # return the number of tests where the robot will run exactly k commands before it blows up\n    # return the number of tests where the robot will run exactly k commands before it blows up\n    # return the number of tests where the robot will run exactly k commands before it blows up\n    # return the number of tests where the robot will run exactly k commands before it blows up\n    # return the number of tests where the robot will run exactly k commands before it blows up\n    # return the number of tests where the robot will run exactly k commands",
        "difficulty": "interview"
    },
    {
        "task_id": 1416,
        "prompt": "Complete the Python function given the prompt below:Pasha decided to invite his friends to a tea party. For that occasion, he has a large teapot with the capacity of w milliliters and 2n tea cups, each cup is for one of Pasha's friends. The i-th cup can hold at most a_{i} milliliters of water.\nIt turned out that among Pasha's friends there are exactly n boys and exactly n girls and all of them are going to come to the tea party. To please everyone, Pasha decided to pour the water for the tea as follows:  Pasha can boil the teapot exactly once by pouring there at most w milliliters of water;  Pasha pours the same amount of water to each girl;  Pasha pours the same amount of water to each boy;  if each girl gets x milliliters of water, then each boy gets 2x milliliters of water. \nIn the other words, each boy should get two times more water than each girl does.\nPasha is very kind and polite, so he wants to maximize the total amount of the water that he pours to his friends. Your task is to help him and determine the optimum distribution of cups between Pasha's friends.\n-----Input-----\nThe first line of the input contains two integers, n and w (1 \u2264 n \u2264 10^5, 1 \u2264 w \u2264 10^9)\u00a0\u2014 the number of Pasha's friends that are boys (equal to the number of Pasha's friends that are girls) and the capacity of Pasha's teapot in milliliters.\nThe second line of the input contains the sequence of integers a_{i} (1 \u2264 a_{i} \u2264 10^9, 1 \u2264 i \u2264 2n)\u00a0\u2014\u00a0the capacities of Pasha's tea cups in milliliters.\n-----Output-----\nPrint a single real number \u2014 the maximum total amount of water in milliliters that Pasha can pour to his friends without violating the given conditions. Your answer will be considered correct if its absolute or relative error doesn't exceed 10^{ - 6}.\n-----Examples-----\nInput\n2 4\n1 1 1 1\nOutput\n3\nInput\n3 18\n4 4 4 2 2 2\nOutput\n18\nInput\n1 5\n2 3\nOutput\n4.5\n-----Note-----\nPasha also has candies that he is going to give to girls but that is another task...\n\ndef",
        "answer": "def tea_party(n, w, a):\n    return max(sum(a[:n]) // w, sum(a[n:]) // w)",
        "difficulty": "interview"
    },
    {
        "task_id": 1417,
        "prompt": "Complete the Python function given the prompt below:Let $n$ be an integer. Consider all permutations on integers $1$ to $n$ in lexicographic order, and concatenate them into one big sequence $P$. For example, if $n = 3$, then $P = [1, 2, 3, 1, 3, 2, 2, 1, 3, 2, 3, 1, 3, 1, 2, 3, 2, 1]$. The length of this sequence is $n \\cdot n!$.\nLet $1 \\leq i \\leq j \\leq n \\cdot n!$ be a pair of indices. We call the sequence $(P_i, P_{i+1}, \\dots, P_{j-1}, P_j)$ a subarray of $P$. \nYou are given $n$. Find the number of distinct subarrays of $P$. Since this number may be large, output it modulo $998244353$ (a prime number). \n-----Input-----\nThe only line contains one integer $n$\u00a0($1 \\leq n \\leq 10^6$), as described in the problem statement.\n-----Output-----\nOutput a single integer\u00a0\u2014 the number of distinct subarrays, modulo $998244353$.\n-----Examples-----\nInput\n2\nOutput\n8\nInput\n10\nOutput\n19210869\n-----Note-----\nIn the first example, the sequence $P = [1, 2, 2, 1]$. It has eight distinct subarrays: $[1]$, $[2]$, $[1, 2]$, $[2, 1]$, $[2, 2]$, $[1, 2, 2]$, $[2, 2, 1]$ and $[1, 2, 2, 1]$.\n\ndef",
        "answer": "def subarrays(n):\n    return n*(n+1)//2",
        "difficulty": "interview"
    },
    {
        "task_id": 1418,
        "prompt": "Complete the Python function given the prompt below:You're given an integer $n$. For every integer $i$ from $2$ to $n$, assign a positive integer $a_i$ such that the following conditions hold:  For any pair of integers $(i,j)$, if $i$ and $j$ are coprime, $a_i \\neq a_j$.  The maximal value of all $a_i$ should be minimized (that is, as small as possible). \nA pair of integers is called coprime if their greatest common divisor is $1$.\n-----Input-----\nThe only line contains the integer $n$ ($2 \\le n \\le 10^5$).\n-----Output-----\nPrint $n-1$ integers, $a_2$, $a_3$, $\\ldots$, $a_n$ ($1 \\leq a_i \\leq n$). \nIf there are multiple solutions, print any of them.\n-----Examples-----\nInput\n4\nOutput\n1 2 1 \nInput\n3\nOutput\n2 1\n-----Note-----\nIn the first example, notice that $3$ and $4$ are coprime, so $a_3 \\neq a_4$. Also, notice that $a=[1,2,3]$ satisfies the first condition, but it's not a correct answer because its maximal value is $3$.\n\ndef",
        "answer": "def coprime(n):\n    a = [1]\n    for i in range(2, n+1):\n        a.append(i)\n    for i in range(2, n+1):\n        for j in range(2, n+1):\n            if gcd(i, j) == 1:\n                a[i] = min(a[i], j)\n    return a",
        "difficulty": "interview"
    },
    {
        "task_id": 1419,
        "prompt": "Complete the Python function given the prompt below:The main city magazine offers its readers an opportunity to publish their ads. The format of the ad should be like this:\nThere are space-separated non-empty words of lowercase and uppercase Latin letters.\nThere are hyphen characters '-' in some words, their positions set word wrapping points. Word can include more than one hyphen. \nIt is guaranteed that there are no adjacent spaces and no adjacent hyphens. No hyphen is adjacent to space. There are no spaces and no hyphens before the first word and after the last word. \nWhen the word is wrapped, the part of the word before hyphen and the hyphen itself stay on current line and the next part of the word is put on the next line. You can also put line break between two words, in that case the space stays on current line. Check notes for better understanding.\nThe ad can occupy no more that k lines and should have minimal width. The width of the ad is the maximal length of string (letters, spaces and hyphens are counted) in it.\nYou should write a program that will find minimal width of the ad.\n-----Input-----\nThe first line contains number k (1 \u2264 k \u2264 10^5).\nThe second line contains the text of the ad \u2014 non-empty space-separated words of lowercase and uppercase Latin letters and hyphens. Total length of the ad don't exceed 10^6 characters.\n-----Output-----\nOutput minimal width of the ad.\n-----Examples-----\nInput\n4\ngarage for sa-le\nOutput\n7\nInput\n4\nEdu-ca-tion-al Ro-unds are so fun\nOutput\n10\n-----Note-----\nHere all spaces are replaced with dots.\nIn the first example one of possible results after all word wraps looks like this:\ngarage.\nfor.\nsa-\nle\nThe second example:\nEdu-ca-\ntion-al.\nRo-unds.\nare.so.fun\n\ndef",
        "answer": "def wrap(s, max_width):\n    # your code\n    return s",
        "difficulty": "interview"
    },
    {
        "task_id": 1420,
        "prompt": "Complete the Python function given the prompt below:Vanya walks late at night along a straight street of length l, lit by n lanterns. Consider the coordinate system with the beginning of the street corresponding to the point 0, and its end corresponding to the point l. Then the i-th lantern is at the point a_{i}. The lantern lights all points of the street that are at the distance of at most d from it, where d is some positive number, common for all lanterns. \nVanya wonders: what is the minimum light radius d should the lanterns have to light the whole street?\n-----Input-----\nThe first line contains two integers n, l (1 \u2264 n \u2264 1000, 1 \u2264 l \u2264 10^9)\u00a0\u2014 the number of lanterns and the length of the street respectively. \nThe next line contains n integers a_{i} (0 \u2264 a_{i} \u2264 l). Multiple lanterns can be located at the same point. The lanterns may be located at the ends of the street.\n-----Output-----\nPrint the minimum light radius d, needed to light the whole street. The answer will be considered correct if its absolute or relative error doesn't exceed 10^{ - 9}.\n-----Examples-----\nInput\n7 15\n15 5 3 7 9 14 0\nOutput\n2.5000000000\nInput\n2 5\n2 5\nOutput\n2.0000000000\n-----Note-----\nConsider the second sample. At d = 2 the first lantern will light the segment [0, 4] of the street, and the second lantern will light segment [3, 5]. Thus, the whole street will be lit.\n\ndef",
        "answer": "def lanterns(n, l):\n    d = l / n\n    return d",
        "difficulty": "interview"
    },
    {
        "task_id": 1421,
        "prompt": "Complete the Python function given the prompt below:Generous sponsors of the olympiad in which Chloe and Vladik took part allowed all the participants to choose a prize for them on their own. Christmas is coming, so sponsors decided to decorate the Christmas tree with their prizes. \nThey took n prizes for the contestants and wrote on each of them a unique id (integer from 1 to n). A gift i is characterized by integer a_{i}\u00a0\u2014 pleasantness of the gift. The pleasantness of the gift can be positive, negative or zero. Sponsors placed the gift 1 on the top of the tree. All the other gifts hung on a rope tied to some other gift so that each gift hung on the first gift, possibly with a sequence of ropes and another gifts. Formally, the gifts formed a rooted tree with n vertices.\nThe prize-giving procedure goes in the following way: the participants come to the tree one after another, choose any of the remaining gifts and cut the rope this prize hang on. Note that all the ropes which were used to hang other prizes on the chosen one are not cut. So the contestant gets the chosen gift as well as the all the gifts that hang on it, possibly with a sequence of ropes and another gifts.\nOur friends, Chloe and Vladik, shared the first place on the olympiad and they will choose prizes at the same time! To keep themselves from fighting, they decided to choose two different gifts so that the sets of the gifts that hang on them with a sequence of ropes and another gifts don't intersect. In other words, there shouldn't be any gift that hang both on the gift chosen by Chloe and on the gift chosen by Vladik. From all of the possible variants they will choose such pair of prizes that the sum of pleasantness of all the gifts that they will take after cutting the ropes is as large as possible.\nPrint the maximum sum of pleasantness that Vladik and Chloe can get. If it is impossible for them to choose the gifts without fighting, print Impossible.\n-----Input-----\nThe first line contains a single integer n (1 \u2264 n \u2264 2\u00b710^5)\u00a0\u2014 the number of gifts.\nThe next line contains n integers a_1, a_2,..., a_{n} ( - 10^9 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 the pleasantness of the gifts.\nThe next (n - 1) lines contain two numbers each. The i-th of these lines contains integers u_{i} and v_{i} (1 \u2264 u_{i}, v_{i} \u2264 n, u_{i} \u2260 v_{i})\u00a0\u2014 the description of the tree's edges. It means that gifts with numbers u_{i} and v_{i} are connected to each other with a rope. The gifts' ids in the description of the ropes can be given in arbirtary order: v_{i} hangs on u_{i} or u_{i} hangs on v_{i}. \nIt is guaranteed that all the gifts hang on the first gift, possibly with a sequence of ropes and another gifts.\n-----Output-----\nIf it is possible for Chloe and Vladik to choose prizes without fighting, print single integer\u00a0\u2014 the maximum possible sum of pleasantness they can get together.\nOtherwise print Impossible.\n-----Examples-----\nInput\n8\n0 5 -1 4 3 2 6 5\n1 2\n2 4\n2 5\n1 3\n3 6\n6 7\n6 8\nOutput\n25\nInput\n4\n1 -5 1 1\n1 2\n1 4\n2 3\nOutput\n2\nInput\n1\n-1\nOutput\nImpossible\n\ndef",
        "answer": "def solve(n, a):\n    a.sort()\n    dp = [0] * n\n    dp[0] = a[0]\n    dp[1] = max(a[0], a[1])\n    for i in range(2, n):\n        dp[i] = max(dp[i - 2] + a[i], dp[i - 1])\n    return dp[n - 1]",
        "difficulty": "interview"
    },
    {
        "task_id": 1422,
        "prompt": "Complete the Python function given the prompt below:Xenia has a set of weights and pan scales. Each weight has an integer weight from 1 to 10 kilos. Xenia is going to play with scales and weights a little. For this, she puts weights on the scalepans, one by one. The first weight goes on the left scalepan, the second weight goes on the right scalepan, the third one goes on the left scalepan, the fourth one goes on the right scalepan and so on. Xenia wants to put the total of m weights on the scalepans.\nSimply putting weights on the scales is not interesting, so Xenia has set some rules. First, she does not put on the scales two consecutive weights of the same weight. That is, the weight that goes i-th should be different from the (i + 1)-th weight for any i (1 \u2264 i < m). Second, every time Xenia puts a weight on some scalepan, she wants this scalepan to outweigh the other one. That is, the sum of the weights on the corresponding scalepan must be strictly greater than the sum on the other pan.\nYou are given all types of weights available for Xenia. You can assume that the girl has an infinite number of weights of each specified type. Your task is to help Xenia lay m weights on \u200b\u200bthe scales or to say that it can't be done.\n-----Input-----\nThe first line contains a string consisting of exactly ten zeroes and ones: the i-th (i \u2265 1) character in the line equals \"1\" if Xenia has i kilo weights, otherwise the character equals \"0\". The second line contains integer m (1 \u2264 m \u2264 1000).\n-----Output-----\nIn the first line print \"YES\", if there is a way to put m weights on the scales by all rules. Otherwise, print in the first line \"NO\". If you can put m weights on the scales, then print in the next line m integers \u2014 the weights' weights in the order you put them on the scales.\nIf there are multiple solutions, you can print any of them.\n-----Examples-----\nInput\n0000000101\n3\nOutput\nYES\n8 10 8\nInput\n1000000000\n2\nOutput\nNO\n\ndef",
        "answer": "def check_weights(weights, m):\n    if m > len(weights):\n        return False\n    if m == len(weights):\n        return True\n    if m == 1:\n        return True\n    if m == 2:\n        if weights[0] == weights[1]:\n            return False\n        return True\n    if m == 3:\n        if weights[0] == weights[1] or weights[0] == weights[2]:\n            return False\n        if weights[1] == weights[2]:\n            return False\n        return True\n    if m == 4:\n        if weights[0] == weights[1] or weights[0] == weights[2] or weights[0] == weights[3]:\n            return False\n        if weights[1] == weights[2] or weights[1] == weights[3]:\n            return False\n        if weights[2] == weights[3]:\n            return False\n        return True\n    if m == 5:\n        if weights[0] == weights[1] or weights[0] == weights[2] or weights[0] == weights[3] or weights[0] == weights[4]:\n            return False\n        if weights[1] == weights[2] or weights[1] == weights[3] or weights[1] == weights[4]:\n            return False\n        if weights[2] == weights[3] or weights[2] == weights[4]:\n            return False\n        if weights[3] == weights[4]:\n            return False\n        return True\n    if m == 6:\n        if weights[0] == weights[1] or weights[0] == weights[2] or weights[0] == weights[3] or weights[0] == weights[4] or weights",
        "difficulty": "interview"
    },
    {
        "task_id": 1423,
        "prompt": "Complete the Python function given the prompt below:Dasha logged into the system and began to solve problems. One of them is as follows:\nGiven two sequences a and b of length n each you need to write a sequence c of length n, the i-th element of which is calculated as follows: c_{i} = b_{i} - a_{i}.\nAbout sequences a and b we know that their elements are in the range from l to r. More formally, elements satisfy the following conditions: l \u2264 a_{i} \u2264 r and l \u2264 b_{i} \u2264 r. About sequence c we know that all its elements are distinct.\n [Image] \nDasha wrote a solution to that problem quickly, but checking her work on the standard test was not so easy. Due to an error in the test system only the sequence a and the compressed sequence of the sequence c were known from that test.\nLet's give the definition to a compressed sequence. A compressed sequence of sequence c of length n is a sequence p of length n, so that p_{i} equals to the number of integers which are less than or equal to c_{i} in the sequence c. For example, for the sequence c = [250, 200, 300, 100, 50] the compressed sequence will be p = [4, 3, 5, 2, 1]. Pay attention that in c all integers are distinct. Consequently, the compressed sequence contains all integers from 1 to n inclusively.\nHelp Dasha to find any sequence b for which the calculated compressed sequence of sequence c is correct.\n-----Input-----\nThe first line contains three integers n, l, r (1 \u2264 n \u2264 10^5, 1 \u2264 l \u2264 r \u2264 10^9) \u2014 the length of the sequence and boundaries of the segment where the elements of sequences a and b are.\nThe next line contains n integers a_1,  a_2, ...,  a_{n} (l \u2264 a_{i} \u2264 r) \u2014 the elements of the sequence a.\nThe next line contains n distinct integers p_1,  p_2, ...,  p_{n} (1 \u2264 p_{i} \u2264 n) \u2014 the compressed sequence of the sequence c.\n-----Output-----\nIf there is no the suitable sequence b, then in the only line print \"-1\".\nOtherwise, in the only line print n integers \u2014 the elements of any suitable sequence b.\n-----Examples-----\nInput\n5 1 5\n1 1 1 1 1\n3 1 5 4 2\nOutput\n3 1 5 4 2 \nInput\n4 2 9\n3 4 8 9\n3 2 1 4\nOutput\n2 2 2 9 \nInput\n6 1 5\n1 1 1 1 1 1\n2 3 5 4 1 6\nOutput\n-1\n-----Note-----\nSequence b which was found in the second sample is suitable, because calculated sequence c = [2 - 3, 2 - 4, 2 - 8, 9 - 9] = [ - 1,  - 2,  - 6, 0] (note that c_{i} = b_{i} - a_{i}) has compressed sequence equals to p = [3, 2, 1, 4].\n\ndef",
        "answer": "def solution(n, l, r, a, p):\n    c = []\n    for i in range(n):\n        c.append(p[i] - a[i])\n    c.sort()\n    for i in range(n):\n        if c[i] < l or c[i] > r:\n            return -1\n    return c",
        "difficulty": "interview"
    },
    {
        "task_id": 1424,
        "prompt": "Complete the Python function given the prompt below:After you had helped George and Alex to move in the dorm, they went to help their friend Fedor play a new computer game \u00abCall of Soldiers 3\u00bb.\nThe game has (m + 1) players and n types of soldiers in total. Players \u00abCall of Soldiers 3\u00bb are numbered form 1 to (m + 1). Types of soldiers are numbered from 0 to n - 1. Each player has an army. Army of the i-th player can be described by non-negative integer x_{i}. Consider binary representation of x_{i}: if the j-th bit of number x_{i} equal to one, then the army of the i-th player has soldiers of the j-th type. \nFedor is the (m + 1)-th player of the game. He assume that two players can become friends if their armies differ in at most k types of soldiers (in other words, binary representations of the corresponding numbers differ in at most k bits). Help Fedor and count how many players can become his friends.\n-----Input-----\nThe first line contains three integers n, m, k (1 \u2264 k \u2264 n \u2264 20;\u00a01 \u2264 m \u2264 1000).\nThe i-th of the next (m + 1) lines contains a single integer x_{i} (1 \u2264 x_{i} \u2264 2^{n} - 1), that describes the i-th player's army. We remind you that Fedor is the (m + 1)-th player.\n-----Output-----\nPrint a single integer \u2014 the number of Fedor's potential friends.\n-----Examples-----\nInput\n7 3 1\n8\n5\n111\n17\nOutput\n0\nInput\n3 3 3\n1\n2\n3\n4\nOutput\n3\n\ndef",
        "answer": "def friends(n, m, k):\n    count = 0\n    for i in range(1, 2**n):\n        if bin(i).count('1') <= k:\n            count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 1425,
        "prompt": "Complete the Python function given the prompt below:You are given $n$ numbers $a_1, a_2, \\ldots, a_n$. Is it possible to arrange them in a circle in such a way that every number is strictly less than the sum of its neighbors?\nFor example, for the array $[1, 4, 5, 6, 7, 8]$, the arrangement on the left is valid, while arrangement on the right is not, as $5\\ge 4 + 1$ and $8> 1 + 6$. [Image] \n-----Input-----\nThe first line contains a single integer $n$ ($3\\le n \\le 10^5$)\u00a0\u2014 the number of numbers.\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\le 10^9$)\u00a0\u2014 the numbers. The given numbers are not necessarily distinct (i.e. duplicates are allowed).\n-----Output-----\nIf there is no solution, output \"NO\" in the first line. \nIf there is a solution, output \"YES\" in the first line. In the second line output $n$ numbers\u00a0\u2014 elements of the array in the order they will stay in the circle. The first and the last element you output are considered neighbors in the circle. If there are multiple solutions, output any of them. You can print the circle starting with any element.\n-----Examples-----\nInput\n3\n2 4 3\nOutput\nYES\n4 2 3 \nInput\n5\n1 2 3 4 4\nOutput\nYES\n4 4 2 1 3\nInput\n3\n13 8 5\nOutput\nNO\nInput\n4\n1 10 100 1000\nOutput\nNO\n-----Note-----\nOne of the possible arrangements is shown in the first example: \n$4< 2 + 3$;\n$2 < 4 + 3$;\n$3< 4 + 2$.\nOne of the possible arrangements is shown in the second example.\nNo matter how we arrange $13, 8, 5$ in a circle in the third example, $13$ will have $8$ and $5$ as neighbors, but $13\\ge 8 + 5$. \nThere is no solution in the fourth example.\n\ndef",
        "answer": "def solve(n, arr):\n    arr.sort()\n    if arr[0] >= arr[1] + arr[2]:\n        return \"NO\"\n    for i in range(n):\n        if arr[i] >= arr[(i + 1) % n] + arr[(i + 2) % n]:\n            return \"NO\"\n    return \"YES\"",
        "difficulty": "interview"
    },
    {
        "task_id": 1426,
        "prompt": "Complete the Python function given the prompt below:Ken loves ken-ken-pa (Japanese version of hopscotch). Today, he will play it on a directed graph G.\nG consists of N vertices numbered 1 to N, and M edges. The i-th edge points from Vertex u_i to Vertex v_i.\nFirst, Ken stands on Vertex S. He wants to reach Vertex T by repeating ken-ken-pa. In one ken-ken-pa, he does the following exactly three times: follow an edge pointing from the vertex on which he is standing.\nDetermine if he can reach Vertex T by repeating ken-ken-pa. If the answer is yes, find the minimum number of ken-ken-pa needed to reach Vertex T. Note that visiting Vertex T in the middle of a ken-ken-pa does not count as reaching Vertex T by repeating ken-ken-pa.\n-----Constraints-----\n - 2 \\leq N \\leq 10^5\n - 0 \\leq M \\leq \\min(10^5, N (N-1))\n - 1 \\leq u_i, v_i \\leq N(1 \\leq i \\leq M)\n - u_i \\neq v_i (1 \\leq i \\leq M)\n - If i \\neq j, (u_i, v_i) \\neq (u_j, v_j).\n - 1 \\leq S, T \\leq N\n - S \\neq T\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\nu_1 v_1\n:\nu_M v_M\nS T\n-----Output-----\nIf Ken cannot reach Vertex T from Vertex S by repeating ken-ken-pa, print -1.\nIf he can, print the minimum number of ken-ken-pa needed to reach vertex T.\n-----Sample Input-----\n4 4\n1 2\n2 3\n3 4\n4 1\n1 3\n-----Sample Output-----\n2\nKen can reach Vertex 3 from Vertex 1 in two ken-ken-pa, as follows: 1 \\rightarrow 2 \\rightarrow 3 \\rightarrow 4 in the first ken-ken-pa, then 4 \\rightarrow 1 \\rightarrow 2 \\rightarrow 3 in the second ken-ken-pa. This is the minimum number of ken-ken-pa needed.\n\ndef",
        "answer": "def hopscotch(n, m, u, v, s, t):\n    # Write your code here\n    if s == t:\n        return 0\n    visited = [False] * n\n    queue = []\n    queue.append(s)\n    visited[s] = True\n    count = 0\n    while queue:\n        count += 1\n        for i in range(len(queue)):\n            curr = queue.pop(0)\n            if curr == t:\n                return count\n            for j in range(m):\n                if u[j] == curr and not visited[v[j]]:\n                    queue.append(v[j])\n                    visited[v[j]] = True\n    return -1",
        "difficulty": "interview"
    },
    {
        "task_id": 1427,
        "prompt": "Complete the Python function given the prompt below:Given are N positive integers A_1,...,A_N.\nConsider positive integers B_1,..., B_N that satisfy the following condition.\nCondition: For any i, j such that 1 \\leq i < j \\leq N, A_i B_i = A_j B_j holds.\nFind the minimum possible value of B_1 +... + B_N for such B_1,...,B_N.\nSince the answer can be enormous, print the sum modulo (10^9 +7).\n-----Constraints-----\n - 1 \\leq N \\leq 10^4\n - 1 \\leq A_i \\leq 10^6\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1... A_N\n-----Output-----\nPrint the minimum possible value of B_1 +... + B_N for B_1,...,B_N that satisfy the condition, modulo (10^9 +7).\n-----Sample Input-----\n3\n2 3 4\n-----Sample Output-----\n13\nLet B_1=6, B_2=4, and B_3=3, and the condition will be satisfied.\n\ndef",
        "answer": "def solve(n, a):\n    b = [0] * n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] * a[j] == a[j] * a[i]:\n                b[i] += 1\n                b[j] += 1\n    return sum(b)",
        "difficulty": "interview"
    },
    {
        "task_id": 1428,
        "prompt": "Complete the Python function given the prompt below:There is a grid with N rows and N columns of squares. Let (i,j) be the square at the i-th row from the top and the j-th column from the left.\nThese squares have to be painted in one of the C colors from Color 1 to Color C. Initially, (i,j) is painted in Color c_{i,j}.\nWe say the grid is a good grid when the following condition is met for all i,j,x,y satisfying 1 \\leq i,j,x,y \\leq N:\n - If (i+j) \\% 3=(x+y) \\% 3, the color of (i,j) and the color of (x,y) are the same.\n - If (i+j) \\%  3 \\neq (x+y) \\% 3, the color of (i,j) and the color of (x,y) are different.\nHere, X \\% Y represents X modulo Y.\nWe will repaint zero or more squares so that the grid will be a good grid.\nFor a square, the wrongness when the color of the square is X before repainting and Y after repainting, is D_{X,Y}.\nFind the minimum possible sum of the wrongness of all the squares.\n-----Constraints-----\n - 1 \\leq N \\leq 500\n - 3 \\leq C \\leq 30\n - 1 \\leq D_{i,j} \\leq 1000 (i \\neq j),D_{i,j}=0 (i=j)\n - 1 \\leq c_{i,j} \\leq C\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN C\nD_{1,1}... D_{1,C}\n:\nD_{C,1}... D_{C,C}\nc_{1,1}... c_{1,N}\n:\nc_{N,1}... c_{N,N}\n-----Output-----\nIf the minimum possible sum of the wrongness of all the squares is x, print x.\n-----Sample Input-----\n2 3\n0 1 1\n1 0 1\n1 4 0\n1 2\n3 3\n-----Sample Output-----\n3\n - Repaint (1,1) to Color 2. The wrongness of (1,1) becomes D_{1,2}=1.\n - Repaint (1,2) to Color 3. The wrongness of (1,2) becomes D_{2,3}=1.\n - Repaint (2,2) to Color 1. The wrongness of (2,2) becomes D_{3,1}=1.\nIn this case, the sum of the wrongness of all the squares is 3.\nNote that D_{i,j} \\neq D_{j,i} is possible.\n\ndef",
        "answer": "def repaint(n, c, d):\n    wrongness = 0\n    for i in range(n):\n        for j in range(n):\n            if (i + j) % 3 == (i + d[j]) % 3:\n                wrongness += d[i][j]\n            else:\n                wrongness += d[i][j] + 1\n    return wrongness",
        "difficulty": "interview"
    },
    {
        "task_id": 1429,
        "prompt": "Complete the Python function given the prompt below:We have a string S of length N consisting of A, T, C, and G.\nStrings T_1 and T_2 of the same length are said to be complementary when, for every i (1 \\leq i \\leq l), the i-th character of T_1 and the i-th character of T_2 are complementary. Here, A and T are complementary to each other, and so are C and G.\nFind the number of non-empty contiguous substrings T of S that satisfies the following condition:\n - There exists a string that is a permutation of T and is complementary to T.\nHere, we distinguish strings that originate from different positions in S, even if the contents are the same.\n-----Constraints-----\n - 1 \\leq N \\leq 5000\n - S consists of A, T, C, and G.\n-----Input-----\nInput is given from Standard Input in the following format:\nN S\n-----Output-----\nPrint the number of non-empty contiguous substrings T of S that satisfies the condition.\n-----Sample Input-----\n4 AGCT\n-----Sample Output-----\n2\nThe following two substrings satisfy the condition:\n - GC (the 2-nd through 3-rd characters) is complementary to CG, which is a permutation of GC.\n - AGCT (the 1-st through 4-th characters) is complementary to TCGA, which is a permutation of AGCT.\n\ndef",
        "answer": "def complementary(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i:j] == s[i:j][::-1]:\n                count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 1430,
        "prompt": "Complete the Python function given the prompt below:N people are arranged in a row from left to right.\nYou are given a string S of length N consisting of 0 and 1, and a positive integer K.\nThe i-th person from the left is standing on feet if the i-th character of S is 0, and standing on hands if that character is 1.\nYou will give the following direction at most K times (possibly zero):\nDirection: Choose integers l and r satisfying 1 \\leq l \\leq r \\leq N, and flip the l-th, (l+1)-th,..., and r-th persons. That is, for each i = l, l+1,..., r, the i-th person from the left now stands on hands if he/she was standing on feet, and stands on feet if he/she was standing on hands.\nFind the maximum possible number of consecutive people standing on hands after at most K directions.\n-----Constraints-----\n - N is an integer satisfying 1 \\leq N \\leq 10^5.\n - K is an integer satisfying 1 \\leq K \\leq 10^5.\n - The length of the string S is N.\n - Each character of the string S is 0 or 1.\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\nS\n-----Output-----\nPrint the maximum possible number of consecutive people standing on hands after at most K directions.\n-----Sample Input-----\n5 1\n00010\n-----Sample Output-----\n4\nWe can have four consecutive people standing on hands, which is the maximum result, by giving the following direction:\n - Give the direction with l = 1, r = 3, which flips the first, second and third persons from the left.\n\ndef",
        "answer": "def flip(S, l, r):\n    for i in range(l, r):\n        if S[i] == '0':\n            S[i] = '1'\n        else:\n            S[i] = '0'\n    return S",
        "difficulty": "interview"
    },
    {
        "task_id": 1431,
        "prompt": "Complete the Python function given the prompt below:There are N empty boxes arranged in a row from left to right.\nThe integer i is written on the i-th box from the left (1 \\leq i \\leq N).\nFor each of these boxes, Snuke can choose either to put a ball in it or to put nothing in it.\nWe say a set of choices to put a ball or not in the boxes is good when the following condition is satisfied:\n - For every integer i between 1 and N (inclusive), the total number of balls contained in the boxes with multiples of i written on them is congruent to a_i modulo 2.\nDoes there exist a good set of choices? If the answer is yes, find one good set of choices.\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 2 \\times 10^5\n - a_i is 0 or 1.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\na_1 a_2... a_N\n-----Output-----\nIf a good set of choices does not exist, print -1.\nIf a good set of choices exists, print one such set of choices in the following format:\nM\nb_1 b_2... b_M\nwhere M denotes the number of boxes that will contain a ball, and b_1,\\ b_2,\\...,\\ b_M are the integers written on these boxes, in any order.\n-----Sample Input-----\n3\n1 0 0\n-----Sample Output-----\n1\n1\nConsider putting a ball only in the box with 1 written on it.\n - There are three boxes with multiples of 1 written on them: the boxes with 1, 2, and 3. The total number of balls contained in these boxes is 1.\n - There is only one box with a multiple of 2 written on it: the box with 2. The total number of balls contained in these boxes is 0.\n - There is only one box with a multiple of 3 written on it: the box with 3. The total number of balls contained in these boxes is 0.\nThus, the condition is satisfied, so this set of choices is good.\n\ndef",
        "answer": "def solve(n, a):\n    # Write your code here\n    a.sort()\n    count = 0\n    for i in range(1, n+1):\n        count += a[i-1] % 2\n    if count % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "difficulty": "interview"
    },
    {
        "task_id": 1432,
        "prompt": "Complete the Python function given the prompt below:There are N mountains in a circle, called Mountain 1, Mountain 2,..., Mountain N in clockwise order. N is an odd number.\nBetween these mountains, there are N dams, called Dam 1, Dam 2,..., Dam N. Dam i (1 \\leq i \\leq N) is located between Mountain i and i+1 (Mountain N+1 is Mountain 1).\nWhen Mountain i (1 \\leq i \\leq N) receives 2x liters of rain, Dam i-1 and Dam i each accumulates x liters of water (Dam 0 is Dam N).\nOne day, each of the mountains received a non-negative even number of liters of rain.\nAs a result, Dam i (1 \\leq i \\leq N) accumulated a total of A_i liters of water.\nFind the amount of rain each of the mountains received. We can prove that the solution is unique under the constraints of this problem.\n-----Constraints-----\n - All values in input are integers.\n - 3 \\leq N \\leq 10^5-1\n - N is an odd number.\n - 0 \\leq A_i \\leq 10^9\n - The situation represented by input can occur when each of the mountains receives a non-negative even number of liters of rain.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 A_2... A_N\n-----Output-----\nPrint N integers representing the number of liters of rain Mountain 1, Mountain 2,..., Mountain N received, in this order.\n-----Sample Input-----\n3\n2 2 4\n-----Sample Output-----\n4 0 4\nIf we assume Mountain 1, 2, and 3 received 4, 0, and 4 liters of rain, respectively, it is consistent with this input, as follows:\n - Dam 1 should have accumulated \\frac{4}{2} + \\frac{0}{2} = 2 liters of water.\n - Dam 2 should have accumulated \\frac{0}{2} + \\frac{4}{2} = 2 liters of water.\n - Dam 3 should have accumulated \\frac{4}{2} + \\frac{4}{2} = 4 liters of water.\n\ndef",
        "answer": "def rain_amount(n, a):\n    dam = [0] * n\n    dam[0] = a[0]\n    dam[1] = a[1]\n    for i in range(2, n):\n        dam[i] = a[i] + max(dam[i - 1], dam[i - 2])\n    return dam",
        "difficulty": "interview"
    },
    {
        "task_id": 1433,
        "prompt": "Complete the Python function given the prompt below:Theater stage is a rectangular field of size n \u00d7 m. The director gave you the stage's plan which actors will follow. For each cell it is stated in the plan if there would be an actor in this cell or not.\nYou are to place a spotlight on the stage in some good position. The spotlight will project light in one of the four directions (if you look at the stage from above)\u00a0\u2014 left, right, up or down. Thus, the spotlight's position is a cell it is placed to and a direction it shines.\nA position is good if two conditions hold:   there is no actor in the cell the spotlight is placed to;  there is at least one actor in the direction the spotlight projects. \nCount the number of good positions for placing the spotlight. Two positions of spotlight are considered to be different if the location cells or projection direction differ.\n-----Input-----\nThe first line contains two positive integers n and m (1 \u2264 n, m \u2264 1000)\u00a0\u2014 the number of rows and the number of columns in the plan.\nThe next n lines contain m integers, 0 or 1 each\u00a0\u2014 the description of the plan. Integer 1, means there will be an actor in the corresponding cell, while 0 means the cell will remain empty. It is guaranteed that there is at least one actor in the plan.\n-----Output-----\nPrint one integer\u00a0\u2014 the number of good positions for placing the spotlight.\n-----Examples-----\nInput\n2 4\n0 1 0 0\n1 0 1 0\nOutput\n9\nInput\n4 4\n0 0 0 0\n1 0 0 1\n0 1 1 0\n0 1 0 0\nOutput\n20\n-----Note-----\nIn the first example the following positions are good:  the (1, 1) cell and right direction;  the (1, 1) cell and down direction;  the (1, 3) cell and left direction;  the (1, 3) cell and down direction;  the (1, 4) cell and left direction;  the (2, 2) cell and left direction;  the (2, 2) cell and up direction;  the (2, 2) and right direction;  the (2, 4) cell and left direction. \nTherefore, there are 9 good positions in this example.\n\ndef",
        "answer": "def spotlight(n, m, plan):\n    good_positions = 0\n    for i in range(n):\n        for j in range(m):\n            if plan[i][j] == 0:\n                if j == 0 or plan[i][j - 1] == 0:\n                    if i == 0 or plan[i - 1][j] == 0:\n                        good_positions += 1\n                if j == m - 1 or plan[i][j + 1] == 0:\n                    if i == 0 or plan[i - 1][j] == 0:\n                        good_positions += 1\n                if i == 0 or plan[i - 1][j] == 0:\n                    if j == 0 or plan[i][j - 1] == 0:\n                        good_positions += 1\n                if i == n - 1 or plan[i + 1][j] == 0:\n                    if j == 0 or plan[i][j - 1] == 0:\n                        good_positions += 1\n    return good_positions",
        "difficulty": "interview"
    },
    {
        "task_id": 1434,
        "prompt": "Complete the Python function given the prompt below:Let's define a forest as a non-directed acyclic graph (also without loops and parallel edges). One day Misha played with the forest consisting of n vertices. For each vertex v from 0 to n - 1 he wrote down two integers, degree_{v} and s_{v}, were the first integer is the number of vertices adjacent to vertex v, and the second integer is the XOR sum of the numbers of vertices adjacent to v (if there were no adjacent vertices, he wrote down 0). \nNext day Misha couldn't remember what graph he initially had. Misha has values degree_{v} and s_{v} left, though. Help him find the number of edges and the edges of the initial graph. It is guaranteed that there exists a forest that corresponds to the numbers written by Misha.\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 2^16), the number of vertices in the graph.\nThe i-th of the next lines contains numbers degree_{i} and s_{i} (0 \u2264 degree_{i} \u2264 n - 1, 0 \u2264 s_{i} < 2^16), separated by a space.\n-----Output-----\nIn the first line print number m, the number of edges of the graph.\nNext print m lines, each containing two distinct numbers, a and b (0 \u2264 a \u2264 n - 1, 0 \u2264 b \u2264 n - 1), corresponding to edge (a, b).\nEdges can be printed in any order; vertices of the edge can also be printed in any order.\n-----Examples-----\nInput\n3\n2 3\n1 0\n1 0\nOutput\n2\n1 0\n2 0\nInput\n2\n1 1\n1 0\nOutput\n1\n0 1\n-----Note-----\nThe XOR sum of numbers is the result of bitwise adding numbers modulo 2. This operation exists in many modern programming languages. For example, in languages C++, Java and Python it is represented as \"^\", and in Pascal \u2014 as \"xor\".\n\ndef",
        "answer": "def XOR(a, b):\n    return a ^ b",
        "difficulty": "interview"
    },
    {
        "task_id": 1435,
        "prompt": "Complete the Python function given the prompt below:Inna loves digit 9 very much. That's why she asked Dima to write a small number consisting of nines. But Dima must have misunderstood her and he wrote a very large number a, consisting of digits from 1 to 9.\nInna wants to slightly alter the number Dima wrote so that in the end the number contained as many digits nine as possible. In one move, Inna can choose two adjacent digits in a number which sum equals 9 and replace them by a single digit 9.\nFor instance, Inna can alter number 14545181 like this: 14545181 \u2192 1945181 \u2192 194519 \u2192 19919. Also, she can use this method to transform number 14545181 into number 19991. Inna will not transform it into 149591 as she can get numbers 19919 and 19991 which contain more digits nine.\nDima is a programmer so he wants to find out how many distinct numbers containing as many digits nine as possible Inna can get from the written number. Help him with this challenging task.\n-----Input-----\nThe first line of the input contains integer a (1 \u2264 a \u2264 10^100000). Number a doesn't have any zeroes.\n-----Output-----\nIn a single line print a single integer \u2014 the answer to the problem. It is guaranteed that the answer to the problem doesn't exceed 2^63 - 1.\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier.\n-----Examples-----\nInput\n369727\nOutput\n2\nInput\n123456789987654321\nOutput\n1\nInput\n1\nOutput\n1\n-----Note-----\nNotes to the samples\nIn the first sample Inna can get the following numbers: 369727 \u2192 99727 \u2192 9997, 369727 \u2192 99727 \u2192 9979.\nIn the second sample, Inna can act like this: 123456789987654321 \u2192 12396789987654321 \u2192 1239678998769321.\n\ndef",
        "answer": "def nine_nine(a):\n    n = len(str(a))\n    count = 0\n    for i in range(n):\n        if str(a)[i] == '9':\n            count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 1436,
        "prompt": "Complete the Python function given the prompt below:The police department of your city has just started its journey. Initially, they don\u2019t have any manpower. So, they started hiring new recruits in groups.\nMeanwhile, crimes keeps occurring within the city. One member of the police force can investigate only one crime during his/her lifetime.\nIf there is no police officer free (isn't busy with crime) during the occurrence of a crime, it will go untreated.\nGiven the chronological order of crime occurrences and recruit hirings, find the number of crimes which will go untreated.\n-----Input-----\nThe first line of input will contain an integer n\u00a0(1 \u2264 n \u2264 10^5), the number of events. The next line will contain n space-separated integers.\nIf the integer is -1 then it means a crime has occurred. Otherwise, the integer will be positive, the number of officers recruited together at that time. No more than 10 officers will be recruited at a time.\n-----Output-----\nPrint a single integer, the number of crimes which will go untreated.\n-----Examples-----\nInput\n3\n-1 -1 1\nOutput\n2\nInput\n8\n1 -1 1 -1 -1 1 1 1\nOutput\n1\nInput\n11\n-1 -1 2 -1 -1 -1 -1 -1 -1 -1 -1\nOutput\n8\n-----Note-----\nLets consider the second example:  Firstly one person is hired.  Then crime appears, the last hired person will investigate this crime.  One more person is hired.  One more crime appears, the last hired person will investigate this crime.  Crime appears. There is no free policeman at the time, so this crime will go untreated.  One more person is hired.  One more person is hired.  One more person is hired. \nThe answer is one, as one crime (on step 5) will go untreated.\n\ndef",
        "answer": "def solve(arr):\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == -1:\n            count += 1\n        else:\n            count = 0\n        if count > 1:\n            return False\n    return True",
        "difficulty": "interview"
    },
    {
        "task_id": 1437,
        "prompt": "Complete the Python function given the prompt below:While walking down the street Vanya saw a label \"Hide&Seek\". Because he is a programmer, he used & as a bitwise AND for these two words represented as a integers in base 64 and got new word. Now Vanya thinks of some string s and wants to know the number of pairs of words of length |s| (length of s), such that their bitwise AND is equal to s. As this number can be large, output it modulo 10^9 + 7.\nTo represent the string as a number in numeral system with base 64 Vanya uses the following rules:  digits from '0' to '9' correspond to integers from 0 to 9;  letters from 'A' to 'Z' correspond to integers from 10 to 35;  letters from 'a' to 'z' correspond to integers from 36 to 61;  letter '-' correspond to integer 62;  letter '_' correspond to integer 63. \n-----Input-----\nThe only line of the input contains a single word s (1 \u2264 |s| \u2264 100 000), consisting of digits, lowercase and uppercase English letters, characters '-' and '_'.\n-----Output-----\nPrint a single integer\u00a0\u2014 the number of possible pairs of words, such that their bitwise AND is equal to string s modulo 10^9 + 7.\n-----Examples-----\nInput\nz\nOutput\n3\nInput\nV_V\nOutput\n9\nInput\nCodeforces\nOutput\n130653412\n-----Note-----\nFor a detailed definition of bitwise AND we recommend to take a look in the corresponding article in Wikipedia.\nIn the first sample, there are 3 possible solutions:   z&_ = 61&63 = 61 = z  _&z = 63&61 = 61 = z  z&z = 61&61 = 61 = z\n\ndef",
        "answer": "def hide_seek(s):\n    return sum(s.count(chr(i)) & 1 for i in range(65, 64 + 26))",
        "difficulty": "interview"
    },
    {
        "task_id": 1438,
        "prompt": "Complete the Python function given the prompt below:This problem is given in two versions that differ only by constraints. If you can solve this problem in large constraints, then you can just write a single solution to the both versions. If you find the problem too difficult in large constraints, you can write solution to the simplified version only.\nWaking up in the morning, Apollinaria decided to bake cookies. To bake one cookie, she needs n ingredients, and for each ingredient she knows the value a_{i}\u00a0\u2014 how many grams of this ingredient one needs to bake a cookie. To prepare one cookie Apollinaria needs to use all n ingredients.\nApollinaria has b_{i} gram of the i-th ingredient. Also she has k grams of a magic powder. Each gram of magic powder can be turned to exactly 1 gram of any of the n ingredients and can be used for baking cookies.\nYour task is to determine the maximum number of cookies, which Apollinaria is able to bake using the ingredients that she has and the magic powder.\n-----Input-----\nThe first line of the input contains two positive integers n and k (1 \u2264 n, k \u2264 1000)\u00a0\u2014 the number of ingredients and the number of grams of the magic powder.\nThe second line contains the sequence a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 1000), where the i-th number is equal to the number of grams of the i-th ingredient, needed to bake one cookie.\nThe third line contains the sequence b_1, b_2,..., b_{n} (1 \u2264 b_{i} \u2264 1000), where the i-th number is equal to the number of grams of the i-th ingredient, which Apollinaria has.\n-----Output-----\nPrint the maximum number of cookies, which Apollinaria will be able to bake using the ingredients that she has and the magic powder.\n-----Examples-----\nInput\n3 1\n2 1 4\n11 3 16\nOutput\n4\nInput\n4 3\n4 3 5 6\n11 12 14 20\nOutput\n3\n-----Note-----\nIn the first sample it is profitably for Apollinaria to make the existing 1 gram of her magic powder to ingredient with the index 2, then Apollinaria will be able to bake 4 cookies.\nIn the second sample Apollinaria should turn 1 gram of magic powder to ingredient with the index 1 and 1 gram of magic powder to ingredient with the index 3. Then Apollinaria will be able to bake 3 cookies. The remaining 1 gram of the magic powder can be left, because it can't be used to increase the answer.\n\ndef",
        "answer": "def max_cookies(ingredients, magic_powder):\n    return min(ingredients) + min(magic_powder)",
        "difficulty": "interview"
    },
    {
        "task_id": 1439,
        "prompt": "Complete the Python function given the prompt below:You are given a sequence of numbers a_1, a_2,..., a_{n}, and a number m.\nCheck if it is possible to choose a non-empty subsequence a_{i}_{j} such that the sum of numbers in this subsequence is divisible by m.\n-----Input-----\nThe first line contains two numbers, n and m (1 \u2264 n \u2264 10^6, 2 \u2264 m \u2264 10^3) \u2014 the size of the original sequence and the number such that sum should be divisible by it.\nThe second line contains n integers a_1, a_2,..., a_{n} (0 \u2264 a_{i} \u2264 10^9).\n-----Output-----\nIn the single line print either \"YES\" (without the quotes) if there exists the sought subsequence, or \"NO\" (without the quotes), if such subsequence doesn't exist.\n-----Examples-----\nInput\n3 5\n1 2 3\nOutput\nYES\nInput\n1 6\n5\nOutput\nNO\nInput\n4 6\n3 1 1 3\nOutput\nYES\nInput\n6 6\n5 5 5 5 5 5\nOutput\nYES\n-----Note-----\nIn the first sample test you can choose numbers 2 and 3, the sum of which is divisible by 5.\nIn the second sample test the single non-empty subsequence of numbers is a single number 5. Number 5 is not divisible by 6, that is, the sought subsequence doesn't exist.\nIn the third sample test you need to choose two numbers 3 on the ends.\nIn the fourth sample test you can take the whole subsequence.\n\ndef",
        "answer": "def is_divisible(n, m):\n    a = [int(i) for i in input().split()]\n    s = sum(a)\n    if s % m == 0:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "difficulty": "interview"
    },
    {
        "task_id": 1440,
        "prompt": "Complete the Python function given the prompt below:Pavel has several sticks with lengths equal to powers of two.\nHe has $a_0$ sticks of length $2^0 = 1$, $a_1$ sticks of length $2^1 = 2$,..., $a_{n-1}$ sticks of length $2^{n-1}$. \nPavel wants to make the maximum possible number of triangles using these sticks. The triangles should have strictly positive area, each stick can be used in at most one triangle.\nIt is forbidden to break sticks, and each triangle should consist of exactly three sticks.\nFind the maximum possible number of triangles.\n-----Input-----\nThe first line contains a single integer $n$ ($1 \\leq n \\leq 300\\,000$)\u00a0\u2014 the number of different lengths of sticks.\nThe second line contains $n$ integers $a_0$, $a_1$,..., $a_{n-1}$ ($1 \\leq a_i \\leq 10^9$), where $a_i$ is the number of sticks with the length equal to $2^i$.\n-----Output-----\nPrint a single integer\u00a0\u2014 the maximum possible number of non-degenerate triangles that Pavel can make.\n-----Examples-----\nInput\n5\n1 2 2 2 2\nOutput\n3\nInput\n3\n1 1 1\nOutput\n0\nInput\n3\n3 3 3\nOutput\n3\n-----Note-----\nIn the first example, Pavel can, for example, make this set of triangles (the lengths of the sides of the triangles are listed): $(2^0, 2^4, 2^4)$, $(2^1, 2^3, 2^3)$, $(2^1, 2^2, 2^2)$.\nIn the second example, Pavel cannot make a single triangle.\nIn the third example, Pavel can, for example, create this set of triangles (the lengths of the sides of the triangles are listed): $(2^0, 2^0, 2^0)$, $(2^1, 2^1, 2^1)$, $(2^2, 2^2, 2^2)$.\n\ndef",
        "answer": "def triangles(sticks):\n    sticks.sort()\n    sticks.reverse()\n    n = len(sticks)\n    dp = [0] * n\n    dp[0] = sticks[0]\n    dp[1] = sticks[0] + sticks[1]\n    dp[2] = sticks[0] + sticks[1] + sticks[2]\n    for i in range(3, n):\n        dp[i] = sticks[i] + sticks[i - 1] + max(dp[i - 3], dp[i - 2])\n    return dp[n - 1]",
        "difficulty": "interview"
    },
    {
        "task_id": 1441,
        "prompt": "Complete the Python function given the prompt below:Smart Beaver decided to be not only smart, but also a healthy beaver! And so he began to attend physical education classes at school X. In this school, physical education has a very creative teacher. One of his favorite warm-up exercises is throwing balls. Students line up. Each one gets a single ball in the beginning. The balls are numbered from 1 to n (by the demand of the inventory commission). [Image]  Figure 1. The initial position for n = 5.  \nAfter receiving the balls the students perform the warm-up exercise. The exercise takes place in a few throws. For each throw the teacher chooses any two arbitrary different students who will participate in it. The selected students throw their balls to each other. Thus, after each throw the students remain in their positions, and the two balls are swapped. [Image]  Figure 2. The example of a throw.  \nIn this case there was a throw between the students, who were holding the 2-nd and the 4-th balls. Since the warm-up has many exercises, each of them can only continue for little time. Therefore, for each student we know the maximum number of throws he can participate in. For this lessons maximum number of throws will be 1 or 2.\nNote that after all phases of the considered exercise any ball can end up with any student. Smart Beaver decided to formalize it and introduced the concept of the \"ball order\". The ball order is a sequence of n numbers that correspond to the order of balls in the line. The first number will match the number of the ball of the first from the left student in the line, the second number will match the ball of the second student, and so on. For example, in figure 2 the order of the balls was (1, 2, 3, 4, 5), and after the throw it was (1, 4, 3, 2, 5). Smart beaver knows the number of students and for each student he knows the maximum number of throws in which he can participate. And now he is wondering: what is the number of distinct ways of ball orders by the end of the exercise.\n-----Input-----\nThe first line contains a single number n \u2014 the number of students in the line and the number of balls. The next line contains exactly n space-separated integers. Each number corresponds to a student in the line (the i-th number corresponds to the i-th from the left student in the line) and shows the number of throws he can participate in.\nThe input limits for scoring 30 points are (subproblem D1):   1 \u2264 n \u2264 10. \nThe input limits for scoring 70 points are (subproblems D1+D2):   1 \u2264 n \u2264 500. \nThe input limits for scoring 100 points are (subproblems D1+D2+D3):   1 \u2264 n \u2264 1000000. \n-----Output-----\nThe output should contain a single integer \u2014 the number of variants of ball orders after the warm up exercise is complete. As the number can be rather large, print it modulo 1000000007 (10^9 + 7).\n-----Examples-----\nInput\n5\n1 2 2 1 2\nOutput\n120\nInput\n8\n1 2 2 1 2 1 1 2\nOutput\n16800\n\ndef",
        "answer": "def count_variants(n, balls):\n    if n == 1:\n        return 1\n    if n == 2:\n        return balls[0] * balls[1]\n    return count_variants(n - 1, balls) + count_variants(n - 2, balls)",
        "difficulty": "interview"
    },
    {
        "task_id": 1442,
        "prompt": "Complete the Python function given the prompt below:In this task you need to process a set of stock exchange orders and use them to create order book.\nAn order is an instruction of some participant to buy or sell stocks on stock exchange. The order number i has price p_{i}, direction d_{i} \u2014 buy or sell, and integer q_{i}. This means that the participant is ready to buy or sell q_{i} stocks at price p_{i} for one stock. A value q_{i} is also known as a volume of an order.\nAll orders with the same price p and direction d are merged into one aggregated order with price p and direction d. The volume of such order is a sum of volumes of the initial orders.\nAn order book is a list of aggregated orders, the first part of which contains sell orders sorted by price in descending order, the second contains buy orders also sorted by price in descending order.\nAn order book of depth s contains s best aggregated orders for each direction. A buy order is better if it has higher price and a sell order is better if it has lower price. If there are less than s aggregated orders for some direction then all of them will be in the final order book.\nYou are given n stock exhange orders. Your task is to print order book of depth s for these orders.\n-----Input-----\nThe input starts with two positive integers n and s (1 \u2264 n \u2264 1000, 1 \u2264 s \u2264 50), the number of orders and the book depth.\nNext n lines contains a letter d_{i} (either 'B' or 'S'), an integer p_{i} (0 \u2264 p_{i} \u2264 10^5) and an integer q_{i} (1 \u2264 q_{i} \u2264 10^4) \u2014 direction, price and volume respectively. The letter 'B' means buy, 'S' means sell. The price of any sell order is higher than the price of any buy order.\n-----Output-----\nPrint no more than 2s lines with aggregated orders from order book of depth s. The output format for orders should be the same as in input.\n-----Examples-----\nInput\n6 2\nB 10 3\nS 50 2\nS 40 1\nS 50 6\nB 20 4\nB 25 10\nOutput\nS 50 8\nS 40 1\nB 25 10\nB 20 4\n-----Note-----\nDenote (x, y) an order with price x and volume y. There are 3 aggregated buy orders (10, 3), (20, 4), (25, 10) and two sell orders (50, 8), (40, 1) in the sample.\nYou need to print no more than two best orders for each direction, so you shouldn't print the order (10 3) having the worst price among buy orders.\n\ndef",
        "answer": "def order_book(n, s):\n    # Write your code here\n    buy_orders = []\n    sell_orders = []\n    for i in range(n):\n        if orders[i][0] == 'B':\n            buy_orders.append((orders[i][1], orders[i][2]))\n        else:\n            sell_orders.append((orders[i][1], orders[i][2]))\n    buy_orders.sort(reverse=True)\n    sell_orders.sort(reverse=True)\n    for i in range(s):\n        if len(buy_orders) > i:\n            print(buy_orders[i][0], buy_orders[i][1])\n        if len(sell_orders) > i:\n            print(sell_orders[i][0], sell_orders[i][1])",
        "difficulty": "interview"
    },
    {
        "task_id": 1443,
        "prompt": "Complete the Python function given the prompt below:Bob is a duck. He wants to get to Alice's nest, so that those two can duck! [Image] Duck is the ultimate animal! (Image courtesy of See Bang) \nThe journey can be represented as a straight line, consisting of $n$ segments. Bob is located to the left of the first segment, while Alice's nest is on the right of the last segment. Each segment has a length in meters, and also terrain type: grass, water or lava. \nBob has three movement types: swimming, walking and flying. He can switch between them or change his direction at any point in time (even when he is located at a non-integer coordinate), and doing so doesn't require any extra time. Bob can swim only on the water, walk only on the grass and fly over any terrain. Flying one meter takes $1$ second, swimming one meter takes $3$ seconds, and finally walking one meter takes $5$ seconds.\nBob has a finite amount of energy, called stamina. Swimming and walking is relaxing for him, so he gains $1$ stamina for every meter he walks or swims. On the other hand, flying is quite tiring, and he spends $1$ stamina for every meter flown. Staying in place does not influence his stamina at all. Of course, his stamina can never become negative. Initially, his stamina is zero.\nWhat is the shortest possible time in which he can reach Alice's nest? \n-----Input-----\nThe first line contains a single integer $n$\u00a0($1 \\leq n \\leq 10^5$)\u00a0\u2014 the number of segments of terrain. \nThe second line contains $n$ integers $l_1, l_2, \\dots, l_n$\u00a0($1 \\leq l_i \\leq 10^{12}$). The $l_i$ represents the length of the $i$-th terrain segment in meters.\nThe third line contains a string $s$ consisting of $n$ characters \"G\", \"W\", \"L\", representing Grass, Water and Lava, respectively. \nIt is guaranteed that the first segment is not Lava.\n-----Output-----\nOutput a single integer $t$\u00a0\u2014 the minimum time Bob needs to reach Alice. \n-----Examples-----\nInput\n1\n10\nG\nOutput\n30\nInput\n2\n10 10\nWL\nOutput\n40\nInput\n2\n1 2\nWL\nOutput\n8\nInput\n3\n10 10 10\nGLW\nOutput\n80\n-----Note-----\nIn the first sample, Bob first walks $5$ meters in $25$ seconds. Then he flies the remaining $5$ meters in $5$ seconds.\nIn the second sample, Bob first swims $10$ meters in $30$ seconds. Then he flies over the patch of lava for $10$ seconds.\nIn the third sample, the water pond is much smaller. Bob first swims over the water pond, taking him $3$ seconds. However, he cannot fly over the lava just yet, as he only has one stamina while he needs two. So he swims back for half a meter, and then half a meter forward, taking him $3$ seconds in total. Now he has $2$ stamina, so he can spend $2$ seconds flying over the lava.\nIn the fourth sample, he walks for $50$ seconds, flies for $10$ seconds, swims for $15$ seconds, and finally flies for $5$ seconds.\n\ndef",
        "answer": "def shortest_time(l):\n    n = len(l)\n    dp = [[0 for _ in range(n)] for _ in range(3)]\n    dp[0][0] = l[0]\n    dp[1][0] = l[0]\n    dp[2][0] = l[0]\n    for i in range(1, n):\n        dp[0][i] = min(dp[0][i-1] + l[i], dp[1][i-1] + l[i], dp[2][i-1] + l[i])\n        dp[1][i] = min(dp[0][i-1] + l[i], dp[1][i-1] + l[i], dp[2][i-1] + l[i])\n        dp[2][i] = min(dp[0][i-1] + l[i], dp[1][i-1] + l[i], dp[2][i-1] + l[i])\n    return min(dp[0][n-1], dp[1][n-1], dp[2][n-1])",
        "difficulty": "interview"
    },
    {
        "task_id": 1444,
        "prompt": "Complete the Python function given the prompt below:Berland is going through tough times \u2014 the dirt price has dropped and that is a blow to the country's economy. Everybody knows that Berland is the top world dirt exporter!\nThe President of Berland was forced to leave only k of the currently existing n subway stations.\nThe subway stations are located on a straight line one after another, the trains consecutively visit the stations as they move. You can assume that the stations are on the Ox axis, the i-th station is at point with coordinate x_{i}. In such case the distance between stations i and j is calculated by a simple formula |x_{i} - x_{j}|.\nCurrently, the Ministry of Transport is choosing which stations to close and which ones to leave. Obviously, the residents of the capital won't be too enthusiastic about the innovation, so it was decided to show the best side to the people. The Ministry of Transport wants to choose such k stations that minimize the average commute time in the subway!\nAssuming that the train speed is constant (it is a fixed value), the average commute time in the subway is calculated as the sum of pairwise distances between stations, divided by the number of pairs (that is $\\frac{n \\cdot(n - 1)}{2}$) and divided by the speed of the train.\nHelp the Minister of Transport to solve this difficult problem. Write a program that, given the location of the stations selects such k stations that the average commute time in the subway is minimized.\n-----Input-----\nThe first line of the input contains integer n (3 \u2264 n \u2264 3\u00b710^5) \u2014 the number of the stations before the innovation. The second line contains the coordinates of the stations x_1, x_2,..., x_{n} ( - 10^8 \u2264 x_{i} \u2264 10^8). The third line contains integer k (2 \u2264 k \u2264 n - 1) \u2014 the number of stations after the innovation.\nThe station coordinates are distinct and not necessarily sorted.\n-----Output-----\nPrint a sequence of k distinct integers t_1, t_2,..., t_{k} (1 \u2264 t_{j} \u2264 n) \u2014 the numbers of the stations that should be left after the innovation in arbitrary order. Assume that the stations are numbered 1 through n in the order they are given in the input. The number of stations you print must have the minimum possible average commute time among all possible ways to choose k stations. If there are multiple such ways, you are allowed to print any of them.\n-----Examples-----\nInput\n3\n1 100 101\n2\nOutput\n2 3 \n-----Note-----\nIn the sample testcase the optimal answer is to destroy the first station (with x = 1). The average commute time will be equal to 1 in this way.\n\ndef",
        "answer": "def solution(n, x, k):\n    x.sort()\n    return x[k-1] - x[0]",
        "difficulty": "interview"
    },
    {
        "task_id": 1445,
        "prompt": "Complete the Python function given the prompt below:Young Timofey has a birthday today! He got kit of n cubes as a birthday present from his parents. Every cube has a number a_{i}, which is written on it. Timofey put all the cubes in a row and went to unpack other presents.\nIn this time, Timofey's elder brother, Dima reordered the cubes using the following rule. Suppose the cubes are numbered from 1 to n in their order. Dima performs several steps, on step i he reverses the segment of cubes from i-th to (n - i + 1)-th. He does this while i \u2264 n - i + 1.\nAfter performing the operations Dima went away, being very proud of himself. When Timofey returned to his cubes, he understood that their order was changed. Help Timofey as fast as you can and save the holiday\u00a0\u2014 restore the initial order of the cubes using information of their current location.\n-----Input-----\nThe first line contains single integer n (1 \u2264 n \u2264 2\u00b710^5)\u00a0\u2014 the number of cubes.\nThe second line contains n integers a_1, a_2,..., a_{n} ( - 10^9 \u2264 a_{i} \u2264 10^9), where a_{i} is the number written on the i-th cube after Dima has changed their order.\n-----Output-----\nPrint n integers, separated by spaces\u00a0\u2014 the numbers written on the cubes in their initial order.\nIt can be shown that the answer is unique.\n-----Examples-----\nInput\n7\n4 3 7 6 9 1 2\nOutput\n2 3 9 6 7 1 4\nInput\n8\n6 1 4 2 5 6 9 2\nOutput\n2 1 6 2 5 4 9 6\n-----Note-----\nConsider the first sample.  At the begining row was [2, 3, 9, 6, 7, 1, 4].  After first operation row was [4, 1, 7, 6, 9, 3, 2].  After second operation row was [4, 3, 9, 6, 7, 1, 2].  After third operation row was [4, 3, 7, 6, 9, 1, 2].  At fourth operation we reverse just middle element, so nothing has changed. The final row is [4, 3, 7, 6, 9, 1, 2]. So the answer for this case is row [2, 3, 9, 6, 7, 1, 4].\n\ndef",
        "answer": "def restore_order(cubes):\n    cubes.sort()\n    cubes.reverse()\n    return cubes",
        "difficulty": "interview"
    },
    {
        "task_id": 1446,
        "prompt": "Complete the Python function given the prompt below:Dima took up the biology of bacteria, as a result of his experiments, he invented k types of bacteria. Overall, there are n bacteria at his laboratory right now, and the number of bacteria of type i equals c_{i}. For convenience, we will assume that all the bacteria are numbered from 1 to n. The bacteria of type c_{i} are numbered from $(\\sum_{k = 1}^{i - 1} c_{k}) + 1$ to $\\sum_{k = 1}^{i} c_{k}$.\nWith the help of special equipment Dima can move energy from some bacteria into some other one. Of course, the use of such equipment is not free. Dima knows m ways to move energy from some bacteria to another one. The way with number i can be described with integers u_{i}, v_{i} and x_{i} mean that this way allows moving energy from bacteria with number u_{i} to bacteria with number v_{i} or vice versa for x_{i} dollars.\nDima's Chef (Inna) calls the type-distribution correct if there is a way (may be non-direct) to move energy from any bacteria of the particular type to any other bacteria of the same type (between any two bacteria of the same type) for zero cost.\nAs for correct type-distribution the cost of moving the energy depends only on the types of bacteria help Inna to determine is the type-distribution correct? If it is, print the matrix d with size k \u00d7 k. Cell d[i][j] of this matrix must be equal to the minimal possible cost of energy-moving from bacteria with type i to bacteria with type j.\n-----Input-----\nThe first line contains three integers n, m, k (1 \u2264 n \u2264 10^5;\u00a00 \u2264 m \u2264 10^5;\u00a01 \u2264 k \u2264 500). The next line contains k integers c_1, c_2,..., c_{k} (1 \u2264 c_{i} \u2264 n). Each of the next m lines contains three integers u_{i}, v_{i}, x_{i} (1 \u2264 u_{i}, v_{i} \u2264 10^5;\u00a00 \u2264 x_{i} \u2264 10^4). It is guaranteed that $\\sum_{i = 1}^{k} c_{i} = n$.\n-----Output-----\nIf Dima's type-distribution is correct, print string \u00abYes\u00bb, and then k lines: in the i-th line print integers d[i][1], d[i][2],..., d[i][k] (d[i][i] = 0). If there is no way to move energy from bacteria i to bacteria j appropriate d[i][j] must equal to -1. If the type-distribution isn't correct print \u00abNo\u00bb.\n-----Examples-----\nInput\n4 4 2\n1 3\n2 3 0\n3 4 0\n2 4 1\n2 1 2\nOutput\nYes\n0 2\n2 0\nInput\n3 1 2\n2 1\n1 2 0\nOutput\nYes\n0 -1\n-1 0\nInput\n3 2 2\n2 1\n1 2 0\n2 3 1\nOutput\nYes\n0 1\n1 0\nInput\n3 0 2\n1 2\nOutput\nNo\n\ndef",
        "answer": "def check_type_distribution(n, m, k, c):\n    # your code here\n    # c = [1, 2, 3]\n    # n = 4\n    # m = 2\n    # k = 2\n    # c = [1, 2, 3]\n    # n = 4\n    # m = 2\n    # k = 2\n    # c = [1, 2, 3]\n    # n = 4\n    # m = 2\n    # k = 2\n    # c = [1, 2, 3]\n    # n = 4\n    # m = 2\n    # k = 2\n    # c = [1, 2, 3]\n    # n = 4\n    # m = 2\n    # k = 2\n    # c = [1, 2, 3]\n    # n = 4\n    # m = 2\n    # k = 2\n    # c = [1, 2, 3]\n    # n = 4\n    # m = 2\n    # k = 2\n    # c = [1, 2, 3]\n    # n = 4\n    # m = 2\n    # k = 2\n    # c = [1, 2, 3]\n    # n = 4\n    # m = 2\n    # k = 2\n    # c = [1, 2, 3]\n    # n = 4\n    # m = 2\n    # k = 2\n    # c = [1, 2, 3]\n    # n = 4\n    # m = 2\n    # k = 2\n    # c = [1, 2, 3]\n    # n = 4\n    # m = 2\n    # k = 2\n    # c = [1, 2, 3]\n    # n = 4\n",
        "difficulty": "interview"
    },
    {
        "task_id": 1447,
        "prompt": "Complete the Python function given the prompt below:Alex enjoys performing magic tricks. He has a trick that requires a deck of n cards. He has m identical decks of n different cards each, which have been mixed together. When Alex wishes to perform the trick, he grabs n cards at random and performs the trick with those. The resulting deck looks like a normal deck, but may have duplicates of some cards.\nThe trick itself is performed as follows: first Alex allows you to choose a random card from the deck. You memorize the card and put it back in the deck. Then Alex shuffles the deck, and pulls out a card. If the card matches the one you memorized, the trick is successful.\nYou don't think Alex is a very good magician, and that he just pulls a card randomly from the deck. Determine the probability of the trick being successful if this is the case.\n-----Input-----\nFirst line of the input consists of two integers n and m (1 \u2264 n, m \u2264 1000), separated by space \u2014 number of cards in each deck, and number of decks.\n-----Output-----\nOn the only line of the output print one floating point number \u2013 probability of Alex successfully performing the trick. Relative or absolute error of your answer should not be higher than 10^{ - 6}.\n-----Examples-----\nInput\n2 2\nOutput\n0.6666666666666666\nInput\n4 4\nOutput\n0.4000000000000000\nInput\n1 2\nOutput\n1.0000000000000000\n-----Note-----\nIn the first sample, with probability $\\frac{1}{3}$ Alex will perform the trick with two cards with the same value from two different decks. In this case the trick is guaranteed to succeed.\nWith the remaining $\\frac{2}{3}$ probability he took two different cards, and the probability of pulling off the trick is $\\frac{1}{2}$.\nThe resulting probability is $\\frac{1}{3} \\times 1 + \\frac{2}{3} \\times \\frac{1}{2} = \\frac{2}{3}$\n\ndef",
        "answer": "def probability(n, m):\n    return 1 - (1 - (1 / m)) ** n",
        "difficulty": "interview"
    },
    {
        "task_id": 1448,
        "prompt": "Complete the Python function given the prompt below:Vasya owns a cornfield which can be defined with two integers $n$ and $d$. The cornfield can be represented as rectangle with vertices having Cartesian coordinates $(0, d), (d, 0), (n, n - d)$ and $(n - d, n)$.\n [Image] An example of a cornfield with $n = 7$ and $d = 2$. \nVasya also knows that there are $m$ grasshoppers near the field (maybe even inside it). The $i$-th grasshopper is at the point $(x_i, y_i)$. Vasya does not like when grasshoppers eat his corn, so for each grasshopper he wants to know whether its position is inside the cornfield (including the border) or outside.\nHelp Vasya! For each grasshopper determine if it is inside the field (including the border).\n-----Input-----\nThe first line contains two integers $n$ and $d$ ($1 \\le d < n \\le 100$).\nThe second line contains a single integer $m$ ($1 \\le m \\le 100$) \u2014 the number of grasshoppers.\nThe $i$-th of the next $m$ lines contains two integers $x_i$ and $y_i$ ($0 \\le x_i, y_i \\le n$) \u2014 position of the $i$-th grasshopper.\n-----Output-----\nPrint $m$ lines. The $i$-th line should contain \"YES\" if the position of the $i$-th grasshopper lies inside or on the border of the cornfield. Otherwise the $i$-th line should contain \"NO\".\nYou can print each letter in any case (upper or lower).\n-----Examples-----\nInput\n7 2\n4\n2 4\n4 1\n6 3\n4 5\nOutput\nYES\nNO\nNO\nYES\nInput\n8 7\n4\n4 4\n2 8\n8 1\n6 1\nOutput\nYES\nNO\nYES\nYES\n-----Note-----\nThe cornfield from the first example is pictured above. Grasshoppers with indices $1$ (coordinates $(2, 4)$) and $4$ (coordinates $(4, 5)$) are inside the cornfield.\nThe cornfield from the second example is pictured below. Grasshoppers with indices $1$ (coordinates $(4, 4)$), $3$ (coordinates $(8, 1)$) and $4$ (coordinates $(6, 1)$) are inside the cornfield.  [Image]\n\ndef",
        "answer": "def is_inside_cornfield(n, d, m, x, y):\n    # your code here\n    return \"YES\" if (0 <= x <= n and 0 <= y <= n - d) or (0 <= x <= n - d and 0 <= y <= n) else \"NO\"",
        "difficulty": "interview"
    },
    {
        "task_id": 1449,
        "prompt": "Complete the Python function given the prompt below:You are given a non-decreasing array of non-negative integers $a_1, a_2, \\ldots, a_n$. Also you are given a positive integer $k$.\nYou want to find $m$ non-decreasing arrays of non-negative integers $b_1, b_2, \\ldots, b_m$, such that:  The size of $b_i$ is equal to $n$ for all $1 \\leq i \\leq m$.  For all $1 \\leq j \\leq n$, $a_j = b_{1, j} + b_{2, j} + \\ldots + b_{m, j}$. In the other word, array $a$ is the sum of arrays $b_i$.  The number of different elements in the array $b_i$ is at most $k$ for all $1 \\leq i \\leq m$. \nFind the minimum possible value of $m$, or report that there is no possible $m$.\n-----Input-----\nThe first line contains one integer $t$ ($1 \\leq t \\leq 100$): the number of test cases.\nThe first line of each test case contains two integers $n$, $k$ ($1 \\leq n \\leq 100$, $1 \\leq k \\leq n$).\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\leq a_1 \\leq a_2 \\leq \\ldots \\leq a_n \\leq 100$, $a_n > 0$).\n-----Output-----\nFor each test case print a single integer: the minimum possible value of $m$. If there is no such $m$, print $-1$.\n-----Example-----\nInput\n6\n4 1\n0 0 0 1\n3 1\n3 3 3\n11 3\n0 1 2 2 3 3 3 4 4 4 4\n5 3\n1 2 3 4 5\n9 4\n2 2 3 5 7 11 13 13 17\n10 7\n0 1 1 2 3 3 4 5 5 6\nOutput\n-1\n1\n2\n2\n2\n1\n-----Note-----\nIn the first test case, there is no possible $m$, because all elements of all arrays should be equal to $0$. But in this case, it is impossible to get $a_4 = 1$ as the sum of zeros.\nIn the second test case, we can take $b_1 = [3, 3, 3]$. $1$ is the smallest possible value of $m$.\nIn the third test case, we can take $b_1 = [0, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2]$ and $b_2 = [0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2]$. It's easy to see, that $a_i = b_{1, i} + b_{2, i}$ for all $i$ and the number of different elements in $b_1$ and in $b_2$ is equal to $3$ (so it is at most $3$). It can be proven that $2$ is the smallest possible value of $m$.\n\ndef",
        "answer": "def min_m(n, k, a):\n    m = 0\n    for i in range(n):\n        if a[i] > k:\n            return -1\n        if a[i] == k:\n            m += 1\n    return m",
        "difficulty": "interview"
    },
    {
        "task_id": 1450,
        "prompt": "Complete the Python function given the prompt below:You are given a ternary string (it is a string which consists only of characters '0', '1' and '2').\nYou can swap any two adjacent (consecutive) characters '0' and '1' (i.e. replace \"01\" with \"10\" or vice versa) or any two adjacent (consecutive) characters '1' and '2' (i.e. replace \"12\" with \"21\" or vice versa).\nFor example, for string \"010210\" we can perform the following moves:   \"010210\" $\\rightarrow$ \"100210\";  \"010210\" $\\rightarrow$ \"001210\";  \"010210\" $\\rightarrow$ \"010120\";  \"010210\" $\\rightarrow$ \"010201\". \nNote than you cannot swap \"02\" $\\rightarrow$ \"20\" and vice versa. You cannot perform any other operations with the given string excluding described above.\nYou task is to obtain the minimum possible (lexicographically) string by using these swaps arbitrary number of times (possibly, zero).\nString $a$ is lexicographically less than string $b$ (if strings $a$ and $b$ have the same length) if there exists some position $i$ ($1 \\le i \\le |a|$, where $|s|$ is the length of the string $s$) such that for every $j < i$ holds $a_j = b_j$, and $a_i < b_i$.\n-----Input-----\nThe first line of the input contains the string $s$ consisting only of characters '0', '1' and '2', its length is between $1$ and $10^5$ (inclusive).\n-----Output-----\nPrint a single string \u2014 the minimum possible (lexicographically) string you can obtain by using the swaps described above arbitrary number of times (possibly, zero).\n-----Examples-----\nInput\n100210\nOutput\n001120\nInput\n11222121\nOutput\n11112222\nInput\n20\nOutput\n20\n\ndef",
        "answer": "def swap(s, i, j):\n    return s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:]",
        "difficulty": "interview"
    },
    {
        "task_id": 1451,
        "prompt": "Complete the Python function given the prompt below:Roma (a popular Russian name that means 'Roman') loves the Little Lvov Elephant's lucky numbers.\nLet us remind you that lucky numbers are positive integers whose decimal representation only contains lucky digits 4 and 7. For example, numbers 47, 744, 4 are lucky and 5, 17, 467 are not.\nRoma's got n positive integers. He wonders, how many of those integers have not more than k lucky digits? Help him, write the program that solves the problem.\n-----Input-----\nThe first line contains two integers n, k (1 \u2264 n, k \u2264 100). The second line contains n integers a_{i} (1 \u2264 a_{i} \u2264 10^9) \u2014 the numbers that Roma has. \nThe numbers in the lines are separated by single spaces.\n-----Output-----\nIn a single line print a single integer \u2014 the answer to the problem.\n-----Examples-----\nInput\n3 4\n1 2 4\nOutput\n3\nInput\n3 2\n447 44 77\nOutput\n2\n-----Note-----\nIn the first sample all numbers contain at most four lucky digits, so the answer is 3.\nIn the second sample number 447 doesn't fit in, as it contains more than two lucky digits. All other numbers are fine, so the answer is 2.\n\ndef",
        "answer": "def lucky_numbers(n, k):\n    count = 0\n    for i in range(n):\n        if len(str(a[i])) <= k:\n            count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 1452,
        "prompt": "Complete the Python function given the prompt below:Suppose there is a $h \\times w$ grid consisting of empty or full cells. Let's make some definitions:\n  $r_{i}$ is the number of consecutive full cells connected to the left side in the $i$-th row ($1 \\le i \\le h$). In particular, $r_i=0$ if the leftmost cell of the $i$-th row is empty.  $c_{j}$ is the number of consecutive full cells connected to the top end in the $j$-th column ($1 \\le j \\le w$). In particular, $c_j=0$ if the topmost cell of the $j$-th column is empty. \nIn other words, the $i$-th row starts exactly with $r_i$ full cells. Similarly, the $j$-th column starts exactly with $c_j$ full cells.\n [Image] These are the $r$ and $c$ values of some $3 \\times 4$ grid. Black cells are full and white cells are empty. \nYou have values of $r$ and $c$. Initially, all cells are empty. Find the number of ways to fill grid cells to satisfy values of $r$ and $c$. Since the answer can be very large, find the answer modulo $1000000007\\,(10^{9} + 7)$. In other words, find the remainder after division of the answer by $1000000007\\,(10^{9} + 7)$.\n-----Input-----\nThe first line contains two integers $h$ and $w$ ($1 \\le h, w \\le 10^{3}$)\u00a0\u2014 the height and width of the grid.\nThe second line contains $h$ integers $r_{1}, r_{2}, \\ldots, r_{h}$ ($0 \\le r_{i} \\le w$)\u00a0\u2014 the values of $r$.\nThe third line contains $w$ integers $c_{1}, c_{2}, \\ldots, c_{w}$ ($0 \\le c_{j} \\le h$)\u00a0\u2014 the values of $c$.\n-----Output-----\nPrint the answer modulo $1000000007\\,(10^{9} + 7)$.\n-----Examples-----\nInput\n3 4\n0 3 1\n0 2 3 0\nOutput\n2\nInput\n1 1\n0\n1\nOutput\n0\nInput\n19 16\n16 16 16 16 15 15 0 5 0 4 9 9 1 4 4 0 8 16 12\n6 12 19 15 8 6 19 19 14 6 9 16 10 11 15 4\nOutput\n797922655\n-----Note-----\nIn the first example, this is the other possible case.\n [Image] \nIn the second example, it's impossible to make a grid to satisfy such $r$, $c$ values.\nIn the third example, make sure to print answer modulo $(10^9 + 7)$.\n\ndef",
        "answer": "def grid(h, w, r, c):\n    if h == 1 and w == 1:\n        return 0\n    if h == 1:\n        return c[0]\n    if w == 1:\n        return r[0]\n    return (r[0] * w + c[0]) * h + r[1] * w + c[1]",
        "difficulty": "interview"
    },
    {
        "task_id": 1453,
        "prompt": "Complete the Python function given the prompt below:Tsumugi brought $n$ delicious sweets to the Light Music Club. They are numbered from $1$ to $n$, where the $i$-th sweet has a sugar concentration described by an integer $a_i$.\nYui loves sweets, but she can eat at most $m$ sweets each day for health reasons.\nDays are $1$-indexed (numbered $1, 2, 3, \\ldots$). Eating the sweet $i$ at the $d$-th day will cause a sugar penalty of $(d \\cdot a_i)$, as sweets become more sugary with time. A sweet can be eaten at most once.\nThe total sugar penalty will be the sum of the individual penalties of each sweet eaten.\nSuppose that Yui chooses exactly $k$ sweets, and eats them in any order she wants. What is the minimum total sugar penalty she can get?\nSince Yui is an undecided girl, she wants you to answer this question for every value of $k$ between $1$ and $n$.\n-----Input-----\nThe first line contains two integers $n$ and $m$ ($1 \\le m \\le n \\le 200\\ 000$).\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 200\\ 000$).\n-----Output-----\nYou have to output $n$ integers $x_1, x_2, \\ldots, x_n$ on a single line, separed by spaces, where $x_k$ is the minimum total sugar penalty Yui can get if she eats exactly $k$ sweets.\n-----Examples-----\nInput\n9 2\n6 19 3 4 4 2 6 7 8\nOutput\n2 5 11 18 30 43 62 83 121\nInput\n1 1\n7\nOutput\n7\n-----Note-----\nLet's analyze the answer for $k = 5$ in the first example. Here is one of the possible ways to eat $5$ sweets that minimize total sugar penalty:  Day $1$: sweets $1$ and $4$  Day $2$: sweets $5$ and $3$  Day $3$ : sweet $6$ \nTotal penalty is $1 \\cdot a_1 + 1 \\cdot a_4 + 2 \\cdot a_5 + 2 \\cdot a_3 + 3 \\cdot a_6 = 6 + 4 + 8 + 6 + 6 = 30$. We can prove that it's the minimum total sugar penalty Yui can achieve if she eats $5$ sweets, hence $x_5 = 30$.\n\ndef",
        "answer": "def solve(n, m, a):\n    a.sort()\n    ans = 0\n    for i in range(n):\n        ans += (i + 1) * a[i]\n    return ans",
        "difficulty": "interview"
    },
    {
        "task_id": 1454,
        "prompt": "Complete the Python function given the prompt below:In this problem, a $n \\times m$ rectangular matrix $a$ is called increasing if, for each row of $i$, when go from left to right, the values strictly increase (that is, $a_{i,1}<a_{i,2}<\\dots<a_{i,m}$) and for each column $j$, when go from top to bottom, the values strictly increase (that is, $a_{1,j}<a_{2,j}<\\dots<a_{n,j}$).\nIn a given matrix of non-negative integers, it is necessary to replace each value of $0$ with some positive integer so that the resulting matrix is increasing and the sum of its elements is maximum, or find that it is impossible.\nIt is guaranteed that in a given value matrix all values of $0$ are contained only in internal cells (that is, not in the first or last row and not in the first or last column).\n-----Input-----\nThe first line contains integers $n$ and $m$ ($3 \\le n, m \\le 500$) \u2014 the number of rows and columns in the given matrix $a$.\nThe following lines contain $m$ each of non-negative integers \u2014 the values in the corresponding row of the given matrix: $a_{i,1}, a_{i,2}, \\dots, a_{i,m}$ ($0 \\le a_{i,j} \\le 8000$).\nIt is guaranteed that for all $a_{i,j}=0$, $1 < i < n$ and $1 < j < m$ are true.\n-----Output-----\nIf it is possible to replace all zeros with positive numbers so that the matrix is increasing, print the maximum possible sum of matrix elements. Otherwise, print -1.\n-----Examples-----\nInput\n4 5\n1 3 5 6 7\n3 0 7 0 9\n5 0 0 0 10\n8 9 10 11 12\nOutput\n144\nInput\n3 3\n1 2 3\n2 0 4\n4 5 6\nOutput\n30\nInput\n3 3\n1 2 3\n3 0 4\n4 5 6\nOutput\n-1\nInput\n3 3\n1 2 3\n2 3 4\n3 4 2\nOutput\n-1\n-----Note-----\nIn the first example, the resulting matrix is as follows: \n1 3 5 6 7\n3 6 7 8 9\n5 7 8 9 10\n8 9 10 11 12\nIn the second example, the value $3$ must be put in the middle cell.\nIn the third example, the desired resultant matrix does not exist.\n\ndef",
        "answer": "def max_sum(a):\n    n, m = len(a), len(a[0])\n    dp = [[0] * m for _ in range(n)]\n    dp[0][0] = a[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i - 1][0] + a[i][0]\n    for j in range(1, m):\n        dp[0][j] = dp[0][j - 1] + a[0][j]\n    for i in range(1, n):\n        for j in range(1, m):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + a[i][j]\n    return dp[n - 1][m - 1]",
        "difficulty": "interview"
    },
    {
        "task_id": 1455,
        "prompt": "Complete the Python function given the prompt below:Nauuo is a girl who loves playing chess.\nOne day she invented a game by herself which needs $n$ chess pieces to play on a $m\\times m$ chessboard. The rows and columns are numbered from $1$ to $m$. We denote a cell on the intersection of the $r$-th row and $c$-th column as $(r,c)$.\nThe game's goal is to place $n$ chess pieces numbered from $1$ to $n$ on the chessboard, the $i$-th piece lies on $(r_i,\\,c_i)$, while the following rule is satisfied: for all pairs of pieces $i$ and $j$, $|r_i-r_j|+|c_i-c_j|\\ge|i-j|$. Here $|x|$ means the absolute value of $x$.\nHowever, Nauuo discovered that sometimes she couldn't find a solution because the chessboard was too small.\nShe wants to find the smallest chessboard on which she can put $n$ pieces according to the rules.\nShe also wonders how to place the pieces on such a chessboard. Can you help her?\n-----Input-----\nThe only line contains a single integer $n$ ($1\\le n\\le 1000$) \u2014 the number of chess pieces for the game.\n-----Output-----\nThe first line contains a single integer \u2014 the minimum value of $m$, where $m$ is the length of sides of the suitable chessboard.\nThe $i$-th of the next $n$ lines contains two integers $r_i$ and $c_i$ ($1\\le r_i,c_i\\le m$) \u2014 the coordinates of the $i$-th chess piece.\nIf there are multiple answers, print any.\n-----Examples-----\nInput\n2\nOutput\n2\n1 1\n1 2\nInput\n4\nOutput\n3\n1 1\n1 3\n3 1\n3 3\n-----Note-----\nIn the first example, you can't place the two pieces on a $1\\times1$ chessboard without breaking the rule. But you can place two pieces on a $2\\times2$ chessboard like this:\n[Image]\nIn the second example, you can't place four pieces on a $2\\times2$ chessboard without breaking the rule. For example, if you place the pieces like this:\n[Image]\nthen $|r_1-r_3|+|c_1-c_3|=|1-2|+|1-1|=1$, $|1-3|=2$, $1<2$; and $|r_1-r_4|+|c_1-c_4|=|1-2|+|1-2|=2$, $|1-4|=3$, $2<3$. It doesn't satisfy the rule.\nHowever, on a $3\\times3$ chessboard, you can place four pieces like this:\n[Image]\n\ndef",
        "answer": "def chessboard(n):\n    m = 1\n    while n > 0:\n        m += 1\n        n -= m % 2\n    return m",
        "difficulty": "interview"
    },
    {
        "task_id": 1456,
        "prompt": "Complete the Python function given the prompt below:Igor has been into chess for a long time and now he is sick of the game by the ordinary rules. He is going to think of new rules of the game and become world famous.\nIgor's chessboard is a square of size n \u00d7 n cells. Igor decided that simple rules guarantee success, that's why his game will have only one type of pieces. Besides, all pieces in his game are of the same color. The possible moves of a piece are described by a set of shift vectors. The next passage contains a formal description of available moves.\nLet the rows of the board be numbered from top to bottom and the columns be numbered from left to right from 1 to n. Let's assign to each square a pair of integers (x, y)\u00a0\u2014 the number of the corresponding column and row. Each of the possible moves of the piece is defined by a pair of integers (dx, dy); using this move, the piece moves from the field (x, y) to the field (x + dx, y + dy). You can perform the move if the cell (x + dx, y + dy) is within the boundaries of the board and doesn't contain another piece. Pieces that stand on the cells other than (x, y) and (x + dx, y + dy) are not important when considering the possibility of making the given move (for example, like when a knight moves in usual chess).\nIgor offers you to find out what moves his chess piece can make. He placed several pieces on the board and for each unoccupied square he told you whether it is attacked by any present piece (i.e. whether some of the pieces on the field can move to that cell). Restore a possible set of shift vectors of the piece, or else determine that Igor has made a mistake and such situation is impossible for any set of shift vectors.\n-----Input-----\nThe first line contains a single integer n (1 \u2264 n \u2264 50).\nThe next n lines contain n characters each describing the position offered by Igor. The j-th character of the i-th string can have the following values: o \u2014 in this case the field (i, j) is occupied by a piece and the field may or may not be attacked by some other piece; x \u2014 in this case field (i, j) is attacked by some piece;. \u2014 in this case field (i, j) isn't attacked by any piece.\nIt is guaranteed that there is at least one piece on the board.\n-----Output-----\nIf there is a valid set of moves, in the first line print a single word 'YES' (without the quotes). Next, print the description of the set of moves of a piece in the form of a (2n - 1) \u00d7 (2n - 1) board, the center of the board has a piece and symbols 'x' mark cells that are attacked by it, in a format similar to the input. See examples of the output for a full understanding of the format. If there are several possible answers, print any of them.\nIf a valid set of moves does not exist, print a single word 'NO'.\n-----Examples-----\nInput\n5\noxxxx\nx...x\nx...x\nx...x\nxxxxo\nOutput\nYES\n....x....\n....x....\n....x....\n....x....\nxxxxoxxxx\n....x....\n....x....\n....x....\n....x....\nInput\n6\n.x.x..\nx.x.x.\n.xo..x\nx..ox.\n.x.x.x\n..x.x.\nOutput\nYES\n...........\n...........\n...........\n....x.x....\n...x...x...\n.....o.....\n...x...x...\n....x.x....\n...........\n...........\n...........\nInput\n3\no.x\noxx\no.x\nOutput\nNO\n-----Note-----\nIn the first sample test the piece is a usual chess rook, and in the second sample test the piece is a usual chess knight.\n\ndef",
        "answer": "def chess_rook(n, board):\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 'x':\n                if j + 1 < n and board[i][j + 1] == 'x':\n                    return 'NO'\n                if i + 1 < n and board[i + 1][j] == 'x':\n                    return 'NO'\n    return 'YES'",
        "difficulty": "interview"
    },
    {
        "task_id": 1457,
        "prompt": "Complete the Python function given the prompt below:A long time ago, in a galaxy far far away two giant IT-corporations Pineapple and Gogol continue their fierce competition. Crucial moment is just around the corner: Gogol is ready to release it's new tablet Lastus 3000.\nThis new device is equipped with specially designed artificial intelligence (AI). Employees of Pineapple did their best to postpone the release of Lastus 3000 as long as possible. Finally, they found out, that the name of the new artificial intelligence is similar to the name of the phone, that Pineapple released 200 years ago. As all rights on its name belong to Pineapple, they stand on changing the name of Gogol's artificial intelligence.\nPineapple insists, that the name of their phone occurs in the name of AI as a substring. Because the name of technology was already printed on all devices, the Gogol's director decided to replace some characters in AI name with \"#\". As this operation is pretty expensive, you should find the minimum number of characters to replace with \"#\", such that the name of AI doesn't contain the name of the phone as a substring.\nSubstring is a continuous subsequence of a string.\n-----Input-----\nThe first line of the input contains the name of AI designed by Gogol, its length doesn't exceed 100 000 characters. Second line contains the name of the phone released by Pineapple 200 years ago, its length doesn't exceed 30. Both string are non-empty and consist of only small English letters.\n-----Output-----\nPrint the minimum number of characters that must be replaced with \"#\" in order to obtain that the name of the phone doesn't occur in the name of AI as a substring.\n-----Examples-----\nInput\nintellect\ntell\nOutput\n1\nInput\ngoogle\napple\nOutput\n0\nInput\nsirisiri\nsir\nOutput\n2\n-----Note-----\nIn the first sample AI's name may be replaced with \"int#llect\".\nIn the second sample Gogol can just keep things as they are.\nIn the third sample one of the new possible names of AI may be \"s#ris#ri\".\n\ndef",
        "answer": "def replace_substring(s1, s2):\n    for i in range(len(s1)):\n        if s1[i:].startswith(s2):\n            return len(s1) - i\n    return len(s1)",
        "difficulty": "interview"
    },
    {
        "task_id": 1458,
        "prompt": "Complete the Python function given the prompt below:You are given a string $s$ consisting of $n$ lowercase Latin letters.\nLet's define a substring as a contiguous subsegment of a string. For example, \"acab\" is a substring of \"abacaba\" (it starts in position $3$ and ends in position $6$), but \"aa\" or \"d\" aren't substrings of this string. So the substring of the string $s$ from position $l$ to position $r$ is $s[l; r] = s_l s_{l + 1} \\dots s_r$.\nYou have to choose exactly one of the substrings of the given string and reverse it (i. e. make $s[l; r] = s_r s_{r - 1} \\dots s_l$) to obtain a string that is less lexicographically. Note that it is not necessary to obtain the minimum possible string.\nIf it is impossible to reverse some substring of the given string to obtain a string that is less, print \"NO\". Otherwise print \"YES\" and any suitable substring.\nString $x$ is lexicographically less than string $y$, if either $x$ is a prefix of $y$ (and $x \\ne y$), or there exists such $i$ ($1 \\le i \\le min(|x|, |y|)$), that $x_i < y_i$, and for any $j$ ($1 \\le j < i$) $x_j = y_j$. Here $|a|$ denotes the length of the string $a$. The lexicographic comparison of strings is implemented by operator < in modern programming languages\u200b\u200b.\n-----Input-----\nThe first line of the input contains one integer $n$ ($2 \\le n \\le 3 \\cdot 10^5$) \u2014 the length of $s$.\nThe second line of the input contains the string $s$ of length $n$ consisting only of lowercase Latin letters.\n-----Output-----\nIf it is impossible to reverse some substring of the given string to obtain a string which is lexicographically less, print \"NO\". Otherwise print \"YES\" and two indices $l$ and $r$ ($1 \\le l < r \\le n$) denoting the substring you have to reverse. If there are multiple answers, you can print any.\n-----Examples-----\nInput\n7\nabacaba\nOutput\nYES\n2 5\nInput\n6\naabcfg\nOutput\nNO\n-----Note-----\nIn the first testcase the resulting string is \"aacabba\".\n\ndef",
        "answer": "def rev_sub(s):\n    n = len(s)\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if s[i:j] == s[j - 1:i - 1:-1]:\n                return \"YES\" + \" \" + str(i + 1) + \" \" + str(j - 1)\n    return \"NO\"",
        "difficulty": "interview"
    },
    {
        "task_id": 1459,
        "prompt": "Complete the Python function given the prompt below:The circle line of the Berland subway has n stations. We know the distances between all pairs of neighboring stations:\n d_1 is the distance between the 1-st and the 2-nd station;\n d_2 is the distance between the 2-nd and the 3-rd station;\n...\n d_{n} - 1 is the distance between the n - 1-th and the n-th station;\n d_{n} is the distance between the n-th and the 1-st station.\nThe trains go along the circle line in both directions. Find the shortest distance between stations with numbers s and t.\n-----Input-----\nThe first line contains integer n (3 \u2264 n \u2264 100) \u2014 the number of stations on the circle line. The second line contains n integers d_1, d_2,..., d_{n} (1 \u2264 d_{i} \u2264 100) \u2014 the distances between pairs of neighboring stations. The third line contains two integers s and t (1 \u2264 s, t \u2264 n) \u2014 the numbers of stations, between which you need to find the shortest distance. These numbers can be the same.\nThe numbers in the lines are separated by single spaces.\n-----Output-----\nPrint a single number \u2014 the length of the shortest path between stations number s and t.\n-----Examples-----\nInput\n4\n2 3 4 9\n1 3\nOutput\n5\nInput\n4\n5 8 2 100\n4 1\nOutput\n15\nInput\n3\n1 1 1\n3 1\nOutput\n1\nInput\n3\n31 41 59\n1 1\nOutput\n0\n-----Note-----\nIn the first sample the length of path 1 \u2192 2 \u2192 3 equals 5, the length of path 1 \u2192 4 \u2192 3 equals 13.\nIn the second sample the length of path 4 \u2192 1 is 100, the length of path 4 \u2192 3 \u2192 2 \u2192 1 is 15.\nIn the third sample the length of path 3 \u2192 1 is 1, the length of path 3 \u2192 2 \u2192 1 is 2.\nIn the fourth sample the numbers of stations are the same, so the shortest distance equals 0.\n\ndef",
        "answer": "def distance(n, d, s, t):\n    if s == t:\n        return 0\n    if n == 1:\n        return d[s][t]\n    return min(distance(n - 1, d, s, k) + d[k][t] for k in range(s, t))",
        "difficulty": "interview"
    },
    {
        "task_id": 1460,
        "prompt": "Complete the Python function given the prompt below:Leo Jr. draws pictures in his notebook with checkered sheets (that is, each sheet has a regular square grid printed on it). We can assume that the sheets are infinitely large in any direction.\nTo draw a picture, Leo Jr. colors some of the cells on a sheet gray. He considers the resulting picture beautiful if the following conditions are satisfied:\n The picture is connected, that is, it is possible to get from any gray cell to any other by following a chain of gray cells, with each pair of adjacent cells in the path being neighbours (that is, sharing a side).\n Each gray cell has an even number of gray neighbours.\n There are exactly $n$ gray cells with all gray neighbours. The number of other gray cells can be arbitrary (but reasonable, so that they can all be listed).\nLeo Jr. is now struggling to draw a beautiful picture with a particular choice of $n$. Help him, and provide any example of a beautiful picture.\nTo output cell coordinates in your answer, assume that the sheet is provided with a Cartesian coordinate system such that one of the cells is chosen to be the origin $(0, 0)$, axes $0x$ and $0y$ are orthogonal and parallel to grid lines, and a unit step along any axis in any direction takes you to a neighbouring cell.\n-----Input-----\nThe only line contains a single integer $n$ ($1 \\leq n \\leq 500$)\u00a0\u2014 the number of gray cells with all gray neighbours in a beautiful picture.\n-----Output-----\nIn the first line, print a single integer $k$\u00a0\u2014 the number of gray cells in your picture. For technical reasons, $k$ should not exceed $5 \\cdot 10^5$.\nEach of the following $k$ lines should contain two integers\u00a0\u2014 coordinates of a gray cell in your picture. All listed cells should be distinct, and the picture should satisdfy all the properties listed above. All coordinates should not exceed $10^9$ by absolute value.\nOne can show that there exists an answer satisfying all requirements with a small enough $k$.\n-----Example-----\nInput\n4\nOutput\n12\n1 0\n2 0\n0 1\n1 1\n2 1\n3 1\n0 2\n1 2\n2 2\n3 2\n1 3\n2 3\n-----Note-----\nThe answer for the sample is pictured below:\n [Image]\n\ndef",
        "answer": "def beautiful_picture(n):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1461,
        "prompt": "Complete the Python function given the prompt below:You are given a functional graph. It is a directed graph, in which from each vertex goes exactly one arc. The vertices are numerated from 0 to n - 1.\nGraph is given as the array f_0, f_1,..., f_{n} - 1, where f_{i} \u2014 the number of vertex to which goes the only arc from the vertex i. Besides you are given array with weights of the arcs w_0, w_1,..., w_{n} - 1, where w_{i} \u2014 the arc weight from i to f_{i}. [Image] The graph from the first sample test. \nAlso you are given the integer k (the length of the path) and you need to find for each vertex two numbers s_{i} and m_{i}, where:  s_{i} \u2014 the sum of the weights of all arcs of the path with length equals to k which starts from the vertex i;  m_{i} \u2014 the minimal weight from all arcs on the path with length k which starts from the vertex i. \nThe length of the path is the number of arcs on this path.\n-----Input-----\nThe first line contains two integers n, k (1 \u2264 n \u2264 10^5, 1 \u2264 k \u2264 10^10). The second line contains the sequence f_0, f_1,..., f_{n} - 1 (0 \u2264 f_{i} < n) and the third \u2014 the sequence w_0, w_1,..., w_{n} - 1 (0 \u2264 w_{i} \u2264 10^8).\n-----Output-----\nPrint n lines, the pair of integers s_{i}, m_{i} in each line.\n-----Examples-----\nInput\n7 3\n1 2 3 4 3 2 6\n6 3 1 4 2 2 3\nOutput\n10 1\n8 1\n7 1\n10 2\n8 2\n7 1\n9 3\nInput\n4 4\n0 1 2 3\n0 1 2 3\nOutput\n0 0\n4 1\n8 2\n12 3\nInput\n5 3\n1 2 3 4 0\n4 1 2 14 3\nOutput\n7 1\n17 1\n19 2\n21 3\n8 1\n\ndef",
        "answer": "def find_s_and_m(f, w, k):\n    s = [0] * len(f)\n    m = [0] * len(f)\n    for i in range(len(f)):\n        for j in range(k):\n            if i + j < len(f):\n                s[i] += w[i + j]\n                if m[i] == 0 or m[i] > w[i + j]:\n                    m[i] = w[i + j]\n    return s, m",
        "difficulty": "interview"
    },
    {
        "task_id": 1462,
        "prompt": "Complete the Python function given the prompt below:Appleman has n cards. Each card has an uppercase letter written on it. Toastman must choose k cards from Appleman's cards. Then Appleman should give Toastman some coins depending on the chosen cards. Formally, for each Toastman's card i you should calculate how much Toastman's cards have the letter equal to letter on ith, then sum up all these quantities, such a number of coins Appleman should give to Toastman.\nGiven the description of Appleman's cards. What is the maximum number of coins Toastman can get?\n-----Input-----\nThe first line contains two integers n and k (1 \u2264 k \u2264 n \u2264 10^5). The next line contains n uppercase letters without spaces \u2014 the i-th letter describes the i-th card of the Appleman.\n-----Output-----\nPrint a single integer \u2013 the answer to the problem.\n-----Examples-----\nInput\n15 10\nDZFDFZDFDDDDDDF\nOutput\n82\nInput\n6 4\nYJSNPI\nOutput\n4\n-----Note-----\nIn the first test example Toastman can choose nine cards with letter D and one additional card with any letter. For each card with D he will get 9 coins and for the additional card he will get 1 coin.\n\ndef",
        "answer": "def max_coins(n, k, cards):\n    # Write your code here\n    count = [0] * 26\n    for i in range(n):\n        count[ord(cards[i]) - ord('A')] += 1\n    return sum(min(count[i], k) for i in range(26))",
        "difficulty": "interview"
    },
    {
        "task_id": 1463,
        "prompt": "Complete the Python function given the prompt below:Okabe needs to renovate the Future Gadget Laboratory after he tried doing some crazy experiments! The lab is represented as an n by n square grid of integers. A good lab is defined as a lab in which every number not equal to 1 can be expressed as the sum of a number in the same row and a number in the same column. In other words, for every x, y such that 1 \u2264 x, y \u2264 n and a_{x}, y \u2260 1, there should exist two indices s and t so that a_{x}, y = a_{x}, s + a_{t}, y, where a_{i}, j denotes the integer in i-th row and j-th column.\nHelp Okabe determine whether a given lab is good!\n-----Input-----\nThe first line of input contains the integer n (1 \u2264 n \u2264 50)\u00a0\u2014 the size of the lab. \nThe next n lines contain n space-separated integers denoting a row of the grid. The j-th integer in the i-th row is a_{i}, j (1 \u2264 a_{i}, j \u2264 10^5).\n-----Output-----\nPrint \"Yes\" if the given lab is good and \"No\" otherwise.\nYou can output each letter in upper or lower case.\n-----Examples-----\nInput\n3\n1 1 2\n2 3 1\n6 4 1\nOutput\nYes\nInput\n3\n1 5 2\n1 1 1\n1 2 3\nOutput\nNo\n-----Note-----\nIn the first sample test, the 6 in the bottom left corner is valid because it is the sum of the 2 above it and the 4 on the right. The same holds for every number not equal to 1 in this table, so the answer is \"Yes\".\nIn the second sample test, the 5 cannot be formed as the sum of an integer in the same row and an integer in the same column. Thus the answer is \"No\".\n\ndef",
        "answer": "def is_good_lab(n, grid):\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j]!= 1:\n                for k in range(n):\n                    if grid[i][k] + grid[k][j] == grid[i][j]:\n                        return \"Yes\"\n    return \"No\"",
        "difficulty": "interview"
    },
    {
        "task_id": 1464,
        "prompt": "Complete the Python function given the prompt below:Coming up with a new problem isn't as easy as many people think. Sometimes it is hard enough to name it. We'll consider a title original if it doesn't occur as a substring in any titles of recent Codeforces problems. \nYou've got the titles of n last problems \u2014 the strings, consisting of lowercase English letters. Your task is to find the shortest original title for the new problem. If there are multiple such titles, choose the lexicographically minimum one. Note, that title of the problem can't be an empty string.\nA substring s[l... r] (1 \u2264 l \u2264 r \u2264 |s|) of string s = s_1s_2... s_{|}s| (where |s| is the length of string s) is string s_{l}s_{l} + 1... s_{r}.\nString x = x_1x_2... x_{p} is lexicographically smaller than string y = y_1y_2... y_{q}, if either p < q and x_1 = y_1, x_2 = y_2,..., x_{p} = y_{p}, or there exists such number r (r < p, r < q), that x_1 = y_1, x_2 = y_2,..., x_{r} = y_{r} and x_{r} + 1 < y_{r} + 1. The string characters are compared by their ASCII codes.\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 30) \u2014 the number of titles you've got to consider. Then follow n problem titles, one per line. Each title only consists of lowercase English letters (specifically, it doesn't contain any spaces) and has the length from 1 to 20, inclusive.\n-----Output-----\nPrint a string, consisting of lowercase English letters \u2014 the lexicographically minimum shortest original title.\n-----Examples-----\nInput\n5\nthreehorses\ngoodsubstrings\nsecret\nprimematrix\nbeautifulyear\nOutput\nj\nInput\n4\naa\nbdefghijklmn\nopqrstuvwxyz\nc\nOutput\nab\n-----Note-----\nIn the first sample the first 9 letters of the English alphabet (a, b, c, d, e, f, g, h, i) occur in the problem titles, so the answer is letter j.\nIn the second sample the titles contain 26 English letters, so the shortest original title cannot have length 1. Title aa occurs as a substring in the first title.\n\ndef",
        "answer": "def find_shortest_original_title(titles):\n    titles.sort()\n    for i in range(len(titles)):\n        if titles[i] == titles[i][::-1]:\n            return titles[i]\n    return titles[0]",
        "difficulty": "interview"
    },
    {
        "task_id": 1465,
        "prompt": "Complete the Python function given the prompt below:There are $n$ children, who study at the school \u211641. It is well-known that they are good mathematicians. Once at a break, they arranged a challenge for themselves. All children arranged in a row and turned heads either to the left or to the right.\nChildren can do the following: in one second\u00a0several pairs of neighboring children who are looking at each other can simultaneously turn the head in the opposite direction. For instance, the one who was looking at the right neighbor turns left and vice versa for the second child. Moreover, every second at least one pair of neighboring children performs such action. They are going to finish when there is no pair of neighboring children who are looking at each other. \nYou are given the number $n$, the initial arrangement of children and the number $k$. You have to find a way for the children to act if they want to finish the process in exactly $k$ seconds. More formally, for each of the $k$ moves, you need to output the numbers of the children who turn left during this move.\nFor instance, for the configuration shown below and $k = 2$ children can do the following steps:  [Image]  At the beginning, two pairs make move: $(1, 2)$ and $(3, 4)$. After that, we receive the following configuration:  [Image]  At the second move pair $(2, 3)$ makes the move. The final configuration is reached. Good job.  [Image] \nIt is guaranteed that if the solution exists, it takes not more than $n^2$ \"headturns\".\n-----Input-----\nThe first line of input contains two integers $n$ and $k$ ($2 \\le n \\le 3000$, $1 \\le k \\le 3000000$) \u00a0\u2014 the number of children and required number of moves.\nThe next line contains a string of length $n$ and consists only of characters L and R, where L means that the child looks to the left and R means that the child looks to the right. \n-----Output-----\nIf there is no solution, print a single line with number $-1$.\nOtherwise, output $k$ lines. Each line has to start with a number $n_i$ ($1\\le n_i \\le \\frac{n}{2}$) \u00a0\u2014 the number of pairs of children, who turn at this move. After that print $n_i$ distinct integers \u00a0\u2014 the numbers of the children who will turn left during this move. \nAfter performing all \"headturns\", there can't be a pair of two neighboring children looking at each other.\nIf there are many solutions, print any of them.\n-----Examples-----\nInput\n2 1\nRL\nOutput\n1 1 \nInput\n2 1\nLR\nOutput\n-1\nInput\n4 2\nRLRL\nOutput\n2 1 3 \n1 2\n-----Note-----\nThe first sample contains a pair of children who look at each other. After one move, they can finish the process.\nIn the second sample, children can't make any move. As a result, they can't end in $k>0$ moves.\nThe third configuration is described in the statement.\n\ndef",
        "answer": "def headturns(n, k):\n    if n == 1:\n        return 1\n    if k == 1:\n        return n\n    if k == 2:\n        return n\n    if k == 3:\n        return -1\n    if k == 4:\n        return 2\n    if k == 5:\n        return 3\n    if k == 6:\n        return 4\n    if k == 7:\n        return 5\n    if k == 8:\n        return 6\n    if k == 9:\n        return 7\n    if k == 10:\n        return 8\n    if k == 11:\n        return 9\n    if k == 12:\n        return 10\n    if k == 13:\n        return 11\n    if k == 14:\n        return 12\n    if k == 15:\n        return 13\n    if k == 16:\n        return 14\n    if k == 17:\n        return 15\n    if k == 18:\n        return 16\n    if k == 19:\n        return 17\n    if k == 20:\n        return 18\n    if k == 21:\n        return 19\n    if k == 22:\n        return 20\n    if k == 23:\n        return 21\n    if k == 24:\n        return 22\n    if k == 25:\n        return 23\n    if k == 26:\n        return 24\n    if k == 27:\n        return 25\n    if k == 28:\n        return 26\n    if k == 29:\n        return 27\n    if k == 30:\n        return 28\n    if k == 31:\n        return 29\n    if k == 32:\n        return 30\n    if k == 33:\n        return 31\n    if k == 34:\n        return 32\n    if k == 35",
        "difficulty": "interview"
    },
    {
        "task_id": 1466,
        "prompt": "Complete the Python function given the prompt below:You are given an undirected connected weighted graph consisting of $n$ vertices and $m$ edges. Let's denote the length of the shortest path from vertex $1$ to vertex $i$ as $d_i$. \nYou have to erase some edges of the graph so that at most $k$ edges remain. Let's call a vertex $i$ good if there still exists a path from $1$ to $i$ with length $d_i$ after erasing the edges.\nYour goal is to erase the edges in such a way that the number of good vertices is maximized.\n-----Input-----\nThe first line contains three integers $n$, $m$ and $k$ ($2 \\le n \\le 3 \\cdot 10^5$, $1 \\le m \\le 3 \\cdot 10^5$, $n - 1 \\le m$, $0 \\le k \\le m$) \u2014 the number of vertices and edges in the graph, and the maximum number of edges that can be retained in the graph, respectively.\nThen $m$ lines follow, each containing three integers $x$, $y$, $w$ ($1 \\le x, y \\le n$, $x \\ne y$, $1 \\le w \\le 10^9$), denoting an edge connecting vertices $x$ and $y$ and having weight $w$.\nThe given graph is connected (any vertex can be reached from any other vertex) and simple (there are no self-loops, and for each unordered pair of vertices there exists at most one edge connecting these vertices).\n-----Output-----\nIn the first line print $e$ \u2014 the number of edges that should remain in the graph ($0 \\le e \\le k$).\nIn the second line print $e$ distinct integers from $1$ to $m$ \u2014 the indices of edges that should remain in the graph. Edges are numbered in the same order they are given in the input. The number of good vertices should be as large as possible.\n-----Examples-----\nInput\n3 3 2\n1 2 1\n3 2 1\n1 3 3\nOutput\n2\n1 2 \nInput\n4 5 2\n4 1 8\n2 4 1\n2 1 3\n3 4 9\n3 1 5\nOutput\n2\n3 2\n\ndef",
        "answer": "def dfs(graph, visited, start):\n    visited[start] = True\n    for i in graph[start]:\n        if not visited[i]:\n            dfs(graph, visited, i)",
        "difficulty": "interview"
    },
    {
        "task_id": 1467,
        "prompt": "Complete the Python function given the prompt below:You are given an array $a_1, a_2, \\dots, a_n$ of integer numbers.\nYour task is to divide the array into the maximum number of segments in such a way that:\n  each element is contained in exactly one segment;  each segment contains at least one element;  there doesn't exist a non-empty subset of segments such that bitwise XOR of the numbers from them is equal to $0$. \nPrint the maximum number of segments the array can be divided into. Print -1 if no suitable division exists.\n-----Input-----\nThe first line contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the size of the array.\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($0 \\le a_i \\le 10^9$).\n-----Output-----\nPrint the maximum number of segments the array can be divided into while following the given constraints. Print -1 if no suitable division exists.\n-----Examples-----\nInput\n4\n5 5 7 2\nOutput\n2\nInput\n3\n1 2 3\nOutput\n-1\nInput\n3\n3 1 10\nOutput\n3\n-----Note-----\nIn the first example $2$ is the maximum number. If you divide the array into $\\{[5], [5, 7, 2]\\}$, the XOR value of the subset of only the second segment is $5 \\oplus 7 \\oplus 2 = 0$. $\\{[5, 5], [7, 2]\\}$ has the value of the subset of only the first segment being $5 \\oplus 5 = 0$. However, $\\{[5, 5, 7], [2]\\}$ will lead to subsets $\\{[5, 5, 7]\\}$ of XOR $7$, $\\{[2]\\}$ of XOR $2$ and $\\{[5, 5, 7], [2]\\}$ of XOR $5 \\oplus 5 \\oplus 7 \\oplus 2 = 5$.\nLet's take a look at some division on $3$ segments \u2014 $\\{[5], [5, 7], [2]\\}$. It will produce subsets:\n  $\\{[5]\\}$, XOR $5$;  $\\{[5, 7]\\}$, XOR $2$;  $\\{[5], [5, 7]\\}$, XOR $7$;  $\\{[2]\\}$, XOR $2$;  $\\{[5], [2]\\}$, XOR $7$;  $\\{[5, 7], [2]\\}$, XOR $0$;  $\\{[5], [5, 7], [2]\\}$, XOR $5$; \nAs you can see, subset $\\{[5, 7], [2]\\}$ has its XOR equal to $0$, which is unacceptable. You can check that for other divisions of size $3$ or $4$, non-empty subset with $0$ XOR always exists.\nThe second example has no suitable divisions.\nThe third example array can be divided into $\\{[3], [1], [10]\\}$. No subset of these segments has its XOR equal to $0$.\n\ndef",
        "answer": "def xor_segments(arr):\n    arr.sort()\n    n = len(arr)\n    xor = 0\n    for i in range(n):\n        xor ^= arr[i]\n    if xor == 0:\n        return n\n    else:\n        return -1",
        "difficulty": "interview"
    },
    {
        "task_id": 1468,
        "prompt": "Complete the Python function given the prompt below:Vasya is an administrator of a public page of organization \"Mouse and keyboard\" and his everyday duty is to publish news from the world of competitive programming. For each news he also creates a list of hashtags to make searching for a particular topic more comfortable. For the purpose of this problem we define hashtag as a string consisting of lowercase English letters and exactly one symbol '#' located at the beginning of the string. The length of the hashtag is defined as the number of symbols in it without the symbol '#'.\nThe head administrator of the page told Vasya that hashtags should go in lexicographical order (take a look at the notes section for the definition).\nVasya is lazy so he doesn't want to actually change the order of hashtags in already published news. Instead, he decided to delete some suffixes (consecutive characters at the end of the string) of some of the hashtags. He is allowed to delete any number of characters, even the whole string except for the symbol '#'. Vasya wants to pick such a way to delete suffixes that the total number of deleted symbols is minimum possible. If there are several optimal solutions, he is fine with any of them.\n-----Input-----\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 500 000)\u00a0\u2014 the number of hashtags being edited now.\nEach of the next n lines contains exactly one hashtag of positive length.\nIt is guaranteed that the total length of all hashtags (i.e. the total length of the string except for characters '#') won't exceed 500 000.\n-----Output-----\nPrint the resulting hashtags in any of the optimal solutions.\n-----Examples-----\nInput\n3\n#book\n#bigtown\n#big\nOutput\n#b\n#big\n#big\nInput\n3\n#book\n#cool\n#cold\nOutput\n#book\n#co\n#cold\nInput\n4\n#car\n#cart\n#art\n#at\nOutput\n#\n#\n#art\n#at\nInput\n3\n#apple\n#apple\n#fruit\nOutput\n#apple\n#apple\n#fruit\n-----Note-----\nWord a_1, a_2,..., a_{m} of length m is lexicographically not greater than word b_1, b_2,..., b_{k} of length k, if one of two conditions hold:   at first position i, such that a_{i} \u2260 b_{i}, the character a_{i} goes earlier in the alphabet than character b_{i}, i.e. a has smaller character than b in the first position where they differ;  if there is no such position i and m \u2264 k, i.e. the first word is a prefix of the second or two words are equal. \nThe sequence of words is said to be sorted in lexicographical order if each word (except the last one) is lexicographically not greater than the next word.\nFor the words consisting of lowercase English letters the lexicographical order coincides with the alphabet word order in the dictionary.\nAccording to the above definition, if a hashtag consisting of one character '#' it is lexicographically not greater than any other valid hashtag. That's why in the third sample we can't keep first two hashtags unchanged and shorten the other two.\n\ndef",
        "answer": "def sort_hashtags(hashtags):\n    hashtags.sort(key=lambda x: x[1:])\n    return '#' + '#'.join(hashtags)",
        "difficulty": "interview"
    },
    {
        "task_id": 1469,
        "prompt": "Complete the Python function given the prompt below:You are given an integer L. Construct a directed graph that satisfies the conditions below. The graph may contain multiple edges between the same pair of vertices. It can be proved that such a graph always exists.\n - The number of vertices, N, is at most 20. The vertices are given ID numbers from 1 to N.\n - The number of edges, M, is at most 60. Each edge has an integer length between 0 and 10^6 (inclusive).\n - Every edge is directed from the vertex with the smaller ID to the vertex with the larger ID. That is, 1,2,...,N is one possible topological order of the vertices.\n - There are exactly L different paths from Vertex 1 to Vertex N. The lengths of these paths are all different, and they are integers between 0 and L-1.\nHere, the length of a path is the sum of the lengths of the edges contained in that path, and two paths are considered different when the sets of the edges contained in those paths are different.\n-----Constraints-----\n - 2 \\leq L \\leq 10^6\n - L is an integer.\n-----Input-----\nInput is given from Standard Input in the following format:\nL\n-----Output-----\nIn the first line, print N and M, the number of the vertices and edges in your graph.\nIn the i-th of the following M lines, print three integers u_i,v_i and w_i, representing the starting vertex, the ending vertex and the length of the i-th edge.\nIf there are multiple solutions, any of them will be accepted.\n-----Sample Input-----\n4\n-----Sample Output-----\n8 10\n1 2 0\n2 3 0\n3 4 0\n1 5 0\n2 6 0\n3 7 0\n4 8 0\n5 6 1\n6 7 1\n7 8 1\nIn the graph represented by the sample output, there are four paths from Vertex 1 to N=8:\n - 1 \u2192 2 \u2192 3 \u2192 4 \u2192 8 with length 0\n - 1 \u2192 2 \u2192 3 \u2192 7 \u2192 8 with length 1\n - 1 \u2192 2 \u2192 6 \u2192 7 \u2192 8 with length 2\n - 1 \u2192 5 \u2192 6 \u2192 7 \u2192 8 with length 3\nThere are other possible solutions.\n\ndef",
        "answer": "def create_graph(lst):\n    graph = {}\n    for i in range(len(lst)):\n        if lst[i][0] not in graph:\n            graph[lst[i][0]] = []\n        if lst[i][1] not in graph:\n            graph[lst[i][1]] = []\n        graph[lst[i][0]].append((lst[i][1], lst[i][2]))\n        graph[lst[i][1]].append((lst[i][0], lst[i][2]))\n    return graph",
        "difficulty": "interview"
    },
    {
        "task_id": 1470,
        "prompt": "Complete the Python function given the prompt below:Snuke has decided to play with a six-sided die. Each of its six sides shows an integer 1 through 6, and two numbers on opposite sides always add up to 7.\nSnuke will first put the die on the table with an arbitrary side facing upward, then repeatedly perform the following operation:\n - Operation: Rotate the die 90\u00b0 toward one of the following directions: left, right, front (the die will come closer) and back (the die will go farther). Then, obtain y points where y is the number written in the side facing upward.\nFor example, let us consider the situation where the side showing 1 faces upward, the near side shows 5 and the right side shows 4, as illustrated in the figure.\nIf the die is rotated toward the right as shown in the figure, the side showing 3 will face upward.\nBesides, the side showing 4 will face upward if the die is rotated toward the left, the side showing 2 will face upward if the die is rotated toward the front, and the side showing 5 will face upward if the die is rotated toward the back.\nFind the minimum number of operation Snuke needs to perform in order to score at least x points in total.\n-----Constraints-----\n - 1 \u2266 x \u2266 10^{15}\n - x is an integer.\n-----Input-----\nThe input is given from Standard Input in the following format:\nx\n-----Output-----\nPrint the answer.\n-----Sample Input-----\n7\n-----Sample Output-----\n2\n\n\ndef",
        "answer": "def Snuke(x):\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 1471,
        "prompt": "Complete the Python function given the prompt below:We have a tree with N vertices numbered 1 to N.\nThe i-th edge in the tree connects Vertex u_i and Vertex v_i, and its length is w_i.\nYour objective is to paint each vertex in the tree white or black (it is fine to paint all vertices the same color) so that the following condition is satisfied:\n - For any two vertices painted in the same color, the distance between them is an even number.\nFind a coloring of the vertices that satisfies the condition and print it. It can be proved that at least one such coloring exists under the constraints of this problem.\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 10^5\n - 1 \\leq u_i < v_i \\leq N\n - 1 \\leq w_i \\leq 10^9\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nu_1 v_1 w_1\nu_2 v_2 w_2\n.\n.\n.\nu_{N - 1} v_{N - 1} w_{N - 1}\n-----Output-----\nPrint a coloring of the vertices that satisfies the condition, in N lines.\nThe i-th line should contain 0 if Vertex i is painted white and 1 if it is painted black.\nIf there are multiple colorings that satisfy the condition, any of them will be accepted.\n-----Sample Input-----\n3\n1 2 2\n2 3 1\n-----Sample Output-----\n0\n0\n1\n\n\ndef",
        "answer": "def even_odd_coloring(n, edges):\n    # Write your code here\n    # create a graph\n    graph = {}\n    for i in range(1, n + 1):\n        graph[i] = []",
        "difficulty": "interview"
    },
    {
        "task_id": 1472,
        "prompt": "Complete the Python function given the prompt below:We have an undirected graph G with N vertices numbered 1 to N and N edges as follows:\n - For each i=1,2,...,N-1, there is an edge between Vertex i and Vertex i+1.\n - There is an edge between Vertex X and Vertex Y.\nFor each k=1,2,...,N-1, solve the problem below:\n - Find the number of pairs of integers (i,j) (1 \\leq i < j \\leq N) such that the shortest distance between Vertex i and Vertex j in G is k.\n-----Constraints-----\n - 3 \\leq N \\leq 2 \\times 10^3\n - 1 \\leq X,Y \\leq N\n - X+1 < Y\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN X Y\n-----Output-----\nFor each k=1, 2,..., N-1 in this order, print a line containing the answer to the problem.\n-----Sample Input-----\n5 2 4\n-----Sample Output-----\n5\n4\n1\n0\nThe graph in this input is as follows:\nThere are five pairs (i,j) (1 \\leq i < j \\leq N) such that the shortest distance between Vertex i and Vertex j is 1: (1,2)\\,,(2,3)\\,,(2,4)\\,,(3,4)\\,,(4,5).\nThere are four pairs (i,j) (1 \\leq i < j \\leq N) such that the shortest distance between Vertex i and Vertex j is 2: (1,3)\\,,(1,4)\\,,(2,5)\\,,(3,5).\nThere is one pair (i,j) (1 \\leq i < j \\leq N) such that the shortest distance between Vertex i and Vertex j is 3: (1,5).\nThere are no pairs (i,j) (1 \\leq i < j \\leq N) such that the shortest distance between Vertex i and Vertex j is 4.\n\ndef",
        "answer": "def shortest_distance(n, x, y):\n    # Write your code here\n    dist = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                dist[i][j] = 0\n            elif i < j:\n                dist[i][j] = dist[i][j-1] + 1\n            else:\n                dist[i][j] = dist[i-1][j] + 1\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                dist[i][j] = 0\n            elif i < j:\n                dist[i][j] = min(dist[i][j-1], dist[i][j])\n            else:\n                dist[i][j] = min(dist[i-1][j], dist[i][j])\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                dist[i][j] = 0\n            elif i < j:\n                dist[i][j] = min(dist[i][j-1], dist[i][j])\n            else:\n                dist[i][j] = min(dist[i-1][j], dist[i][j])\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                dist[i][j] = 0\n            elif i < j:\n                dist[i][j] = min(dist[i][j-1], dist[i][j])\n            else:\n                dist[i][j] = min(dist",
        "difficulty": "interview"
    },
    {
        "task_id": 1473,
        "prompt": "Complete the Python function given the prompt below:During the lunch break all n Berland State University students lined up in the food court. However, it turned out that the food court, too, has a lunch break and it temporarily stopped working.\nStanding in a queue that isn't being served is so boring! So, each of the students wrote down the number of the student ID of the student that stands in line directly in front of him, and the student that stands in line directly behind him. If no one stands before or after a student (that is, he is the first one or the last one), then he writes down number 0 instead (in Berland State University student IDs are numerated from 1).\nAfter that, all the students went about their business. When they returned, they found out that restoring the queue is not such an easy task.\nHelp the students to restore the state of the queue by the numbers of the student ID's of their neighbors in the queue.\n-----Input-----\nThe first line contains integer n (2 \u2264 n \u2264 2\u00b710^5) \u2014 the number of students in the queue. \nThen n lines follow, i-th line contains the pair of integers a_{i}, b_{i} (0 \u2264 a_{i}, b_{i} \u2264 10^6), where a_{i} is the ID number of a person in front of a student and b_{i} is the ID number of a person behind a student. The lines are given in the arbitrary order. Value 0 is given instead of a neighbor's ID number if the neighbor doesn't exist.\nThe ID numbers of all students are distinct. It is guaranteed that the records correspond too the queue where all the students stand in some order.\n-----Output-----\nPrint a sequence of n integers x_1, x_2,..., x_{n} \u2014 the sequence of ID numbers of all the students in the order they go in the queue from the first student to the last one.\n-----Examples-----\nInput\n4\n92 31\n0 7\n31 0\n7 141\nOutput\n92 7 31 141 \n-----Note-----\nThe picture illustrates the queue for the first sample. [Image]\n\ndef",
        "answer": "def solution(n, a, b):\n    # Your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n",
        "difficulty": "interview"
    },
    {
        "task_id": 1474,
        "prompt": "Complete the Python function given the prompt below:Long ago, Vasily built a good fence at his country house. Vasily calls a fence good, if it is a series of n consecutively fastened vertical boards of centimeter width, the height of each in centimeters is a positive integer. The house owner remembers that the height of the i-th board to the left is h_{i}.\nToday Vasily decided to change the design of the fence he had built, by cutting his top connected part so that the fence remained good. The cut part should consist of only the upper parts of the boards, while the adjacent parts must be interconnected (share a non-zero length before cutting out of the fence).\nYou, as Vasily's curious neighbor, will count the number of possible ways to cut exactly one part as is described above. Two ways to cut a part are called distinct, if for the remaining fences there is such i, that the height of the i-th boards vary.\nAs Vasily's fence can be very high and long, get the remainder after dividing the required number of ways by 1 000 000 007 (10^9 + 7).\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 1 000 000)\u00a0\u2014 the number of boards in Vasily's fence.\nThe second line contains n space-separated numbers h_1, h_2,..., h_{n} (1 \u2264 h_{i} \u2264 10^9), where h_{i} equals the height of the i-th board to the left.\n-----Output-----\nPrint the remainder after dividing r by 1 000 000 007, where r is the number of ways to cut exactly one connected part so that the part consisted of the upper parts of the boards and the remaining fence was good.\n-----Examples-----\nInput\n2\n1 1\nOutput\n0\nInput\n3\n3 4 2\nOutput\n13\n-----Note-----\nFrom the fence from the first example it is impossible to cut exactly one piece so as the remaining fence was good.\nAll the possible variants of the resulting fence from the second sample look as follows (the grey shows the cut out part):  [Image]\n\ndef",
        "answer": "def f(n):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    return f(n - 1) + f(n - 2) + f(n - 3)",
        "difficulty": "interview"
    },
    {
        "task_id": 1475,
        "prompt": "Complete the Python function given the prompt below:There are b blocks of digits. Each one consisting of the same n digits, which are given to you in the input. Wet Shark must choose exactly one digit from each block and concatenate all of those digits together to form one large integer. For example, if he chooses digit 1 from the first block and digit 2 from the second block, he gets the integer 12. \nWet Shark then takes this number modulo x. Please, tell him how many ways he can choose one digit from each block so that he gets exactly k as the final result. As this number may be too large, print it modulo 10^9 + 7.\nNote, that the number of ways to choose some digit in the block is equal to the number of it's occurrences. For example, there are 3 ways to choose digit 5 from block 3 5 6 7 8 9 5 1 1 1 1 5.\n-----Input-----\nThe first line of the input contains four space-separated integers, n, b, k and x (2 \u2264 n \u2264 50 000, 1 \u2264 b \u2264 10^9, 0 \u2264 k < x \u2264 100, x \u2265 2)\u00a0\u2014 the number of digits in one block, the number of blocks, interesting remainder modulo x and modulo x itself.\nThe next line contains n space separated integers a_{i} (1 \u2264 a_{i} \u2264 9), that give the digits contained in each block.\n-----Output-----\nPrint the number of ways to pick exactly one digit from each blocks, such that the resulting integer equals k modulo x.\n-----Examples-----\nInput\n12 1 5 10\n3 5 6 7 8 9 5 1 1 1 1 5\nOutput\n3\nInput\n3 2 1 2\n6 2 2\nOutput\n0\nInput\n3 2 1 2\n3 1 2\nOutput\n6\n-----Note-----\nIn the second sample possible integers are 22, 26, 62 and 66. None of them gives the remainder 1 modulo 2.\nIn the third sample integers 11, 13, 21, 23, 31 and 33 have remainder 1 modulo 2. There is exactly one way to obtain each of these integers, so the total answer is 6.\n\ndef",
        "answer": "def solve(n, b, k, x):\n    dp = [[0 for _ in range(x)] for _ in range(b)]\n    for i in range(b):\n        dp[i][0] = 1\n    for i in range(n):\n        for j in range(x):\n            for k in range(j+1):\n                dp[i%b][j] += dp[(i-1)%b][k]\n    return dp[(n-1)%b][k]",
        "difficulty": "interview"
    },
    {
        "task_id": 1476,
        "prompt": "Complete the Python function given the prompt below:An exam for n students will take place in a long and narrow room, so the students will sit in a line in some order. The teacher suspects that students with adjacent numbers (i and i + 1) always studied side by side and became friends and if they take an exam sitting next to each other, they will help each other for sure.\nYour task is to choose the maximum number of students and make such an arrangement of students in the room that no two students with adjacent numbers sit side by side.\n-----Input-----\nA single line contains integer n (1 \u2264 n \u2264 5000) \u2014 the number of students at an exam.\n-----Output-----\nIn the first line print integer k \u2014 the maximum number of students who can be seated so that no two students with adjacent numbers sit next to each other.\nIn the second line print k distinct integers a_1, a_2,..., a_{k} (1 \u2264 a_{i} \u2264 n), where a_{i} is the number of the student on the i-th position. The students on adjacent positions mustn't have adjacent numbers. Formally, the following should be true: |a_{i} - a_{i} + 1| \u2260 1 for all i from 1 to k - 1.\nIf there are several possible answers, output any of them.\n-----Examples-----\nInput\n6\nOutput\n6\n1 5 3 6 2 4\nInput\n3\nOutput\n2\n1 3\n\ndef",
        "answer": "def exam_room(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        ",
        "difficulty": "interview"
    },
    {
        "task_id": 1477,
        "prompt": "Complete the Python function given the prompt below:You are given a program you want to execute as a set of tasks organized in a dependency graph. The dependency graph is a directed acyclic graph: each task can depend on results of one or several other tasks, and there are no directed circular dependencies between tasks. A task can only be executed if all tasks it depends on have already completed.\nSome of the tasks in the graph can only be executed on a coprocessor, and the rest can only be executed on the main processor. In one coprocessor call you can send it a set of tasks which can only be executed on it. For each task of the set, all tasks on which it depends must be either already completed or be included in the set. The main processor starts the program execution and gets the results of tasks executed on the coprocessor automatically.\nFind the minimal number of coprocessor calls which are necessary to execute the given program.\n-----Input-----\nThe first line contains two space-separated integers N (1 \u2264 N \u2264 10^5) \u2014 the total number of tasks given, and M (0 \u2264 M \u2264 10^5) \u2014 the total number of dependencies between tasks.\nThe next line contains N space-separated integers $E_{i} \\in \\{0,1 \\}$. If E_{i} = 0, task i can only be executed on the main processor, otherwise it can only be executed on the coprocessor.\nThe next M lines describe the dependencies between tasks. Each line contains two space-separated integers T_1 and T_2 and means that task T_1 depends on task T_2 (T_1 \u2260 T_2). Tasks are indexed from 0 to N - 1. All M pairs (T_1, T_2) are distinct. It is guaranteed that there are no circular dependencies between tasks.\n-----Output-----\nOutput one line containing an integer \u2014 the minimal number of coprocessor calls necessary to execute the program.\n-----Examples-----\nInput\n4 3\n0 1 0 1\n0 1\n1 2\n2 3\nOutput\n2\nInput\n4 3\n1 1 1 0\n0 1\n0 2\n3 0\nOutput\n1\n-----Note-----\nIn the first test, tasks 1 and 3 can only be executed on the coprocessor. The dependency graph is linear, so the tasks must be executed in order 3 -> 2 -> 1 -> 0. You have to call coprocessor twice: first you call it for task 3, then you execute task 2 on the main processor, then you call it for for task 1, and finally you execute task 0 on the main processor.\nIn the second test, tasks 0, 1 and 2 can only be executed on the coprocessor. Tasks 1 and 2 have no dependencies, and task 0 depends on tasks 1 and 2, so all three tasks 0, 1 and 2 can be sent in one coprocessor call. After that task 3 is executed on the main processor.\n\ndef",
        "answer": "def coprocessor_calls(tasks, dependencies):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1478,
        "prompt": "Complete the Python function given the prompt below:A rare article in the Internet is posted without a possibility to comment it. On a Polycarp's website each article has comments feed.\nEach comment on Polycarp's website is a non-empty string consisting of uppercase and lowercase letters of English alphabet. Comments have tree-like structure, that means each comment except root comments (comments of the highest level) has exactly one parent comment.\nWhen Polycarp wants to save comments to his hard drive he uses the following format. Each comment he writes in the following format:   at first, the text of the comment is written;  after that the number of comments is written, for which this comment is a parent comment (i.\u00a0e. the number of the replies to this comments);  after that the comments for which this comment is a parent comment are written (the writing of these comments uses the same algorithm).  All elements in this format are separated by single comma. Similarly, the comments of the first level are separated by comma.\nFor example, if the comments look like: [Image] \nthen the first comment is written as \"hello,2,ok,0,bye,0\", the second is written as \"test,0\", the third comment is written as \"one,1,two,2,a,0,b,0\". The whole comments feed is written as: \"hello,2,ok,0,bye,0,test,0,one,1,two,2,a,0,b,0\". For a given comments feed in the format specified above print the comments in a different format:   at first, print a integer d\u00a0\u2014 the maximum depth of nesting comments;  after that print d lines, the i-th of them corresponds to nesting level i;  for the i-th row print comments of nesting level i in the order of their appearance in the Policarp's comments feed, separated by space. \n-----Input-----\nThe first line contains non-empty comments feed in the described format. It consists of uppercase and lowercase letters of English alphabet, digits and commas. \nIt is guaranteed that each comment is a non-empty string consisting of uppercase and lowercase English characters. Each of the number of comments is integer (consisting of at least one digit), and either equals 0 or does not contain leading zeros.\nThe length of the whole string does not exceed 10^6. It is guaranteed that given structure of comments is valid. \n-----Output-----\nPrint comments in a format that is given in the statement. For each level of nesting, comments should be printed in the order they are given in the input.\n-----Examples-----\nInput\nhello,2,ok,0,bye,0,test,0,one,1,two,2,a,0,b,0\nOutput\n3\nhello test one \nok bye two \na b \nInput\na,5,A,0,a,0,A,0,a,0,A,0\nOutput\n2\na \nA a A a A \nInput\nA,3,B,2,C,0,D,1,E,0,F,1,G,0,H,1,I,1,J,0,K,1,L,0,M,2,N,0,O,1,P,0\nOutput\n4\nA K M \nB F H L N O \nC D G I P \nE J \n\n-----Note-----\nThe first example is explained in the statements.\n\ndef",
        "answer": "def print_comments(comments):\n    depth = 0\n    for comment in comments:\n        depth = max(depth, len(comment))\n    for i in range(depth):\n        for comment in comments:\n            if len(comment) > i:\n                print(comment[i], end=' ')\n        print()",
        "difficulty": "interview"
    },
    {
        "task_id": 1479,
        "prompt": "Complete the Python function given the prompt below:Om Nom really likes candies and doesn't like spiders as they frequently steal candies. One day Om Nom fancied a walk in a park. Unfortunately, the park has some spiders and Om Nom doesn't want to see them at all. [Image] \nThe park can be represented as a rectangular n \u00d7 m field. The park has k spiders, each spider at time 0 is at some cell of the field. The spiders move all the time, and each spider always moves in one of the four directions (left, right, down, up). In a unit of time, a spider crawls from his cell to the side-adjacent cell in the corresponding direction. If there is no cell in the given direction, then the spider leaves the park. The spiders do not interfere with each other as they move. Specifically, one cell can have multiple spiders at the same time.\nOm Nom isn't yet sure where to start his walk from but he definitely wants:  to start walking at time 0 at an upper row cell of the field (it is guaranteed that the cells in this row do not contain any spiders);  to walk by moving down the field towards the lowest row (the walk ends when Om Nom leaves the boundaries of the park). \nWe know that Om Nom moves by jumping. One jump takes one time unit and transports the little monster from his cell to either a side-adjacent cell on the lower row or outside the park boundaries.\nEach time Om Nom lands in a cell he sees all the spiders that have come to that cell at this moment of time. Om Nom wants to choose the optimal cell to start the walk from. That's why he wonders: for each possible starting cell, how many spiders will he see during the walk if he starts from this cell? Help him and calculate the required value for each possible starting cell.\n-----Input-----\nThe first line contains three integers n, m, k (2 \u2264 n, m \u2264 2000;\u00a00 \u2264 k \u2264 m(n - 1)). \nEach of the next n lines contains m characters \u2014 the description of the park. The characters in the i-th line describe the i-th row of the park field. If the character in the line equals \".\", that means that the corresponding cell of the field is empty; otherwise, the character in the line will equal one of the four characters: \"L\" (meaning that this cell has a spider at time 0, moving left), \"R\" (a spider moving right), \"U\" (a spider moving up), \"D\" (a spider moving down). \nIt is guaranteed that the first row doesn't contain any spiders. It is guaranteed that the description of the field contains no extra characters. It is guaranteed that at time 0 the field contains exactly k spiders.\n-----Output-----\nPrint m integers: the j-th integer must show the number of spiders Om Nom will see if he starts his walk from the j-th cell of the first row. The cells in any row of the field are numbered from left to right.\n-----Examples-----\nInput\n3 3 4\n...\nR.L\nR.U\nOutput\n0 2 2 \nInput\n2 2 2\n..\nRL\nOutput\n1 1 \nInput\n2 2 2\n..\nLR\nOutput\n0 0 \nInput\n3 4 8\n....\nRRLL\nUUUU\nOutput\n1 3 3 1 \nInput\n2 2 2\n..\nUU\nOutput\n0 0 \n-----Note-----\nConsider the first sample. The notes below show how the spider arrangement changes on the field over time:\n...       ...       ..U      ...\nR.L   ->  .*U   ->   L.R   -> ...\nR.U       .R.       ..R      ...\nCharacter \"*\" represents a cell that contains two spiders at the same time.  If Om Nom starts from the first cell of the first row, he won't see any spiders.  If he starts from the second cell, he will see two spiders at time 1.  If he starts from the third cell, he will see two spiders: one at time 1, the other one at time 2.\n\ndef",
        "answer": "def count_spiders(n, m, k, field):\n    spiders = [0] * m\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == 'L':\n                spiders[j] += 1\n            elif field[i][j] == 'R':\n                spiders[j] -= 1\n    return spiders",
        "difficulty": "interview"
    },
    {
        "task_id": 1480,
        "prompt": "Complete the Python function given the prompt below:n children are standing in a circle and playing the counting-out game. Children are numbered clockwise from 1 to n. In the beginning, the first child is considered the leader. The game is played in k steps. In the i-th step the leader counts out a_{i} people in clockwise order, starting from the next person. The last one to be pointed at by the leader is eliminated, and the next player after him becomes the new leader.\nFor example, if there are children with numbers [8, 10, 13, 14, 16] currently in the circle, the leader is child 13 and a_{i} = 12, then counting-out rhyme ends on child 16, who is eliminated. Child 8 becomes the leader.\nYou have to write a program which prints the number of the child to be eliminated on every step.\n-----Input-----\nThe first line contains two integer numbers n and k (2 \u2264 n \u2264 100, 1 \u2264 k \u2264 n - 1).\nThe next line contains k integer numbers a_1, a_2,..., a_{k} (1 \u2264 a_{i} \u2264 10^9).\n-----Output-----\nPrint k numbers, the i-th one corresponds to the number of child to be eliminated at the i-th step.\n-----Examples-----\nInput\n7 5\n10 4 11 4 1\nOutput\n4 2 5 6 1 \nInput\n3 2\n2 5\nOutput\n3 2 \n-----Note-----\nLet's consider first example:   In the first step child 4 is eliminated, child 5 becomes the leader.  In the second step child 2 is eliminated, child 3 becomes the leader.  In the third step child 5 is eliminated, child 6 becomes the leader.  In the fourth step child 6 is eliminated, child 7 becomes the leader.  In the final step child 1 is eliminated, child 3 becomes the leader.\n\ndef",
        "answer": "def counting_out(n, k):\n    l = [i for i in range(1, n+1)]\n    for i in range(k):\n        l[0] = l[-1]\n        l.pop()\n        l.pop(0)\n    return l",
        "difficulty": "interview"
    },
    {
        "task_id": 1481,
        "prompt": "Complete the Python function given the prompt below:Toastman came up with a very easy task. He gives it to Appleman, but Appleman doesn't know how to solve it. Can you help him?\nGiven a n \u00d7 n checkerboard. Each cell of the board has either character 'x', or character 'o'. Is it true that each cell of the board has even number of adjacent cells with 'o'? Two cells of the board are adjacent if they share a side.\n-----Input-----\nThe first line contains an integer n (1 \u2264 n \u2264 100). Then n lines follow containing the description of the checkerboard. Each of them contains n characters (either 'x' or 'o') without spaces.\n-----Output-----\nPrint \"YES\" or \"NO\" (without the quotes) depending on the answer to the problem.\n-----Examples-----\nInput\n3\nxxo\nxox\noxx\nOutput\nYES\nInput\n4\nxxxo\nxoxo\noxox\nxxxx\nOutput\nNO\n\ndef",
        "answer": "def checkerboard(n, board):\n    for i in range(n):\n        for j in range(n):\n            if i == 0:\n                if j == 0:\n                    if board[i][j] == board[i][j+1] == board[i+1][j] == board[i+1][j+1]:\n                        return \"YES\"\n                elif j == n-1:\n                    if board[i][j] == board[i][j-1] == board[i+1][j] == board[i+1][j-1]:\n                        return \"YES\"\n                else:\n                    if board[i][j] == board[i][j-1] == board[i][j+1] == board[i+1][j] == board[i+1][j-1] == board[i+1][j+1]:\n                        return \"YES\"\n            elif i == n-1:\n                if j == 0:\n                    if board[i][j] == board[i][j+1] == board[i-1][j] == board[i-1][j+1]:\n                        return \"YES\"\n                elif j == n-1:\n                    if board[i][j] == board[i][j-1] == board[i-1][j] == board[i-1][j-1]:\n                        return \"YES\"\n                else:\n                    if board[i][j] == board[i][j-1] == board[i][j+1] == board[i-1][j] == board[i-1][j-1] == board[i-1][j+1]:\n                        return \"YES\"\n            else:\n                if j == 0:",
        "difficulty": "interview"
    },
    {
        "task_id": 1482,
        "prompt": "Complete the Python function given the prompt below:One day Ms Swan bought an orange in a shop. The orange consisted of n\u00b7k segments, numbered with integers from 1 to n\u00b7k. \nThere were k children waiting for Ms Swan at home. The children have recently learned about the orange and they decided to divide it between them. For that each child took a piece of paper and wrote the number of the segment that he would like to get: the i-th (1 \u2264 i \u2264 k) child wrote the number a_{i} (1 \u2264 a_{i} \u2264 n\u00b7k). All numbers a_{i} accidentally turned out to be different.\nNow the children wonder, how to divide the orange so as to meet these conditions:  each child gets exactly n orange segments;  the i-th child gets the segment with number a_{i} for sure;  no segment goes to two children simultaneously. \nHelp the children, divide the orange and fulfill the requirements, described above.\n-----Input-----\nThe first line contains two integers n, k (1 \u2264 n, k \u2264 30). The second line contains k space-separated integers a_1, a_2,..., a_{k} (1 \u2264 a_{i} \u2264 n\u00b7k), where a_{i} is the number of the orange segment that the i-th child would like to get.\nIt is guaranteed that all numbers a_{i} are distinct.\n-----Output-----\nPrint exactly n\u00b7k distinct integers. The first n integers represent the indexes of the segments the first child will get, the second n integers represent the indexes of the segments the second child will get, and so on. Separate the printed numbers with whitespaces.\nYou can print a child's segment indexes in any order. It is guaranteed that the answer always exists. If there are multiple correct answers, print any of them.\n-----Examples-----\nInput\n2 2\n4 1\nOutput\n2 4 \n1 3 \nInput\n3 1\n2\nOutput\n3 2 1\n\ndef",
        "answer": "def divide_orange(n, k, a):\n    # your code here\n    return a",
        "difficulty": "interview"
    },
    {
        "task_id": 1483,
        "prompt": "Complete the Python function given the prompt below:In Summer Informatics School, if a student doesn't behave well, teachers make a hole in his badge. And today one of the teachers caught a group of $n$ students doing yet another trick. \nLet's assume that all these students are numbered from $1$ to $n$. The teacher came to student $a$ and put a hole in his badge. The student, however, claimed that the main culprit is some other student $p_a$.\nAfter that, the teacher came to student $p_a$ and made a hole in his badge as well. The student in reply said that the main culprit was student $p_{p_a}$.\nThis process went on for a while, but, since the number of students was finite, eventually the teacher came to the student, who already had a hole in his badge.\nAfter that, the teacher put a second hole in the student's badge and decided that he is done with this process, and went to the sauna.\nYou don't know the first student who was caught by the teacher. However, you know all the numbers $p_i$. Your task is to find out for every student $a$, who would be the student with two holes in the badge if the first caught student was $a$.\n-----Input-----\nThe first line of the input contains the only integer $n$ ($1 \\le n \\le 1000$)\u00a0\u2014 the number of the naughty students.\nThe second line contains $n$ integers $p_1$,..., $p_n$ ($1 \\le p_i \\le n$), where $p_i$ indicates the student who was reported to the teacher by student $i$.\n-----Output-----\nFor every student $a$ from $1$ to $n$ print which student would receive two holes in the badge, if $a$ was the first student caught by the teacher.\n-----Examples-----\nInput\n3\n2 3 2\nOutput\n2 2 3 \nInput\n3\n1 2 3\nOutput\n1 2 3 \n-----Note-----\nThe picture corresponds to the first example test case.\n $8$ \nWhen $a = 1$, the teacher comes to students $1$, $2$, $3$, $2$, in this order, and the student $2$ is the one who receives a second hole in his badge.\nWhen $a = 2$, the teacher comes to students $2$, $3$, $2$, and the student $2$ gets a second hole in his badge. When $a = 3$, the teacher will visit students $3$, $2$, $3$ with student $3$ getting a second hole in his badge.\nFor the second example test case it's clear that no matter with whom the teacher starts, that student would be the one who gets the second hole in his badge.\n\ndef",
        "answer": "def main():\n    n = int(input())\n    p = list(map(int, input().split()))\n    for i in range(1, n+1):\n        if i not in p:\n            print(i)",
        "difficulty": "interview"
    },
    {
        "task_id": 1484,
        "prompt": "Complete the Python function given the prompt below:Let's denote that some array $b$ is bad if it contains a subarray $b_l, b_{l+1}, \\dots, b_{r}$ of odd length more than $1$ ($l < r$ and $r - l + 1$ is odd) such that $\\forall i \\in \\{0, 1, \\dots, r - l\\}$ $b_{l + i} = b_{r - i}$.\nIf an array is not bad, it is good.\nNow you are given an array $a_1, a_2, \\dots, a_n$. Some elements are replaced by $-1$. Calculate the number of good arrays you can obtain by replacing each $-1$ with some integer from $1$ to $k$.\nSince the answer can be large, print it modulo $998244353$.\n-----Input-----\nThe first line contains two integers $n$ and $k$ ($2 \\le n, k \\le 2 \\cdot 10^5$) \u2014 the length of array $a$ and the size of \"alphabet\", i. e., the upper bound on the numbers you may use to replace $-1$.\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($a_i = -1$ or $1 \\le a_i \\le k$) \u2014 the array $a$.\n-----Output-----\nPrint one integer \u2014 the number of good arrays you can get, modulo $998244353$.\n-----Examples-----\nInput\n2 3\n-1 -1\nOutput\n9\nInput\n5 2\n1 -1 -1 1 2\nOutput\n0\nInput\n5 3\n1 -1 -1 1 2\nOutput\n2\nInput\n4 200000\n-1 -1 12345 -1\nOutput\n735945883\n\ndef",
        "answer": "def good_arrays(a, k):\n    n = len(a)\n    good = 0\n    for i in range(n):\n        if a[i] == -1:\n            for j in range(k):\n                if i + j < n and a[i + j] == -1:\n                    good += 1\n    return good % 1000000007",
        "difficulty": "interview"
    },
    {
        "task_id": 1485,
        "prompt": "Complete the Python function given the prompt below:There are three horses living in a horse land: one gray, one white and one gray-and-white. The horses are really amusing animals, which is why they adore special cards. Each of those cards must contain two integers, the first one on top, the second one in the bottom of the card. Let's denote a card with a on the top and b in the bottom as (a, b).\nEach of the three horses can paint the special cards. If you show an (a, b) card to the gray horse, then the horse can paint a new (a + 1, b + 1) card. If you show an (a, b) card, such that a and b are even integers, to the white horse, then the horse can paint a new $(\\frac{a}{2}, \\frac{b}{2})$ card. If you show two cards (a, b) and (b, c) to the gray-and-white horse, then he can paint a new (a, c) card.\nPolycarpus really wants to get n special cards (1, a_1), (1, a_2),..., (1, a_{n}). For that he is going to the horse land. He can take exactly one (x, y) card to the horse land, such that 1 \u2264 x < y \u2264 m. How many ways are there to choose the card so that he can perform some actions in the horse land and get the required cards?\nPolycarpus can get cards from the horses only as a result of the actions that are described above. Polycarpus is allowed to get additional cards besides the cards that he requires.\n-----Input-----\nThe first line contains two integers n, m (1 \u2264 n \u2264 10^5, 2 \u2264 m \u2264 10^9). The second line contains the sequence of integers a_1, a_2,..., a_{n} (2 \u2264 a_{i} \u2264 10^9). Note, that the numbers in the sequence can coincide.\nThe numbers in the lines are separated by single spaces.\n-----Output-----\nPrint a single integer \u2014 the answer to the problem. \nPlease, do not use the %lld specifier to read or write 64-bit integers in C++. It is preferred to use the cin, cout streams or the %I64d specifier.\n-----Examples-----\nInput\n1 6\n2\nOutput\n11\nInput\n1 6\n7\nOutput\n14\nInput\n2 10\n13 7\nOutput\n36\n\ndef",
        "answer": "def polycarpus(n, m, a):\n    a.sort()\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] < m and a[j] < m:\n                count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 1486,
        "prompt": "Complete the Python function given the prompt below:All cities of Lineland are located on the Ox coordinate axis. Thus, each city is associated with its position x_{i} \u2014 a coordinate on the Ox axis. No two cities are located at a single point.\nLineland residents love to send letters to each other. A person may send a letter only if the recipient lives in another city (because if they live in the same city, then it is easier to drop in).\nStrange but true, the cost of sending the letter is exactly equal to the distance between the sender's city and the recipient's city.\nFor each city calculate two values \u200b\u200bmin_{i} and max_{i}, where min_{i} is the minimum cost of sending a letter from the i-th city to some other city, and max_{i} is the the maximum cost of sending a letter from the i-th city to some other city\n-----Input-----\nThe first line of the input contains integer n (2 \u2264 n \u2264 10^5) \u2014 the number of cities in Lineland. The second line contains the sequence of n distinct integers x_1, x_2,..., x_{n} ( - 10^9 \u2264 x_{i} \u2264 10^9), where x_{i} is the x-coordinate of the i-th city. All the x_{i}'s are distinct and follow in ascending order.\n-----Output-----\nPrint n lines, the i-th line must contain two integers min_{i}, max_{i}, separated by a space, where min_{i} is the minimum cost of sending a letter from the i-th city, and max_{i} is the maximum cost of sending a letter from the i-th city.\n-----Examples-----\nInput\n4\n-5 -2 2 7\nOutput\n3 12\n3 9\n4 7\n5 12\nInput\n2\n-1 1\nOutput\n2 2\n2 2\n\ndef",
        "answer": "def min_max_cost(n, x):\n    x.sort()\n    min_cost = 0\n    max_cost = 0\n    for i in range(n-1):\n        min_cost += abs(x[i] - x[i+1])\n        max_cost += abs(x[i] - x[i+1])\n    return min_cost, max_cost",
        "difficulty": "interview"
    },
    {
        "task_id": 1487,
        "prompt": "Complete the Python function given the prompt below:Little Susie loves strings. Today she calculates distances between them. As Susie is a small girl after all, her strings contain only digits zero and one. She uses the definition of Hamming distance:\nWe will define the distance between two strings s and t of the same length consisting of digits zero and one as the number of positions i, such that s_{i} isn't equal to t_{i}. \nAs besides everything else Susie loves symmetry, she wants to find for two strings s and t of length n such string p of length n, that the distance from p to s was equal to the distance from p to t.\nIt's time for Susie to go to bed, help her find such string p or state that it is impossible.\n-----Input-----\nThe first line contains string s of length n. \nThe second line contains string t of length n.\nThe length of string n is within range from 1 to 10^5. It is guaranteed that both strings contain only digits zero and one.\n-----Output-----\nPrint a string of length n, consisting of digits zero and one, that meets the problem statement. If no such string exist, print on a single line \"impossible\" (without the quotes).\nIf there are multiple possible answers, print any of them.\n-----Examples-----\nInput\n0001\n1011\nOutput\n0011\nInput\n000\n111\nOutput\nimpossible\n-----Note-----\nIn the first sample different answers are possible, namely \u2014 0010, 0011, 0110, 0111, 1000, 1001, 1100, 1101.\n\ndef",
        "answer": "def Hamming(s, t):\n    count = 0\n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 1488,
        "prompt": "Complete the Python function given the prompt below:Iahub is a big fan of tourists. He wants to become a tourist himself, so he planned a trip. There are n destinations on a straight road that Iahub wants to visit. Iahub starts the excursion from kilometer 0. The n destinations are described by a non-negative integers sequence a_1, a_2,..., a_{n}. The number a_{k} represents that the kth destination is at distance a_{k} kilometers from the starting point. No two destinations are located in the same place. \nIahub wants to visit each destination only once. Note that, crossing through a destination is not considered visiting, unless Iahub explicitly wants to visit it at that point. Also, after Iahub visits his last destination, he doesn't come back to kilometer 0, as he stops his trip at the last destination. \nThe distance between destination located at kilometer x and next destination, located at kilometer y, is |x - y| kilometers. We call a \"route\" an order of visiting the destinations. Iahub can visit destinations in any order he wants, as long as he visits all n destinations and he doesn't visit a destination more than once. \nIahub starts writing out on a paper all possible routes and for each of them, he notes the total distance he would walk. He's interested in the average number of kilometers he would walk by choosing a route. As he got bored of writing out all the routes, he asks you to help him.\n-----Input-----\nThe first line contains integer n (2 \u2264 n \u2264 10^5). Next line contains n distinct integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^7).\n-----Output-----\nOutput two integers \u2014 the numerator and denominator of a fraction which is equal to the wanted average number. The fraction must be irreducible.\n-----Examples-----\nInput\n3\n2 3 5\nOutput\n22 3\n-----Note-----\nConsider 6 possible routes:  [2, 3, 5]: total distance traveled: |2 \u2013 0| + |3 \u2013 2| + |5 \u2013 3| = 5;  [2, 5, 3]: |2 \u2013 0| + |5 \u2013 2| + |3 \u2013 5| = 7;  [3, 2, 5]: |3 \u2013 0| + |2 \u2013 3| + |5 \u2013 2| = 7;  [3, 5, 2]: |3 \u2013 0| + |5 \u2013 3| + |2 \u2013 5| = 8;  [5, 2, 3]: |5 \u2013 0| + |2 \u2013 5| + |3 \u2013 2| = 9;  [5, 3, 2]: |5 \u2013 0| + |3 \u2013 5| + |2 \u2013 3| = 8. \nThe average travel distance is $\\frac{1}{6} \\cdot(5 + 7 + 7 + 8 + 9 + 8)$ = $\\frac{44}{6}$ = $\\frac{22}{3}$.\n\ndef",
        "answer": "def avg_dist(n, a):\n    a.sort()\n    total = 0\n    for i in range(n):\n        total += abs(a[i] - i)\n    return total / n",
        "difficulty": "interview"
    },
    {
        "task_id": 1489,
        "prompt": "Complete the Python function given the prompt below:You are given n distinct points on a plane with integral coordinates. For each point you can either draw a vertical line through it, draw a horizontal line through it, or do nothing.\nYou consider several coinciding straight lines as a single one. How many distinct pictures you can get? Print the answer modulo 10^9 + 7.\n-----Input-----\nThe first line contains single integer n (1 \u2264 n \u2264 10^5)\u00a0\u2014 the number of points.\nn lines follow. The (i + 1)-th of these lines contains two integers x_{i}, y_{i} ( - 10^9 \u2264 x_{i}, y_{i} \u2264 10^9)\u00a0\u2014 coordinates of the i-th point.\nIt is guaranteed that all points are distinct.\n-----Output-----\nPrint the number of possible distinct pictures modulo 10^9 + 7.\n-----Examples-----\nInput\n4\n1 1\n1 2\n2 1\n2 2\nOutput\n16\nInput\n2\n-1 -1\n0 1\nOutput\n9\n-----Note-----\nIn the first example there are two vertical and two horizontal lines passing through the points. You can get pictures with any subset of these lines. For example, you can get the picture containing all four lines in two ways (each segment represents a line containing it). The first way:   [Image]   The second way:   [Image] \nIn the second example you can work with two points independently. The number of pictures is 3^2 = 9.\n\ndef",
        "answer": "def f(n):\n    if n == 1:\n        return 3\n    if n == 2:\n        return 9\n    return f(n - 1) * 3 + f(n - 2) * 3",
        "difficulty": "interview"
    },
    {
        "task_id": 1490,
        "prompt": "Complete the Python function given the prompt below:In Berland recently a new collection of toys went on sale. This collection consists of 10^9 types of toys, numbered with integers from 1 to 10^9. A toy from the new collection of the i-th type costs i bourles.\nTania has managed to collect n different types of toys a_1, a_2,..., a_{n} from the new collection. Today is Tanya's birthday, and her mother decided to spend no more than m bourles on the gift to the daughter. Tanya will choose several different types of toys from the new collection as a gift. Of course, she does not want to get a type of toy which she already has.\nTanya wants to have as many distinct types of toys in her collection as possible as the result. The new collection is too diverse, and Tanya is too little, so she asks you to help her in this.\n-----Input-----\nThe first line contains two integers n (1 \u2264 n \u2264 100 000) and m (1 \u2264 m \u2264 10^9)\u00a0\u2014 the number of types of toys that Tanya already has and the number of bourles that her mom is willing to spend on buying new toys.\nThe next line contains n distinct integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 the types of toys that Tanya already has.\n-----Output-----\nIn the first line print a single integer k\u00a0\u2014 the number of different types of toys that Tanya should choose so that the number of different types of toys in her collection is maximum possible. Of course, the total cost of the selected toys should not exceed m.\nIn the second line print k distinct space-separated integers t_1, t_2,..., t_{k} (1 \u2264 t_{i} \u2264 10^9)\u00a0\u2014 the types of toys that Tanya should choose.\nIf there are multiple answers, you may print any of them. Values of t_{i} can be printed in any order.\n-----Examples-----\nInput\n3 7\n1 3 4\nOutput\n2\n2 5 \nInput\n4 14\n4 6 12 8\nOutput\n4\n7 2 3 1\n-----Note-----\nIn the first sample mom should buy two toys: one toy of the 2-nd type and one toy of the 5-th type. At any other purchase for 7 bourles (assuming that the toys of types 1, 3 and 4 have already been bought), it is impossible to buy two and more toys.\n\ndef",
        "answer": "def solve(n, m, a):\n    a.sort()\n    ans = 0\n    for i in range(n):\n        if m >= a[i]:\n            m -= a[i]\n            ans += 1\n        else:\n            break\n    return ans",
        "difficulty": "interview"
    },
    {
        "task_id": 1491,
        "prompt": "Complete the Python function given the prompt below:Ann and Borya have n piles with candies and n is even number. There are a_{i} candies in pile with number i.\nAnn likes numbers which are square of some integer and Borya doesn't like numbers which are square of any integer. During one move guys can select some pile with candies and add one candy to it (this candy is new and doesn't belong to any other pile) or remove one candy (if there is at least one candy in this pile). \nFind out minimal number of moves that is required to make exactly n / 2 piles contain number of candies that is a square of some integer and exactly n / 2 piles contain number of candies that is not a square of any integer.\n-----Input-----\nFirst line contains one even integer n (2 \u2264 n \u2264 200 000)\u00a0\u2014 number of piles with candies.\nSecond line contains sequence of integers a_1, a_2,..., a_{n} (0 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 amounts of candies in each pile.\n-----Output-----\nOutput minimal number of steps required to make exactly n / 2 piles contain number of candies that is a square of some integer and exactly n / 2 piles contain number of candies that is not a square of any integer. If condition is already satisfied output 0.\n-----Examples-----\nInput\n4\n12 14 30 4\nOutput\n2\nInput\n6\n0 0 0 0 0 0\nOutput\n6\nInput\n6\n120 110 23 34 25 45\nOutput\n3\nInput\n10\n121 56 78 81 45 100 1 0 54 78\nOutput\n0\n-----Note-----\nIn first example you can satisfy condition in two moves. During each move you should add one candy to second pile. After it size of second pile becomes 16. After that Borya and Ann will have two piles with number of candies which is a square of integer (second and fourth pile) and two piles with number of candies which is not a square of any integer (first and third pile).\nIn second example you should add two candies to any three piles.\n\ndef",
        "answer": "def solve(n, a):\n    if n % 2 == 0:\n        return 0\n    else:\n        return n - sum([1 for i in a if i % (i ** 0.5) == 0])",
        "difficulty": "interview"
    },
    {
        "task_id": 1492,
        "prompt": "Complete the Python function given the prompt below:The Berland Forest can be represented as an infinite cell plane. Every cell contains a tree. That is, contained before the recent events.\nA destructive fire raged through the Forest, and several trees were damaged by it. Precisely speaking, you have a $n \\times m$ rectangle map which represents the damaged part of the Forest. The damaged trees were marked as \"X\" while the remaining ones were marked as \".\". You are sure that all burnt trees are shown on the map. All the trees outside the map are undamaged.\nThe firemen quickly extinguished the fire, and now they are investigating the cause of it. The main version is that there was an arson: at some moment of time (let's consider it as $0$) some trees were set on fire. At the beginning of minute $0$, only the trees that were set on fire initially were burning. At the end of each minute, the fire spread from every burning tree to each of $8$ neighboring trees. At the beginning of minute $T$, the fire was extinguished.\nThe firemen want to find the arsonists as quickly as possible. The problem is, they know neither the value of $T$ (how long the fire has been raging) nor the coordinates of the trees that were initially set on fire. They want you to find the maximum value of $T$ (to know how far could the arsonists escape) and a possible set of trees that could be initially set on fire.\nNote that you'd like to maximize value $T$ but the set of trees can be arbitrary.\n-----Input-----\nThe first line contains two integer $n$ and $m$ ($1 \\le n, m \\le 10^6$, $1 \\le n \\cdot m \\le 10^6$) \u2014 the sizes of the map.\nNext $n$ lines contain the map. The $i$-th line corresponds to the $i$-th row of the map and contains $m$-character string. The $j$-th character of the $i$-th string is \"X\" if the corresponding tree is burnt and \".\" otherwise.\nIt's guaranteed that the map contains at least one \"X\".\n-----Output-----\nIn the first line print the single integer $T$ \u2014 the maximum time the Forest was on fire. In the next $n$ lines print the certificate: the map ($n \\times m$ rectangle) where the trees that were set on fire are marked as \"X\" and all other trees are marked as \".\".\n-----Examples-----\nInput\n3 6\nXXXXXX\nXXXXXX\nXXXXXX\nOutput\n1\n......\n.X.XX.\n......\nInput\n10 10\n.XXXXXX...\n.XXXXXX...\n.XXXXXX...\n.XXXXXX...\n.XXXXXXXX.\n...XXXXXX.\n...XXXXXX.\n...XXXXXX.\n...XXXXXX.\n..........\nOutput\n2\n..........\n..........\n...XX.....\n..........\n..........\n..........\n.....XX...\n..........\n..........\n..........\nInput\n4 5\nX....\n..XXX\n..XXX\n..XXX\nOutput\n0\nX....\n..XXX\n..XXX\n..XXX\n\ndef",
        "answer": "def solve(n, m, a):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1493,
        "prompt": "Complete the Python function given the prompt below:DZY loves chessboard, and he enjoys playing with it.\nHe has a chessboard of n rows and m columns. Some cells of the chessboard are bad, others are good. For every good cell, DZY wants to put a chessman on it. Each chessman is either white or black. After putting all chessmen, DZY wants that no two chessmen with the same color are on two adjacent cells. Two cells are adjacent if and only if they share a common edge.\nYou task is to find any suitable placement of chessmen on the given chessboard.\n-----Input-----\nThe first line contains two space-separated integers n and m (1 \u2264 n, m \u2264 100).\nEach of the next n lines contains a string of m characters: the j-th character of the i-th string is either \".\" or \"-\". A \".\" means that the corresponding cell (in the i-th row and the j-th column) is good, while a \"-\" means it is bad.\n-----Output-----\nOutput must contain n lines, each line must contain a string of m characters. The j-th character of the i-th string should be either \"W\", \"B\" or \"-\". Character \"W\" means the chessman on the cell is white, \"B\" means it is black, \"-\" means the cell is a bad cell.\nIf multiple answers exist, print any of them. It is guaranteed that at least one answer exists.\n-----Examples-----\nInput\n1 1\n.\nOutput\nB\nInput\n2 2\n..\n..\nOutput\nBW\nWB\nInput\n3 3\n.-.\n---\n--.\nOutput\nB-B\n---\n--B\n-----Note-----\nIn the first sample, DZY puts a single black chessman. Of course putting a white one is also OK.\nIn the second sample, all 4 cells are good. No two same chessmen share an edge in the sample output.\nIn the third sample, no good cells are adjacent. So you can just put 3 chessmen, no matter what their colors are.\n\ndef",
        "answer": "def chessboard(n, m, board):\n    for i in range(n):\n        for j in range(m):\n            if i % 2 == 0:\n                if j % 2 == 0:\n                    if board[i][j] == '.':\n                        board[i][j] = 'B'\n                    else:\n                        board[i][j] = 'W'\n                else:\n                    if board[i][j] == '.':\n                        board[i][j] = 'W'\n                    else:\n                        board[i][j] = 'B'\n            else:\n                if j % 2 == 0:\n                    if board[i][j] == '.':\n                        board[i][j] = 'W'\n                    else:\n                        board[i][j] = 'B'\n                else:\n                    if board[i][j] == '.':\n                        board[i][j] = 'B'\n                    else:\n                        board[i][j] = 'W'\n    for i in range(n):\n        for j in range(m):\n            if i % 2 == 0:\n                if j % 2 == 0:\n                    if board[i][j] == 'B':\n                        if j!= m - 1:\n                            if board[i][j + 1] == 'B':\n                                board[i][j] = '-'\n                                board[i][j + 1] = '-'\n                        if j!= 0:\n                            if board[i][j - 1] == 'B':\n                                board[i][j] = '-'\n                                board[i][j - 1] = '-'\n                    else:\n                        if j!= m - 1:\n                            if board[i][j + 1] == 'W",
        "difficulty": "interview"
    },
    {
        "task_id": 1494,
        "prompt": "Complete the Python function given the prompt below:Dreamoon has a string s and a pattern string p. He first removes exactly x characters from s obtaining string s' as a result. Then he calculates $\\operatorname{occ}(s^{\\prime}, p)$ that is defined as the maximal number of non-overlapping substrings equal to p that can be found in s'. He wants to make this number as big as possible.\nMore formally, let's define $\\operatorname{ans}(x)$ as maximum value of $\\operatorname{occ}(s^{\\prime}, p)$ over all s' that can be obtained by removing exactly x characters from s. Dreamoon wants to know $\\operatorname{ans}(x)$ for all x from 0 to |s| where |s| denotes the length of string s.\n-----Input-----\nThe first line of the input contains the string s (1 \u2264 |s| \u2264 2 000).\nThe second line of the input contains the string p (1 \u2264 |p| \u2264 500).\nBoth strings will only consist of lower case English letters.\n-----Output-----\nPrint |s| + 1 space-separated integers in a single line representing the $\\operatorname{ans}(x)$ for all x from 0 to |s|.\n-----Examples-----\nInput\naaaaa\naa\nOutput\n2 2 1 1 0 0\nInput\naxbaxxb\nab\nOutput\n0 1 1 2 1 1 0 0\n-----Note-----\nFor the first sample, the corresponding optimal values of s' after removal 0 through |s| = 5 characters from s are {\"aaaaa\", \"aaaa\", \"aaa\", \"aa\", \"a\", \"\"}. \nFor the second sample, possible corresponding optimal values of s' are {\"axbaxxb\", \"abaxxb\", \"axbab\", \"abab\", \"aba\", \"ab\", \"a\", \"\"}.\n\ndef",
        "answer": "def solve(s, p):\n    n = len(s)\n    m = len(p)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if p[i - 1] == s[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[m][n]",
        "difficulty": "interview"
    },
    {
        "task_id": 1495,
        "prompt": "Complete the Python function given the prompt below:Amr loves Chemistry, and specially doing experiments. He is preparing for a new interesting experiment.\nAmr has n different types of chemicals. Each chemical i has an initial volume of a_{i} liters. For this experiment, Amr has to mix all the chemicals together, but all the chemicals volumes must be equal first. So his task is to make all the chemicals volumes equal.\nTo do this, Amr can do two different kind of operations.   Choose some chemical i and double its current volume so the new volume will be 2a_{i}  Choose some chemical i and divide its volume by two (integer division) so the new volume will be $\\lfloor \\frac{a_{i}}{2} \\rfloor$ \nSuppose that each chemical is contained in a vessel of infinite volume. Now Amr wonders what is the minimum number of operations required to make all the chemicals volumes equal?\n-----Input-----\nThe first line contains one number n (1 \u2264 n \u2264 10^5), the number of chemicals.\nThe second line contains n space separated integers a_{i} (1 \u2264 a_{i} \u2264 10^5), representing the initial volume of the i-th chemical in liters.\n-----Output-----\nOutput one integer the minimum number of operations required to make all the chemicals volumes equal.\n-----Examples-----\nInput\n3\n4 8 2\nOutput\n2\nInput\n3\n3 5 6\nOutput\n5\n-----Note-----\nIn the first sample test, the optimal solution is to divide the second chemical volume by two, and multiply the third chemical volume by two to make all the volumes equal 4.\nIn the second sample test, the optimal solution is to divide the first chemical volume by two, and divide the second and the third chemical volumes by two twice to make all the volumes equal 1.\n\ndef",
        "answer": "def solve(n, a):\n    return n - 1",
        "difficulty": "interview"
    },
    {
        "task_id": 1496,
        "prompt": "Complete the Python function given the prompt below:Nura wants to buy k gadgets. She has only s burles for that. She can buy each gadget for dollars or for pounds. So each gadget is selling only for some type of currency. The type of currency and the cost in that currency are not changing.\nNura can buy gadgets for n days. For each day you know the exchange rates of dollar and pound, so you know the cost of conversion burles to dollars or to pounds.\nEach day (from 1 to n) Nura can buy some gadgets by current exchange rate. Each day she can buy any gadgets she wants, but each gadget can be bought no more than once during n days.\nHelp Nura to find the minimum day index when she will have k gadgets. Nura always pays with burles, which are converted according to the exchange rate of the purchase day. Nura can't buy dollars or pounds, she always stores only burles. Gadgets are numbered with integers from 1 to m in order of their appearing in input.\n-----Input-----\nFirst line contains four integers n, m, k, s (1 \u2264 n \u2264 2\u00b710^5, 1 \u2264 k \u2264 m \u2264 2\u00b710^5, 1 \u2264 s \u2264 10^9) \u2014 number of days, total number and required number of gadgets, number of burles Nura has.\nSecond line contains n integers a_{i} (1 \u2264 a_{i} \u2264 10^6) \u2014 the cost of one dollar in burles on i-th day.\nThird line contains n integers b_{i} (1 \u2264 b_{i} \u2264 10^6) \u2014 the cost of one pound in burles on i-th day.\nEach of the next m lines contains two integers t_{i}, c_{i} (1 \u2264 t_{i} \u2264 2, 1 \u2264 c_{i} \u2264 10^6) \u2014 type of the gadget and it's cost. For the gadgets of the first type cost is specified in dollars. For the gadgets of the second type cost is specified in pounds.\n-----Output-----\nIf Nura can't buy k gadgets print the only line with the number -1.\nOtherwise the first line should contain integer d \u2014 the minimum day index, when Nura will have k gadgets. On each of the next k lines print two integers q_{i}, d_{i} \u2014 the number of gadget and the day gadget should be bought. All values q_{i} should be different, but the values d_{i} can coincide (so Nura can buy several gadgets at one day). The days are numbered from 1 to n.\nIn case there are multiple possible solutions, print any of them.\n-----Examples-----\nInput\n5 4 2 2\n1 2 3 2 1\n3 2 1 2 3\n1 1\n2 1\n1 2\n2 2\nOutput\n3\n1 1\n2 3\nInput\n4 3 2 200\n69 70 71 72\n104 105 106 107\n1 1\n2 2\n1 2\nOutput\n-1\nInput\n4 3 1 1000000000\n900000 910000 940000 990000\n990000 999000 999900 999990\n1 87654\n2 76543\n1 65432\nOutput\n-1\n\ndef",
        "answer": "def func(n, m, k, s):\n    if k > m:\n        return -1\n    if k == m:\n        return n\n    if k == 1:\n        return n\n    if s < m:\n        return -1\n    if s == m:\n        return n\n    if s == 1:\n        return n\n    if s == 2:\n        return n\n    if s == 3:\n        return n\n    if s == 4:\n        return n\n    if s == 5:\n        return n\n    if s == 6:\n        return n\n    if s == 7:\n        return n\n    if s == 8:\n        return n\n    if s == 9:\n        return n\n    if s == 10:\n        return n\n    if s == 11:\n        return n\n    if s == 12:\n        return n\n    if s == 13:\n        return n\n    if s == 14:\n        return n\n    if s == 15:\n        return n\n    if s == 16:\n        return n\n    if s == 17:\n        return n\n    if s == 18:\n        return n\n    if s == 19:\n        return n\n    if s == 20:\n        return n\n    if s == 21:\n        return n\n    if s == 22:\n        return n\n    if s == 23:\n        return n\n    if s == 24:\n        return n\n    if s == 25:\n        return n\n    if s == 26:\n        return n\n    if s == 27:\n        return n\n    if s == 28:\n        return n\n    if s == 29:\n        return n\n    if s == 30:\n        return n\n    if",
        "difficulty": "interview"
    },
    {
        "task_id": 1497,
        "prompt": "Complete the Python function given the prompt below:Ohana Matsumae is trying to clean a room, which is divided up into an n by n grid of squares. Each square is initially either clean or dirty. Ohana can sweep her broom over columns of the grid. Her broom is very strange: if she sweeps over a clean square, it will become dirty, and if she sweeps over a dirty square, it will become clean. She wants to sweep some columns of the room to maximize the number of rows that are completely clean. It is not allowed to sweep over the part of the column, Ohana can only sweep the whole column.\nReturn the maximum number of rows that she can make completely clean.\n-----Input-----\nThe first line of input will be a single integer n (1 \u2264 n \u2264 100).\nThe next n lines will describe the state of the room. The i-th line will contain a binary string with n characters denoting the state of the i-th row of the room. The j-th character on this line is '1' if the j-th square in the i-th row is clean, and '0' if it is dirty.\n-----Output-----\nThe output should be a single line containing an integer equal to a maximum possible number of rows that are completely clean.\n-----Examples-----\nInput\n4\n0101\n1000\n1111\n0101\nOutput\n2\nInput\n3\n111\n111\n111\nOutput\n3\n-----Note-----\nIn the first sample, Ohana can sweep the 1st and 3rd columns. This will make the 1st and 4th row be completely clean.\nIn the second sample, everything is already clean, so Ohana doesn't need to do anything.\n\ndef",
        "answer": "def clean(n, grid):\n    count = 0\n    for i in range(n):\n        if grid[i].count('1') == 0:\n            count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 1498,
        "prompt": "Complete the Python function given the prompt below:There are n servers in a laboratory, each of them can perform tasks. Each server has a unique id\u00a0\u2014 integer from 1 to n.\nIt is known that during the day q tasks will come, the i-th of them is characterized with three integers: t_{i}\u00a0\u2014 the moment in seconds in which the task will come, k_{i}\u00a0\u2014 the number of servers needed to perform it, and d_{i}\u00a0\u2014 the time needed to perform this task in seconds. All t_{i} are distinct.\nTo perform the i-th task you need k_{i} servers which are unoccupied in the second t_{i}. After the servers begin to perform the task, each of them will be busy over the next d_{i} seconds. Thus, they will be busy in seconds t_{i}, t_{i} + 1,..., t_{i} + d_{i} - 1. For performing the task, k_{i} servers with the smallest ids will be chosen from all the unoccupied servers. If in the second t_{i} there are not enough unoccupied servers, the task is ignored.\nWrite the program that determines which tasks will be performed and which will be ignored.\n-----Input-----\nThe first line contains two positive integers n and q (1 \u2264 n \u2264 100, 1 \u2264 q \u2264 10^5) \u2014 the number of servers and the number of tasks. \nNext q lines contains three integers each, the i-th line contains integers t_{i}, k_{i} and d_{i} (1 \u2264 t_{i} \u2264 10^6, 1 \u2264 k_{i} \u2264 n, 1 \u2264 d_{i} \u2264 1000)\u00a0\u2014 the moment in seconds in which the i-th task will come, the number of servers needed to perform it, and the time needed to perform this task in seconds. The tasks are given in a chronological order and they will come in distinct seconds. \n-----Output-----\nPrint q lines. If the i-th task will be performed by the servers, print in the i-th line the sum of servers' ids on which this task will be performed. Otherwise, print -1.\n-----Examples-----\nInput\n4 3\n1 3 2\n2 2 1\n3 4 3\nOutput\n6\n-1\n10\nInput\n3 2\n3 2 3\n5 1 2\nOutput\n3\n3\nInput\n8 6\n1 3 20\n4 2 1\n6 5 5\n10 1 1\n15 3 6\n21 8 8\nOutput\n6\n9\n30\n-1\n15\n36\n-----Note-----\nIn the first example in the second 1 the first task will come, it will be performed on the servers with ids 1, 2 and 3 (the sum of the ids equals 6) during two seconds. In the second 2 the second task will come, it will be ignored, because only the server 4 will be unoccupied at that second. In the second 3 the third task will come. By this time, servers with the ids 1, 2 and 3 will be unoccupied again, so the third task will be done on all the servers with the ids 1, 2, 3 and 4 (the sum of the ids is 10).\nIn the second example in the second 3 the first task will come, it will be performed on the servers with ids 1 and 2 (the sum of the ids is 3) during three seconds. In the second 5 the second task will come, it will be performed on the server 3, because the first two servers will be busy performing the first task.\n\ndef",
        "answer": "def task_assignment(n, q, tasks):\n    tasks.sort(key=lambda x: x[0])\n    tasks.sort(key=lambda x: x[2])\n    tasks.sort(key=lambda x: x[1])\n    tasks.sort(key=lambda x: x[0])\n    tasks.sort(key=lambda x: x[1])\n    tasks.sort(key=lambda x: x[2])\n    tasks.sort(key=lambda x: x[0])\n    tasks.sort(key=lambda x: x[1])\n    tasks.sort(key=lambda x: x[2])\n    tasks.sort(key=lambda x: x[0])\n    tasks.sort(key=lambda x: x[1])\n    tasks.sort(key=lambda x: x[2])\n    tasks.sort(key=lambda x: x[0])\n    tasks.sort(key=lambda x: x[1])\n    tasks.sort(key=lambda x: x[2])\n    tasks.sort(key=lambda x: x[0])\n    tasks.sort(key=lambda x: x[1])\n    tasks.sort(key=lambda x: x[2])\n    tasks.sort(key=lambda x: x[0])\n    tasks.sort(key=lambda x: x[1])\n    tasks.sort(key=lambda x: x[2])\n    tasks.sort(key=lambda x: x[0])\n    tasks.sort(key=lambda x: x[1])\n    tasks.sort(key=lambda x: x[2])\n    tasks.",
        "difficulty": "interview"
    },
    {
        "task_id": 1499,
        "prompt": "Complete the Python function given the prompt below:Consider 2n rows of the seats in a bus. n rows of the seats on the left and n rows of the seats on the right. Each row can be filled by two people. So the total capacity of the bus is 4n.\nConsider that m (m \u2264 4n) people occupy the seats in the bus. The passengers entering the bus are numbered from 1 to m (in the order of their entering the bus). The pattern of the seat occupation is as below:\n1-st row left window seat, 1-st row right window seat, 2-nd row left window seat, 2-nd row right window seat,..., n-th row left window seat, n-th row right window seat.\nAfter occupying all the window seats (for m > 2n) the non-window seats are occupied:\n1-st row left non-window seat, 1-st row right non-window seat,..., n-th row left non-window seat, n-th row right non-window seat.\nAll the passengers go to a single final destination. In the final destination, the passengers get off in the given order.\n1-st row left non-window seat, 1-st row left window seat, 1-st row right non-window seat, 1-st row right window seat,..., n-th row left non-window seat, n-th row left window seat, n-th row right non-window seat, n-th row right window seat. [Image] The seating for n = 9 and m = 36. \nYou are given the values n and m. Output m numbers from 1 to m, the order in which the passengers will get off the bus.\n-----Input-----\nThe only line contains two integers, n and m (1 \u2264 n \u2264 100, 1 \u2264 m \u2264 4n) \u2014 the number of pairs of rows and the number of passengers.\n-----Output-----\nPrint m distinct integers from 1 to m \u2014 the order in which the passengers will get off the bus.\n-----Examples-----\nInput\n2 7\nOutput\n5 1 6 2 7 3 4\nInput\n9 36\nOutput\n19 1 20 2 21 3 22 4 23 5 24 6 25 7 26 8 27 9 28 10 29 11 30 12 31 13 32 14 33 15 34 16 35 17 36 18\n\ndef",
        "answer": "def seats(n, m):\n    l = [i for i in range(1, m+1)]\n    for i in range(n):\n        l.insert(0, l.pop())\n        l.insert(len(l), l.pop(0))\n    return l",
        "difficulty": "interview"
    }
]