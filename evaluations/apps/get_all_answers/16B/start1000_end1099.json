[
    {
        "task_id": 1000,
        "prompt": "Complete the Python function given the prompt below:Sasha is a very happy guy, that's why he is always on the move. There are $n$ cities in the country where Sasha lives. They are all located on one straight line, and for convenience, they are numbered from $1$ to $n$ in increasing order. The distance between any two adjacent cities is equal to $1$ kilometer. Since all roads in the country are directed, it's possible to reach the city $y$ from the city $x$ only if $x < y$. \nOnce Sasha decided to go on a trip around the country and to visit all $n$ cities. He will move with the help of his car, Cheetah-2677. The tank capacity of this model is $v$ liters, and it spends exactly $1$ liter of fuel for $1$ kilometer of the way. At the beginning of the journey, the tank is empty. Sasha is located in the city with the number $1$ and wants to get to the city with the number $n$. There is a gas station in each city. In the $i$-th city, the price of $1$ liter of fuel is $i$ dollars. It is obvious that at any moment of time, the tank can contain at most $v$ liters of fuel.\nSasha doesn't like to waste money, that's why he wants to know what is the minimum amount of money is needed to finish the trip if he can buy fuel in any city he wants. Help him to figure it out!\n-----Input-----\nThe first line contains two integers $n$ and $v$ ($2 \\le n \\le 100$, $1 \\le v \\le 100$) \u00a0\u2014 the number of cities in the country and the capacity of the tank.\n-----Output-----\nPrint one integer\u00a0\u2014 the minimum amount of money that is needed to finish the trip.\n-----Examples-----\nInput\n4 2\nOutput\n4\nInput\n7 6\nOutput\n6\n-----Note-----\nIn the first example, Sasha can buy $2$ liters for $2$ dollars ($1$ dollar per liter) in the first city, drive to the second city, spend $1$ liter of fuel on it, then buy $1$ liter for $2$ dollars in the second city and then drive to the $4$-th city. Therefore, the answer is $1+1+2=4$.\nIn the second example, the capacity of the tank allows to fill the tank completely in the first city, and drive to the last city without stops in other cities.\n\ndef",
        "answer": "def min_cost(n, v):\n    cost = 0\n    for i in range(1, n):\n        cost += i\n    return cost",
        "difficulty": "interview"
    },
    {
        "task_id": 1001,
        "prompt": "Complete the Python function given the prompt below:Once upon a time Petya and Gena gathered after another programming competition and decided to play some game. As they consider most modern games to be boring, they always try to invent their own games. They have only stickers and markers, but that won't stop them.\nThe game they came up with has the following rules. Initially, there are n stickers on the wall arranged in a row. Each sticker has some number written on it. Now they alternate turn, Petya moves first.\nOne move happens as follows. Lets say there are m \u2265 2 stickers on the wall. The player, who makes the current move, picks some integer k from 2 to m and takes k leftmost stickers (removes them from the wall). After that he makes the new sticker, puts it to the left end of the row, and writes on it the new integer, equal to the sum of all stickers he took on this move. \nGame ends when there is only one sticker left on the wall. The score of the player is equal to the sum of integers written on all stickers he took during all his moves. The goal of each player is to maximize the difference between his score and the score of his opponent.\nGiven the integer n and the initial sequence of stickers on the wall, define the result of the game, i.e. the difference between the Petya's and Gena's score if both players play optimally. \n-----Input-----\nThe first line of input contains a single integer n (2 \u2264 n \u2264 200 000)\u00a0\u2014 the number of stickers, initially located on the wall.\nThe second line contains n integers a_1, a_2,..., a_{n} ( - 10 000 \u2264 a_{i} \u2264 10 000)\u00a0\u2014 the numbers on stickers in order from left to right.\n-----Output-----\nPrint one integer\u00a0\u2014 the difference between the Petya's score and Gena's score at the end of the game if both players play optimally.\n-----Examples-----\nInput\n3\n2 4 8\nOutput\n14\nInput\n4\n1 -7 -2 3\nOutput\n-3\n-----Note-----\nIn the first sample, the optimal move for Petya is to take all the stickers. As a result, his score will be equal to 14 and Gena's score will be equal to 0.\nIn the second sample, the optimal sequence of moves is the following. On the first move Petya will take first three sticker and will put the new sticker with value  - 8. On the second move Gena will take the remaining two stickers. The Petya's score is 1 + ( - 7) + ( - 2) =  - 8, Gena's score is ( - 8) + 3 =  - 5, i.e. the score difference will be  - 3.\n\ndef",
        "answer": "def game(n, stickers):\n    petya = 0\n    gena = 0\n    for i in range(n):\n        if i % 2 == 0:\n            petya += stickers[i]\n        else:\n            gena += stickers[i]\n    return petya - gena",
        "difficulty": "interview"
    },
    {
        "task_id": 1002,
        "prompt": "Complete the Python function given the prompt below:Devu is a renowned classical singer. He is invited to many big functions/festivals. Recently he was invited to \"All World Classical Singing Festival\". Other than Devu, comedian Churu was also invited.\nDevu has provided organizers a list of the songs and required time for singing them. He will sing n songs, i^{th} song will take t_{i} minutes exactly. \nThe Comedian, Churu will crack jokes. All his jokes are of 5 minutes exactly.\nPeople have mainly come to listen Devu. But you know that he needs rest of 10 minutes after each song. On the other hand, Churu being a very active person, doesn't need any rest.\nYou as one of the organizers should make an optimal s\u0441hedule for the event. For some reasons you must follow the conditions:  The duration of the event must be no more than d minutes;  Devu must complete all his songs;  With satisfying the two previous conditions the number of jokes cracked by Churu should be as many as possible. \nIf it is not possible to find a way to conduct all the songs of the Devu, output -1. Otherwise find out maximum number of jokes that Churu can crack in the grand event.\n-----Input-----\nThe first line contains two space separated integers n, d (1 \u2264 n \u2264 100;\u00a01 \u2264 d \u2264 10000). The second line contains n space-separated integers: t_1, t_2,..., t_{n} (1 \u2264 t_{i} \u2264 100).\n-----Output-----\nIf there is no way to conduct all the songs of Devu, output -1. Otherwise output the maximum number of jokes that Churu can crack in the grand event.\n-----Examples-----\nInput\n3 30\n2 2 1\nOutput\n5\nInput\n3 20\n2 1 1\nOutput\n-1\n-----Note-----\nConsider the first example. The duration of the event is 30 minutes. There could be maximum 5 jokes in the following way:  First Churu cracks a joke in 5 minutes.  Then Devu performs the first song for 2 minutes.  Then Churu cracks 2 jokes in 10 minutes.  Now Devu performs second song for 2 minutes.  Then Churu cracks 2 jokes in 10 minutes.  Now finally Devu will perform his last song in 1 minutes.  \nTotal time spent is 5 + 2 + 10 + 2 + 10 + 1 = 30 minutes.\nConsider the second example. There is no way of organizing Devu's all songs. Hence the answer is -1.\n\ndef",
        "answer": "def solve(n, d, t):\n    if n * max(t) > d:\n        return -1\n    return n * max(t)",
        "difficulty": "interview"
    },
    {
        "task_id": 1003,
        "prompt": "Complete the Python function given the prompt below:Vasya has n pairs of socks. In the morning of each day Vasya has to put on a pair of socks before he goes to school. When he comes home in the evening, Vasya takes off the used socks and throws them away. Every m-th day (at days with numbers m, 2m, 3m,...) mom buys a pair of socks to Vasya. She does it late in the evening, so that Vasya cannot put on a new pair of socks before the next day. How many consecutive days pass until Vasya runs out of socks?\n-----Input-----\nThe single line contains two integers n and m (1 \u2264 n \u2264 100;\u00a02 \u2264 m \u2264 100), separated by a space.\n-----Output-----\nPrint a single integer \u2014 the answer to the problem.\n-----Examples-----\nInput\n2 2\nOutput\n3\nInput\n9 3\nOutput\n13\n-----Note-----\nIn the first sample Vasya spends the first two days wearing the socks that he had initially. Then on day three he puts on the socks that were bought on day two.\nIn the second sample Vasya spends the first nine days wearing the socks that he had initially. Then he spends three days wearing the socks that were bought on the third, sixth and ninth days. Than he spends another day wearing the socks that were bought on the twelfth day.\n\ndef",
        "answer": "def sockMerchant(n, ar):\n    count = 0\n    ar.sort()\n    ar.append('#')\n    i = 0\n    while i<n:\n        if ar[i]==ar[i+1]:\n            count+=1\n            i+=2\n        else:\n            i+=1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 1004,
        "prompt": "Complete the Python function given the prompt below:The Central Company has an office with a sophisticated security system. There are $10^6$ employees, numbered from $1$ to $10^6$.\nThe security system logs entrances and departures. The entrance of the $i$-th employee is denoted by the integer $i$, while the departure of the $i$-th employee is denoted by the integer $-i$.\nThe company has some strict rules about access to its office:\n  An employee can enter the office at most once per day.  He obviously can't leave the office if he didn't enter it earlier that day.  In the beginning and at the end of every day, the office is empty (employees can't stay at night). It may also be empty at any moment of the day. \nAny array of events satisfying these conditions is called a valid day.\nSome examples of valid or invalid days:\n  $[1, 7, -7, 3, -1, -3]$ is a valid day ($1$ enters, $7$ enters, $7$ leaves, $3$ enters, $1$ leaves, $3$ leaves).  $[2, -2, 3, -3]$ is also a valid day.  $[2, 5, -5, 5, -5, -2]$ is not a valid day, because $5$ entered the office twice during the same day.  $[-4, 4]$ is not a valid day, because $4$ left the office without being in it.  $[4]$ is not a valid day, because $4$ entered the office and didn't leave it before the end of the day. \nThere are $n$ events $a_1, a_2, \\ldots, a_n$, in the order they occurred. This array corresponds to one or more consecutive days. The system administrator erased the dates of events by mistake, but he didn't change the order of the events.\nYou must partition (to cut) the array $a$ of events into contiguous subarrays, which must represent non-empty valid days (or say that it's impossible). Each array element should belong to exactly one contiguous subarray of a partition. Each contiguous subarray of a partition should be a valid day.\nFor example, if $n=8$ and $a=[1, -1, 1, 2, -1, -2, 3, -3]$ then he can partition it into two contiguous subarrays which are valid days: $a = [1, -1~ \\boldsymbol{|}~ 1, 2, -1, -2, 3, -3]$.\nHelp the administrator to partition the given array $a$ in the required way or report that it is impossible to do. Find any required partition, you should not minimize or maximize the number of parts.\n-----Input-----\nThe first line contains a single integer $n$ ($1 \\le n \\le 10^5$).\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($-10^6 \\le a_i \\le 10^6$ and $a_i \\neq 0$).\n-----Output-----\nIf there is no valid partition, print $-1$. Otherwise, print any valid partition in the following format:\n  On the first line print the number $d$ of days ($1 \\le d \\le n$).  On the second line, print $d$ integers $c_1, c_2, \\ldots, c_d$ ($1 \\le c_i \\le n$ and $c_1 + c_2 + \\ldots + c_d = n$), where $c_i$ is the number of events in the $i$-th day. \nIf there are many valid solutions, you can print any of them. You don't have to minimize nor maximize the number of days.\n-----Examples-----\nInput\n6\n1 7 -7 3 -1 -3\nOutput\n1\n6\nInput\n8\n1 -1 1 2 -1 -2 3 -3\nOutput\n2\n2 6\nInput\n6\n2 5 -5 5 -5 -2\nOutput\n-1\nInput\n3\n-8 1 1\nOutput\n-1\n-----Note-----\nIn the first example, the whole array is a valid day.\nIn the second example, one possible valid solution is to split the array into $[1, -1]$ and $[1, 2, -1, -2, 3, -3]$ ($d = 2$ and $c = [2, 6]$). The only other valid solution would be to split the array into $[1, -1]$, $[1, 2, -1, -2]$ and $[3, -3]$ ($d = 3$ and $c = [2, 4, 2]$). Both solutions are accepted.\nIn the third and fourth examples, we can prove that there exists no valid solution. Please note that the array given in input is not guaranteed to represent a coherent set of events.\n\ndef",
        "answer": "def partition(a):\n    n = len(a)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] == a[j]:\n                dp[i][j] = dp[i][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n    return dp[0][n - 1]",
        "difficulty": "interview"
    },
    {
        "task_id": 1005,
        "prompt": "Complete the Python function given the prompt below:The only difference between easy and hard versions is constraints.\nThe BerTV channel every day broadcasts one episode of one of the $k$ TV shows. You know the schedule for the next $n$ days: a sequence of integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le k$), where $a_i$ is the show, the episode of which will be shown in $i$-th day.\nThe subscription to the show is bought for the entire show (i.e. for all its episodes), for each show the subscription is bought separately.\nHow many minimum subscriptions do you need to buy in order to have the opportunity to watch episodes of purchased shows $d$ ($1 \\le d \\le n$) days in a row? In other words, you want to buy the minimum number of TV shows so that there is some segment of $d$ consecutive days in which all episodes belong to the purchased shows.\n-----Input-----\nThe first line contains an integer $t$ ($1 \\le t \\le 100$) \u2014 the number of test cases in the input. Then $t$ test case descriptions follow.\nThe first line of each test case contains three integers $n, k$ and $d$ ($1 \\le n \\le 100$, $1 \\le k \\le 100$, $1 \\le d \\le n$). The second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le k$), where $a_i$ is the show that is broadcasted on the $i$-th day.\nIt is guaranteed that the sum of the values \u200b\u200bof $n$ for all test cases in the input does not exceed $100$.\n-----Output-----\nPrint $t$ integers \u2014 the answers to the test cases in the input in the order they follow. The answer to a test case is the minimum number of TV shows for which you need to purchase a subscription so that you can watch episodes of the purchased TV shows on BerTV for $d$ consecutive days. Please note that it is permissible that you will be able to watch more than $d$ days in a row.\n-----Example-----\nInput\n4\n5 2 2\n1 2 1 2 1\n9 3 3\n3 3 3 2 2 2 1 1 1\n4 10 4\n10 8 6 4\n16 9 8\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\nOutput\n2\n1\n4\n5\n-----Note-----\nIn the first test case to have an opportunity to watch shows for two consecutive days, you need to buy a subscription on show $1$ and on show $2$. So the answer is two.\nIn the second test case, you can buy a subscription to any show because for each show you can find a segment of three consecutive days, consisting only of episodes of this show.\nIn the third test case in the unique segment of four days, you have four different shows, so you need to buy a subscription to all these four shows.\nIn the fourth test case, you can buy subscriptions to shows $3,5,7,8,9$, and you will be able to watch shows for the last eight days.\n\ndef",
        "answer": "def BerTV(n, k, d):\n    count = 0\n    for i in range(n):\n        if i % d == 0:\n            count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 1006,
        "prompt": "Complete the Python function given the prompt below:Fox Ciel has a board with n rows and n columns. So, the board consists of n \u00d7 n cells. Each cell contains either a symbol '.', or a symbol '#'.\nA cross on the board is a connected set of exactly five cells of the board that looks like a cross. The picture below shows how it looks.[Image]\nCiel wants to draw several (may be zero) crosses on the board. Each cross must cover exactly five cells with symbols '#', and any cell with symbol '#' must belong to some cross. No two crosses can share a cell.\nPlease, tell Ciel if she can draw the crosses in the described way.\n-----Input-----\nThe first line contains an integer n (3 \u2264 n \u2264 100) \u2014 the size of the board.\nEach of the next n lines describes one row of the board. The i-th line describes the i-th row of the board and consists of n characters. Each character is either a symbol '.', or a symbol '#'.\n-----Output-----\nOutput a single line with \"YES\" if Ciel can draw the crosses in the described way. Otherwise output a single line with \"NO\".\n-----Examples-----\nInput\n5\n.#...\n####.\n.####\n...#.\n.....\nOutput\nYES\nInput\n4\n####\n####\n####\n####\nOutput\nNO\nInput\n6\n.#....\n####..\n.####.\n.#.##.\n######\n.#..#.\nOutput\nYES\nInput\n6\n.#..#.\n######\n.####.\n.####.\n######\n.#..#.\nOutput\nNO\nInput\n3\n...\n...\n...\nOutput\nYES\n-----Note-----\nIn example 1, you can draw two crosses. The picture below shows what they look like.[Image]\nIn example 2, the board contains 16 cells with '#', but each cross contains 5. Since 16 is not a multiple of 5, so it's impossible to cover all.\n\ndef",
        "answer": "def cross(board):\n    n = len(board)\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == '#':\n                if i < n - 1 and board[i + 1][j] == '#':\n                    if j < n - 1 and board[i][j + 1] == '#':\n                        if j < n - 1 and board[i][j + 1] == '#':\n                            return 'NO'\n    return 'YES'",
        "difficulty": "interview"
    },
    {
        "task_id": 1007,
        "prompt": "Complete the Python function given the prompt below:\u2014 Thanks a lot for today.\n\u2014 I experienced so many great things.\n\u2014 You gave me memories like dreams... But I have to leave now...\n\u2014 One last request, can you...\n\u2014 Help me solve a Codeforces problem?\n\u2014......\n\u2014 What?\nChtholly has been thinking about a problem for days:\nIf a number is palindrome and length of its decimal representation without leading zeros is even, we call it a zcy number. A number is palindrome means when written in decimal representation, it contains no leading zeros and reads the same forwards and backwards. For example 12321 and 1221 are palindromes and 123 and 12451 are not. Moreover, 1221 is zcy number and 12321 is not.\nGiven integers k and p, calculate the sum of the k smallest zcy numbers and output this sum modulo p.\nUnfortunately, Willem isn't good at solving this kind of problems, so he asks you for help!\n-----Input-----\nThe first line contains two integers k and p (1 \u2264 k \u2264 10^5, 1 \u2264 p \u2264 10^9).\n-----Output-----\nOutput single integer\u00a0\u2014 answer to the problem.\n-----Examples-----\nInput\n2 100\nOutput\n33\nInput\n5 30\nOutput\n15\n-----Note-----\nIn the first example, the smallest zcy number is 11, and the second smallest zcy number is 22.\nIn the second example, $(11 + 22 + 33 + 44 + 55) \\operatorname{mod} 30 = 15$.\n\ndef",
        "answer": "def zcy(k, p):\n    # your code here\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 1008,
        "prompt": "Complete the Python function given the prompt below:While Mike was walking in the subway, all the stuff in his back-bag dropped on the ground. There were several fax messages among them. He concatenated these strings in some order and now he has string s.\n [Image] \nHe is not sure if this is his own back-bag or someone else's. He remembered that there were exactly k messages in his own bag, each was a palindrome string and all those strings had the same length.\nHe asked you to help him and tell him if he has worn his own back-bag. Check if the given string s is a concatenation of k palindromes of the same length.\n-----Input-----\nThe first line of input contains string s containing lowercase English letters (1 \u2264 |s| \u2264 1000).\nThe second line contains integer k (1 \u2264 k \u2264 1000).\n-----Output-----\nPrint \"YES\"(without quotes) if he has worn his own back-bag or \"NO\"(without quotes) otherwise.\n-----Examples-----\nInput\nsaba\n2\nOutput\nNO\nInput\nsaddastavvat\n2\nOutput\nYES\n-----Note-----\nPalindrome is a string reading the same forward and backward.\nIn the second sample, the faxes in his back-bag can be \"saddas\" and \"tavvat\".\n\ndef",
        "answer": "def is_palindrome(s):\n    return s == s[::-1]",
        "difficulty": "interview"
    },
    {
        "task_id": 1009,
        "prompt": "Complete the Python function given the prompt below:Kevin Sun wants to move his precious collection of n cowbells from Naperthrill to Exeter, where there is actually grass instead of corn. Before moving, he must pack his cowbells into k boxes of a fixed size. In order to keep his collection safe during transportation, he won't place more than two cowbells into a single box. Since Kevin wishes to minimize expenses, he is curious about the smallest size box he can use to pack his entire collection. \nKevin is a meticulous cowbell collector and knows that the size of his i-th (1 \u2264 i \u2264 n) cowbell is an integer s_{i}. In fact, he keeps his cowbells sorted by size, so s_{i} - 1 \u2264 s_{i} for any i > 1. Also an expert packer, Kevin can fit one or two cowbells into a box of size s if and only if the sum of their sizes does not exceed s. Given this information, help Kevin determine the smallest s for which it is possible to put all of his cowbells into k boxes of size s.\n-----Input-----\nThe first line of the input contains two space-separated integers n and k (1 \u2264 n \u2264 2\u00b7k \u2264 100 000), denoting the number of cowbells and the number of boxes, respectively.\nThe next line contains n space-separated integers s_1, s_2,..., s_{n} (1 \u2264 s_1 \u2264 s_2 \u2264... \u2264 s_{n} \u2264 1 000 000), the sizes of Kevin's cowbells. It is guaranteed that the sizes s_{i} are given in non-decreasing order.\n-----Output-----\nPrint a single integer, the smallest s for which it is possible for Kevin to put all of his cowbells into k boxes of size s.\n-----Examples-----\nInput\n2 1\n2 5\nOutput\n7\nInput\n4 3\n2 3 5 9\nOutput\n9\nInput\n3 2\n3 5 7\nOutput\n8\n-----Note-----\nIn the first sample, Kevin must pack his two cowbells into the same box. \nIn the second sample, Kevin can pack together the following sets of cowbells: {2, 3}, {5} and {9}.\nIn the third sample, the optimal solution is {3, 5} and {7}.\n\ndef",
        "answer": "def pack(n, k, s):\n    s.sort()\n    i = 0\n    j = n - 1\n    while i < j:\n        if s[i] + s[j] <= k:\n            i += 1\n        j -= 1\n    return s[i]",
        "difficulty": "interview"
    },
    {
        "task_id": 1010,
        "prompt": "Complete the Python function given the prompt below:Bob loves everything sweet. His favorite chocolate bar consists of pieces, each piece may contain a nut. Bob wants to break the bar of chocolate into multiple pieces so that each part would contain exactly one nut and any break line goes between two adjacent pieces.\nYou are asked to calculate the number of ways he can do it. Two ways to break chocolate are considered distinct if one of them contains a break between some two adjacent pieces and the other one doesn't. \nPlease note, that if Bob doesn't make any breaks, all the bar will form one piece and it still has to have exactly one nut.\n-----Input-----\nThe first line of the input contains integer n (1 \u2264 n \u2264 100)\u00a0\u2014 the number of pieces in the chocolate bar.\nThe second line contains n integers a_{i} (0 \u2264 a_{i} \u2264 1), where 0 represents a piece without the nut and 1 stands for a piece with the nut.\n-----Output-----\nPrint the number of ways to break the chocolate into multiple parts so that each part would contain exactly one nut.\n-----Examples-----\nInput\n3\n0 1 0\nOutput\n1\nInput\n5\n1 0 1 0 1\nOutput\n4\n-----Note-----\nIn the first sample there is exactly one nut, so the number of ways equals 1\u00a0\u2014 Bob shouldn't make any breaks.\nIn the second sample you can break the bar in four ways:\n10|10|1\n1|010|1\n10|1|01\n1|01|01\n\ndef",
        "answer": "def num_ways(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return num_ways(n-1) + num_ways(n-2)",
        "difficulty": "interview"
    },
    {
        "task_id": 1011,
        "prompt": "Complete the Python function given the prompt below:Vasya follows a basketball game and marks the distances from which each team makes a throw. He knows that each successful throw has value of either 2 or 3 points. A throw is worth 2 points if the distance it was made from doesn't exceed some value of d meters, and a throw is worth 3 points if the distance is larger than d meters, where d is some non-negative integer.\nVasya would like the advantage of the points scored by the first team (the points of the first team minus the points of the second team) to be maximum. For that he can mentally choose the value of d. Help him to do that.\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 2\u00b710^5) \u2014 the number of throws of the first team. Then follow n integer numbers \u2014 the distances of throws a_{i} (1 \u2264 a_{i} \u2264 2\u00b710^9). \nThen follows number m (1 \u2264 m \u2264 2\u00b710^5) \u2014 the number of the throws of the second team. Then follow m integer numbers \u2014 the distances of throws of b_{i} (1 \u2264 b_{i} \u2264 2\u00b710^9).\n-----Output-----\nPrint two numbers in the format a:b \u2014 the score that is possible considering the problem conditions where the result of subtraction a - b is maximum. If there are several such scores, find the one in which number a is maximum.\n-----Examples-----\nInput\n3\n1 2 3\n2\n5 6\nOutput\n9:6\nInput\n5\n6 7 8 9 10\n5\n1 2 3 4 5\nOutput\n15:10\n\ndef",
        "answer": "def max_difference(n, a):\n    a.sort()\n    return a[-1] - a[0]",
        "difficulty": "interview"
    },
    {
        "task_id": 1012,
        "prompt": "Complete the Python function given the prompt below:You are given a string $s$ consisting only of lowercase Latin letters.\nYou can rearrange all letters of this string as you wish. Your task is to obtain a good string by rearranging the letters of the given string or report that it is impossible to do it.\nLet's call a string good if it is not a palindrome. Palindrome is a string which is read from left to right the same as from right to left. For example, strings \"abacaba\", \"aa\" and \"z\" are palindromes and strings \"bba\", \"xd\" are not.\nYou have to answer $t$ independent queries.\n-----Input-----\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 100$) \u2014 number of queries.\nEach of the next $t$ lines contains one string. The $i$-th line contains a string $s_i$ consisting only of lowercase Latin letter. It is guaranteed that the length of $s_i$ is from $1$ to $1000$ (inclusive).\n-----Output-----\nPrint $t$ lines. In the $i$-th line print the answer to the $i$-th query: -1 if it is impossible to obtain a good string by rearranging the letters of $s_i$ and any good string which can be obtained from the given one (by rearranging the letters) otherwise.\n-----Example-----\nInput\n3\naa\nabacaba\nxdd\nOutput\n-1\nabaacba\nxdd\n-----Note-----\nIn the first query we cannot rearrange letters to obtain a good string.\nOther examples (not all) of correct answers to the second query: \"ababaca\", \"abcabaa\", \"baacaba\".\nIn the third query we can do nothing to obtain a good string.\n\ndef",
        "answer": "def check(s):\n    return s == s[::-1]",
        "difficulty": "interview"
    },
    {
        "task_id": 1013,
        "prompt": "Complete the Python function given the prompt below:Simon has a rectangular table consisting of n rows and m columns. Simon numbered the rows of the table from top to bottom starting from one and the columns \u2014 from left to right starting from one. We'll represent the cell on the x-th row and the y-th column as a pair of numbers (x, y). The table corners are cells: (1, 1), (n, 1), (1, m), (n, m).\nSimon thinks that some cells in this table are good. Besides, it's known that no good cell is the corner of the table. \nInitially, all cells of the table are colorless. Simon wants to color all cells of his table. In one move, he can choose any good cell of table (x_1, y_1), an arbitrary corner of the table (x_2, y_2) and color all cells of the table (p, q), which meet both inequations: min(x_1, x_2) \u2264 p \u2264 max(x_1, x_2), min(y_1, y_2) \u2264 q \u2264 max(y_1, y_2).\nHelp Simon! Find the minimum number of operations needed to color all cells of the table. Note that you can color one cell multiple times.\n-----Input-----\nThe first line contains exactly two integers n, m (3 \u2264 n, m \u2264 50).\nNext n lines contain the description of the table cells. Specifically, the i-th line contains m space-separated integers a_{i}1, a_{i}2,..., a_{im}. If a_{ij} equals zero, then cell (i, j) isn't good. Otherwise a_{ij} equals one. It is guaranteed that at least one cell is good. It is guaranteed that no good cell is a corner.\n-----Output-----\nPrint a single number \u2014 the minimum number of operations Simon needs to carry out his idea.\n-----Examples-----\nInput\n3 3\n0 0 0\n0 1 0\n0 0 0\nOutput\n4\nInput\n4 3\n0 0 0\n0 0 1\n1 0 0\n0 0 0\nOutput\n2\n-----Note-----\nIn the first sample, the sequence of operations can be like this: [Image]   For the first time you need to choose cell (2, 2) and corner (1, 1).  For the second time you need to choose cell (2, 2) and corner (3, 3).  For the third time you need to choose cell (2, 2) and corner (3, 1).  For the fourth time you need to choose cell (2, 2) and corner (1, 3). \nIn the second sample the sequence of operations can be like this: [Image]   For the first time you need to choose cell (3, 1) and corner (4, 3).  For the second time you need to choose cell (2, 3) and corner (1, 1).\n\ndef",
        "answer": "def simon(n, m):\n    if n == 1 or m == 1:\n        return 0\n    return min(n, m) + 1",
        "difficulty": "interview"
    },
    {
        "task_id": 1014,
        "prompt": "Complete the Python function given the prompt below:Vasya decided to learn to play chess. Classic chess doesn't seem interesting to him, so he plays his own sort of chess.\nThe queen is the piece that captures all squares on its vertical, horizontal and diagonal lines. If the cell is located on the same vertical, horizontal or diagonal line with queen, and the cell contains a piece of the enemy color, the queen is able to move to this square. After that the enemy's piece is removed from the board. The queen cannot move to a cell containing an enemy piece if there is some other piece between it and the queen. \nThere is an n \u00d7 n chessboard. We'll denote a cell on the intersection of the r-th row and c-th column as (r, c). The square (1, 1) contains the white queen and the square (1, n) contains the black queen. All other squares contain green pawns that don't belong to anyone.\nThe players move in turns. The player that moves first plays for the white queen, his opponent plays for the black queen.\nOn each move the player has to capture some piece with his queen (that is, move to a square that contains either a green pawn or the enemy queen). The player loses if either he cannot capture any piece during his move or the opponent took his queen during the previous move. \nHelp Vasya determine who wins if both players play with an optimal strategy on the board n \u00d7 n.\n-----Input-----\nThe input contains a single number n (2 \u2264 n \u2264 10^9) \u2014 the size of the board.\n-----Output-----\nOn the first line print the answer to problem \u2014 string \"white\" or string \"black\", depending on who wins if the both players play optimally. \nIf the answer is \"white\", then you should also print two integers r and c representing the cell (r, c), where the first player should make his first move to win. If there are multiple such cells, print the one with the minimum r. If there are still multiple squares, print the one with the minimum c.\n-----Examples-----\nInput\n2\nOutput\nwhite\n1 2\nInput\n3\nOutput\nblack\n-----Note-----\nIn the first sample test the white queen can capture the black queen at the first move, so the white player wins.\nIn the second test from the statement if the white queen captures the green pawn located on the central vertical line, then it will be captured by the black queen during the next move. So the only move for the white player is to capture the green pawn located at (2, 1). \nSimilarly, the black queen doesn't have any other options but to capture the green pawn located at (2, 3), otherwise if it goes to the middle vertical line, it will be captured by the white queen.\nDuring the next move the same thing happens \u2014 neither the white, nor the black queen has other options rather than to capture green pawns situated above them. Thus, the white queen ends up on square (3, 1), and the black queen ends up on square (3, 3). \nIn this situation the white queen has to capture any of the green pawns located on the middle vertical line, after that it will be captured by the black queen. Thus, the player who plays for the black queen wins.\n\ndef",
        "answer": "def queen(n):\n    if n == 1:\n        return \"black\"\n    if n == 2:\n        return \"white\"\n    if n == 3:\n        return \"white\"\n    if n == 4:\n        return \"black\"\n    if n == 5:\n        return \"white\"\n    if n == 6:\n        return \"black\"\n    if n == 7:\n        return \"white\"\n    if n == 8:\n        return \"black\"\n    if n == 9:\n        return \"white\"\n    if n == 10:\n        return \"black\"\n    if n == 11:\n        return \"white\"\n    if n == 12:\n        return \"black\"\n    if n == 13:\n        return \"white\"\n    if n == 14:\n        return \"black\"\n    if n == 15:\n        return \"white\"\n    if n == 16:\n        return \"black\"\n    if n == 17:\n        return \"white\"\n    if n == 18:\n        return \"black\"\n    if n == 19:\n        return \"white\"\n    if n == 20:\n        return \"black\"\n    if n == 21:\n        return \"white\"\n    if n == 22:\n        return \"black\"\n    if n == 23:\n        return \"white\"\n    if n == 24:\n        return \"black\"\n    if n == 25:\n        return \"white\"\n    if n == 26:\n        return \"black\"\n    if n == 27:\n        return \"white\"\n    if n == 28:\n        return \"black\"\n    if n == 29:\n        return \"white\"\n    if n == 30:\n        return \"black\"\n    if n == 31",
        "difficulty": "interview"
    },
    {
        "task_id": 1015,
        "prompt": "Complete the Python function given the prompt below:A lighthouse keeper Peter commands an army of $n$ battle lemmings. He ordered his army to stand in a line and numbered the lemmings from $1$ to $n$ from left to right. Some of the lemmings hold shields. Each lemming cannot hold more than one shield.\nThe more protected Peter's army is, the better. To calculate the protection of the army, he finds the number of protected pairs of lemmings, that is such pairs that both lemmings in the pair don't hold a shield, but there is a lemming with a shield between them.\nNow it's time to prepare for defence and increase the protection of the army. To do this, Peter can give orders. He chooses a lemming with a shield and gives him one of the two orders:   give the shield to the left neighbor if it exists and doesn't have a shield;  give the shield to the right neighbor if it exists and doesn't have a shield. \nIn one second Peter can give exactly one order.\nIt's not clear how much time Peter has before the defence. So he decided to determine the maximal value of army protection for each $k$ from $0$ to $\\frac{n(n-1)}2$, if he gives no more that $k$ orders. Help Peter to calculate it!\n-----Input-----\nFirst line contains a single integer $n$ ($1 \\le n \\le 80$), the number of lemmings in Peter's army.\nSecond line contains $n$ integers $a_i$ ($0 \\le a_i \\le 1$). If $a_i = 1$, then the $i$-th lemming has a shield, otherwise $a_i = 0$.\n-----Output-----\nPrint $\\frac{n(n-1)}2 + 1$ numbers, the greatest possible protection after no more than $0, 1, \\dots, \\frac{n(n-1)}2$ orders.\n-----Examples-----\nInput\n5\n1 0 0 0 1\nOutput\n0 2 3 3 3 3 3 3 3 3 3 \nInput\n12\n0 0 0 0 1 1 1 1 0 1 1 0\nOutput\n9 12 13 14 14 14 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 \n-----Note-----\nConsider the first example.\nThe protection is initially equal to zero, because for each pair of lemmings without shields there is no lemmings with shield.\nIn one second Peter can order the first lemming give his shield to the right neighbor. In this case, the protection is two, as there are two protected pairs of lemmings, $(1, 3)$ and $(1, 4)$.\nIn two seconds Peter can act in the following way. First, he orders the fifth lemming to give a shield to the left neighbor. Then, he orders the first lemming to give a shield to the right neighbor. In this case Peter has three protected pairs of lemmings\u00a0\u2014 $(1, 3)$, $(1, 5)$ and $(3, 5)$.\nYou can make sure that it's impossible to give orders in such a way that the protection becomes greater than three.\n\ndef",
        "answer": "def protection(n, lemmings):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 3\n    if n == 6:\n        return 4\n    if n == 7:\n        return 5\n    if n == 8:\n        return 6\n    if n == 9:\n        return 7\n    if n == 10:\n        return 8\n    if n == 11:\n        return 9\n    if n == 12:\n        return 10\n    if n == 13:\n        return 11\n    if n == 14:\n        return 12\n    if n == 15:\n        return 13\n    if n == 16:\n        return 14\n    if n == 17:\n        return 15\n    if n == 18:\n        return 16\n    if n == 19:\n        return 17\n    if n == 20:\n        return 18\n    if n == 21:\n        return 19\n    if n == 22:\n        return 20\n    if n == 23:\n        return 21\n    if n == 24:\n        return 22\n    if n == 25:\n        return 23\n    if n == 26:\n        return 24\n    if n == 27:\n        return 25\n    if n == 28:\n        return 26\n    if n == 29:\n        return 27\n    if n == 30:\n        return 28\n    if n == 31:\n        return 29\n    if n == 32:\n        return 30\n    if n == 33:\n        return 31\n    if n == 34:\n        return 32\n    if n == 35:\n        return 33\n    if n == 36:",
        "difficulty": "interview"
    },
    {
        "task_id": 1016,
        "prompt": "Complete the Python function given the prompt below:DZY loves chemistry, and he enjoys mixing chemicals.\nDZY has n chemicals, and m pairs of them will react. He wants to pour these chemicals into a test tube, and he needs to pour them in one by one, in any order. \nLet's consider the danger of a test tube. Danger of an empty test tube is 1. And every time when DZY pours a chemical, if there are already one or more chemicals in the test tube that can react with it, the danger of the test tube will be multiplied by 2. Otherwise the danger remains as it is.\nFind the maximum possible danger after pouring all the chemicals one by one in optimal order.\n-----Input-----\nThe first line contains two space-separated integers n and m $(1 \\leq n \\leq 50 ; 0 \\leq m \\leq \\frac{n(n - 1)}{2})$.\nEach of the next m lines contains two space-separated integers x_{i} and y_{i} (1 \u2264 x_{i} < y_{i} \u2264 n). These integers mean that the chemical x_{i} will react with the chemical y_{i}. Each pair of chemicals will appear at most once in the input.\nConsider all the chemicals numbered from 1 to n in some order.\n-----Output-----\nPrint a single integer \u2014 the maximum possible danger.\n-----Examples-----\nInput\n1 0\nOutput\n1\nInput\n2 1\n1 2\nOutput\n2\nInput\n3 2\n1 2\n2 3\nOutput\n4\n-----Note-----\nIn the first sample, there's only one way to pour, and the danger won't increase.\nIn the second sample, no matter we pour the 1st chemical first, or pour the 2nd chemical first, the answer is always 2.\nIn the third sample, there are four ways to achieve the maximum possible danger: 2-1-3, 2-3-1, 1-2-3 and 3-2-1 (that is the numbers of the chemicals in order of pouring).\n\ndef",
        "answer": "def max_danger(n, m):\n    danger = [1] * n\n    for i in range(m):\n        x, y = map(int, input().split())\n        danger[x - 1] *= 2\n        danger[y - 1] *= 2\n    return max(danger)",
        "difficulty": "interview"
    },
    {
        "task_id": 1017,
        "prompt": "Complete the Python function given the prompt below:Little Artem got n stones on his birthday and now wants to give some of them to Masha. He knows that Masha cares more about the fact of receiving the present, rather than the value of that present, so he wants to give her stones as many times as possible. However, Masha remembers the last present she received, so Artem can't give her the same number of stones twice in a row. For example, he can give her 3 stones, then 1 stone, then again 3 stones, but he can't give her 3 stones and then again 3 stones right after that.\nHow many times can Artem give presents to Masha?\n-----Input-----\nThe only line of the input contains a single integer n (1 \u2264 n \u2264 10^9)\u00a0\u2014 number of stones Artem received on his birthday.\n-----Output-----\nPrint the maximum possible number of times Artem can give presents to Masha.\n-----Examples-----\nInput\n1\nOutput\n1\nInput\n2\nOutput\n1\nInput\n3\nOutput\n2\nInput\n4\nOutput\n3\n-----Note-----\nIn the first sample, Artem can only give 1 stone to Masha.\nIn the second sample, Atrem can give Masha 1 or 2 stones, though he can't give her 1 stone two times.\nIn the third sample, Atrem can first give Masha 2 stones, a then 1 more stone.\nIn the fourth sample, Atrem can first give Masha 1 stone, then 2 stones, and finally 1 stone again.\n\ndef",
        "answer": "def stones(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    else:\n        return stones(n-1) + stones(n-2) + stones(n-3)",
        "difficulty": "interview"
    },
    {
        "task_id": 1018,
        "prompt": "Complete the Python function given the prompt below:Stepan has n pens. Every day he uses them, and on the i-th day he uses the pen number i. On the (n + 1)-th day again he uses the pen number 1, on the (n + 2)-th \u2014 he uses the pen number 2 and so on.\nOn every working day (from Monday to Saturday, inclusive) Stepan spends exactly 1 milliliter of ink of the pen he uses that day. On Sunday Stepan has a day of rest, he does not stend the ink of the pen he uses that day. \nStepan knows the current volume of ink in each of his pens. Now it's the Monday morning and Stepan is going to use the pen number 1 today. Your task is to determine which pen will run out of ink before all the rest (that is, there will be no ink left in it), if Stepan will use the pens according to the conditions described above.\n-----Input-----\nThe first line contains the integer n (1 \u2264 n \u2264 50 000) \u2014 the number of pens Stepan has.\nThe second line contains the sequence of integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^9), where a_{i} is equal to the number of milliliters of ink which the pen number i currently has.\n-----Output-----\nPrint the index of the pen which will run out of ink before all (it means that there will be no ink left in it), if Stepan will use pens according to the conditions described above. \nPens are numbered in the order they are given in input data. The numeration begins from one. \nNote that the answer is always unambiguous, since several pens can not end at the same time.\n-----Examples-----\nInput\n3\n3 3 3\nOutput\n2\nInput\n5\n5 4 5 4 4\nOutput\n5\n-----Note-----\nIn the first test Stepan uses ink of pens as follows:   on the day number 1 (Monday) Stepan will use the pen number 1, after that there will be 2 milliliters of ink in it;  on the day number 2 (Tuesday) Stepan will use the pen number 2, after that there will be 2 milliliters of ink in it;  on the day number 3 (Wednesday) Stepan will use the pen number 3, after that there will be 2 milliliters of ink in it;  on the day number 4 (Thursday) Stepan will use the pen number 1, after that there will be 1 milliliters of ink in it;  on the day number 5 (Friday) Stepan will use the pen number 2, after that there will be 1 milliliters of ink in it;  on the day number 6 (Saturday) Stepan will use the pen number 3, after that there will be 1 milliliters of ink in it;  on the day number 7 (Sunday) Stepan will use the pen number 1, but it is a day of rest so he will not waste ink of this pen in it;  on the day number 8 (Monday) Stepan will use the pen number 2, after that this pen will run out of ink. \nSo, the first pen which will not have ink is the pen number 2.\n\ndef",
        "answer": "def pen_number(n, a):\n    a.sort()\n    i = 0\n    while i < n:\n        if a[i] == 0:\n            i += 1\n        else:\n            break\n    return i",
        "difficulty": "interview"
    },
    {
        "task_id": 1019,
        "prompt": "Complete the Python function given the prompt below:Petya is a big fan of mathematics, especially its part related to fractions. Recently he learned that a fraction $\\frac{a}{b}$ is called proper iff its numerator is smaller than its denominator (a < b) and that the fraction is called irreducible if its numerator and its denominator are coprime (they do not have positive common divisors except 1).\nDuring his free time, Petya thinks about proper irreducible fractions and converts them to decimals using the calculator. One day he mistakenly pressed addition button ( + ) instead of division button (\u00f7) and got sum of numerator and denominator that was equal to n instead of the expected decimal notation. \nPetya wanted to restore the original fraction, but soon he realized that it might not be done uniquely. That's why he decided to determine maximum possible proper irreducible fraction $\\frac{a}{b}$ such that sum of its numerator and denominator equals n. Help Petya deal with this problem.\n \n-----Input-----\nIn the only line of input there is an integer n (3 \u2264 n \u2264 1000), the sum of numerator and denominator of the fraction.\n-----Output-----\nOutput two space-separated positive integers a and b, numerator and denominator of the maximum possible proper irreducible fraction satisfying the given sum.\n-----Examples-----\nInput\n3\nOutput\n1 2\nInput\n4\nOutput\n1 3\nInput\n12\nOutput\n5 7\n\ndef",
        "answer": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a",
        "difficulty": "interview"
    },
    {
        "task_id": 1020,
        "prompt": "Complete the Python function given the prompt below:You have a plate and you want to add some gilding to it. The plate is a rectangle that we split into $w\\times h$ cells. There should be $k$ gilded rings, the first one should go along the edge of the plate, the second one\u00a0\u2014 $2$ cells away from the edge and so on. Each ring has a width of $1$ cell. Formally, the $i$-th of these rings should consist of all bordering cells on the inner rectangle of size $(w - 4(i - 1))\\times(h - 4(i - 1))$.\n [Image] The picture corresponds to the third example. \nYour task is to compute the number of cells to be gilded.\n-----Input-----\nThe only line contains three integers $w$, $h$ and $k$ ($3 \\le w, h \\le 100$, $1 \\le k \\le \\left\\lfloor \\frac{min(n, m) + 1}{4}\\right\\rfloor$, where $\\lfloor x \\rfloor$ denotes the number $x$ rounded down) \u2014 the number of rows, columns and the number of rings, respectively.\n-----Output-----\nPrint a single positive integer\u00a0\u2014 the number of cells to be gilded.\n-----Examples-----\nInput\n3 3 1\nOutput\n8\nInput\n7 9 1\nOutput\n28\nInput\n7 9 2\nOutput\n40\n-----Note-----\nThe first example is shown on the picture below.\n [Image] \nThe second example is shown on the picture below.\n [Image] \nThe third example is shown in the problem description.\n\ndef",
        "answer": "def gilding(w, h, k):\n    return w * h - (w - 4 * k) * (h - 4 * k)",
        "difficulty": "interview"
    },
    {
        "task_id": 1021,
        "prompt": "Complete the Python function given the prompt below:Grigory has $n$ magic stones, conveniently numbered from $1$ to $n$. The charge of the $i$-th stone is equal to $c_i$.\nSometimes Grigory gets bored and selects some inner stone (that is, some stone with index $i$, where $2 \\le i \\le n - 1$), and after that synchronizes it with neighboring stones. After that, the chosen stone loses its own charge, but acquires the charges from neighboring stones. In other words, its charge $c_i$ changes to $c_i' = c_{i + 1} + c_{i - 1} - c_i$.\nAndrew, Grigory's friend, also has $n$ stones with charges $t_i$. Grigory is curious, whether there exists a sequence of zero or more synchronization operations, which transforms charges of Grigory's stones into charges of corresponding Andrew's stones, that is, changes $c_i$ into $t_i$ for all $i$?\n-----Input-----\nThe first line contains one integer $n$ ($2 \\le n \\le 10^5$)\u00a0\u2014 the number of magic stones.\nThe second line contains integers $c_1, c_2, \\ldots, c_n$ ($0 \\le c_i \\le 2 \\cdot 10^9$)\u00a0\u2014 the charges of Grigory's stones.\nThe second line contains integers $t_1, t_2, \\ldots, t_n$ ($0 \\le t_i \\le 2 \\cdot 10^9$)\u00a0\u2014 the charges of Andrew's stones.\n-----Output-----\nIf there exists a (possibly empty) sequence of synchronization operations, which changes all charges to the required ones, print \"Yes\".\nOtherwise, print \"No\".\n-----Examples-----\nInput\n4\n7 2 4 12\n7 15 10 12\nOutput\nYes\nInput\n3\n4 4 4\n1 2 3\nOutput\nNo\n-----Note-----\nIn the first example, we can perform the following synchronizations ($1$-indexed):  First, synchronize the third stone $[7, 2, \\mathbf{4}, 12] \\rightarrow [7, 2, \\mathbf{10}, 12]$.  Then synchronize the second stone: $[7, \\mathbf{2}, 10, 12] \\rightarrow [7, \\mathbf{15}, 10, 12]$. \nIn the second example, any operation with the second stone will not change its charge.\n\ndef",
        "answer": "def magic_stones(n, c, t):\n    if n == 1:\n        return \"Yes\" if c == t[0] else \"No\"\n    if c[0] == t[0] and c[1] == t[1]:\n        return \"Yes\"\n    if c[0] == t[0] and c[1]!= t[1]:\n        return \"No\"\n    if c[0]!= t[0] and c[1] == t[1]:\n        return \"No\"\n    if c[0]!= t[0] and c[1]!= t[1]:\n        return \"No\"\n    return \"Yes\" if c[0] == t[0] or c[1] == t[1] else \"No\"",
        "difficulty": "interview"
    },
    {
        "task_id": 1022,
        "prompt": "Complete the Python function given the prompt below:There are $n$ children numbered from $1$ to $n$ in a kindergarten. Kindergarten teacher gave $a_i$ ($1 \\leq a_i \\leq n$) candies to the $i$-th child. Children were seated in a row in order from $1$ to $n$ from left to right and started eating candies. \nWhile the $i$-th child was eating candies, he calculated two numbers $l_i$ and $r_i$\u00a0\u2014 the number of children seating to the left of him that got more candies than he and the number of children seating to the right of him that got more candies than he, respectively.\nFormally, $l_i$ is the number of indices $j$ ($1 \\leq j < i$), such that $a_i < a_j$ and $r_i$ is the number of indices $j$ ($i < j \\leq n$), such that $a_i < a_j$.\nEach child told to the kindergarten teacher the numbers $l_i$ and $r_i$ that he calculated. Unfortunately, she forgot how many candies she has given to each child. So, she asks you for help: given the arrays $l$ and $r$ determine whether she could have given the candies to the children such that all children correctly calculated their values $l_i$ and $r_i$, or some of them have definitely made a mistake. If it was possible, find any way how she could have done it.\n-----Input-----\nOn the first line there is a single integer $n$ ($1 \\leq n \\leq 1000$)\u00a0\u2014 the number of children in the kindergarten.\nOn the next line there are $n$ integers $l_1, l_2, \\ldots, l_n$ ($0 \\leq l_i \\leq n$), separated by spaces.\nOn the next line, there are $n$ integer numbers $r_1, r_2, \\ldots, r_n$ ($0 \\leq r_i \\leq n$), separated by spaces.\n-----Output-----\nIf there is no way to distribute the candies to the children so that all of them calculated their numbers correctly, print \u00abNO\u00bb (without quotes).\nOtherwise, print \u00abYES\u00bb (without quotes) on the first line. On the next line, print $n$ integers $a_1, a_2, \\ldots, a_n$, separated by spaces\u00a0\u2014 the numbers of candies the children $1, 2, \\ldots, n$ received, respectively. Note that some of these numbers can be equal, but all numbers should satisfy the condition $1 \\leq a_i \\leq n$. The number of children seating to the left of the $i$-th child that got more candies than he should be equal to $l_i$ and the number of children seating to the right of the $i$-th child that got more candies than he should be equal to $r_i$. If there is more than one solution, find any of them.\n-----Examples-----\nInput\n5\n0 0 1 1 2\n2 0 1 0 0\nOutput\nYES\n1 3 1 2 1\nInput\n4\n0 0 2 0\n1 1 1 1\nOutput\nNO\nInput\n3\n0 0 0\n0 0 0\nOutput\nYES\n1 1 1\n-----Note-----\nIn the first example, if the teacher distributed $1$, $3$, $1$, $2$, $1$ candies to $1$-st, $2$-nd, $3$-rd, $4$-th, $5$-th child, respectively, then all the values calculated by the children are correct. For example, the $5$-th child was given $1$ candy, to the left of him $2$ children were given $1$ candy, $1$ child was given $2$ candies and $1$ child\u00a0\u2014 $3$ candies, so there are $2$ children to the left of him that were given more candies than him.\nIn the second example it is impossible to distribute the candies, because the $4$-th child made a mistake in calculating the value of $r_4$, because there are no children to the right of him, so $r_4$ should be equal to $0$.\nIn the last example all children may have got the same number of candies, that's why all the numbers are $0$. Note that each child should receive at least one candy.\n\ndef",
        "answer": "def candies(n, l, r):\n    l = [0] + l\n    r = r + [n]\n    l = [0] + l\n    r = r + [n]\n    l = [0] + l\n    r = r + [n]\n    l = [0] + l\n    r = r + [n]\n    l = [0] + l\n    r = r + [n]\n    l = [0] + l\n    r = r + [n]\n    l = [0] + l\n    r = r + [n]\n    l = [0] + l\n    r = r + [n]\n    l = [0] + l\n    r = r + [n]\n    l = [0] + l\n    r = r + [n]\n    l = [0] + l\n    r = r + [n]\n    l = [0] + l\n    r = r + [n]\n    l = [0] + l\n    r = r + [n]\n    l = [0] + l\n    r = r + [n]\n    l = [0] + l\n    r = r + [n]\n    l = [0] + l\n    r = r + [n]\n    l = [0] + l\n    r = r + [n]\n    l = [0] + l\n    r = r + [n]\n    l = [0] + l\n    r = r + [n]\n    l = [0] + l\n    r = r + [n]\n    l = [0] + l\n    r = r + [n]\n    l = [0] + l\n    r =",
        "difficulty": "interview"
    },
    {
        "task_id": 1023,
        "prompt": "Complete the Python function given the prompt below:Arkady bought an air ticket from a city A to a city C. Unfortunately, there are no direct flights, but there are a lot of flights from A to a city B, and from B to C.\nThere are $n$ flights from A to B, they depart at time moments $a_1$, $a_2$, $a_3$,..., $a_n$ and arrive at B $t_a$ moments later.\nThere are $m$ flights from B to C, they depart at time moments $b_1$, $b_2$, $b_3$,..., $b_m$ and arrive at C $t_b$ moments later.\nThe connection time is negligible, so one can use the $i$-th flight from A to B and the $j$-th flight from B to C if and only if $b_j \\ge a_i + t_a$.\nYou can cancel at most $k$ flights. If you cancel a flight, Arkady can not use it.\nArkady wants to be in C as early as possible, while you want him to be in C as late as possible. Find the earliest time Arkady can arrive at C, if you optimally cancel $k$ flights. If you can cancel $k$ or less flights in such a way that it is not possible to reach C at all, print $-1$.\n-----Input-----\nThe first line contains five integers $n$, $m$, $t_a$, $t_b$ and $k$ ($1 \\le n, m \\le 2 \\cdot 10^5$, $1 \\le k \\le n + m$, $1 \\le t_a, t_b \\le 10^9$)\u00a0\u2014 the number of flights from A to B, the number of flights from B to C, the flight time from A to B, the flight time from B to C and the number of flights you can cancel, respectively.\nThe second line contains $n$ distinct integers in increasing order $a_1$, $a_2$, $a_3$,..., $a_n$ ($1 \\le a_1 < a_2 < \\ldots < a_n \\le 10^9$)\u00a0\u2014 the times the flights from A to B depart.\nThe third line contains $m$ distinct integers in increasing order $b_1$, $b_2$, $b_3$,..., $b_m$ ($1 \\le b_1 < b_2 < \\ldots < b_m \\le 10^9$)\u00a0\u2014 the times the flights from B to C depart.\n-----Output-----\nIf you can cancel $k$ or less flights in such a way that it is not possible to reach C at all, print $-1$.\nOtherwise print the earliest time Arkady can arrive at C if you cancel $k$ flights in such a way that maximizes this time.\n-----Examples-----\nInput\n4 5 1 1 2\n1 3 5 7\n1 2 3 9 10\nOutput\n11\nInput\n2 2 4 4 2\n1 10\n10 20\nOutput\n-1\nInput\n4 3 2 3 1\n1 999999998 999999999 1000000000\n3 4 1000000000\nOutput\n1000000003\n-----Note-----\nConsider the first example. The flights from A to B depart at time moments $1$, $3$, $5$, and $7$ and arrive at B at time moments $2$, $4$, $6$, $8$, respectively. The flights from B to C depart at time moments $1$, $2$, $3$, $9$, and $10$ and arrive at C at time moments $2$, $3$, $4$, $10$, $11$, respectively. You can cancel at most two flights. The optimal solution is to cancel the first flight from A to B and the fourth flight from B to C. This way Arkady has to take the second flight from A to B, arrive at B at time moment $4$, and take the last flight from B to C arriving at C at time moment $11$.\nIn the second example you can simply cancel all flights from A to B and you're done.\nIn the third example you can cancel only one flight, and the optimal solution is to cancel the first flight from A to B. Note that there is still just enough time to catch the last flight from B to C.\n\ndef",
        "answer": "def solution(n, m, t_a, t_b, k):\n    a = sorted(t_a)\n    b = sorted(t_b)\n    c = []\n    for i in range(n):\n        c.append(a[i] + b[i])\n    c.sort()\n    for i in range(n):\n        if c[i] < k:\n            return -1\n    return c[k - 1]",
        "difficulty": "interview"
    },
    {
        "task_id": 1024,
        "prompt": "Complete the Python function given the prompt below:You are given a permutation of integers from 1 to n. Exactly once you apply the following operation to this permutation: pick a random segment and shuffle its elements. Formally:  Pick a random segment (continuous subsequence) from l to r. All $\\frac{n(n + 1)}{2}$ segments are equiprobable.  Let k = r - l + 1, i.e. the length of the chosen segment. Pick a random permutation of integers from 1 to k, p_1, p_2,..., p_{k}. All k! permutation are equiprobable.  This permutation is applied to elements of the chosen segment, i.e. permutation a_1, a_2,..., a_{l} - 1, a_{l}, a_{l} + 1,..., a_{r} - 1, a_{r}, a_{r} + 1,..., a_{n} is transformed to a_1, a_2,..., a_{l} - 1, a_{l} - 1 + p_1, a_{l} - 1 + p_2,..., a_{l} - 1 + p_{k} - 1, a_{l} - 1 + p_{k}, a_{r} + 1,..., a_{n}. \nInversion if a pair of elements (not necessary neighbouring) with the wrong relative order. In other words, the number of inversion is equal to the number of pairs (i, j) such that i < j and a_{i} > a_{j}. Find the expected number of inversions after we apply exactly one operation mentioned above.\n-----Input-----\nThe first line contains a single integer n (1 \u2264 n \u2264 100 000)\u00a0\u2014 the length of the permutation.\nThe second line contains n distinct integers from 1 to n\u00a0\u2014 elements of the permutation.\n-----Output-----\nPrint one real value\u00a0\u2014 the expected number of inversions. Your answer will be considered correct if its absolute or relative error does not exceed 10^{ - 9}. \nNamely: let's assume that your answer is a, and the answer of the jury is b. The checker program will consider your answer correct, if $\\frac{|a - b|}{\\operatorname{max}(1, b)} \\leq 10^{-9}$.\n-----Example-----\nInput\n3\n2 3 1\nOutput\n1.916666666666666666666666666667\n\ndef",
        "answer": "def permutation_inversion(n, permutation):\n    inversions = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if permutation[i] > permutation[j]:\n                inversions += 1\n    return inversions",
        "difficulty": "interview"
    },
    {
        "task_id": 1025,
        "prompt": "Complete the Python function given the prompt below:Vanya got bored and he painted n distinct points on the plane. After that he connected all the points pairwise and saw that as a result many triangles were formed with vertices in the painted points. He asks you to count the number of the formed triangles with the non-zero area.\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 2000) \u2014 the number of the points painted on the plane. \nNext n lines contain two integers each x_{i}, y_{i} ( - 100 \u2264 x_{i}, y_{i} \u2264 100) \u2014 the coordinates of the i-th point. It is guaranteed that no two given points coincide.\n-----Output-----\nIn the first line print an integer \u2014 the number of triangles with the non-zero area among the painted points.\n-----Examples-----\nInput\n4\n0 0\n1 1\n2 0\n2 2\nOutput\n3\nInput\n3\n0 0\n1 1\n2 0\nOutput\n1\nInput\n1\n1 1\nOutput\n0\n-----Note-----\nNote to the first sample test. There are 3 triangles formed: (0, 0) - (1, 1) - (2, 0); (0, 0) - (2, 2) - (2, 0); (1, 1) - (2, 2) - (2, 0).\nNote to the second sample test. There is 1 triangle formed: (0, 0) - (1, 1) - (2, 0).\nNote to the third sample test. A single point doesn't form a single triangle.\n\ndef",
        "answer": "def countTriangles(points):\n    count = 0\n    for i in range(len(points)):\n        for j in range(i + 1, len(points)):\n            for k in range(j + 1, len(points)):\n                if isTriangle(points[i], points[j], points[k]):\n                    count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 1026,
        "prompt": "Complete the Python function given the prompt below:Tanya wants to go on a journey across the cities of Berland. There are $n$ cities situated along the main railroad line of Berland, and these cities are numbered from $1$ to $n$. \nTanya plans her journey as follows. First of all, she will choose some city $c_1$ to start her journey. She will visit it, and after that go to some other city $c_2 > c_1$, then to some other city $c_3 > c_2$, and so on, until she chooses to end her journey in some city $c_k > c_{k - 1}$. So, the sequence of visited cities $[c_1, c_2, \\dots, c_k]$ should be strictly increasing.\nThere are some additional constraints on the sequence of cities Tanya visits. Each city $i$ has a beauty value $b_i$ associated with it. If there is only one city in Tanya's journey, these beauty values imply no additional constraints. But if there are multiple cities in the sequence, then for any pair of adjacent cities $c_i$ and $c_{i + 1}$, the condition $c_{i + 1} - c_i = b_{c_{i + 1}} - b_{c_i}$ must hold.\nFor example, if $n = 8$ and $b = [3, 4, 4, 6, 6, 7, 8, 9]$, there are several three possible ways to plan a journey:  $c = [1, 2, 4]$;  $c = [3, 5, 6, 8]$;  $c = [7]$ (a journey consisting of one city is also valid). \nThere are some additional ways to plan a journey that are not listed above.\nTanya wants her journey to be as beautiful as possible. The beauty value of the whole journey is the sum of beauty values over all visited cities. Can you help her to choose the optimal plan, that is, to maximize the beauty value of the journey?\n-----Input-----\nThe first line contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of cities in Berland.\nThe second line contains $n$ integers $b_1$, $b_2$,..., $b_n$ ($1 \\le b_i \\le 4 \\cdot 10^5$), where $b_i$ is the beauty value of the $i$-th city.\n-----Output-----\nPrint one integer \u2014 the maximum beauty of a journey Tanya can choose.\n-----Examples-----\nInput\n6\n10 7 1 9 10 15\nOutput\n26\nInput\n1\n400000\nOutput\n400000\nInput\n7\n8 9 26 11 12 29 14\nOutput\n55\n-----Note-----\nThe optimal journey plan in the first example is $c = [2, 4, 5]$.\nThe optimal journey plan in the second example is $c = [1]$.\nThe optimal journey plan in the third example is $c = [3, 6]$.\n\ndef",
        "answer": "def maxBeauty(n, b):\n    b.sort()\n    res = 0\n    for i in range(n - 1):\n        res += b[i] - b[i + 1]\n    return res",
        "difficulty": "interview"
    },
    {
        "task_id": 1027,
        "prompt": "Complete the Python function given the prompt below:Mancala is a game famous in the Middle East. It is played on a board that consists of 14 holes.  [Image] \nInitially, each hole has $a_i$ stones. When a player makes a move, he chooses a hole which contains a positive number of stones. He takes all the stones inside it and then redistributes these stones one by one in the next holes in a counter-clockwise direction.\nNote that the counter-clockwise order means if the player takes the stones from hole $i$, he will put one stone in the $(i+1)$-th hole, then in the $(i+2)$-th, etc. If he puts a stone in the $14$-th hole, the next one will be put in the first hole.\nAfter the move, the player collects all the stones from holes that contain even number of stones. The number of stones collected by player is the score, according to Resli.\nResli is a famous Mancala player. He wants to know the maximum score he can obtain after one move.\n-----Input-----\nThe only line contains 14 integers $a_1, a_2, \\ldots, a_{14}$ ($0 \\leq a_i \\leq 10^9$)\u00a0\u2014 the number of stones in each hole.\nIt is guaranteed that for any $i$ ($1\\leq i \\leq 14$) $a_i$ is either zero or odd, and there is at least one stone in the board.\n-----Output-----\nOutput one integer, the maximum possible score after one move.\n-----Examples-----\nInput\n0 1 1 0 0 0 0 0 0 7 0 0 0 0\nOutput\n4\nInput\n5 1 1 1 1 0 0 0 0 0 0 0 0 0\nOutput\n8\n-----Note-----\nIn the first test case the board after the move from the hole with $7$ stones will look like 1 2 2 0 0 0 0 0 0 0 1 1 1 1. Then the player collects the even numbers and ends up with a score equal to $4$.\n\ndef",
        "answer": "def Mancala(a):\n    return sum(a[1::2])",
        "difficulty": "interview"
    },
    {
        "task_id": 1028,
        "prompt": "Complete the Python function given the prompt below:n participants of the competition were split into m teams in some manner so that each team has at least one participant. After the competition each pair of participants from the same team became friends.\nYour task is to write a program that will find the minimum and the maximum number of pairs of friends that could have formed by the end of the competition.\n-----Input-----\nThe only line of input contains two integers n and m, separated by a single space (1 \u2264 m \u2264 n \u2264 10^9) \u2014 the number of participants and the number of teams respectively. \n-----Output-----\nThe only line of the output should contain two integers k_{min} and k_{max} \u2014 the minimum possible number of pairs of friends and the maximum possible number of pairs of friends respectively.\n-----Examples-----\nInput\n5 1\nOutput\n10 10\nInput\n3 2\nOutput\n1 1\nInput\n6 3\nOutput\n3 6\n-----Note-----\nIn the first sample all the participants get into one team, so there will be exactly ten pairs of friends.\nIn the second sample at any possible arrangement one team will always have two participants and the other team will always have one participant. Thus, the number of pairs of friends will always be equal to one.\nIn the third sample minimum number of newly formed friendships can be achieved if participants were split on teams consisting of 2 people, maximum number can be achieved if participants were split on teams of 1, 1 and 4 people.\n\ndef",
        "answer": "def min_max_pairs(n, m):\n    return (n * (n - 1)) // 2, (m * (m - 1)) // 2",
        "difficulty": "interview"
    },
    {
        "task_id": 1029,
        "prompt": "Complete the Python function given the prompt below:George is a cat, so he really likes to play. Most of all he likes to play with his array of positive integers b. During the game, George modifies the array by using special changes. Let's mark George's current array as b_1, b_2,..., b_{|}b| (record |b| denotes the current length of the array). Then one change is a sequence of actions:   Choose two distinct indexes i and j (1 \u2264 i, j \u2264 |b|;\u00a0i \u2260 j), such that b_{i} \u2265 b_{j}.  Get number v = concat(b_{i}, b_{j}), where concat(x, y) is a number obtained by adding number y to the end of the decimal record of number x. For example, concat(500, 10) = 50010, concat(2, 2) = 22.  Add number v to the end of the array. The length of the array will increase by one.  Remove from the array numbers with indexes i and j. The length of the array will decrease by two, and elements of the array will become re-numbered from 1 to current length of the array. \nGeorge played for a long time with his array b and received from array b an array consisting of exactly one number p. Now George wants to know: what is the maximum number of elements array b could contain originally? Help him find this number. Note that originally the array could contain only positive integers.\n-----Input-----\nThe first line of the input contains a single integer p (1 \u2264 p < 10^100000). It is guaranteed that number p doesn't contain any leading zeroes.\n-----Output-----\nPrint an integer \u2014 the maximum number of elements array b could contain originally.\n-----Examples-----\nInput\n9555\nOutput\n4\nInput\n10000000005\nOutput\n2\nInput\n800101\nOutput\n3\nInput\n45\nOutput\n1\nInput\n1000000000000001223300003342220044555\nOutput\n17\nInput\n19992000\nOutput\n1\nInput\n310200\nOutput\n2\n-----Note-----\nLet's consider the test examples:   Originally array b can be equal to {5, 9, 5, 5}. The sequence of George's changes could have been: {5, 9, 5, 5} \u2192 {5, 5, 95} \u2192 {95, 55} \u2192 {9555}.  Originally array b could be equal to {1000000000, 5}. Please note that the array b cannot contain zeros.  Originally array b could be equal to {800, 10, 1}.  Originally array b could be equal to {45}. It cannot be equal to {4, 5}, because George can get only array {54} from this array in one operation. \nNote that the numbers can be very large.\n\ndef",
        "answer": "def array_manipulation(n, queries):\n    arr = [0] * n\n    for i in queries:\n        arr[i[0] - 1] += i[2]\n        if i[1]!= len(arr):\n            arr[i[1]] -= i[2]\n    max_value = 0\n    running_sum = 0\n    for i in arr:\n        running_sum += i\n        if running_sum > max_value:\n            max_value = running_sum\n    return max_value",
        "difficulty": "interview"
    },
    {
        "task_id": 1030,
        "prompt": "Complete the Python function given the prompt below:User ainta is making a web site. This time he is going to make a navigation of the pages. In his site, there are n pages numbered by integers from 1 to n. Assume that somebody is on the p-th page now. The navigation will look like this: << p - k p - k + 1... p - 1 (p) p + 1... p + k - 1 p + k >> \nWhen someone clicks the button \"<<\" he is redirected to page 1, and when someone clicks the button \">>\" he is redirected to page n. Of course if someone clicks on a number, he is redirected to the corresponding page.\nThere are some conditions in the navigation:  If page 1 is in the navigation, the button \"<<\" must not be printed.  If page n is in the navigation, the button \">>\" must not be printed.  If the page number is smaller than 1 or greater than n, it must not be printed.  \u00a0\nYou can see some examples of the navigations. Make a program that prints the navigation.\n-----Input-----\nThe first and the only line contains three integers n, p, k (3 \u2264 n \u2264 100; 1 \u2264 p \u2264 n; 1 \u2264 k \u2264 n)\n-----Output-----\nPrint the proper navigation. Follow the format of the output from the test samples.\n-----Examples-----\nInput\n17 5 2\nOutput\n<< 3 4 (5) 6 7 >> \nInput\n6 5 2\nOutput\n<< 3 4 (5) 6 \nInput\n6 1 2\nOutput\n(1) 2 3 >> \nInput\n6 2 2\nOutput\n1 (2) 3 4 >>\nInput\n9 6 3\nOutput\n<< 3 4 5 (6) 7 8 9\nInput\n10 6 3\nOutput\n<< 3 4 5 (6) 7 8 9 >>\nInput\n8 5 4\nOutput\n1 2 3 4 (5) 6 7 8\n\ndef",
        "answer": "def navigation(n, p, k):\n    if p == 1:\n        return '<<'+''.join(map(str, range(1, n+1))) +'>>'\n    elif p == n:\n        return '<<'+''.join(map(str, range(n, 0, -1))) +'>>'\n    elif 1 <= p <= n:\n        return '<<'+''.join(map(str, range(p-k, p+k+1))) +'>>'",
        "difficulty": "interview"
    },
    {
        "task_id": 1031,
        "prompt": "Complete the Python function given the prompt below:In this problem, your task is to use ASCII graphics to paint a cardiogram. \nA cardiogram is a polyline with the following corners:$(0 ; 0),(a_{1} ; a_{1}),(a_{1} + a_{2} ; a_{1} - a_{2}),(a_{1} + a_{2} + a_{3} ; a_{1} - a_{2} + a_{3}), \\ldots,(\\sum_{i = 1}^{n} a_{i} ; \\sum_{i = 1}^{n}(- 1)^{i + 1} a_{i})$\nThat is, a cardiogram is fully defined by a sequence of positive integers a_1, a_2,..., a_{n}.\nYour task is to paint a cardiogram by given sequence a_{i}.\n-----Input-----\nThe first line contains integer n (2 \u2264 n \u2264 1000). The next line contains the sequence of integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 1000). It is guaranteed that the sum of all a_{i} doesn't exceed 1000.\n-----Output-----\nPrint max\u00a0|y_{i} - y_{j}| lines (where y_{k} is the y coordinate of the k-th point of the polyline), in each line print $\\sum_{i = 1}^{n} a_{i}$ characters. Each character must equal either \u00ab / \u00bb (slash), \u00ab \\ \u00bb (backslash), \u00ab \u00bb (space). The printed image must be the image of the given polyline. Please study the test samples for better understanding of how to print a cardiogram.\nNote that in this problem the checker checks your answer taking spaces into consideration. Do not print any extra characters. Remember that the wrong answer to the first pretest doesn't give you a penalty.\n-----Examples-----\nInput\n5\n3 1 2 5 1\nOutput\n      / \\     \n   / \\ /   \\    \n  /       \\   \n /         \\  \n          \\ / \nInput\n3\n1 5 1\nOutput\n / \\     \n  \\    \n   \\   \n    \\  \n     \\ /\n\ndef",
        "answer": "def cardiogram(a):\n    n = len(a)\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                print('/', end='')\n            else:\n                print(' ', end='')\n        print()\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                print('\\\\', end='')\n            else:\n                print(' ', end='')\n        print()",
        "difficulty": "interview"
    },
    {
        "task_id": 1032,
        "prompt": "Complete the Python function given the prompt below:This is the hard version of the problem. The difference between versions is the constraints on $n$ and $a_i$. You can make hacks only if all versions of the problem are solved.\nFirst, Aoi came up with the following idea for the competitive programming problem:\nYuzu is a girl who collecting candies. Originally, she has $x$ candies. There are also $n$ enemies numbered with integers from $1$ to $n$. Enemy $i$ has $a_i$ candies.\nYuzu is going to determine a permutation $P$. A permutation is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $\\{2,3,1,5,4\\}$ is a permutation, but $\\{1,2,2\\}$ is not a permutation ($2$ appears twice in the array) and $\\{1,3,4\\}$ is also not a permutation (because $n=3$ but there is the number $4$ in the array).\nAfter that, she will do $n$ duels with the enemies with the following rules:\n  If Yuzu has equal or more number of candies than enemy $P_i$, she wins the duel and gets $1$ candy. Otherwise, she loses the duel and gets nothing.  The candy which Yuzu gets will be used in the next duels. \nYuzu wants to win all duels. How many valid permutations $P$ exist?\nThis problem was easy and wasn't interesting for Akari, who is a friend of Aoi. And Akari made the following problem from the above idea:\nLet's define $f(x)$ as the number of valid permutations for the integer $x$.\nYou are given $n$, $a$ and a prime number $p \\le n$. Let's call a positive integer $x$ good, if the value $f(x)$ is not divisible by $p$. Find all good integers $x$.\nYour task is to solve this problem made by Akari.\n-----Input-----\nThe first line contains two integers $n$, $p$ $(2 \\le p \\le n \\le 10^5)$. It is guaranteed, that the number $p$ is prime (it has exactly two divisors $1$ and $p$).\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ $(1 \\le a_i \\le 10^9)$.\n-----Output-----\nIn the first line, print the number of good integers $x$.\nIn the second line, output all good integers $x$ in the ascending order.\nIt is guaranteed that the number of good integers $x$ does not exceed $10^5$.\n-----Examples-----\nInput\n3 2\n3 4 5\nOutput\n1\n3\nInput\n4 3\n2 3 5 6\nOutput\n2\n3 4\nInput\n4 3\n9 1 1 1\nOutput\n0\nInput\n3 2\n1000000000 1 999999999\nOutput\n1\n999999998\n-----Note-----\nIn the first test, $p=2$.\n  If $x \\le 2$, there are no valid permutations for Yuzu. So $f(x)=0$ for all $x \\le 2$. The number $0$ is divisible by $2$, so all integers $x \\leq 2$ are not good.  If $x = 3$, $\\{1,2,3\\}$ is the only valid permutation for Yuzu. So $f(3)=1$, so the number $3$ is good.  If $x = 4$, $\\{1,2,3\\}, \\{1,3,2\\}, \\{2,1,3\\}, \\{2,3,1\\}$ are all valid permutations for Yuzu. So $f(4)=4$, so the number $4$ is not good.  If $x \\ge 5$, all $6$ permutations are valid for Yuzu. So $f(x)=6$ for all $x \\ge 5$, so all integers $x \\ge 5$ are not good. \nSo, the only good number is $3$.\nIn the third test, for all positive integers $x$ the value $f(x)$ is divisible by $p = 3$.\n\ndef",
        "answer": "def f(x):\n    return x % p",
        "difficulty": "interview"
    },
    {
        "task_id": 1033,
        "prompt": "Complete the Python function given the prompt below:You are going to the beach with the idea to build the greatest sand castle ever in your head! The beach is not as three-dimensional as you could have imagined, it can be decribed as a line of spots to pile up sand pillars. Spots are numbered 1 through infinity from left to right. \nObviously, there is not enough sand on the beach, so you brought n packs of sand with you. Let height h_{i} of the sand pillar on some spot i be the number of sand packs you spent on it. You can't split a sand pack to multiple pillars, all the sand from it should go to a single one. There is a fence of height equal to the height of pillar with H sand packs to the left of the first spot and you should prevent sand from going over it. \nFinally you ended up with the following conditions to building the castle:  h_1 \u2264 H: no sand from the leftmost spot should go over the fence;  For any $i \\in [ 1 ; \\infty)$ |h_{i} - h_{i} + 1| \u2264 1: large difference in heights of two neighboring pillars can lead sand to fall down from the higher one to the lower, you really don't want this to happen;  $\\sum_{i = 1}^{\\infty} h_{i} = n$: you want to spend all the sand you brought with you. \nAs you have infinite spots to build, it is always possible to come up with some valid castle structure. Though you want the castle to be as compact as possible. \nYour task is to calculate the minimum number of spots you can occupy so that all the aforementioned conditions hold.\n-----Input-----\nThe only line contains two integer numbers n and H (1 \u2264 n, H \u2264 10^18) \u2014 the number of sand packs you have and the height of the fence, respectively.\n-----Output-----\nPrint the minimum number of spots you can occupy so the all the castle building conditions hold.\n-----Examples-----\nInput\n5 2\nOutput\n3\nInput\n6 8\nOutput\n3\n-----Note-----\nHere are the heights of some valid castles:   n = 5, H = 2, [2, 2, 1, 0,...], [2, 1, 1, 1, 0,...], [1, 0, 1, 2, 1, 0,...]  n = 6, H = 8, [3, 2, 1, 0,...], [2, 2, 1, 1, 0,...], [0, 1, 0, 1, 2, 1, 1, 0...] (this one has 5 spots occupied) \nThe first list for both cases is the optimal answer, 3 spots are occupied in them.\nAnd here are some invalid ones:  n = 5, H = 2, [3, 2, 0,...], [2, 3, 0,...], [1, 0, 2, 2,...]  n = 6, H = 8, [2, 2, 2, 0,...], [6, 0,...], [1, 4, 1, 0...], [2, 2, 1, 0,...]\n\ndef",
        "answer": "def solution(n, H):\n    # write your code in Python 3.6\n    pass\n",
        "difficulty": "interview"
    },
    {
        "task_id": 1034,
        "prompt": "Complete the Python function given the prompt below:The Patisserie AtCoder sells cakes with number-shaped candles.\nThere are X, Y and Z kinds of cakes with 1-shaped, 2-shaped and 3-shaped candles, respectively.\nEach cake has an integer value called deliciousness, as follows:\n - The deliciousness of the cakes with 1-shaped candles are A_1, A_2,..., A_X.\n - The deliciousness of the cakes with 2-shaped candles are B_1, B_2,..., B_Y.\n - The deliciousness of the cakes with 3-shaped candles are C_1, C_2,..., C_Z.\nTakahashi decides to buy three cakes, one for each of the three shapes of the candles, to celebrate ABC 123.\nThere are X \\times Y \\times Z such ways to choose three cakes.\nWe will arrange these X \\times Y \\times Z ways in descending order of the sum of the deliciousness of the cakes.\nPrint the sums of the deliciousness of the cakes for the first, second,..., K-th ways in this list.\n-----Constraints-----\n - 1 \\leq X \\leq 1 \\ 000\n - 1 \\leq Y \\leq 1 \\ 000\n - 1 \\leq Z \\leq 1 \\ 000\n - 1 \\leq K \\leq \\min(3 \\ 000, X \\times Y \\times Z)\n - 1 \\leq A_i \\leq 10 \\ 000 \\ 000 \\ 000\n - 1 \\leq B_i \\leq 10 \\ 000 \\ 000 \\ 000\n - 1 \\leq C_i \\leq 10 \\ 000 \\ 000 \\ 000\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nX Y Z K\nA_1 \\ A_2 \\ A_3 \\... \\ A_X\nB_1 \\ B_2 \\ B_3 \\... \\ B_Y\nC_1 \\ C_2 \\ C_3 \\... \\ C_Z\n-----Output-----\nPrint K lines. The i-th line should contain the i-th value stated in the problem statement.\n-----Sample Input-----\n2 2 2 8\n4 6\n1 5\n3 8\n-----Sample Output-----\n19\n17\n15\n14\n13\n12\n10\n8\nThere are 2 \\times 2 \\times 2 = 8 ways to choose three cakes, as shown below in descending order of the sum of the deliciousness of the cakes:\n - (A_2, B_2, C_2): 6 + 5 + 8 = 19\n - (A_1, B_2, C_2): 4 + 5 + 8 = 17\n - (A_2, B_1, C_2): 6 + 1 + 8 = 15\n - (A_2, B_2, C_1): 6 + 5 + 3 = 14\n - (A_1, B_1, C_2): 4 + 1 + 8 = 13\n - (A_1, B_2, C_1): 4 + 5 + 3 = 12\n - (A_2, B_1, C_1): 6 + 1 + 3 = 10\n - (A_1, B_1, C_1): 4 + 1 + 3 = 8\n\ndef",
        "answer": "def cakes(X, Y, Z, K):\n    # Write your code here\n    cakes = []\n    for i in range(X):\n        for j in range(Y):\n            for k in range(Z):\n                cakes.append((i+1, j+1, k+1))\n    cakes.sort(key=lambda x: sum(x), reverse=True)\n    for i in range(K):\n        print(sum(cakes[i]))",
        "difficulty": "interview"
    },
    {
        "task_id": 1035,
        "prompt": "Complete the Python function given the prompt below:Given are positive integers A and B.\nLet us choose some number of positive common divisors of A and B.\nHere, any two of the chosen divisors must be coprime.\nAt most, how many divisors can we choose?Definition of common divisor\nAn integer d is said to be a common divisor of integers x and y when d divides both x and y.Definition of being coprime\nIntegers x and y are said to be coprime when x and y have no positive common divisors other than 1.Definition of dividing\nAn integer x is said to divide another integer y when there exists an integer \\alpha such that y = \\alpha x.\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq A, B \\leq 10^{12}\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n-----Output-----\nPrint the maximum number of divisors that can be chosen to satisfy the condition.\n-----Sample Input-----\n12 18\n-----Sample Output-----\n3\n12 and 18 have the following positive common divisors: 1, 2, 3, and 6.\n1 and 2 are coprime, 2 and 3 are coprime, and 3 and 1 are coprime, so we can choose 1, 2, and 3, which achieve the maximum result.\n\ndef",
        "answer": "def coprime(a, b):\n    for i in range(2, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            return False\n    return True",
        "difficulty": "interview"
    },
    {
        "task_id": 1036,
        "prompt": "Complete the Python function given the prompt below:To decide which is the strongest among Rock, Paper, and Scissors, we will hold an RPS tournament.\nThere are 2^k players in this tournament, numbered 0 through 2^k-1. Each player has his/her favorite hand, which he/she will use in every match.\nA string s of length n consisting of R, P, and S represents the players' favorite hands.\nSpecifically, the favorite hand of Player i is represented by the ((i\\text{ mod } n) + 1)-th character of s; R, P, and S stand for Rock, Paper, and Scissors, respectively.\nFor l and r such that r-l is a power of 2, the winner of the tournament held among Players l through r-1 will be determined as follows:\n - If r-l=1 (that is, there is just one player), the winner is Player l.\n - If r-l\\geq 2, let m=(l+r)/2, and we hold two tournaments, one among Players l through m-1 and the other among Players m through r-1. Let a and b be the respective winners of these tournaments. a and b then play a match of rock paper scissors, and the winner of this match - or a if the match is drawn - is the winner of the tournament held among Players l through r-1.\nFind the favorite hand of the winner of the tournament held among Players 0 through 2^k-1.\n-----Notes-----\n - a\\text{ mod } b denotes the remainder when a is divided by b.\n - The outcome of a match of rock paper scissors is determined as follows:\n - If both players choose the same hand, the match is drawn;\n - R beats S;\n - P beats R;\n - S beats P.\n-----Constraints-----\n - 1 \\leq n,k \\leq 100\n - s is a string of length n consisting of R, P, and S.\n-----Input-----\nInput is given from Standard Input in the following format:\nn k\ns\n-----Output-----\nPrint the favorite hand of the winner of the tournament held among Players 0 through 2^k-1, as R, P, or S.\n-----Sample Input-----\n3 2\nRPS\n-----Sample Output-----\nP\n - The favorite hand of the winner of the tournament held among Players 0 through 1 is P.\n - The favorite hand of the winner of the tournament held among Players 2 through 3 is R.\n - The favorite hand of the winner of the tournament held among Players 0 through 3 is P.\nThus, the answer is P.\n   P\n \u250c\u2500\u2534\u2500\u2510\n P   R\n\u250c\u2534\u2510 \u250c\u2534\u2510\nR P S R\n ```\n       S\n   \u250c\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2510\n   P       S\n \u250c\u2500\u2534\u2500\u2510   \u250c\u2500\u2534\u2500\u2510\n P   R   S   P\n\u250c\u2534\u2510 \u250c\u2534\u2510 \u250c\u2534\u2510 \u250c\u2534\u2510\nR P S R P S R P\n```\n\ndef",
        "answer": "def rps(n,k,s):\n    if n==1:\n        return s[(k%n)+1]\n    else:\n        m=(n+k)//2\n        a=rps(n,m,s)\n        b=rps(n,k,s)\n        if a==b:\n            return a\n        else:\n            if (a=='R' and b=='S') or (a=='S' and b=='P') or (a=='P' and b=='R'):\n                return a\n            else:\n                return b",
        "difficulty": "interview"
    },
    {
        "task_id": 1037,
        "prompt": "Complete the Python function given the prompt below:There are N children standing in a line from left to right. The activeness of the i-th child from the left is A_i.\nYou can rearrange these children just one time in any order you like.\nWhen a child who originally occupies the x-th position from the left in the line moves to the y-th position from the left, that child earns A_x \\times |x-y| happiness points.\nFind the maximum total happiness points the children can earn.\n-----Constraints-----\n - 2 \\leq N \\leq 2000\n - 1 \\leq A_i \\leq 10^9\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 A_2... A_N\n-----Output-----\nPrint the maximum total happiness points the children can earn.\n-----Sample Input-----\n4\n1 3 4 2\n-----Sample Output-----\n20\nIf we move the 1-st child from the left to the 3-rd position from the left, the 2-nd child to the 4-th position, the 3-rd child to the 1-st position, and the 4-th child to the 2-nd position, the children earns 1 \\times |1-3|+3 \\times |2-4|+4 \\times |3-1|+2 \\times |4-2|=20 happiness points in total.\n\ndef",
        "answer": "def max_happiness(arr):\n    arr.sort()\n    happiness = 0\n    for i in range(len(arr)-1):\n        happiness += abs(arr[i]-arr[i+1])\n    return happiness",
        "difficulty": "interview"
    },
    {
        "task_id": 1038,
        "prompt": "Complete the Python function given the prompt below:Let f(A, B) be the exclusive OR of A, A+1,..., B. Find f(A, B).\nWhat is exclusive OR?\nThe bitwise exclusive OR of integers c_1, c_2,..., c_n (let us call it y) is defined as follows:\n - When y is written in base two, the digit in the 2^k's place (k \\geq 0) is 1 if, the number of integers among c_1, c_2,...c_m whose binary representations have 1 in the 2^k's place, is odd, and 0 if that count is even.\nFor example, the exclusive OR of 3 and 5 is 6. (When written in base two: the exclusive OR of 011 and 101 is 110.)\n-----Constraints-----\n - All values in input are integers.\n - 0 \\leq A \\leq B \\leq 10^{12}\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n-----Output-----\nCompute f(A, B) and print it.\n-----Sample Input-----\n2 4\n-----Sample Output-----\n5\n2, 3, 4 are 010, 011, 100 in base two, respectively.\nThe exclusive OR of these is 101, which is 5 in base ten.\n\ndef",
        "answer": "def exclusive_or(a, b):\n    return a ^ b",
        "difficulty": "interview"
    },
    {
        "task_id": 1039,
        "prompt": "Complete the Python function given the prompt below:You are given a tree with N vertices.\nHere, a tree is a kind of graph, and more specifically, a connected undirected graph with N-1 edges, where N is the number of its vertices.\nThe i-th edge (1\u2264i\u2264N-1) connects Vertices a_i and b_i, and has a length of c_i.\nYou are also given Q queries and an integer K. In the j-th query (1\u2264j\u2264Q):\n - find the length of the shortest path from Vertex x_j and Vertex y_j via Vertex K.\n-----Constraints-----\n - 3\u2264N\u226410^5 \n - 1\u2264a_i,b_i\u2264N (1\u2264i\u2264N-1) \n - 1\u2264c_i\u226410^9 (1\u2264i\u2264N-1) \n - The given graph is a tree.\n - 1\u2264Q\u226410^5 \n - 1\u2264K\u2264N \n - 1\u2264x_j,y_j\u2264N (1\u2264j\u2264Q) \n - x_j\u2260y_j (1\u2264j\u2264Q) \n - x_j\u2260K,y_j\u2260K (1\u2264j\u2264Q) \n-----Input-----\nInput is given from Standard Input in the following format:  \nN  \na_1 b_1 c_1  \n:  \na_{N-1} b_{N-1} c_{N-1}\nQ K\nx_1 y_1\n:  \nx_{Q} y_{Q}\n-----Output-----\nPrint the responses to the queries in Q lines.\nIn the j-th line j(1\u2264j\u2264Q), print the response to the j-th query.\n-----Sample Input-----\n5\n1 2 1\n1 3 1\n2 4 1\n3 5 1\n3 1\n2 4\n2 3\n4 5\n-----Sample Output-----\n3\n2\n4\nThe shortest paths for the three queries are as follows:\n - Query 1: Vertex 2 \u2192 Vertex 1 \u2192 Vertex 2 \u2192 Vertex 4 : Length 1+1+1=3 \n - Query 2: Vertex 2 \u2192 Vertex 1 \u2192 Vertex 3 : Length 1+1=2 \n - Query 3: Vertex 4 \u2192 Vertex 2 \u2192 Vertex 1 \u2192 Vertex 3 \u2192 Vertex 5 : Length 1+1+1+1=4\n\ndef",
        "answer": "def find_shortest_path(graph, start, end, path=[]):\n    path = path + [start]\n    if start == end:\n        return path\n    if not graph.has_key(start):\n        return None\n    shortest = None\n    for node in graph[start]:\n        if node not in path:\n            newpath = find_shortest_path(graph, node, end, path)\n            if newpath:\n                if not shortest or len(newpath) < len(shortest):\n                    shortest = newpath\n    return shortest",
        "difficulty": "interview"
    },
    {
        "task_id": 1040,
        "prompt": "Complete the Python function given the prompt below:Given is a string S of length N consisting of lowercase English letters.\nSnuke can do this operation any number of times: remove fox occurring as a substring from s and concatenate the remaining parts of s.\nWhat is the minimum possible length of s after some number of operations by Snuke?\n-----Constraints-----\n - 1 \\leq N \\leq 2 \\times 10^{5}\n - s is a string of length N consisting of lowercase English letters.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\ns\n-----Print-----\nPrint the minimum possible length of s after some number of operations by Snuke.\n-----Sample Input-----\n6\nicefox\n-----Sample Output-----\n3\n - By removing the fox at the end of icefox, we can turn s into ice.\n\ndef",
        "answer": "def Snuke(s):\n    return len(s) - s.count('fox')",
        "difficulty": "interview"
    },
    {
        "task_id": 1041,
        "prompt": "Complete the Python function given the prompt below:n evenly spaced points have been marked around the edge of a circle. There is a number written at each point. You choose a positive real number k. Then you may repeatedly select a set of 2 or more points which are evenly spaced, and either increase all numbers at points in the set by k or decrease all numbers at points in the set by k. You would like to eventually end up with all numbers equal to 0. Is it possible?\nA set of 2 points is considered evenly spaced if they are diametrically opposed, and a set of 3 or more points is considered evenly spaced if they form a regular polygon.\n-----Input-----\nThe first line of input contains an integer n (3 \u2264 n \u2264 100000), the number of points along the circle.\nThe following line contains a string s with exactly n digits, indicating the numbers initially present at each of the points, in clockwise order.\n-----Output-----\nPrint \"YES\" (without quotes) if there is some sequence of operations that results in all numbers being 0, otherwise \"NO\" (without quotes).\nYou can print each letter in any case (upper or lower).\n-----Examples-----\nInput\n30\n000100000100000110000000001100\nOutput\nYES\nInput\n6\n314159\nOutput\nNO\n-----Note-----\nIf we label the points from 1 to n, then for the first test case we can set k = 1. Then we increase the numbers at points 7 and 22 by 1, then decrease the numbers at points 7, 17, and 27 by 1, then decrease the numbers at points 4, 10, 16, 22, and 28 by 1.\n\ndef",
        "answer": "def is_evenly_spaced(n, s):\n    k = 1\n    while k < n:\n        for i in range(n):\n            if i % k == 0:\n                if s[i]!= '0':\n                    s[i] = str(int(s[i]) + k)\n        k += 1\n    for i in range(n):\n        if s[i]!= '0':\n            return False\n    return True",
        "difficulty": "interview"
    },
    {
        "task_id": 1042,
        "prompt": "Complete the Python function given the prompt below:Count the number of distinct sequences a_1, a_2,..., a_{n} (1 \u2264 a_{i}) consisting of positive integers such that gcd(a_1, a_2,..., a_{n}) = x and $\\sum_{i = 1}^{n} a_{i} = y$. As this number could be large, print the answer modulo 10^9 + 7.\ngcd here means the greatest common divisor.\n-----Input-----\nThe only line contains two positive integers x and y (1 \u2264 x, y \u2264 10^9).\n-----Output-----\nPrint the number of such sequences modulo 10^9 + 7.\n-----Examples-----\nInput\n3 9\nOutput\n3\nInput\n5 8\nOutput\n0\n-----Note-----\nThere are three suitable sequences in the first test: (3, 3, 3), (3, 6), (6, 3).\nThere are no suitable sequences in the second test.\n\ndef",
        "answer": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)",
        "difficulty": "interview"
    },
    {
        "task_id": 1043,
        "prompt": "Complete the Python function given the prompt below:You are organizing a boxing tournament, where $n$ boxers will participate ($n$ is a power of $2$), and your friend is one of them. All boxers have different strength from $1$ to $n$, and boxer $i$ wins in the match against boxer $j$ if and only if $i$ is stronger than $j$.\nThe tournament will be organized as follows: $n$ boxers will be divided into pairs; the loser in each pair leaves the tournament, and $\\frac{n}{2}$ winners advance to the next stage, where they are divided into pairs again, and the winners in all pairs advance to the next stage, and so on, until only one boxer remains (who is declared the winner).\nYour friend really wants to win the tournament, but he may be not the strongest boxer. To help your friend win the tournament, you may bribe his opponents: if your friend is fighting with a boxer you have bribed, your friend wins even if his strength is lower.\nFurthermore, during each stage you distribute the boxers into pairs as you wish.\nThe boxer with strength $i$ can be bribed if you pay him $a_i$ dollars. What is the minimum number of dollars you have to spend to make your friend win the tournament, provided that you arrange the boxers into pairs during each stage as you wish?\n-----Input-----\nThe first line contains one integer $n$ ($2 \\le n \\le 2^{18}$) \u2014 the number of boxers. $n$ is a power of $2$.\nThe second line contains $n$ integers $a_1$, $a_2$,..., $a_n$, where $a_i$ is the number of dollars you have to pay if you want to bribe the boxer with strength $i$. Exactly one of $a_i$ is equal to $-1$ \u2014 it means that the boxer with strength $i$ is your friend. All other values are in the range $[1, 10^9]$.\n-----Output-----\nPrint one integer \u2014 the minimum number of dollars you have to pay so your friend wins.\n-----Examples-----\nInput\n4\n3 9 1 -1\nOutput\n0\nInput\n8\n11 -1 13 19 24 7 17 5\nOutput\n12\n-----Note-----\nIn the first test case no matter how you will distribute boxers into pairs, your friend is the strongest boxer and anyway wins the tournament.\nIn the second test case you can distribute boxers as follows (your friend is number $2$):\n$1 : 2, 8 : 5, 7 : 3, 6 : 4$ (boxers $2, 8, 7$ and $6$ advance to the next stage);\n$2 : 6, 8 : 7$ (boxers $2$ and $8$ advance to the next stage, you have to bribe the boxer with strength $6$);\n$2 : 8$ (you have to bribe the boxer with strength $8$);\n\ndef",
        "answer": "def solve(n, a):\n    a.sort()\n    res = 0\n    for i in range(n // 2):\n        if a[i] == -1:\n            continue\n        res += a[i]\n    return res",
        "difficulty": "interview"
    },
    {
        "task_id": 1044,
        "prompt": "Complete the Python function given the prompt below:Peter Parker wants to play a game with Dr. Octopus. The game is about cycles. Cycle is a sequence of vertices, such that first one is connected with the second, second is connected with third and so on, while the last one is connected with the first one again. Cycle may consist of a single isolated vertex.\nInitially there are k cycles, i-th of them consisting of exactly v_{i} vertices. Players play alternatively. Peter goes first. On each turn a player must choose a cycle with at least 2 vertices (for example, x vertices) among all available cycles and replace it by two cycles with p and x - p vertices where 1 \u2264 p < x is chosen by the player. The player who cannot make a move loses the game (and his life!).\nPeter wants to test some configurations of initial cycle sets before he actually plays with Dr. Octopus. Initially he has an empty set. In the i-th test he adds a cycle with a_{i} vertices to the set (this is actually a multiset because it can contain two or more identical cycles). After each test, Peter wants to know that if the players begin the game with the current set of cycles, who wins? \nPeter is pretty good at math, but now he asks you to help.\n-----Input-----\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 100 000)\u00a0\u2014 the number of tests Peter is about to make.\nThe second line contains n space separated integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^9), i-th of them stands for the number of vertices in the cycle added before the i-th test.\n-----Output-----\nPrint the result of all tests in order they are performed. Print 1 if the player who moves first wins or 2 otherwise.\n-----Examples-----\nInput\n3\n1 2 3\nOutput\n2\n1\n1\nInput\n5\n1 1 5 1 1\nOutput\n2\n2\n2\n2\n2\n-----Note-----\nIn the first sample test:\nIn Peter's first test, there's only one cycle with 1 vertex. First player cannot make a move and loses.\nIn his second test, there's one cycle with 1 vertex and one with 2. No one can make a move on the cycle with 1 vertex. First player can replace the second cycle with two cycles of 1 vertex and second player can't make any move and loses.\nIn his third test, cycles have 1, 2 and 3 vertices. Like last test, no one can make a move on the first cycle. First player can replace the third cycle with one cycle with size 1 and one with size 2. Now cycles have 1, 1, 2, 2 vertices. Second player's only move is to replace a cycle of size 2 with 2 cycles of size 1. And cycles are 1, 1, 1, 1, 2. First player replaces the last cycle with 2 cycles with size 1 and wins.\nIn the second sample test:\nHaving cycles of size 1 is like not having them (because no one can make a move on them). \nIn Peter's third test: There a cycle of size 5 (others don't matter). First player has two options: replace it with cycles of sizes 1 and 4 or 2 and 3.\n  If he replaces it with cycles of sizes 1 and 4: Only second cycle matters. Second player will replace it with 2 cycles of sizes 2. First player's only option to replace one of them with two cycles of size 1. Second player does the same thing with the other cycle. First player can't make any move and loses.  If he replaces it with cycles of sizes 2 and 3: Second player will replace the cycle of size 3 with two of sizes 1 and 2. Now only cycles with more than one vertex are two cycles of size 2. As shown in previous case, with 2 cycles of size 2 second player wins. \nSo, either way first player loses.\n\ndef",
        "answer": "def game(n, a):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 1\n    if n == 4:\n        return 2\n    if n == 5:\n        return 2\n    if n == 6:\n        return 2\n    if n == 7:\n        return 2\n    if n == 8:\n        return 2\n    if n == 9:\n        return 2\n    if n == 10:\n        return 2\n    if n == 11:\n        return 2\n    if n == 12:\n        return 2\n    if n == 13:\n        return 2\n    if n == 14:\n        return 2\n    if n == 15:\n        return 2\n    if n == 16:\n        return 2\n    if n == 17:\n        return 2\n    if n == 18:\n        return 2\n    if n == 19:\n        return 2\n    if n == 20:\n        return 2\n    if n == 21:\n        return 2\n    if n == 22:\n        return 2\n    if n == 23:\n        return 2\n    if n == 24:\n        return 2\n    if n == 25:\n        return 2\n    if n == 26:\n        return 2\n    if n == 27:\n        return 2\n    if n == 28:\n        return 2\n    if n == 29:\n        return 2\n    if n == 30:\n        return 2\n    if n == 31:\n        return 2\n    if n == 32:\n        return 2\n    if n == 33:\n        return 2\n    if n == 34:\n        return 2\n    if n == 35:\n        return 2\n    if n == 36:\n        ",
        "difficulty": "interview"
    },
    {
        "task_id": 1045,
        "prompt": "Complete the Python function given the prompt below:Vanya got n cubes. He decided to build a pyramid from them. Vanya wants to build the pyramid as follows: the top level of the pyramid must consist of 1 cube, the second level must consist of 1 + 2 = 3 cubes, the third level must have 1 + 2 + 3 = 6 cubes, and so on. Thus, the i-th level of the pyramid must have 1 + 2 +... + (i - 1) + i cubes.\nVanya wants to know what is the maximum height of the pyramid that he can make using the given cubes.\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 10^4) \u2014 the number of cubes given to Vanya.\n-----Output-----\nPrint the maximum possible height of the pyramid in the single line.\n-----Examples-----\nInput\n1\nOutput\n1\nInput\n25\nOutput\n4\n-----Note-----\nIllustration to the second sample:  [Image]\n\ndef",
        "answer": "def pyramid(n):\n    return n + 1",
        "difficulty": "interview"
    },
    {
        "task_id": 1046,
        "prompt": "Complete the Python function given the prompt below:Polycarpus is the director of a large corporation. There are n secretaries working for the corporation, each of them corresponds via the famous Spyke VoIP system during the day. We know that when two people call each other via Spyke, the Spyke network assigns a unique ID to this call, a positive integer session number.\nOne day Polycarpus wondered which secretaries are talking via the Spyke and which are not. For each secretary, he wrote out either the session number of his call or a 0 if this secretary wasn't talking via Spyke at that moment.\nHelp Polycarpus analyze these data and find out the number of pairs of secretaries that are talking. If Polycarpus has made a mistake in the data and the described situation could not have taken place, say so.\nNote that the secretaries can correspond via Spyke not only with each other, but also with the people from other places. Also, Spyke conferences aren't permitted \u2014 that is, one call connects exactly two people.\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 10^3) \u2014 the number of secretaries in Polycarpus's corporation. The next line contains n space-separated integers: id_1, id_2,..., id_{n} (0 \u2264 id_{i} \u2264 10^9). Number id_{i} equals the number of the call session of the i-th secretary, if the secretary is talking via Spyke, or zero otherwise.\nConsider the secretaries indexed from 1 to n in some way.\n-----Output-----\nPrint a single integer \u2014 the number of pairs of chatting secretaries, or -1 if Polycarpus's got a mistake in his records and the described situation could not have taken place.\n-----Examples-----\nInput\n6\n0 1 7 1 7 10\nOutput\n2\nInput\n3\n1 1 1\nOutput\n-1\nInput\n1\n0\nOutput\n0\n-----Note-----\nIn the first test sample there are two Spyke calls between secretaries: secretary 2 and secretary 4, secretary 3 and secretary 5.\nIn the second test sample the described situation is impossible as conferences aren't allowed.\n\ndef",
        "answer": "def spyke_chat(n, a):\n    if n == 1:\n        return 0\n    else:\n        return sum(a)",
        "difficulty": "interview"
    },
    {
        "task_id": 1047,
        "prompt": "Complete the Python function given the prompt below:A number is called quasibinary if its decimal representation contains only digits 0 or 1. For example, numbers 0, 1, 101, 110011\u00a0\u2014 are quasibinary and numbers 2, 12, 900 are not.\nYou are given a positive integer n. Represent it as a sum of minimum number of quasibinary numbers.\n-----Input-----\nThe first line contains a single integer n (1 \u2264 n \u2264 10^6).\n-----Output-----\nIn the first line print a single integer k\u00a0\u2014 the minimum number of numbers in the representation of number n as a sum of quasibinary numbers.\nIn the second line print k numbers \u2014 the elements of the sum. All these numbers should be quasibinary according to the definition above, their sum should equal n. Do not have to print the leading zeroes in the numbers. The order of numbers doesn't matter. If there are multiple possible representations, you are allowed to print any of them.\n-----Examples-----\nInput\n9\nOutput\n9\n1 1 1 1 1 1 1 1 1 \nInput\n32\nOutput\n3\n10 11 11\n\ndef",
        "answer": "def quasibinary(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n",
        "difficulty": "interview"
    },
    {
        "task_id": 1048,
        "prompt": "Complete the Python function given the prompt below:Ivan has a robot which is situated on an infinite grid. Initially the robot is standing in the starting cell (0, 0). The robot can process commands. There are four types of commands it can perform:  U \u2014 move from the cell (x, y) to (x, y + 1);  D \u2014 move from (x, y) to (x, y - 1);  L \u2014 move from (x, y) to (x - 1, y);  R \u2014 move from (x, y) to (x + 1, y). \nIvan entered a sequence of n commands, and the robot processed it. After this sequence the robot ended up in the starting cell (0, 0), but Ivan doubts that the sequence is such that after performing it correctly the robot ends up in the same cell. He thinks that some commands were ignored by robot. To acknowledge whether the robot is severely bugged, he needs to calculate the maximum possible number of commands that were performed correctly. Help Ivan to do the calculations!\n-----Input-----\nThe first line contains one number n \u2014 the length of sequence of commands entered by Ivan (1 \u2264 n \u2264 100).\nThe second line contains the sequence itself \u2014 a string consisting of n characters. Each character can be U, D, L or R.\n-----Output-----\nPrint the maximum possible number of commands from the sequence the robot could perform to end up in the starting cell.\n-----Examples-----\nInput\n4\nLDUR\nOutput\n4\nInput\n5\nRRRUU\nOutput\n0\nInput\n6\nLLRRRR\nOutput\n4\n\ndef",
        "answer": "def robot(n, commands):\n    x, y = 0, 0\n    for command in commands:\n        if command == 'U':\n            y += 1\n        elif command == 'D':\n            y -= 1\n        elif command == 'L':\n            x -= 1\n        elif command == 'R':\n            x += 1\n    return max(abs(x), abs(y))",
        "difficulty": "interview"
    },
    {
        "task_id": 1049,
        "prompt": "Complete the Python function given the prompt below:Arya has n opponents in the school. Each day he will fight with all opponents who are present this day. His opponents have some fighting plan that guarantees they will win, but implementing this plan requires presence of them all. That means if one day at least one of Arya's opponents is absent at the school, then Arya will beat all present opponents. Otherwise, if all opponents are present, then they will beat Arya.\nFor each opponent Arya knows his schedule\u00a0\u2014 whether or not he is going to present on each particular day. Tell him the maximum number of consecutive days that he will beat all present opponents.\nNote, that if some day there are no opponents present, Arya still considers he beats all the present opponents.\n-----Input-----\nThe first line of the input contains two integers n and d (1 \u2264 n, d \u2264 100)\u00a0\u2014 the number of opponents and the number of days, respectively.\nThe i-th of the following d lines contains a string of length n consisting of characters '0' and '1'. The j-th character of this string is '0' if the j-th opponent is going to be absent on the i-th day.\n-----Output-----\nPrint the only integer\u00a0\u2014 the maximum number of consecutive days that Arya will beat all present opponents.\n-----Examples-----\nInput\n2 2\n10\n00\nOutput\n2\nInput\n4 1\n0100\nOutput\n1\nInput\n4 5\n1101\n1111\n0110\n1011\n1111\nOutput\n2\n-----Note-----\nIn the first and the second samples, Arya will beat all present opponents each of the d days.\nIn the third sample, Arya will beat his opponents on days 1, 3 and 4 and his opponents will beat him on days 2 and 5. Thus, the maximum number of consecutive winning days is 2, which happens on days 3 and 4.\n\ndef",
        "answer": "def solution(n, d):\n    # write your code in Python 3.6\n    pass\n",
        "difficulty": "interview"
    },
    {
        "task_id": 1050,
        "prompt": "Complete the Python function given the prompt below:Vus the Cossack holds a programming competition, in which $n$ people participate. He decided to award them all with pens and notebooks. It is known that Vus has exactly $m$ pens and $k$ notebooks.\nDetermine whether the Cossack can reward all participants, giving each of them at least one pen and at least one notebook.\n-----Input-----\nThe first line contains three integers $n$, $m$, and $k$ ($1 \\leq n, m, k \\leq 100$)\u00a0\u2014 the number of participants, the number of pens, and the number of notebooks respectively.\n-----Output-----\nPrint \"Yes\" if it possible to reward all the participants. Otherwise, print \"No\".\nYou can print each letter in any case (upper or lower).\n-----Examples-----\nInput\n5 8 6\nOutput\nYes\nInput\n3 9 3\nOutput\nYes\nInput\n8 5 20\nOutput\nNo\n-----Note-----\nIn the first example, there are $5$ participants. The Cossack has $8$ pens and $6$ notebooks. Therefore, he has enough pens and notebooks.\nIn the second example, there are $3$ participants. The Cossack has $9$ pens and $3$ notebooks. He has more than enough pens but only the minimum needed number of notebooks.\nIn the third example, there are $8$ participants but only $5$ pens. Since the Cossack does not have enough pens, the answer is \"No\".\n\ndef",
        "answer": "def check(n, m, k):\n    if n >= m and k >= m:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "difficulty": "interview"
    },
    {
        "task_id": 1051,
        "prompt": "Complete the Python function given the prompt below:This year, as in previous years, MemSQL is inviting the top 25 competitors from the Start[c]up qualification round to compete onsite for the final round. Not everyone who is eligible to compete onsite can afford to travel to the office, though. Initially the top 25 contestants are invited to come onsite. Each eligible contestant must either accept or decline the invitation. Whenever a contestant declines, the highest ranked contestant not yet invited is invited to take the place of the one that declined. This continues until 25 contestants have accepted invitations.\nAfter the qualifying round completes, you know K of the onsite finalists, as well as their qualifying ranks (which start at 1, there are no ties). Determine the minimum possible number of contestants that declined the invitation to compete onsite in the final round.\n-----Input-----\nThe first line of input contains K (1 \u2264 K \u2264 25), the number of onsite finalists you know. The second line of input contains r_1, r_2,..., r_{K} (1 \u2264 r_{i} \u2264 10^6), the qualifying ranks of the finalists you know. All these ranks are distinct.\n-----Output-----\nPrint the minimum possible number of contestants that declined the invitation to compete onsite.\n-----Examples-----\nInput\n25\n2 3 4 5 6 7 8 9 10 11 12 14 15 16 17 18 19 20 21 22 23 24 25 26 28\nOutput\n3\nInput\n5\n16 23 8 15 4\nOutput\n0\nInput\n3\n14 15 92\nOutput\n67\n-----Note-----\nIn the first example, you know all 25 onsite finalists. The contestants who ranked 1-st, 13-th, and 27-th must have declined, so the answer is 3.\n\ndef",
        "answer": "def main():\n    n = int(input())\n    r = list(map(int, input().split()))\n    r.sort()\n    count = 0\n    for i in range(n):\n        if r[i] > i + 1:\n            count += 1\n    print(count)",
        "difficulty": "interview"
    },
    {
        "task_id": 1052,
        "prompt": "Complete the Python function given the prompt below:A permutation p of size n is an array such that every integer from 1 to n occurs exactly once in this array.\nLet's call a permutation an almost identity permutation iff there exist at least n - k indices i (1 \u2264 i \u2264 n) such that p_{i} = i.\nYour task is to count the number of almost identity permutations for given numbers n and k.\n-----Input-----\nThe first line contains two integers n and k (4 \u2264 n \u2264 1000, 1 \u2264 k \u2264 4).\n-----Output-----\nPrint the number of almost identity permutations for given n and k.\n-----Examples-----\nInput\n4 1\nOutput\n1\nInput\n4 2\nOutput\n7\nInput\n5 3\nOutput\n31\nInput\n5 4\nOutput\n76\n\ndef",
        "answer": "def almost_identity_permutations(n, k):\n    return n**k",
        "difficulty": "interview"
    },
    {
        "task_id": 1053,
        "prompt": "Complete the Python function given the prompt below:Ehab is interested in the bitwise-xor operation and the special graphs. Mahmoud gave him a problem that combines both. He has a complete graph consisting of n vertices numbered from 0 to n - 1. For all 0 \u2264 u < v < n, vertex u and vertex v are connected with an undirected edge that has weight $u \\oplus v$ (where $\\oplus$ is the bitwise-xor operation). Can you find the weight of the minimum spanning tree of that graph?\nYou can read about complete graphs in https://en.wikipedia.org/wiki/Complete_graph\nYou can read about the minimum spanning tree in https://en.wikipedia.org/wiki/Minimum_spanning_tree\nThe weight of the minimum spanning tree is the sum of the weights on the edges included in it.\n-----Input-----\nThe only line contains an integer n (2 \u2264 n \u2264 10^12), the number of vertices in the graph.\n-----Output-----\nThe only line contains an integer x, the weight of the graph's minimum spanning tree.\n-----Example-----\nInput\n4\nOutput\n4\n-----Note-----\nIn the first sample: [Image] The weight of the minimum spanning tree is 1+2+1=4.\n\ndef",
        "answer": "def xor(a, b):\n    return a ^ b",
        "difficulty": "interview"
    },
    {
        "task_id": 1054,
        "prompt": "Complete the Python function given the prompt below:Many computer strategy games require building cities, recruiting army, conquering tribes, collecting resources. Sometimes it leads to interesting problems. \nLet's suppose that your task is to build a square city. The world map uses the Cartesian coordinates. The sides of the city should be parallel to coordinate axes. The map contains mines with valuable resources, located at some points with integer coordinates. The sizes of mines are relatively small, i.e. they can be treated as points. The city should be built in such a way that all the mines are inside or on the border of the city square. \nBuilding a city takes large amount of money depending on the size of the city, so you have to build the city with the minimum area. Given the positions of the mines find the minimum possible area of the city.\n-----Input-----\nThe first line of the input contains number n\u00a0\u2014 the number of mines on the map (2 \u2264 n \u2264 1000). Each of the next n lines contains a pair of integers x_{i} and y_{i}\u00a0\u2014 the coordinates of the corresponding mine ( - 10^9 \u2264 x_{i}, y_{i} \u2264 10^9). All points are pairwise distinct.\n-----Output-----\nPrint the minimum area of the city that can cover all the mines with valuable resources.\n-----Examples-----\nInput\n2\n0 0\n2 2\nOutput\n4\nInput\n2\n0 0\n0 3\nOutput\n9\n\ndef",
        "answer": "def city_area(mines):\n    mines = sorted(mines)\n    mines = [mines[0]] + mines + [mines[-1]]\n    mines = sorted(set(mines))\n    mines = [mines[0]] + mines + [mines[-1]]\n    mines = sorted(set(mines))\n    mines = [mines[0]] + mines + [mines[-1]]\n    mines = sorted(set(mines))\n    mines = [mines[0]] + mines + [mines[-1]]\n    mines = sorted(set(mines))\n    mines = [mines[0]] + mines + [mines[-1]]\n    mines = sorted(set(mines))\n    mines = [mines[0]] + mines + [mines[-1]]\n    mines = sorted(set(mines))\n    mines = [mines[0]] + mines + [mines[-1]]\n    mines = sorted(set(mines))\n    mines = [mines[0]] + mines + [mines[-1]]\n    mines = sorted(set(mines))\n    mines = [mines[0]] + mines + [mines[-1]]\n    mines = sorted(set(mines))\n    mines = [mines[0]] + mines + [mines[-1]]\n    mines = sorted(set(mines))\n    mines = [mines[0]] + mines + [mines[-1]]\n    mines = sorted(set(mines))\n    mines = [mines[0]] + mines + [mines[-1",
        "difficulty": "interview"
    },
    {
        "task_id": 1055,
        "prompt": "Complete the Python function given the prompt below:Thanos sort is a supervillain sorting algorithm, which works as follows: if the array is not sorted, snap your fingers* to remove the first or the second half of the items, and repeat the process.\nGiven an input array, what is the size of the longest sorted array you can obtain from it using Thanos sort?\n*Infinity Gauntlet required.\n-----Input-----\nThe first line of input contains a single number $n$ ($1 \\le n \\le 16$) \u2014 the size of the array. $n$ is guaranteed to be a power of 2.\nThe second line of input contains $n$ space-separated integers $a_i$ ($1 \\le a_i \\le 100$) \u2014 the elements of the array.\n-----Output-----\nReturn the maximal length of a sorted array you can obtain using Thanos sort. The elements of the array have to be sorted in non-decreasing order.\n-----Examples-----\nInput\n4\n1 2 2 4\nOutput\n4\nInput\n8\n11 12 1 2 13 14 3 4\nOutput\n2\nInput\n4\n7 6 5 4\nOutput\n1\n-----Note-----\nIn the first example the array is already sorted, so no finger snaps are required.\nIn the second example the array actually has a subarray of 4 sorted elements, but you can not remove elements from different sides of the array in one finger snap. Each time you have to remove either the whole first half or the whole second half, so you'll have to snap your fingers twice to get to a 2-element sorted array.\nIn the third example the array is sorted in decreasing order, so you can only save one element from the ultimate destruction.\n\ndef",
        "answer": "def thanos(arr):\n    n = len(arr)\n    if n == 1:\n        return 1\n    if n == 2:\n        if arr[0] > arr[1]:\n            return 2\n        else:\n            return 1\n    if n == 3:\n        if arr[0] > arr[1] and arr[0] > arr[2]:\n            return 3\n        elif arr[1] > arr[0] and arr[1] > arr[2]:\n            return 3\n        else:\n            return 2\n    if n == 4:\n        if arr[0] > arr[1] and arr[0] > arr[2] and arr[0] > arr[3]:\n            return 4\n        elif arr[1] > arr[0] and arr[1] > arr[2] and arr[1] > arr[3]:\n            return 4\n        elif arr[2] > arr[0] and arr[2] > arr[1] and arr[2] > arr[3]:\n            return 4\n        elif arr[3] > arr[0] and arr[3] > arr[1] and arr[3] > arr[2]:\n            return 4\n        else:\n            return 3\n    if n == 5:\n        if arr[0] > arr[1] and arr[0] > arr[2] and arr[0] > arr[3] and arr[0] > arr[4]:\n            return 5\n        elif arr[1] > arr[0] and arr[1] > arr[2] and arr[1] > arr[3] and arr[1] > arr[4]:\n            return 5\n        elif arr[2] > arr[0] and arr",
        "difficulty": "interview"
    },
    {
        "task_id": 1056,
        "prompt": "Complete the Python function given the prompt below:Hyakugoku has just retired from being the resident deity of the South Black Snail Temple in order to pursue her dream of becoming a cartoonist. She spent six months in that temple just playing \"Cat's Cradle\" so now she wants to try a different game \u2014 \"Snakes and Ladders\". Unfortunately, she already killed all the snakes, so there are only ladders left now. \nThe game is played on a $10 \\times 10$ board as follows:  At the beginning of the game, the player is at the bottom left square.  The objective of the game is for the player to reach the Goal (the top left square) by following the path and climbing vertical ladders. Once the player reaches the Goal, the game ends.  The path is as follows: if a square is not the end of its row, it leads to the square next to it along the direction of its row; if a square is the end of its row, it leads to the square above it. The direction of a row is determined as follows: the direction of the bottom row is to the right; the direction of any other row is opposite the direction of the row below it. See Notes section for visualization of path.  During each turn, the player rolls a standard six-sided dice. Suppose that the number shown on the dice is $r$. If the Goal is less than $r$ squares away on the path, the player doesn't move (but the turn is performed). Otherwise, the player advances exactly $r$ squares along the path and then stops. If the player stops on a square with the bottom of a ladder, the player chooses whether or not to climb up that ladder. If she chooses not to climb, then she stays in that square for the beginning of the next turn.  Some squares have a ladder in them. Ladders are only placed vertically \u2014 each one leads to the same square of some of the upper rows. In order for the player to climb up a ladder, after rolling the dice, she must stop at the square containing the bottom of the ladder. After using the ladder, the player will end up in the square containing the top of the ladder. She cannot leave the ladder in the middle of climbing. And if the square containing the top of the ladder also contains the bottom of another ladder, she is not allowed to use that second ladder.  The numbers on the faces of the dice are 1, 2, 3, 4, 5, and 6, with each number having the same probability of being shown. \nPlease note that:     it is possible for ladders to overlap, but the player cannot switch to the other ladder while in the middle of climbing the first one;     it is possible for ladders to go straight to the top row, but not any higher;     it is possible for two ladders to lead to the same tile;     it is possible for a ladder to lead to a tile that also has a ladder, but the player will not be able to use that second ladder if she uses the first one;     the player can only climb up ladders, not climb down. \nHyakugoku wants to finish the game as soon as possible. Thus, on each turn she chooses whether to climb the ladder or not optimally. Help her to determine the minimum expected number of turns the game will take.\n-----Input-----\nInput will consist of ten lines. The $i$-th line will contain 10 non-negative integers $h_{i1}, h_{i2}, \\dots, h_{i10}$. If $h_{ij}$ is $0$, then the tile at the $i$-th row and $j$-th column has no ladder. Otherwise, the ladder at that tile will have a height of $h_{ij}$, i.e. climbing it will lead to the tile $h_{ij}$ rows directly above. It is guaranteed that $0 \\leq h_{ij} < i$. Also, the first number of the first line and the first number of the last line always contain $0$, i.e. the Goal and the starting tile never have ladders.\n-----Output-----\nPrint only one line containing a single floating-point number \u2014 the minimum expected number of turns Hyakugoku can take to finish the game. Your answer will be considered correct if its absolute or relative error does not exceed $10^{-6}$.\n-----Examples-----\nInput\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\nOutput\n33.0476190476\nInput\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 3 0 0 0 4 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 4 0 0 0\n0 0 3 0 0 0 0 0 0 0\n0 0 4 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 9\nOutput\n20.2591405923\nInput\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 6 6 6 6 6 6 0 0 0\n1 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\nOutput\n15.9047592939\n-----Note-----\nA visualization of the path and the board from example 2 is as follows: [Image]\nThe tile with an 'S' is the starting tile and the tile with an 'E' is the Goal.\nFor the first example, there are no ladders.\nFor the second example, the board looks like the one in the right part of the image (the ladders have been colored for clarity).\nIt is possible for ladders to overlap, as is the case with the red and yellow ladders and green and blue ladders. It is also possible for ladders to go straight to the top, as is the case with the black and blue ladders. However, it is not possible for ladders to go any higher (outside of the board). It is also possible that two ladders lead to the same tile, as is the case with the red and yellow ladders. Also, notice that the red and yellow ladders lead to the tile with the orange ladder. So if the player chooses to climb either of the red and yellow ladders, they will not be able to climb the orange ladder. Finally, notice that the green ladder passes through the starting tile of the blue ladder. The player cannot transfer from the green ladder to the blue ladder while in the middle of climbing the green ladder.\n\ndef",
        "answer": "def snakes_and_ladders(board):\n    # Write your code here\n    n = len(board)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    dp[0][0] = 1\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 0:\n                continue\n            if i + board[i][j] < n:\n                dp[i + board[i][j]][j] += dp[i][j]\n            if j + board[i][j] < n:\n                dp[i][j + board[i][j]] += dp[i][j]\n    return dp[n - 1][n - 1]",
        "difficulty": "interview"
    },
    {
        "task_id": 1057,
        "prompt": "Complete the Python function given the prompt below:You are given a string $s$ of length $n$ consisting only of lowercase Latin letters.\nA substring of a string is a contiguous subsequence of that string. So, string \"forces\" is substring of string \"codeforces\", but string \"coder\" is not.\nYour task is to calculate the number of ways to remove exactly one substring from this string in such a way that all remaining characters are equal (the number of distinct characters either zero or one).\nIt is guaranteed that there is at least two different characters in $s$.\nNote that you can remove the whole string and it is correct. Also note that you should remove at least one character.\nSince the answer can be rather large (not very large though) print it modulo $998244353$.\nIf you are Python programmer, consider using PyPy instead of Python when you submit your code.\n-----Input-----\nThe first line of the input contains one integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$) \u2014 the length of the string $s$.\nThe second line of the input contains the string $s$ of length $n$ consisting only of lowercase Latin letters.\nIt is guaranteed that there is at least two different characters in $s$.\n-----Output-----\nPrint one integer \u2014 the number of ways modulo $998244353$ to remove exactly one substring from $s$ in such way that all remaining characters are equal.\n-----Examples-----\nInput\n4\nabaa\nOutput\n6\nInput\n7\naacdeee\nOutput\n6\nInput\n2\naz\nOutput\n3\n-----Note-----\nLet $s[l; r]$ be the substring of $s$ from the position $l$ to the position $r$ inclusive.\nThen in the first example you can remove the following substrings:   $s[1; 2]$;  $s[1; 3]$;  $s[1; 4]$;  $s[2; 2]$;  $s[2; 3]$;  $s[2; 4]$. \nIn the second example you can remove the following substrings:   $s[1; 4]$;  $s[1; 5]$;  $s[1; 6]$;  $s[1; 7]$;  $s[2; 7]$;  $s[3; 7]$. \nIn the third example you can remove the following substrings:   $s[1; 1]$;  $s[1; 2]$;  $s[2; 2]$.\n\ndef",
        "answer": "def count_substrings(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n - 1):\n        if s[i] == s[i + 1]:\n            dp[i][i + 1] = 1\n    for l in range(2, n):\n        for i in range(n - l):\n            j = i + l\n            if s[i] == s[j] and dp[i + 1][j - 1] == 1:\n                dp[i][j] = 1\n    return sum(dp[0])",
        "difficulty": "interview"
    },
    {
        "task_id": 1058,
        "prompt": "Complete the Python function given the prompt below:You are given $n$ blocks, each of them is of the form [color$_1$|value|color$_2$], where the block can also be flipped to get [color$_2$|value|color$_1$]. \nA sequence of blocks is called valid if the touching endpoints of neighboring blocks have the same color. For example, the sequence of three blocks A, B and C is valid if the left color of the B is the same as the right color of the A and the right color of the B is the same as the left color of C.\nThe value of the sequence is defined as the sum of the values of the blocks in this sequence.\nFind the maximum possible value of the valid sequence that can be constructed from the subset of the given blocks. The blocks from the subset can be reordered and flipped if necessary. Each block can be used at most once in the sequence.\n-----Input-----\nThe first line of input contains a single integer $n$ ($1 \\le n \\le 100$)\u00a0\u2014 the number of given blocks.\nEach of the following $n$ lines describes corresponding block and consists of $\\mathrm{color}_{1,i}$, $\\mathrm{value}_i$ and $\\mathrm{color}_{2,i}$ ($1 \\le \\mathrm{color}_{1,i}, \\mathrm{color}_{2,i} \\le 4$, $1 \\le \\mathrm{value}_i \\le 100\\,000$).\n-----Output-----\nPrint exactly one integer\u00a0\u2014 the maximum total value of the subset of blocks, which makes a valid sequence.\n-----Examples-----\nInput\n6\n2 1 4\n1 2 4\n3 4 4\n2 8 3\n3 16 3\n1 32 2\nOutput\n63\nInput\n7\n1 100000 1\n1 100000 2\n1 100000 2\n4 50000 3\n3 50000 4\n4 50000 4\n3 50000 3\nOutput\n300000\nInput\n4\n1 1000 1\n2 500 2\n3 250 3\n4 125 4\nOutput\n1000\n-----Note-----\nIn the first example, it is possible to form a valid sequence from all blocks.\nOne of the valid sequences is the following:\n[4|2|1] [1|32|2] [2|8|3] [3|16|3] [3|4|4] [4|1|2]\nThe first block from the input ([2|1|4] $\\to$ [4|1|2]) and second ([1|2|4] $\\to$ [4|2|1]) are flipped.\nIn the second example, the optimal answers can be formed from the first three blocks as in the following (the second or the third block from the input is flipped):\n[2|100000|1] [1|100000|1] [1|100000|2]\nIn the third example, it is not possible to form a valid sequence of two or more blocks, so the answer is a sequence consisting only of the first block since it is the block with the largest value.\n\ndef",
        "answer": "def max_sequence(blocks):\n    blocks.sort(key=lambda x: x[1], reverse=True)\n    blocks.sort(key=lambda x: x[0])\n    blocks.sort(key=lambda x: x[2])\n    blocks.sort(key=lambda x: x[1], reverse=True)\n    blocks.sort(key=lambda x: x[0])\n    blocks.sort(key=lambda x: x[2])\n    blocks.sort(key=lambda x: x[1], reverse=True)\n    blocks.sort(key=lambda x: x[0])\n    blocks.sort(key=lambda x: x[2])\n    blocks.sort(key=lambda x: x[1], reverse=True)\n    blocks.sort(key=lambda x: x[0])\n    blocks.sort(key=lambda x: x[2])\n    blocks.sort(key=lambda x: x[1], reverse=True)\n    blocks.sort(key=lambda x: x[0])\n    blocks.sort(key=lambda x: x[2])\n    blocks.sort(key=lambda x: x[1], reverse=True)\n    blocks.sort(key=lambda x: x[0])\n    blocks.sort(key=lambda x: x[2])\n    blocks.sort(key=lambda x: x[1], reverse=True)\n    blocks.sort(key=lambda x: x[0])\n    blocks.sort(key=lambda x: x[2])\n    blocks.sort(key=lambda x: x[1], reverse=True)\n    blocks.sort(key=lambda x: x[0])\n    blocks.sort(key=lambda x: x[2])\n    ",
        "difficulty": "interview"
    },
    {
        "task_id": 1059,
        "prompt": "Complete the Python function given the prompt below:Tom loves vowels, and he likes long words with many vowels. His favorite words are vowelly words. We say a word of length $k$ is vowelly if there are positive integers $n$ and $m$ such that $n\\cdot m = k$ and when the word is written by using $n$ rows and $m$ columns (the first row is filled first, then the second and so on, with each row filled from left to right), every vowel of the English alphabet appears at least once in every row and every column.\nYou are given an integer $k$ and you must either print a vowelly word of length $k$ or print $-1$ if no such word exists.\nIn this problem the vowels of the English alphabet are 'a', 'e', 'i', 'o','u'.\n-----Input-----\nInput consists of a single line containing the integer $k$ ($1\\leq k \\leq 10^4$)\u00a0\u2014 the required length.\n-----Output-----\nThe output must consist of a single line, consisting of a vowelly word of length $k$ consisting of lowercase English letters if it exists or $-1$ if it does not.\nIf there are multiple possible words, you may output any of them.\n-----Examples-----\nInput\n7\nOutput\n-1\nInput\n36\nOutput\nagoeuioaeiruuimaeoieauoweouoiaouimae\n-----Note-----\nIn the second example, the word \"agoeuioaeiruuimaeoieauoweouoiaouimae\" can be arranged into the following $6 \\times 6$ grid: $\\left. \\begin{array}{|c|c|c|c|c|c|} \\hline a & {g} & {o} & {e} & {u} & {i} \\\\ \\hline o & {a} & {e} & {i} & {r} & {u} \\\\ \\hline u & {i} & {m} & {a} & {e} & {o} \\\\ \\hline i & {e} & {a} & {u} & {o} & {w} \\\\ \\hline e & {o} & {u} & {o} & {i} & {a} \\\\ \\hline o & {u} & {i} & {m} & {a} & {e} \\\\ \\hline \\end{array} \\right.$ \nIt is easy to verify that every row and every column contain all the vowels.\n\ndef",
        "answer": "def vowelly(k):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(k):\n        for j in range(k):\n            if i*j == k:\n                for vowel in vowels:\n                    if vowel not in str(i) + str(j):\n                        break\n                else:\n                    return str(i) + str(j)\n    return -1",
        "difficulty": "interview"
    },
    {
        "task_id": 1060,
        "prompt": "Complete the Python function given the prompt below:As you must know, the maximum clique problem in an arbitrary graph is NP-hard. Nevertheless, for some graphs of specific kinds it can be solved effectively.\nJust in case, let us remind you that a clique in a non-directed graph is a subset of the vertices of a graph, such that any two vertices of this subset are connected by an edge. In particular, an empty set of vertexes and a set consisting of a single vertex, are cliques.\nLet's define a divisibility graph for a set of positive integers A = {a_1, a_2,..., a_{n}} as follows. The vertices of the given graph are numbers from set A, and two numbers a_{i} and a_{j} (i \u2260 j) are connected by an edge if and only if either a_{i} is divisible by a_{j}, or a_{j} is divisible by a_{i}.\nYou are given a set of non-negative integers A. Determine the size of a maximum clique in a divisibility graph for set A.\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 10^6), that sets the size of set A.\nThe second line contains n distinct positive integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^6) \u2014 elements of subset A. The numbers in the line follow in the ascending order.\n-----Output-----\nPrint a single number \u2014 the maximum size of a clique in a divisibility graph for set A.\n-----Examples-----\nInput\n8\n3 4 6 8 10 18 21 24\nOutput\n3\n-----Note-----\nIn the first sample test a clique of size 3 is, for example, a subset of vertexes {3, 6, 18}. A clique of a larger size doesn't exist in this graph.\n\ndef",
        "answer": "def max_clique(n, A):\n    A.sort()\n    max_clique = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if A[j] % A[i] == 0 or A[i] % A[j] == 0:\n                max_clique = max(max_clique, A[j]//A[i])\n    return max_clique",
        "difficulty": "interview"
    },
    {
        "task_id": 1061,
        "prompt": "Complete the Python function given the prompt below:You've got a 5 \u00d7 5 matrix, consisting of 24 zeroes and a single number one. Let's index the matrix rows by numbers from 1 to 5 from top to bottom, let's index the matrix columns by numbers from 1 to 5 from left to right. In one move, you are allowed to apply one of the two following transformations to the matrix:  Swap two neighboring matrix rows, that is, rows with indexes i and i + 1 for some integer i (1 \u2264 i < 5).  Swap two neighboring matrix columns, that is, columns with indexes j and j + 1 for some integer j (1 \u2264 j < 5). \nYou think that a matrix looks beautiful, if the single number one of the matrix is located in its middle (in the cell that is on the intersection of the third row and the third column). Count the minimum number of moves needed to make the matrix beautiful.\n-----Input-----\nThe input consists of five lines, each line contains five integers: the j-th integer in the i-th line of the input represents the element of the matrix that is located on the intersection of the i-th row and the j-th column. It is guaranteed that the matrix consists of 24 zeroes and a single number one.\n-----Output-----\nPrint a single integer \u2014 the minimum number of moves needed to make the matrix beautiful.\n-----Examples-----\nInput\n0 0 0 0 0\n0 0 0 0 1\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\nOutput\n3\nInput\n0 0 0 0 0\n0 0 0 0 0\n0 1 0 0 0\n0 0 0 0 0\n0 0 0 0 0\nOutput\n1\n\ndef",
        "answer": "def matrix_beauty(matrix):\n    moves = 0\n    for i in range(5):\n        if matrix[i][2] == 1:\n            moves += abs(i - 2)\n            break\n    for i in range(5):\n        if matrix[i][4] == 1:\n            moves += abs(i - 2)\n            break\n    for i in range(5):\n        if matrix[2][i] == 1:\n            moves += abs(i - 4)\n            break\n    for i in range(5):\n        if matrix[4][i] == 1:\n            moves += abs(i - 4)\n            break\n    return moves",
        "difficulty": "interview"
    },
    {
        "task_id": 1062,
        "prompt": "Complete the Python function given the prompt below:Ford Prefect got a job as a web developer for a small company that makes towels. His current work task is to create a search engine for the website of the company. During the development process, he needs to write a subroutine for comparing strings S and T of equal length to be \"similar\". After a brief search on the Internet, he learned about the Hamming distance between two strings S and T of the same length, which is defined as the number of positions in which S and T have different characters. For example, the Hamming distance between words \"permanent\" and \"pergament\" is two, as these words differ in the fourth and sixth letters.\nMoreover, as he was searching for information, he also noticed that modern search engines have powerful mechanisms to correct errors in the request to improve the quality of search. Ford doesn't know much about human beings, so he assumed that the most common mistake in a request is swapping two arbitrary letters of the string (not necessarily adjacent). Now he wants to write a function that determines which two letters should be swapped in string S, so that the Hamming distance between a new string S and string T would be as small as possible, or otherwise, determine that such a replacement cannot reduce the distance between the strings.\nHelp him do this!\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 200 000) \u2014 the length of strings S and T.\nThe second line contains string S.\nThe third line contains string T.\nEach of the lines only contains lowercase Latin letters.\n-----Output-----\nIn the first line, print number x \u2014 the minimum possible Hamming distance between strings S and T if you swap at most one pair of letters in S.\nIn the second line, either print the indexes i and j (1 \u2264 i, j \u2264 n, i \u2260 j), if reaching the minimum possible distance is possible by swapping letters on positions i and j, or print \"-1 -1\", if it is not necessary to swap characters.\nIf there are multiple possible answers, print any of them.\n-----Examples-----\nInput\n9\npergament\npermanent\nOutput\n1\n4 6\nInput\n6\nwookie\ncookie\nOutput\n1\n-1 -1\nInput\n4\npetr\negor\nOutput\n2\n1 2\nInput\n6\ndouble\nbundle\nOutput\n2\n4 1\n-----Note-----\nIn the second test it is acceptable to print i = 2, j = 3.\n\ndef",
        "answer": "def Hamming(S, T):\n    n = len(S)\n    m = len(T)\n    if n!= m:\n        return -1\n    else:\n        count = 0\n        for i in range(n):\n            if S[i]!= T[i]:\n                count += 1\n        return count",
        "difficulty": "interview"
    },
    {
        "task_id": 1063,
        "prompt": "Complete the Python function given the prompt below:Peter wrote on the board a strictly increasing sequence of positive integers a_1, a_2,..., a_{n}. Then Vasil replaced some digits in the numbers of this sequence by question marks. Thus, each question mark corresponds to exactly one lost digit.\nRestore the the original sequence knowing digits remaining on the board.\n-----Input-----\nThe first line of the input contains integer n (1 \u2264 n \u2264 10^5) \u2014 the length of the sequence. Next n lines contain one element of the sequence each. Each element consists only of digits and question marks. No element starts from digit 0. Each element has length from 1 to 8 characters, inclusive.\n-----Output-----\nIf the answer exists, print in the first line \"YES\" (without the quotes). Next n lines must contain the sequence of positive integers \u2014 a possible variant of Peter's sequence. The found sequence must be strictly increasing, it must be transformed from the given one by replacing each question mark by a single digit. All numbers on the resulting sequence must be written without leading zeroes. If there are multiple solutions, print any of them.\nIf there is no answer, print a single line \"NO\" (without the quotes).\n-----Examples-----\nInput\n3\n?\n18\n1?\nOutput\nYES\n1\n18\n19\nInput\n2\n??\n?\nOutput\nNO\nInput\n5\n12224\n12??5\n12226\n?0000\n?00000\nOutput\nYES\n12224\n12225\n12226\n20000\n100000\n\ndef",
        "answer": "def restore_sequence(seq):\n    seq = list(seq)\n    seq.sort()\n    for i in range(len(seq)):\n        if seq[i] == '?':\n            seq[i] = str(i)\n    return ''.join(seq)",
        "difficulty": "interview"
    },
    {
        "task_id": 1064,
        "prompt": "Complete the Python function given the prompt below:Adilbek's house is located on a street which can be represented as the OX axis. This street is really dark, so Adilbek wants to install some post lamps to illuminate it. Street has $n$ positions to install lamps, they correspond to the integer numbers from $0$ to $n - 1$ on the OX axis. However, some positions are blocked and no post lamp can be placed there.\nThere are post lamps of different types which differ only by their power. When placed in position $x$, post lamp of power $l$ illuminates the segment $[x; x + l]$. The power of each post lamp is always a positive integer number.\nThe post lamp shop provides an infinite amount of lamps of each type from power $1$ to power $k$. Though each customer is only allowed to order post lamps of exactly one type. Post lamps of power $l$ cost $a_l$ each.\nWhat is the minimal total cost of the post lamps of exactly one type Adilbek can buy to illuminate the entire segment $[0; n]$ of the street? If some lamps illuminate any other segment of the street, Adilbek does not care, so, for example, he may place a lamp of power $3$ in position $n - 1$ (even though its illumination zone doesn't completely belong to segment $[0; n]$).\n-----Input-----\nThe first line contains three integer numbers $n$, $m$ and $k$ ($1 \\le k \\le n \\le 10^6$, $0 \\le m \\le n$) \u2014 the length of the segment of the street Adilbek wants to illuminate, the number of the blocked positions and the maximum power of the post lamp available.\nThe second line contains $m$ integer numbers $s_1, s_2, \\dots, s_m$ ($0 \\le s_1 < s_2 < \\dots s_m < n$) \u2014 the blocked positions.\nThe third line contains $k$ integer numbers $a_1, a_2, \\dots, a_k$ ($1 \\le a_i \\le 10^6$) \u2014 the costs of the post lamps.\n-----Output-----\nPrint the minimal total cost of the post lamps of exactly one type Adilbek can buy to illuminate the entire segment $[0; n]$ of the street.\nIf illumintaing the entire segment $[0; n]$ is impossible, print -1.\n-----Examples-----\nInput\n6 2 3\n1 3\n1 2 3\nOutput\n6\nInput\n4 3 4\n1 2 3\n1 10 100 1000\nOutput\n1000\nInput\n5 1 5\n0\n3 3 3 3 3\nOutput\n-1\nInput\n7 4 3\n2 4 5 6\n3 14 15\nOutput\n-1\n\ndef",
        "answer": "def min_cost(n, m, k, s, a):\n    s.sort()\n    a.sort()\n    cost = 0\n    for i in range(m):\n        if s[i] > n:\n            return -1\n        if s[i] + k < n:\n            cost += a[k - 1]\n        else:\n            cost += a[k - 1] * (n - s[i])\n    return cost",
        "difficulty": "interview"
    },
    {
        "task_id": 1065,
        "prompt": "Complete the Python function given the prompt below:$k$ people want to split $n$ candies between them. Each candy should be given to exactly one of them or be thrown away.\nThe people are numbered from $1$ to $k$, and Arkady is the first of them. To split the candies, Arkady will choose an integer $x$ and then give the first $x$ candies to himself, the next $x$ candies to the second person, the next $x$ candies to the third person and so on in a cycle. The leftover (the remainder that is not divisible by $x$) will be thrown away.\nArkady can't choose $x$ greater than $M$ as it is considered greedy. Also, he can't choose such a small $x$ that some person will receive candies more than $D$ times, as it is considered a slow splitting.\nPlease find what is the maximum number of candies Arkady can receive by choosing some valid $x$.\n-----Input-----\nThe only line contains four integers $n$, $k$, $M$ and $D$ ($2 \\le n \\le 10^{18}$, $2 \\le k \\le n$, $1 \\le M \\le n$, $1 \\le D \\le \\min{(n, 1000)}$, $M \\cdot D \\cdot k \\ge n$)\u00a0\u2014 the number of candies, the number of people, the maximum number of candies given to a person at once, the maximum number of times a person can receive candies.\n-----Output-----\nPrint a single integer\u00a0\u2014 the maximum possible number of candies Arkady can give to himself.\nNote that it is always possible to choose some valid $x$.\n-----Examples-----\nInput\n20 4 5 2\nOutput\n8\nInput\n30 9 4 1\nOutput\n4\n-----Note-----\nIn the first example Arkady should choose $x = 4$. He will give $4$ candies to himself, $4$ candies to the second person, $4$ candies to the third person, then $4$ candies to the fourth person and then again $4$ candies to himself. No person is given candies more than $2$ times, and Arkady receives $8$ candies in total.\nNote that if Arkady chooses $x = 5$, he will receive only $5$ candies, and if he chooses $x = 3$, he will receive only $3 + 3 = 6$ candies as well as the second person, the third and the fourth persons will receive $3$ candies, and $2$ candies will be thrown away. He can't choose $x = 1$ nor $x = 2$ because in these cases he will receive candies more than $2$ times.\nIn the second example Arkady has to choose $x = 4$, because any smaller value leads to him receiving candies more than $1$ time.\n\ndef",
        "answer": "def candies(n, k, m, d):\n    return n // d * m * k + (n % d) * (k - 1)",
        "difficulty": "interview"
    },
    {
        "task_id": 1066,
        "prompt": "Complete the Python function given the prompt below:Being a nonconformist, Volodya is displeased with the current state of things, particularly with the order of natural numbers (natural number is positive integer number). He is determined to rearrange them. But there are too many natural numbers, so Volodya decided to start with the first n. He writes down the following sequence of numbers: firstly all odd integers from 1 to n (in ascending order), then all even integers from 1 to n (also in ascending order). Help our hero to find out which number will stand at the position number k.\n-----Input-----\nThe only line of input contains integers n and k (1 \u2264 k \u2264 n \u2264 10^12).\nPlease, do not use the %lld specifier to read or write 64-bit integers in C++. It is preferred to use the cin, cout streams or the %I64d specifier.\n-----Output-----\nPrint the number that will stand at the position number k after Volodya's manipulations.\n-----Examples-----\nInput\n10 3\nOutput\n5\nInput\n7 7\nOutput\n6\n-----Note-----\nIn the first sample Volodya's sequence will look like this: {1, 3, 5, 7, 9, 2, 4, 6, 8, 10}. The third place in the sequence is therefore occupied by the number 5.\n\ndef",
        "answer": "def main():\n    n, k = map(int, input().split())\n    print(n - k + 1)",
        "difficulty": "interview"
    },
    {
        "task_id": 1067,
        "prompt": "Complete the Python function given the prompt below:You are given $n$ numbers $a_1, a_2, \\dots, a_n$. With a cost of one coin you can perform the following operation:\nChoose one of these numbers and add or subtract $1$ from it.\nIn particular, we can apply this operation to the same number several times.\nWe want to make the product of all these numbers equal to $1$, in other words, we want $a_1 \\cdot a_2$ $\\dots$ $\\cdot a_n = 1$. \nFor example, for $n = 3$ and numbers $[1, -3, 0]$ we can make product equal to $1$ in $3$ coins: add $1$ to second element, add $1$ to second element again, subtract $1$ from third element, so that array becomes $[1, -1, -1]$. And $1\\cdot (-1) \\cdot (-1) = 1$.\nWhat is the minimum cost we will have to pay to do that?\n-----Input-----\nThe first line contains a single integer $n$ ($1 \\le n \\le 10^5$)\u00a0\u2014 the number of numbers.\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($-10^9 \\le a_i \\le 10^9$)\u00a0\u2014 the numbers.\n-----Output-----\nOutput a single number\u00a0\u2014 the minimal number of coins you need to pay to make the product equal to $1$.\n-----Examples-----\nInput\n2\n-1 1\nOutput\n2\nInput\n4\n0 0 0 0\nOutput\n4\nInput\n5\n-5 -3 5 3 0\nOutput\n13\n-----Note-----\nIn the first example, you can change $1$ to $-1$ or $-1$ to $1$ in $2$ coins.\nIn the second example, you have to apply at least $4$ operations for the product not to be $0$.\nIn the third example, you can change $-5$ to $-1$ in $4$ coins, $-3$ to $-1$ in $2$ coins, $5$ to $1$ in $4$ coins, $3$ to $1$ in $2$ coins, $0$ to $1$ in $1$ coin.\n\ndef",
        "answer": "def min_coins(n, arr):\n    arr.sort()\n    arr.reverse()\n    count = 0\n    for i in range(n):\n        if arr[i] == 1:\n            count += 1\n        else:\n            break\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 1068,
        "prompt": "Complete the Python function given the prompt below:A correct expression of the form a+b=c was written; a, b and c are non-negative integers without leading zeros. In this expression, the plus and equally signs were lost. The task is to restore the expression. In other words, one character '+' and one character '=' should be inserted into given sequence of digits so that:   character'+' is placed on the left of character '=',  characters '+' and '=' split the sequence into three non-empty subsequences consisting of digits (let's call the left part a, the middle part\u00a0\u2014 b and the right part\u00a0\u2014 c),  all the three parts a, b and c do not contain leading zeros,  it is true that a+b=c. \nIt is guaranteed that in given tests answer always exists.\n-----Input-----\nThe first line contains a non-empty string consisting of digits. The length of the string does not exceed 10^6.\n-----Output-----\nOutput the restored expression. If there are several solutions, you can print any of them.\nNote that the answer at first should contain two terms (divided with symbol '+'), and then the result of their addition, before which symbol'=' should be. \nDo not separate numbers and operation signs with spaces. Strictly follow the output format given in the examples.\nIf you remove symbol '+' and symbol '=' from answer string you should get a string, same as string from the input data.\n-----Examples-----\nInput\n12345168\nOutput\n123+45=168\nInput\n099\nOutput\n0+9=9\nInput\n199100\nOutput\n1+99=100\nInput\n123123123456456456579579579\nOutput\n123123123+456456456=579579579\n\ndef",
        "answer": "def restore_expression(s):\n    s = list(s)\n    i = 0\n    while i < len(s) - 1:\n        if s[i] == '+' and s[i + 1] == '=':\n            s.insert(i, '+')\n            s.insert(i + 2, '=')\n            i += 2\n        i += 1\n    return ''.join(s)",
        "difficulty": "interview"
    },
    {
        "task_id": 1069,
        "prompt": "Complete the Python function given the prompt below:Fedya studies in a gymnasium. Fedya's maths hometask is to calculate the following expression:(1^{n} + 2^{n} + 3^{n} + 4^{n})\u00a0mod\u00a05\nfor given value of n. Fedya managed to complete the task. Can you? Note that given number n can be extremely large (e.g. it can exceed any integer type of your programming language).\n-----Input-----\nThe single line contains a single integer n (0 \u2264 n \u2264 10^10^5). The number doesn't contain any leading zeroes.\n-----Output-----\nPrint the value of the expression without leading zeros.\n-----Examples-----\nInput\n4\nOutput\n4\nInput\n124356983594583453458888889\nOutput\n0\n-----Note-----\nOperation x\u00a0mod\u00a0y means taking remainder after division x by y.\nNote to the first sample:\n[Image]\n\ndef",
        "answer": "def f(n):\n    return (1**n + 2**n + 3**n + 4**n) % 5",
        "difficulty": "interview"
    },
    {
        "task_id": 1070,
        "prompt": "Complete the Python function given the prompt below:There are $n$ houses along the road where Anya lives, each one is painted in one of $k$ possible colors.\nAnya likes walking along this road, but she doesn't like when two adjacent houses at the road have the same color. She wants to select a long segment of the road such that no two adjacent houses have the same color.\nHelp Anya find the longest segment with this property.\n-----Input-----\nThe first line contains two integers $n$ and $k$\u00a0\u2014 the number of houses and the number of colors ($1 \\le n \\le 100\\,000$, $1 \\le k \\le 100\\,000$).\nThe next line contains $n$ integers $a_1, a_2, \\ldots, a_n$\u00a0\u2014 the colors of the houses along the road ($1 \\le a_i \\le k$).\n-----Output-----\nOutput a single integer\u00a0\u2014 the maximum number of houses on the road segment having no two adjacent houses of the same color.\n-----Example-----\nInput\n8 3\n1 2 3 3 2 1 2 2\nOutput\n4\n-----Note-----\nIn the example, the longest segment without neighboring houses of the same color is from the house 4 to the house 7. The colors of the houses are $[3, 2, 1, 2]$ and its length is 4 houses.\n\ndef",
        "answer": "def house_coloring(n, k):\n    houses = [0] * k\n    for i in range(n):\n        houses[a[i]] += 1\n    houses[0] = 0\n    for i in range(1, k):\n        houses[i] += houses[i - 1]\n    max_houses = 0\n    for i in range(k):\n        if houses[i] > max_houses:\n            max_houses = houses[i]\n    return max_houses",
        "difficulty": "interview"
    },
    {
        "task_id": 1071,
        "prompt": "Complete the Python function given the prompt below:Bizon the Champion is called the Champion for a reason. \nBizon the Champion has recently got a present \u2014 a new glass cupboard with n shelves and he decided to put all his presents there. All the presents can be divided into two types: medals and cups. Bizon the Champion has a_1 first prize cups, a_2 second prize cups and a_3 third prize cups. Besides, he has b_1 first prize medals, b_2 second prize medals and b_3 third prize medals. \nNaturally, the rewards in the cupboard must look good, that's why Bizon the Champion decided to follow the rules:  any shelf cannot contain both cups and medals at the same time;  no shelf can contain more than five cups;  no shelf can have more than ten medals. \nHelp Bizon the Champion find out if we can put all the rewards so that all the conditions are fulfilled.\n-----Input-----\nThe first line contains integers a_1, a_2 and a_3 (0 \u2264 a_1, a_2, a_3 \u2264 100). The second line contains integers b_1, b_2 and b_3 (0 \u2264 b_1, b_2, b_3 \u2264 100). The third line contains integer n (1 \u2264 n \u2264 100).\nThe numbers in the lines are separated by single spaces.\n-----Output-----\nPrint \"YES\" (without the quotes) if all the rewards can be put on the shelves in the described manner. Otherwise, print \"NO\" (without the quotes).\n-----Examples-----\nInput\n1 1 1\n1 1 1\n4\nOutput\nYES\nInput\n1 1 3\n2 3 4\n2\nOutput\nYES\nInput\n1 0 0\n1 0 0\n1\nOutput\nNO\n\ndef",
        "answer": "def can_put(a, b, n):\n    if n == 0:\n        return True\n    if a == 0 and b == 0:\n        return False\n    if a == 0:\n        return True\n    if b == 0:\n        return False\n    if a > n or b > n:\n        return False\n    return can_put(a, b, n - a) or can_put(a, b, n - b)",
        "difficulty": "interview"
    },
    {
        "task_id": 1072,
        "prompt": "Complete the Python function given the prompt below:You are given an n \u00d7 m rectangular table consisting of lower case English letters. In one operation you can completely remove one column from the table. The remaining parts are combined forming a new table. For example, after removing the second column from the table\nabcd\nedfg\nhijk\n\u00a0\nwe obtain the table:\nacd\nefg\nhjk\n\u00a0\nA table is called good if its rows are ordered from top to bottom lexicographically, i.e. each row is lexicographically no larger than the following one. Determine the minimum number of operations of removing a column needed to make a given table good.\n-----Input-----\nThe first line contains two integers \u00a0\u2014 n and m (1 \u2264 n, m \u2264 100).\nNext n lines contain m small English letters each\u00a0\u2014 the characters of the table.\n-----Output-----\nPrint a single number\u00a0\u2014 the minimum number of columns that you need to remove in order to make the table good.\n-----Examples-----\nInput\n1 10\ncodeforces\nOutput\n0\nInput\n4 4\ncase\ncare\ntest\ncode\nOutput\n2\nInput\n5 4\ncode\nforc\nesco\ndefo\nrces\nOutput\n4\n-----Note-----\nIn the first sample the table is already good.\nIn the second sample you may remove the first and third column.\nIn the third sample you have to remove all the columns (note that the table where all rows are empty is considered good by definition).\nLet strings s and t have equal length. Then, s is lexicographically larger than t if they are not equal and the character following the largest common prefix of s and t (the prefix may be empty) in s is alphabetically larger than the corresponding character of t.\n\ndef",
        "answer": "def min_columns_to_make_good(n, m, table):\n    # Write your code here\n    good_table = []\n    for i in range(n):\n        good_table.append(sorted(table[i]))\n    good_table = sorted(good_table)\n    count = 0\n    for i in range(n):\n        if good_table[i]!= good_table[i+1]:\n            count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 1073,
        "prompt": "Complete the Python function given the prompt below:Calvin the robot lies in an infinite rectangular grid. Calvin's source code contains a list of n commands, each either 'U', 'R', 'D', or 'L'\u00a0\u2014 instructions to move a single square up, right, down, or left, respectively. How many ways can Calvin execute a non-empty contiguous substrings of commands and return to the same square he starts in? Two substrings are considered different if they have different starting or ending indices.\n-----Input-----\nThe first line of the input contains a single positive integer, n (1 \u2264 n \u2264 200)\u00a0\u2014 the number of commands.\nThe next line contains n characters, each either 'U', 'R', 'D', or 'L'\u00a0\u2014 Calvin's source code.\n-----Output-----\nPrint a single integer\u00a0\u2014 the number of contiguous substrings that Calvin can execute and return to his starting square.\n-----Examples-----\nInput\n6\nURLLDR\nOutput\n2\nInput\n4\nDLUU\nOutput\n0\nInput\n7\nRLRLRLR\nOutput\n12\n-----Note-----\nIn the first case, the entire source code works, as well as the \"RL\" substring in the second and third characters.\nNote that, in the third case, the substring \"LR\" appears three times, and is therefore counted three times to the total result.\n\ndef",
        "answer": "def calc(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    return calc(n-1) + calc(n-2) + calc(n-3)",
        "difficulty": "interview"
    },
    {
        "task_id": 1074,
        "prompt": "Complete the Python function given the prompt below:++++++++[>+>++>+++>++++>+++++>++++++>+++++++>++++++++>+++++++++>++++++++++>+\n++++++++++>++++++++++++>+++++++++++++>++++++++++++++>+++++++++++++++>+++++++\n+++++++++<<<<<<<<<<<<<<<<-]>>>>>>>>>>.<<<<<<<<<<>>>>>>>>>>>>>>++.--<<<<<<<<<\n<<<<<>>>>>>>>>>>>>+.-<<<<<<<<<<<<<>>>>>>>>>>>>>>--.++<<<<<<<<<<<<<<>>>>>>>>>\n>>>>>>----.++++<<<<<<<<<<<<<<<>>>>.<<<<>>>>>>>>>>>>>>--.++<<<<<<<<<<<<<<>>>>\n>>>>>>>>>>>---.+++<<<<<<<<<<<<<<<>>>>>>>>>>>>>>---.+++<<<<<<<<<<<<<<>>>>>>>>\n>>>>++.--<<<<<<<<<<<<>>>>>>>>>>>>>---.+++<<<<<<<<<<<<<>>>>>>>>>>>>>>++.--<<<\n<<<<<<<<<<<.\nDCBA:^!~}|{zyxwvutsrqponmlkjihgfedcba`_^]\\[ZYXWVUTSRQPONMLKJIHdcbD`Y^]\\UZYRv\n9876543210/.-,+*)('&%$#\"!~}|{zyxwvutsrqponm+*)('&%$#cya`=^]\\[ZYXWVUTSRQPONML\nKJfe^cba`_X]VzTYRv98TSRQ3ONMLEi,+*)('&%$#\"!~}|{zyxwvutsrqponmlkjihgfedcba`_^\n]\\[ZYXWVUTSonPlkjchg`ed]#DCBA@?>=<;:9876543OHGLKDIHGFE>b%$#\"!~}|{zyxwvutsrqp\nonmlkjihgfedcba`_^]\\[ZYXWVUTSRQPONMibafedcba`_X|?>Z<XWVUTSRKo\\\n\n [Image]\nv34*8+6+,78+9*3+,93+9*5+,28+9*1+,55+9*4+,23*6*2*,91,@,+7*9*25,*48,+3*9+38,+<\n>62*9*2+,34*9*3+,66+9*8+,52*9*7+,75+9*8+,92+9*6+,48+9*3+,43*9*2+,84*,26*9*3^\n\n-----Input-----\nThe input contains a single integer a (0 \u2264 a \u2264 1 000 000).\n-----Output-----\nOutput a single integer.\n-----Example-----\nInput\n129\nOutput\n1\n\ndef",
        "answer": "def f(a):\n    return 1 if a % 2 == 0 else 0",
        "difficulty": "interview"
    },
    {
        "task_id": 1075,
        "prompt": "Complete the Python function given the prompt below:Piegirl found the red button. You have one last chance to change the inevitable end.\nThe circuit under the button consists of n nodes, numbered from 0 to n - 1. In order to deactivate the button, the n nodes must be disarmed in a particular order. Node 0 must be disarmed first. After disarming node i, the next node to be disarmed must be either node (2\u00b7i) modulo n or node (2\u00b7i) + 1 modulo n. The last node to be disarmed must be node 0. Node 0 must be disarmed twice, but all other nodes must be disarmed exactly once. \nYour task is to find any such order and print it. If there is no such order, print -1.\n-----Input-----\nInput consists of a single integer n (2 \u2264 n \u2264 10^5).\n-----Output-----\nPrint an order in which you can to disarm all nodes. If it is impossible, print -1 instead. If there are multiple orders, print any one of them.\n-----Examples-----\nInput\n2\nOutput\n0 1 0\nInput\n3\nOutput\n-1\nInput\n4\nOutput\n0 1 3 2 0\nInput\n16\nOutput\n0 1 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0\n\ndef",
        "answer": "def button(n):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 10\n    if n == 12:\n        return 11\n    if n == 13:\n        return 12\n    if n == 14:\n        return 13\n    if n == 15:\n        return 14\n    if n == 16:\n        return 15\n    if n == 17:\n        return 16\n    if n == 18:\n        return 17\n    if n == 19:\n        return 18\n    if n == 20:\n        return 19\n    if n == 21:\n        return 20\n    if n == 22:\n        return 21\n    if n == 23:\n        return 22\n    if n == 24:\n        return 23\n    if n == 25:\n        return 24\n    if n == 26:\n        return 25\n    if n == 27:\n        return 26\n    if n == 28:\n        return 27\n    if n == 29:\n        return 28\n    if n == 30:\n        return 29\n    if n == 31:\n        return 30\n    if n == 32:\n        return 31\n    if n == 33:\n        return 32\n    if n == 34:\n        return 33\n    if n == 35:\n        return 34\n    if n == 36:\n        return 35",
        "difficulty": "interview"
    },
    {
        "task_id": 1076,
        "prompt": "Complete the Python function given the prompt below:zscoder has a deck of $n+m$ custom-made cards, which consists of $n$ cards labelled from $1$ to $n$ and $m$ jokers. Since zscoder is lonely, he wants to play a game with himself using those cards. \nInitially, the deck is shuffled uniformly randomly and placed on the table. zscoder has a set $S$ which is initially empty. \nEvery second, zscoder draws the top card from the deck.   If the card has a number $x$ written on it, zscoder removes the card and adds $x$ to the set $S$.  If the card drawn is a joker, zscoder places all the cards back into the deck and reshuffles (uniformly randomly) the $n+m$ cards to form a new deck (hence the new deck now contains all cards from $1$ to $n$ and the $m$ jokers). Then, if $S$ currently contains all the elements from $1$ to $n$, the game ends. Shuffling the deck doesn't take time at all. \nWhat is the expected number of seconds before the game ends? We can show that the answer can be written in the form $\\frac{P}{Q}$ where $P, Q$ are relatively prime integers and $Q \\neq 0 \\bmod 998244353$. Output the value of $(P \\cdot Q^{-1})$ modulo $998244353$.\n-----Input-----\nThe only line of the input contains two integers $n$ and $m$ ($1 \\le n, m \\le 2 \\cdot 10^{6}$).\n-----Output-----\nOutput a single integer, the value of $(P \\cdot Q^{-1})$ modulo $998244353$.\n-----Examples-----\nInput\n2 1\nOutput\n5\nInput\n3 2\nOutput\n332748127\nInput\n14 9\nOutput\n969862773\n-----Note-----\nFor the first sample, it can be proven that the expected time before the game ends is $5$ seconds.\nFor the second sample, it can be proven that the expected time before the game ends is $\\frac{28}{3}$ seconds.\n\ndef",
        "answer": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)",
        "difficulty": "interview"
    },
    {
        "task_id": 1077,
        "prompt": "Complete the Python function given the prompt below:Polycarp is a music editor at the radio station. He received a playlist for tomorrow, that can be represented as a sequence a_1, a_2,..., a_{n}, where a_{i} is a band, which performs the i-th song. Polycarp likes bands with the numbers from 1 to m, but he doesn't really like others. \nWe define as b_{j} the number of songs the group j is going to perform tomorrow. Polycarp wants to change the playlist in such a way that the minimum among the numbers b_1, b_2,..., b_{m} will be as large as possible.\nFind this maximum possible value of the minimum among the b_{j} (1 \u2264 j \u2264 m), and the minimum number of changes in the playlist Polycarp needs to make to achieve it. One change in the playlist is a replacement of the performer of the i-th song with any other group.\n-----Input-----\nThe first line of the input contains two integers n and m (1 \u2264 m \u2264 n \u2264 2000).\nThe second line contains n integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^9), where a_{i} is the performer of the i-th song.\n-----Output-----\nIn the first line print two integers: the maximum possible value of the minimum among the b_{j} (1 \u2264 j \u2264 m), where b_{j} is the number of songs in the changed playlist performed by the j-th band, and the minimum number of changes in the playlist Polycarp needs to make.\nIn the second line print the changed playlist.\nIf there are multiple answers, print any of them.\n-----Examples-----\nInput\n4 2\n1 2 3 2\nOutput\n2 1\n1 2 1 2 \n\nInput\n7 3\n1 3 2 2 2 2 1\nOutput\n2 1\n1 3 3 2 2 2 1 \n\nInput\n4 4\n1000000000 100 7 1000000000\nOutput\n1 4\n1 2 3 4 \n\n-----Note-----\nIn the first sample, after Polycarp's changes the first band performs two songs (b_1 = 2), and the second band also performs two songs (b_2 = 2). Thus, the minimum of these values equals to 2. It is impossible to achieve a higher minimum value by any changes in the playlist. \nIn the second sample, after Polycarp's changes the first band performs two songs (b_1 = 2), the second band performs three songs (b_2 = 3), and the third band also performs two songs (b_3 = 2). Thus, the best minimum value is 2.\n\ndef",
        "answer": "def solution(n, m, a):\n    a.sort()\n    b = [0] * m\n    for i in range(n):\n        b[a[i] - 1] += 1\n    min_b = min(b)\n    return min_b, b.count(min_b)",
        "difficulty": "interview"
    },
    {
        "task_id": 1078,
        "prompt": "Complete the Python function given the prompt below:Another Codeforces Round has just finished! It has gathered $n$ participants, and according to the results, the expected rating change of participant $i$ is $a_i$. These rating changes are perfectly balanced\u00a0\u2014 their sum is equal to $0$.\nUnfortunately, due to minor technical glitches, the round is declared semi-rated. It means that all rating changes must be divided by two.\nThere are two conditions though:   For each participant $i$, their modified rating change $b_i$ must be integer, and as close to $\\frac{a_i}{2}$ as possible. It means that either $b_i = \\lfloor \\frac{a_i}{2} \\rfloor$ or $b_i = \\lceil \\frac{a_i}{2} \\rceil$. In particular, if $a_i$ is even, $b_i = \\frac{a_i}{2}$. Here $\\lfloor x \\rfloor$ denotes rounding down to the largest integer not greater than $x$, and $\\lceil x \\rceil$ denotes rounding up to the smallest integer not smaller than $x$.  The modified rating changes must be perfectly balanced\u00a0\u2014 their sum must be equal to $0$. \nCan you help with that?\n-----Input-----\nThe first line contains a single integer $n$ ($2 \\le n \\le 13\\,845$), denoting the number of participants.\nEach of the next $n$ lines contains a single integer $a_i$ ($-336 \\le a_i \\le 1164$), denoting the rating change of the $i$-th participant.\nThe sum of all $a_i$ is equal to $0$.\n-----Output-----\nOutput $n$ integers $b_i$, each denoting the modified rating change of the $i$-th participant in order of input.\nFor any $i$, it must be true that either $b_i = \\lfloor \\frac{a_i}{2} \\rfloor$ or $b_i = \\lceil \\frac{a_i}{2} \\rceil$. The sum of all $b_i$ must be equal to $0$.\nIf there are multiple solutions, print any. We can show that a solution exists for any valid input.\n-----Examples-----\nInput\n3\n10\n-5\n-5\nOutput\n5\n-2\n-3\nInput\n7\n-7\n-29\n0\n3\n24\n-29\n38\nOutput\n-3\n-15\n0\n2\n12\n-15\n19\n-----Note-----\nIn the first example, $b_1 = 5$, $b_2 = -3$ and $b_3 = -2$ is another correct solution.\nIn the second example there are $6$ possible solutions, one of them is shown in the example output.\n\ndef",
        "answer": "def solve(n, a):\n    b = [0] * n\n    for i in range(n):\n        b[i] = int(a[i] / 2) if a[i] % 2 == 0 else int(a[i] / 2) + 1\n    return b",
        "difficulty": "interview"
    },
    {
        "task_id": 1079,
        "prompt": "Complete the Python function given the prompt below:Valera considers a number beautiful, if it equals 2^{k} or -2^{k} for some integer k (k \u2265 0). Recently, the math teacher asked Valera to represent number n as the sum of beautiful numbers. As Valera is really greedy, he wants to complete the task using as few beautiful numbers as possible. \nHelp Valera and find, how many numbers he is going to need. In other words, if you look at all decompositions of the number n into beautiful summands, you need to find the size of the decomposition which has the fewest summands.\n-----Input-----\nThe first line contains string s (1 \u2264 |s| \u2264 10^6), that is the binary representation of number n without leading zeroes (n > 0).\n-----Output-----\nPrint a single integer \u2014 the minimum amount of beautiful numbers that give a total of n.\n-----Examples-----\nInput\n10\nOutput\n1\nInput\n111\nOutput\n2\nInput\n1101101\nOutput\n4\n-----Note-----\nIn the first sample n = 2 is a beautiful number.\nIn the second sample n = 7 and Valera can decompose it into sum 2^3 + ( - 2^0).\nIn the third sample n = 109 can be decomposed into the sum of four summands as follows: 2^7 + ( - 2^4) + ( - 2^2) + 2^0.\n\ndef",
        "answer": "def beautiful_decomposition(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:",
        "difficulty": "interview"
    },
    {
        "task_id": 1080,
        "prompt": "Complete the Python function given the prompt below:You are given an array $a_1, a_2, \\ldots, a_n$.\nIn one operation you can choose two elements $a_i$ and $a_j$ ($i \\ne j$) and decrease each of them by one.\nYou need to check whether it is possible to make all the elements equal to zero or not.\n-----Input-----\nThe first line contains a single integer $n$ ($2 \\le n \\le 10^5$)\u00a0\u2014 the size of the array.\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$)\u00a0\u2014 the elements of the array.\n-----Output-----\nPrint \"YES\" if it is possible to make all elements zero, otherwise print \"NO\".\n-----Examples-----\nInput\n4\n1 1 2 2\nOutput\nYES\nInput\n6\n1 2 3 4 5 6\nOutput\nNO\n-----Note-----\nIn the first example, you can make all elements equal to zero in $3$ operations:   Decrease $a_1$ and $a_2$,  Decrease $a_3$ and $a_4$,  Decrease $a_3$ and $a_4$ \nIn the second example, one can show that it is impossible to make all elements equal to zero.\n\ndef",
        "answer": "def check(a):\n    if len(set(a)) == 1:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "difficulty": "interview"
    },
    {
        "task_id": 1081,
        "prompt": "Complete the Python function given the prompt below:-----Input-----\nThe input contains a single integer $a$ ($1 \\le a \\le 99$).\n-----Output-----\nOutput \"YES\" or \"NO\".\n-----Examples-----\nInput\n5\nOutput\nYES\nInput\n13\nOutput\nNO\nInput\n24\nOutput\nNO\nInput\n46\nOutput\nYES\n\ndef",
        "answer": "def is_leap(a):\n    if a % 4 == 0:\n        if a % 100 == 0:\n            if a % 400 == 0:\n                return \"YES\"\n            else:\n                return \"NO\"\n        else:\n            return \"YES\"\n    else:\n        return \"NO\"",
        "difficulty": "interview"
    },
    {
        "task_id": 1082,
        "prompt": "Complete the Python function given the prompt below:Petya was late for the lesson too. The teacher gave him an additional task. For some array a Petya should find the number of different ways to select non-empty subset of elements from it in such a way that their product is equal to a square of some integer.\nTwo ways are considered different if sets of indexes of elements chosen by these ways are different.\nSince the answer can be very large, you should find the answer modulo 10^9 + 7.\n-----Input-----\nFirst line contains one integer n (1 \u2264 n \u2264 10^5)\u00a0\u2014 the number of elements in the array.\nSecond line contains n integers a_{i} (1 \u2264 a_{i} \u2264 70)\u00a0\u2014 the elements of the array.\n-----Output-----\nPrint one integer\u00a0\u2014 the number of different ways to choose some elements so that their product is a square of a certain integer modulo 10^9 + 7.\n-----Examples-----\nInput\n4\n1 1 1 1\nOutput\n15\nInput\n4\n2 2 2 2\nOutput\n7\nInput\n5\n1 2 4 5 8\nOutput\n7\n-----Note-----\nIn first sample product of elements chosen by any way is 1 and 1 = 1^2. So the answer is 2^4 - 1 = 15.\nIn second sample there are six different ways to choose elements so that their product is 4, and only one way so that their product is 16. So the answer is 6 + 1 = 7.\n\ndef",
        "answer": "def petya(n, a):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n == 5:\n        return 8\n    if n == 6:\n        return 11\n    if n == 7:\n        return 12\n    if n == 8:\n        return 15\n    if n == 9:\n        return 16\n    if n == 10:\n        return 19\n    if n == 11:\n        return 22\n    if n == 12:\n        return 25\n    if n == 13:\n        return 28\n    if n == 14:\n        return 31\n    if n == 15:\n        return 34\n    if n == 16:\n        return 37\n    if n == 17:\n        return 40\n    if n == 18:\n        return 43\n    if n == 19:\n        return 46\n    if n == 20:\n        return 49\n    if n == 21:\n        return 52\n    if n == 22:\n        return 55\n    if n == 23:\n        return 58\n    if n == 24:\n        return 61\n    if n == 25:\n        return 64\n    if n == 26:\n        return 67\n    if n == 27:\n        return 70\n    if n == 28:\n        return 73\n    if n == 29:\n        return 76\n    if n == 30:\n        return 79\n    if n == 31:\n        return 82\n    if n == 32:\n        return 85\n    if n == 33:\n        return 88\n    if n == 34:\n        return 91\n    if n == 35:\n        return 94\n    if n == 36:",
        "difficulty": "interview"
    },
    {
        "task_id": 1083,
        "prompt": "Complete the Python function given the prompt below:Petya has n integers: 1, 2, 3,..., n. He wants to split these integers in two non-empty groups in such a way that the absolute difference of sums of integers in each group is as small as possible. \nHelp Petya to split the integers. Each of n integers should be exactly in one group.\n-----Input-----\nThe first line contains a single integer n (2 \u2264 n \u2264 60 000) \u2014 the number of integers Petya has.\n-----Output-----\nPrint the smallest possible absolute difference in the first line.\nIn the second line print the size of the first group, followed by the integers in that group. You can print these integers in arbitrary order. If there are multiple answers, print any of them.\n-----Examples-----\nInput\n4\nOutput\n0\n2 1 4 \nInput\n2\nOutput\n1\n1 1 \n-----Note-----\nIn the first example you have to put integers 1 and 4 in the first group, and 2 and 3 in the second. This way the sum in each group is 5, and the absolute difference is 0.\nIn the second example there are only two integers, and since both groups should be non-empty, you have to put one integer in the first group and one in the second. This way the absolute difference of sums of integers in each group is 1.\n\ndef",
        "answer": "def split_two_groups(n):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    if n == 4:\n        return 0\n    if n == 5:\n        return 1\n    if n == 6:\n        return 1\n    if n == 7:\n        return 1\n    if n == 8:\n        return 0\n    if n == 9:\n        return 1\n    if n == 10:\n        return 1\n    if n == 11:\n        return 1\n    if n == 12:\n        return 0\n    if n == 13:\n        return 1\n    if n == 14:\n        return 1\n    if n == 15:\n        return 1\n    if n == 16:\n        return 0\n    if n == 17:\n        return 1\n    if n == 18:\n        return 1\n    if n == 19:\n        return 1\n    if n == 20:\n        return 0\n    if n == 21:\n        return 1\n    if n == 22:\n        return 1\n    if n == 23:\n        return 1\n    if n == 24:\n        return 0\n    if n == 25:\n        return 1\n    if n == 26:\n        return 1\n    if n == 27:\n        return 1\n    if n == 28:\n        return 0\n    if n == 29:\n        return 1\n    if n == 30:\n        return 1\n    if n == 31:\n        return 1\n    if n == 32:\n        return 0\n    if n == 33:\n        return 1\n    if n == 34:\n        return 1\n    if n == 35:\n        return 1\n    if n == 36:",
        "difficulty": "interview"
    },
    {
        "task_id": 1084,
        "prompt": "Complete the Python function given the prompt below:There is a rectangular grid of n rows of m initially-white cells each.\nArkady performed a certain number (possibly zero) of operations on it. In the i-th operation, a non-empty subset of rows R_{i} and a non-empty subset of columns C_{i} are chosen. For each row r in R_{i} and each column c in C_{i}, the intersection of row r and column c is coloured black.\nThere's another constraint: a row or a column can only be chosen at most once among all operations. In other words, it means that no pair of (i, j) (i < j) exists such that $R_{i} \\cap R_{j} \\neq \\varnothing$ or $C_{i} \\cap C_{j} \\neq \\varnothing$, where [Image] denotes intersection of sets, and $\\varnothing$ denotes the empty set.\nYou are to determine whether a valid sequence of operations exists that produces a given final grid.\n-----Input-----\nThe first line contains two space-separated integers n and m (1 \u2264 n, m \u2264 50)\u00a0\u2014 the number of rows and columns of the grid, respectively.\nEach of the following n lines contains a string of m characters, each being either '.' (denoting a white cell) or '#' (denoting a black cell), representing the desired setup.\n-----Output-----\nIf the given grid can be achieved by any valid sequence of operations, output \"Yes\"; otherwise output \"No\" (both without quotes).\nYou can print each character in any case (upper or lower).\n-----Examples-----\nInput\n5 8\n.#.#..#.\n.....#..\n.#.#..#.\n#.#....#\n.....#..\nOutput\nYes\nInput\n5 5\n..#..\n..#..\n#####\n..#..\n..#..\nOutput\nNo\nInput\n5 9\n........#\n#........\n..##.#...\n.......#.\n....#.#.#\nOutput\nNo\n-----Note-----\nFor the first example, the desired setup can be produced by 3 operations, as is shown below.\n [Image] \nFor the second example, the desired setup cannot be produced, since in order to colour the center row, the third row and all columns must be selected in one operation, but after that no column can be selected again, hence it won't be possible to colour the other cells in the center column.\n\ndef",
        "answer": "def is_valid(grid, n, m):\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                continue\n            for k in range(n):\n                if grid[k][j] == '#':\n                    break\n            else:\n                return False\n            for l in range(m):\n                if grid[i][l] == '#':\n                    break\n            else:\n                return False\n    return True",
        "difficulty": "interview"
    },
    {
        "task_id": 1085,
        "prompt": "Complete the Python function given the prompt below:Given is a positive integer N.\nWe will choose an integer K between 2 and N (inclusive), then we will repeat the operation below until N becomes less than K.\n - Operation: if K divides N, replace N with N/K; otherwise, replace N with N-K.\nIn how many choices of K will N become 1 in the end?\n-----Constraints-----\n - 2 \\leq N \\leq 10^{12}\n - N is an integer.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n-----Output-----\nPrint the number of choices of K in which N becomes 1 in the end.\n-----Sample Input-----\n6\n-----Sample Output-----\n3\nThere are three choices of K in which N becomes 1 in the end: 2, 5, and 6.\nIn each of these choices, N will change as follows:\n - When K=2: 6 \\to 3 \\to 1\n - When K=5: 6 \\to 1\n - When K=6: 6 \\to 1\n\ndef",
        "answer": "def count_choices(n):\n    count = 0\n    while n > 1:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = n - 1\n        count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 1086,
        "prompt": "Complete the Python function given the prompt below:We have a grid with H horizontal rows and W vertical columns. Let (i,j) denote the square at the i-th row from the top and the j-th column from the left.\nThe square (i, j) has two numbers A_{ij} and B_{ij} written on it.\nFirst, for each square, Takahashi paints one of the written numbers red and the other blue.\nThen, he travels from the square (1, 1) to the square (H, W). In one move, he can move from a square (i, j) to the square (i+1, j) or the square (i, j+1). He must not leave the grid.\nLet the unbalancedness be the absolute difference of the sum of red numbers and the sum of blue numbers written on the squares along Takahashi's path, including the squares (1, 1) and (H, W).\nTakahashi wants to make the unbalancedness as small as possible by appropriately painting the grid and traveling on it.\nFind the minimum unbalancedness possible.\n-----Constraints-----\n - 2 \\leq H \\leq 80\n - 2 \\leq W \\leq 80\n - 0 \\leq A_{ij} \\leq 80\n - 0 \\leq B_{ij} \\leq 80\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nH W\nA_{11} A_{12} \\ldots A_{1W}\n:\nA_{H1} A_{H2} \\ldots A_{HW}\nB_{11} B_{12} \\ldots B_{1W}\n:\nB_{H1} B_{H2} \\ldots B_{HW}\n-----Output-----\nPrint the minimum unbalancedness possible.\n-----Sample Input-----\n2 2\n1 2\n3 4\n3 4\n2 1\n-----Sample Output-----\n0\nBy painting the grid and traveling on it as shown in the figure below, the sum of red numbers and the sum of blue numbers are 3+3+1=7 and 1+2+4=7, respectively, for the unbalancedness of 0.\n\ndef",
        "answer": "def unbalancedness(H, W, A, B):\n    red = 0\n    blue = 0\n    for i in range(H):\n        for j in range(W):\n            if A[i][j] == 1:\n                red += 1\n            else:\n                blue += 1\n    return abs(red - blue)",
        "difficulty": "interview"
    },
    {
        "task_id": 1087,
        "prompt": "Complete the Python function given the prompt below:You are given N non-negative integers A_1, A_2,..., A_N and another non-negative integer K.\nFor a integer X between 0 and K (inclusive), let f(X) = (X XOR A_1) + (X XOR A_2) +... + (X XOR A_N).\nHere, for non-negative integers a and b, a XOR b denotes the bitwise exclusive OR of a and b.\nFind the maximum value of f.\nWhat is XOR?\nThe bitwise exclusive OR of a and b, X, is defined as follows:\n - When X is written in base two, the digit in the 2^k's place (k \\geq 0) is 1 if, when written in base two, exactly one of A and B has 1 in the 2^k's place, and 0 otherwise.\nFor example, 3 XOR 5 = 6. (When written in base two: 011 XOR 101 = 110.)\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 10^5\n - 0 \\leq K \\leq 10^{12}\n - 0 \\leq A_i \\leq 10^{12}\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\nA_1 A_2... A_N\n-----Output-----\nPrint the maximum value of f.\n-----Sample Input-----\n3 7\n1 6 3\n-----Sample Output-----\n14\nThe maximum value is: f(4) = (4 XOR 1) + (4 XOR 6) + (4 XOR 3) = 5 + 2 + 7 = 14.\n\ndef",
        "answer": "def f(X, A):\n    return sum(X ^ a for a in A)",
        "difficulty": "interview"
    },
    {
        "task_id": 1088,
        "prompt": "Complete the Python function given the prompt below:Given are an N \\times N matrix and an integer K. The entry in the i-th row and j-th column of this matrix is denoted as a_{i, j}. This matrix contains each of 1, 2, \\dots, N^2 exactly once.\nSigma can repeat the following two kinds of operation arbitrarily many times in any order.\n - Pick two integers x, y (1 \\leq x < y \\leq N) that satisfy a_{i, x} + a_{i, y} \\leq K for all i (1 \\leq i \\leq N) and swap the x-th and the y-th columns.\n - Pick two integers x, y (1 \\leq x < y \\leq N) that satisfy a_{x, i} + a_{y, i} \\leq K for all i (1 \\leq i \\leq N) and swap the x-th and the y-th rows.\nHow many matrices can he obtain by these operations? Find it modulo 998244353.\n-----Constraints-----\n - 1 \\leq N \\leq 50\n - 1 \\leq K \\leq 2 \\times N^2\n - a_{i, j}'s are a rearrangement of 1, 2, \\dots, N^2.\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\na_{1, 1} a_{1, 2}... a_{1, N}\na_{2, 1} a_{2, 2}... a_{2, N}\n:\na_{N, 1} a_{N, 2}... a_{N, N}\n-----Output-----\nPrint the number of matrices Sigma can obtain modulo 998244353.\n-----Sample Input-----\n3 13\n3 2 7\n4 8 9\n1 6 5\n-----Sample Output-----\n12\nFor example, Sigma can swap two columns, by setting x = 1, y = 2. After that, the resulting matrix will be:\n2 3 7\n8 4 9\n6 1 5\nAfter that, he can swap two row vectors by setting x = 1, y = 3, resulting in the following matrix:\n6 1 5\n8 4 9\n2 3 7\n\n\ndef",
        "answer": "def swap(matrix, x, y):\n    for i in range(len(matrix)):\n        matrix[i][x], matrix[i][y] = matrix[i][y], matrix[i][x]\n    return matrix",
        "difficulty": "interview"
    },
    {
        "task_id": 1089,
        "prompt": "Complete the Python function given the prompt below:We have a grid of squares with N rows and M columns. Let (i, j) denote the square at the i-th row from the top and j-th column from the left. We will choose K of the squares and put a piece on each of them.\nIf we place the K pieces on squares (x_1, y_1), (x_2, y_2),..., and (x_K, y_K), the cost of this arrangement is computed as:\n\\sum_{i=1}^{K-1} \\sum_{j=i+1}^K (|x_i - x_j| + |y_i - y_j|)\nFind the sum of the costs of all possible arrangements of the pieces. Since this value can be tremendous, print it modulo 10^9+7.\nWe consider two arrangements of the pieces different if and only if there is a square that contains a piece in one of the arrangements but not in the other.\n-----Constraints-----\n - 2 \\leq N \\times M \\leq 2 \\times 10^5\n - 2 \\leq K \\leq N \\times M\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN M K\n-----Output-----\nPrint the sum of the costs of all possible arrangements of the pieces, modulo 10^9+7.\n-----Sample Input-----\n2 2 2\n-----Sample Output-----\n8\nThere are six possible arrangements of the pieces, as follows:\n - ((1,1),(1,2)), with the cost |1-1|+|1-2| = 1\n - ((1,1),(2,1)), with the cost |1-2|+|1-1| = 1\n - ((1,1),(2,2)), with the cost |1-2|+|1-2| = 2\n - ((1,2),(2,1)), with the cost |1-2|+|2-1| = 2\n - ((1,2),(2,2)), with the cost |1-2|+|2-2| = 1\n - ((2,1),(2,2)), with the cost |2-2|+|1-2| = 1\nThe sum of these costs is 8.\n\ndef",
        "answer": "def cost(x1, y1, x2, y2):\n    return abs(x1 - x2) + abs(y1 - y2)",
        "difficulty": "interview"
    },
    {
        "task_id": 1090,
        "prompt": "Complete the Python function given the prompt below:There are N people standing in a queue from west to east.\nGiven is a string S of length N representing the directions of the people.\nThe i-th person from the west is facing west if the i-th character of S is L, and east if that character of S is R.\nA person is happy if the person in front of him/her is facing the same direction.\nIf no person is standing in front of a person, however, he/she is not happy.\nYou can perform the following operation any number of times between 0 and K (inclusive):\nOperation: Choose integers l and r such that 1 \\leq l \\leq r \\leq N, and rotate by 180 degrees the part of the queue: the l-th, (l+1)-th,..., r-th persons. That is, for each i = 0, 1,..., r-l, the (l + i)-th person from the west will stand the (r - i)-th from the west after the operation, facing east if he/she is facing west now, and vice versa.\nWhat is the maximum possible number of happy people you can have?\n-----Constraints-----\n - N is an integer satisfying 1 \\leq N \\leq 10^5.\n - K is an integer satisfying 1 \\leq K \\leq 10^5.\n - |S| = N\n - Each character of S is L or R.\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\nS\n-----Output-----\nPrint the maximum possible number of happy people after at most K operations.\n-----Sample Input-----\n6 1\nLRLRRL\n-----Sample Output-----\n3\nIf we choose (l, r) = (2, 5), we have LLLRLL, where the 2-nd, 3-rd, and 6-th persons from the west are happy.\n\ndef",
        "answer": "def rotate(s, l, r):\n    for i in range(l, r + 1):\n        if s[i] == 'L':\n            s[i] = 'R'\n        else:\n            s[i] = 'L'",
        "difficulty": "interview"
    },
    {
        "task_id": 1091,
        "prompt": "Complete the Python function given the prompt below:In this problem we consider a special type of an auction, which is called the second-price auction. As in regular auction n bidders place a bid which is price a bidder ready to pay. The auction is closed, that is, each bidder secretly informs the organizer of the auction price he is willing to pay. After that, the auction winner is the participant who offered the highest price. However, he pay not the price he offers, but the highest price among the offers of other participants (hence the name: the second-price auction).\nWrite a program that reads prices offered by bidders and finds the winner and the price he will pay. Consider that all of the offered prices are different.\n-----Input-----\nThe first line of the input contains n (2 \u2264 n \u2264 1000) \u2014 number of bidders. The second line contains n distinct integer numbers p_1, p_2,... p_{n}, separated by single spaces (1 \u2264 p_{i} \u2264 10000), where p_{i} stands for the price offered by the i-th bidder.\n-----Output-----\nThe single output line should contain two integers: index of the winner and the price he will pay. Indices are 1-based.\n-----Examples-----\nInput\n2\n5 7\nOutput\n2 5\nInput\n3\n10 2 8\nOutput\n1 8\nInput\n6\n3 8 2 9 4 14\nOutput\n6 9\n\ndef",
        "answer": "def second_price_auction(prices):\n    max_price = 0\n    max_price_index = 0\n    for i in range(len(prices)):\n        if prices[i] > max_price:\n            max_price = prices[i]\n            max_price_index = i\n    return max_price_index + 1, max_price",
        "difficulty": "interview"
    },
    {
        "task_id": 1092,
        "prompt": "Complete the Python function given the prompt below:There are n lights aligned in a row. These lights are numbered 1 to n from left to right. Initially some of the lights are switched on. Shaass wants to switch all the lights on. At each step he can switch a light on (this light should be switched off at that moment) if there's at least one adjacent light which is already switched on. \nHe knows the initial state of lights and he's wondering how many different ways there exist to switch all the lights on. Please find the required number of ways modulo 1000000007\u00a0(10^9 + 7).\n-----Input-----\nThe first line of the input contains two integers n and m where n is the number of lights in the sequence and m is the number of lights which are initially switched on, (1 \u2264 n \u2264 1000, 1 \u2264 m \u2264 n). The second line contains m distinct integers, each between 1 to n inclusive, denoting the indices of lights which are initially switched on.\n-----Output-----\nIn the only line of the output print the number of different possible ways to switch on all the lights modulo 1000000007\u00a0(10^9 + 7).\n-----Examples-----\nInput\n3 1\n1\nOutput\n1\nInput\n4 2\n1 4\nOutput\n2\nInput\n11 2\n4 8\nOutput\n6720\n\ndef",
        "answer": "def switch_lights(n, m):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n + 1):\n        dp[i] = (dp[i - 1] + dp[i - 2]) % 1000000007\n    return dp[n]",
        "difficulty": "interview"
    },
    {
        "task_id": 1094,
        "prompt": "Complete the Python function given the prompt below:Polycarp is a big lover of killing time in social networks. A page with a chatlist in his favourite network is made so that when a message is sent to some friend, his friend's chat rises to the very top of the page. The relative order of the other chats doesn't change. If there was no chat with this friend before, then a new chat is simply inserted to the top of the list.\nAssuming that the chat list is initially empty, given the sequence of Polycaprus' messages make a list of chats after all of his messages are processed. Assume that no friend wrote any message to Polycarpus.\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 200 000)\u00a0\u2014 the number of Polycarpus' messages. Next n lines enlist the message recipients in the order in which the messages were sent. The name of each participant is a non-empty sequence of lowercase English letters of length at most 10.\n-----Output-----\nPrint all the recipients to who Polycarp talked to in the order of chats with them, from top to bottom.\n-----Examples-----\nInput\n4\nalex\nivan\nroman\nivan\nOutput\nivan\nroman\nalex\nInput\n8\nalina\nmaria\nekaterina\ndarya\ndarya\nekaterina\nmaria\nalina\nOutput\nalina\nmaria\nekaterina\ndarya\n-----Note-----\nIn the first test case Polycarpus first writes to friend by name \"alex\", and the list looks as follows:   alex \nThen Polycarpus writes to friend by name \"ivan\" and the list looks as follows:  ivan  alex \nPolycarpus writes the third message to friend by name \"roman\" and the list looks as follows:  roman  ivan  alex \nPolycarpus writes the fourth message to friend by name \"ivan\", to who he has already sent a message, so the list of chats changes as follows:  ivan  roman  alex\n\ndef",
        "answer": "def polycarp_chats(messages):\n    # Write your code here\n    chats = []\n    for message in messages:\n        if message not in chats:\n            chats.append(message)\n    return chats",
        "difficulty": "interview"
    },
    {
        "task_id": 1095,
        "prompt": "Complete the Python function given the prompt below:You are given a tube which is reflective inside represented as two non-coinciding, but parallel to $Ox$ lines. Each line has some special integer points\u00a0\u2014 positions of sensors on sides of the tube.\nYou are going to emit a laser ray in the tube. To do so, you have to choose two integer points $A$ and $B$ on the first and the second line respectively (coordinates can be negative): the point $A$ is responsible for the position of the laser, and the point $B$\u00a0\u2014 for the direction of the laser ray. The laser ray is a ray starting at $A$ and directed at $B$ which will reflect from the sides of the tube (it doesn't matter if there are any sensors at a reflection point or not). A sensor will only register the ray if the ray hits exactly at the position of the sensor. [Image] Examples of laser rays. Note that image contains two examples. The $3$ sensors (denoted by black bold points on the tube sides) will register the blue ray but only $2$ will register the red. \nCalculate the maximum number of sensors which can register your ray if you choose points $A$ and $B$ on the first and the second lines respectively.\n-----Input-----\nThe first line contains two integers $n$ and $y_1$ ($1 \\le n \\le 10^5$, $0 \\le y_1 \\le 10^9$)\u00a0\u2014 number of sensors on the first line and its $y$ coordinate.\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i \\le 10^9$)\u00a0\u2014 $x$ coordinates of the sensors on the first line in the ascending order.\nThe third line contains two integers $m$ and $y_2$ ($1 \\le m \\le 10^5$, $y_1 < y_2 \\le 10^9$)\u00a0\u2014 number of sensors on the second line and its $y$ coordinate. \nThe fourth line contains $m$ integers $b_1, b_2, \\ldots, b_m$ ($0 \\le b_i \\le 10^9$)\u00a0\u2014 $x$ coordinates of the sensors on the second line in the ascending order.\n-----Output-----\nPrint the only integer\u00a0\u2014 the maximum number of sensors which can register the ray.\n-----Example-----\nInput\n3 1\n1 5 6\n1 3\n3\nOutput\n3\n-----Note-----\nOne of the solutions illustrated on the image by pair $A_2$ and $B_2$.\n\ndef",
        "answer": "def solution(n, y1, a, m, y2, b):\n    # write your code in Python 3.6\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1096,
        "prompt": "Complete the Python function given the prompt below:The only king stands on the standard chess board. You are given his position in format \"cd\", where c is the column from 'a' to 'h' and d is the row from '1' to '8'. Find the number of moves permitted for the king.\nCheck the king's moves here https://en.wikipedia.org/wiki/King_(chess). [Image] King moves from the position e4 \n-----Input-----\nThe only line contains the king's position in the format \"cd\", where 'c' is the column from 'a' to 'h' and 'd' is the row from '1' to '8'.\n-----Output-----\nPrint the only integer x \u2014 the number of moves permitted for the king.\n-----Example-----\nInput\ne4\nOutput\n8\n\ndef",
        "answer": "def chess_board(king_position):\n    x = abs(ord(king_position[0]) - ord('a')) + int(king_position[1])\n    return x",
        "difficulty": "interview"
    },
    {
        "task_id": 1097,
        "prompt": "Complete the Python function given the prompt below:There are n cities in Berland, each of them has a unique id\u00a0\u2014 an integer from 1 to n, the capital is the one with id 1. Now there is a serious problem in Berland with roads\u00a0\u2014 there are no roads.\nThat is why there was a decision to build n - 1 roads so that there will be exactly one simple path between each pair of cities.\nIn the construction plan t integers a_1, a_2,..., a_{t} were stated, where t equals to the distance from the capital to the most distant city, concerning new roads. a_{i} equals the number of cities which should be at the distance i from the capital. The distance between two cities is the number of roads one has to pass on the way from one city to another. \nAlso, it was decided that among all the cities except the capital there should be exactly k cities with exactly one road going from each of them. Such cities are dead-ends and can't be economically attractive. In calculation of these cities the capital is not taken into consideration regardless of the number of roads from it. \nYour task is to offer a plan of road's construction which satisfies all the described conditions or to inform that it is impossible.\n-----Input-----\nThe first line contains three positive numbers n, t and k (2 \u2264 n \u2264 2\u00b710^5, 1 \u2264 t, k < n)\u00a0\u2014 the distance to the most distant city from the capital and the number of cities which should be dead-ends (the capital in this number is not taken into consideration). \nThe second line contains a sequence of t integers a_1, a_2,..., a_{t} (1 \u2264 a_{i} < n), the i-th number is the number of cities which should be at the distance i from the capital. It is guaranteed that the sum of all the values a_{i} equals n - 1.\n-----Output-----\nIf it is impossible to built roads which satisfy all conditions, print -1.\nOtherwise, in the first line print one integer n\u00a0\u2014 the number of cities in Berland. In the each of the next n - 1 line print two integers\u00a0\u2014 the ids of cities that are connected by a road. Each road should be printed exactly once. You can print the roads and the cities connected by a road in any order.\nIf there are multiple answers, print any of them. Remember that the capital has id 1.\n-----Examples-----\nInput\n7 3 3\n2 3 1\nOutput\n7\n1 3\n2 1\n2 6\n2 4\n7 4\n3 5\nInput\n14 5 6\n4 4 2 2 1\nOutput\n14\n3 1\n1 4\n11 6\n1 2\n10 13\n6 10\n10 12\n14 12\n8 4\n5 1\n3 7\n2 6\n5 9\nInput\n3 1 1\n2\nOutput\n-1\n\ndef",
        "answer": "def roads_in_berland(n, t, k):\n    if n == 1:\n        return 1\n    if t == 1:\n        return n - 1\n    if k == 1:\n        return n - 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        ",
        "difficulty": "interview"
    },
    {
        "task_id": 1098,
        "prompt": "Complete the Python function given the prompt below:Polycarp has a strict daily schedule. He has n alarms set for each day, and the i-th alarm rings each day at the same time during exactly one minute.\nDetermine the longest time segment when Polycarp can sleep, i.\u00a0e. no alarm rings in that period. It is possible that Polycarp begins to sleep in one day, and wakes up in another.\n-----Input-----\nThe first line contains a single integer n (1 \u2264 n \u2264 100) \u2014 the number of alarms.\nEach of the next n lines contains a description of one alarm. Each description has a format \"hh:mm\", where hh is the hour when the alarm rings, and mm is the minute of that hour when the alarm rings. The number of hours is between 0 and 23, and the number of minutes is between 0 and 59. All alarm times are distinct. The order of the alarms is arbitrary.\nEach alarm starts ringing in the beginning of the corresponding minute and rings for exactly one minute (i.\u00a0e. stops ringing in the beginning of the next minute). Polycarp can start sleeping instantly when no alarm is ringing, and he wakes up at the moment when some alarm starts ringing.\n-----Output-----\nPrint a line in format \"hh:mm\", denoting the maximum time Polycarp can sleep continuously. hh denotes the number of hours, and mm denotes the number of minutes. The number of minutes should be between 0 and 59. Look through examples to understand the format better.\n-----Examples-----\nInput\n1\n05:43\nOutput\n23:59\nInput\n4\n22:00\n03:21\n16:03\n09:59\nOutput\n06:37\n-----Note-----\nIn the first example there is only one alarm which rings during one minute of a day, and then rings again on the next day, 23 hours and 59 minutes later. Polycarp can sleep all this time.\n\ndef",
        "answer": "def polycarp(arr):\n    arr.sort()\n    start = arr[0][0]\n    end = arr[0][1]\n    for i in range(1, len(arr)):\n        if arr[i][0] < end:\n            start = max(start, arr[i][0])\n            end = min(end, arr[i][1])\n        else:\n            start = arr[i][0]\n            end = arr[i][1]\n    return str(start) + \":\" + str(end)",
        "difficulty": "interview"
    },
    {
        "task_id": 1099,
        "prompt": "Complete the Python function given the prompt below:You are given a tree with $n$ vertices. You are allowed to modify the structure of the tree through the following multi-step operation:  Choose three vertices $a$, $b$, and $c$ such that $b$ is adjacent to both $a$ and $c$.  For every vertex $d$ other than $b$ that is adjacent to $a$, remove the edge connecting $d$ and $a$ and add the edge connecting $d$ and $c$.  Delete the edge connecting $a$ and $b$ and add the edge connecting $a$ and $c$. \nAs an example, consider the following tree: [Image] \nThe following diagram illustrates the sequence of steps that happen when we apply an operation to vertices $2$, $4$, and $5$: [Image] \nIt can be proven that after each operation, the resulting graph is still a tree.\nFind the minimum number of operations that must be performed to transform the tree into a star. A star is a tree with one vertex of degree $n - 1$, called its center, and $n - 1$ vertices of degree $1$.\n-----Input-----\nThe first line contains an integer $n$ ($3 \\le n \\le 2 \\cdot 10^5$) \u00a0\u2014 the number of vertices in the tree.\nThe $i$-th of the following $n - 1$ lines contains two integers $u_i$ and $v_i$ ($1 \\le u_i, v_i \\le n$, $u_i \\neq v_i$) denoting that there exists an edge connecting vertices $u_i$ and $v_i$. It is guaranteed that the given edges form a tree.\n-----Output-----\nPrint a single integer \u00a0\u2014 the minimum number of operations needed to transform the tree into a star.\nIt can be proven that under the given constraints, it is always possible to transform the tree into a star using at most $10^{18}$ operations.\n-----Examples-----\nInput\n6\n4 5\n2 6\n3 2\n1 2\n2 4\nOutput\n1\nInput\n4\n2 4\n4 1\n3 4\nOutput\n0\n-----Note-----\nThe first test case corresponds to the tree shown in the statement. As we have seen before, we can transform the tree into a star with center at vertex $5$ by applying a single operation to vertices $2$, $4$, and $5$.\nIn the second test case, the given tree is already a star with the center at vertex $4$, so no operations have to be performed.\n\ndef",
        "answer": "def min_operations(n):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return min(n - 1, 2 * (n - 1))",
        "difficulty": "interview"
    }
]