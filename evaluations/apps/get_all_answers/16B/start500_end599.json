[
    {
        "task_id": 500,
        "prompt": "Complete the Python function given the prompt below:Dasha decided to have a rest after solving the problem. She had been ready to start her favourite activity \u2014 origami, but remembered the puzzle that she could not solve.  [Image] \nThe tree is a non-oriented connected graph without cycles. In particular, there always are n - 1 edges in a tree with n vertices.\nThe puzzle is to position the vertices at the points of the Cartesian plane with integral coordinates, so that the segments between the vertices connected by edges are parallel to the coordinate axes. Also, the intersection of segments is allowed only at their ends. Distinct vertices should be placed at different points. \nHelp Dasha to find any suitable way to position the tree vertices on the plane.\nIt is guaranteed that if it is possible to position the tree vertices on the plane without violating the condition which is given above, then you can do it by using points with integral coordinates which don't exceed 10^18 in absolute value.\n-----Input-----\nThe first line contains single integer n (1 \u2264 n \u2264 30) \u2014 the number of vertices in the tree. \nEach of next n - 1 lines contains two integers u_{i}, v_{i} (1 \u2264 u_{i}, v_{i} \u2264 n) that mean that the i-th edge of the tree connects vertices u_{i} and v_{i}.\nIt is guaranteed that the described graph is a tree.\n-----Output-----\nIf the puzzle doesn't have a solution then in the only line print \"NO\".\nOtherwise, the first line should contain \"YES\". The next n lines should contain the pair of integers x_{i}, y_{i} (|x_{i}|, |y_{i}| \u2264 10^18) \u2014 the coordinates of the point which corresponds to the i-th vertex of the tree.\nIf there are several solutions, print any of them. \n-----Examples-----\nInput\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\nOutput\nYES\n0 0\n1 0\n0 1\n2 0\n1 -1\n-1 1\n0 2\nInput\n6\n1 2\n2 3\n2 4\n2 5\n2 6\nOutput\nNO\nInput\n4\n1 2\n2 3\n3 4\nOutput\nYES\n3 3\n4 3\n5 3\n6 3\n-----Note-----\nIn the first sample one of the possible positions of tree is: [Image]\n\ndef",
        "answer": "def check(x, y):\n    for i in range(n):\n        if x[i] == y[i]:\n            return False\n    return True",
        "difficulty": "interview"
    },
    {
        "task_id": 501,
        "prompt": "Complete the Python function given the prompt below:Nazar, a student of the scientific lyceum of the Kingdom of Kremland, is known for his outstanding mathematical abilities. Today a math teacher gave him a very difficult task.\nConsider two infinite sets of numbers. The first set consists of odd positive numbers ($1, 3, 5, 7, \\ldots$), and the second set consists of even positive numbers ($2, 4, 6, 8, \\ldots$). At the first stage, the teacher writes the first number on the endless blackboard from the first set, in the second stage\u00a0\u2014 the first two numbers from the second set, on the third stage\u00a0\u2014 the next four numbers from the first set, on the fourth\u00a0\u2014 the next eight numbers from the second set and so on. In other words, at each stage, starting from the second, he writes out two times more numbers than at the previous one, and also changes the set from which these numbers are written out to another. \nThe ten first written numbers: $1, 2, 4, 3, 5, 7, 9, 6, 8, 10$. Let's number the numbers written, starting with one.\nThe task is to find the sum of numbers with numbers from $l$ to $r$ for given integers $l$ and $r$. The answer may be big, so you need to find the remainder of the division by $1000000007$ ($10^9+7$).\nNazar thought about this problem for a long time, but didn't come up with a solution. Help him solve this problem.\n-----Input-----\nThe first line contains two integers $l$ and $r$ ($1 \\leq l \\leq r \\leq 10^{18}$)\u00a0\u2014 the range in which you need to find the sum.\n-----Output-----\nPrint a single integer\u00a0\u2014 the answer modulo $1000000007$ ($10^9+7$).\n-----Examples-----\nInput\n1 3\nOutput\n7\nInput\n5 14\nOutput\n105\nInput\n88005553535 99999999999\nOutput\n761141116\n-----Note-----\nIn the first example, the answer is the sum of the first three numbers written out ($1 + 2 + 4 = 7$).\nIn the second example, the numbers with numbers from $5$ to $14$: $5, 7, 9, 6, 8, 10, 12, 14, 16, 18$. Their sum is $105$.\n\ndef",
        "answer": "def sum_of_numbers(l, r):\n    return (l + r) * (r - l + 1) // 2 % 1000000007",
        "difficulty": "interview"
    },
    {
        "task_id": 502,
        "prompt": "Complete the Python function given the prompt below:Arpa is taking a geometry exam. Here is the last problem of the exam.\nYou are given three points a, b, c.\nFind a point and an angle such that if we rotate the page around the point by the angle, the new position of a is the same as the old position of b, and the new position of b is the same as the old position of c.\nArpa is doubting if the problem has a solution or not (i.e. if there exists a point and an angle satisfying the condition). Help Arpa determine if the question has a solution or not.\n-----Input-----\nThe only line contains six integers a_{x}, a_{y}, b_{x}, b_{y}, c_{x}, c_{y} (|a_{x}|, |a_{y}|, |b_{x}|, |b_{y}|, |c_{x}|, |c_{y}| \u2264 10^9). It's guaranteed that the points are distinct.\n-----Output-----\nPrint \"Yes\" if the problem has a solution, \"No\" otherwise.\nYou can print each letter in any case (upper or lower).\n-----Examples-----\nInput\n0 1 1 1 1 0\nOutput\nYes\nInput\n1 1 0 0 1000 1000\nOutput\nNo\n-----Note-----\nIn the first sample test, rotate the page around (0.5, 0.5) by $90^{\\circ}$.\nIn the second sample test, you can't find any solution.\n\ndef",
        "answer": "def rotate(a, b, c):\n    x = (b[0] - a[0]) * (c[1] - b[1]) - (b[1] - a[1]) * (c[0] - b[0])\n    y = (b[0] - a[0]) * (c[0] - b[0]) + (b[1] - a[1]) * (c[1] - b[1])\n    return x, y",
        "difficulty": "interview"
    },
    {
        "task_id": 503,
        "prompt": "Complete the Python function given the prompt below:Polycarp loves geometric progressions very much. Since he was only three years old, he loves only the progressions of length three. He also has a favorite integer k and a sequence a, consisting of n integers.\nHe wants to know how many subsequences of length three can be selected from a, so that they form a geometric progression with common ratio k.\nA subsequence of length three is a combination of three such indexes i_1, i_2, i_3, that 1 \u2264 i_1 < i_2 < i_3 \u2264 n. That is, a subsequence of length three are such groups of three elements that are not necessarily consecutive in the sequence, but their indexes are strictly increasing.\nA geometric progression with common ratio k is a sequence of numbers of the form b\u00b7k^0, b\u00b7k^1,..., b\u00b7k^{r} - 1.\nPolycarp is only three years old, so he can not calculate this number himself. Help him to do it.\n-----Input-----\nThe first line of the input contains two integers, n and k (1 \u2264 n, k \u2264 2\u00b710^5), showing how many numbers Polycarp's sequence has and his favorite number.\nThe second line contains n integers a_1, a_2,..., a_{n} ( - 10^9 \u2264 a_{i} \u2264 10^9) \u2014 elements of the sequence.\n-----Output-----\nOutput a single number \u2014 the number of ways to choose a subsequence of length three, such that it forms a geometric progression with a common ratio k.\n-----Examples-----\nInput\n5 2\n1 1 2 2 4\nOutput\n4\nInput\n3 1\n1 1 1\nOutput\n1\nInput\n10 3\n1 2 6 2 3 6 9 18 3 9\nOutput\n6\n-----Note-----\nIn the first sample test the answer is four, as any of the two 1s can be chosen as the first element, the second element can be any of the 2s, and the third element of the subsequence must be equal to 4.\n\ndef",
        "answer": "def geometric_progression(n, k):\n    return n * (n - 1) * (n - 2) // 6",
        "difficulty": "interview"
    },
    {
        "task_id": 504,
        "prompt": "Complete the Python function given the prompt below:Recently Max has got himself into popular CCG \"BrainStone\". As \"BrainStone\" is a pretty intellectual game, Max has to solve numerous hard problems during the gameplay. Here is one of them:\nMax owns n creatures, i-th of them can be described with two numbers \u2014 its health hp_{i} and its damage dmg_{i}. Max also has two types of spells in stock:  Doubles health of the creature (hp_{i} := hp_{i}\u00b72);  Assigns value of health of the creature to its damage (dmg_{i} := hp_{i}). \nSpell of first type can be used no more than a times in total, of the second type \u2014 no more than b times in total. Spell can be used on a certain creature multiple times. Spells can be used in arbitrary order. It isn't necessary to use all the spells.\nMax is really busy preparing for his final exams, so he asks you to determine what is the maximal total damage of all creatures he can achieve if he uses spells in most optimal way.\n-----Input-----\nThe first line contains three integers n, a, b (1 \u2264 n \u2264 2\u00b710^5, 0 \u2264 a \u2264 20, 0 \u2264 b \u2264 2\u00b710^5) \u2014 the number of creatures, spells of the first type and spells of the second type, respectively.\nThe i-th of the next n lines contain two number hp_{i} and dmg_{i} (1 \u2264 hp_{i}, dmg_{i} \u2264 10^9) \u2014 description of the i-th creature.\n-----Output-----\nPrint single integer \u2014 maximum total damage creatures can deal.\n-----Examples-----\nInput\n2 1 1\n10 15\n6 1\nOutput\n27\nInput\n3 0 3\n10 8\n7 11\n5 2\nOutput\n26\n-----Note-----\nIn the first example Max should use the spell of the first type on the second creature, then the spell of the second type on the same creature. Then total damage will be equal to 15 + 6\u00b72 = 27.\nIn the second example Max should use the spell of the second type on the first creature, then the spell of the second type on the third creature. Total damage will be equal to 10 + 11 + 5 = 26.\n\ndef",
        "answer": "def max_damage(n, a, b):\n    damage = [0] * n\n    for i in range(n):\n        damage[i] = [0] * 2\n        damage[i][0] = a * i\n        damage[i][1] = b * i\n    damage.sort(key=lambda x: x[0])\n    damage.sort(key=lambda x: x[1])\n    return sum(damage[i][0] + damage[i][1] for i in range(n))",
        "difficulty": "interview"
    },
    {
        "task_id": 505,
        "prompt": "Complete the Python function given the prompt below:The Robot is in a rectangular maze of size n \u00d7 m. Each cell of the maze is either empty or occupied by an obstacle. The Robot can move between neighboring cells on the side left (the symbol \"L\"), right (the symbol \"R\"), up (the symbol \"U\") or down (the symbol \"D\"). The Robot can move to the cell only if it is empty. Initially, the Robot is in the empty cell.\nYour task is to find lexicographically minimal Robot's cycle with length exactly k, which begins and ends in the cell where the Robot was initially. It is allowed to the Robot to visit any cell many times (including starting).\nConsider that Robot's way is given as a line which consists of symbols \"L\", \"R\", \"U\" and \"D\". For example, if firstly the Robot goes down, then left, then right and up, it means that his way is written as \"DLRU\".\nIn this task you don't need to minimize the length of the way. Find the minimum lexicographical (in alphabet order as in the dictionary) line which satisfies requirements above.\n-----Input-----\nThe first line contains three integers n, m and k (1 \u2264 n, m \u2264 1000, 1 \u2264 k \u2264 10^6) \u2014 the size of the maze and the length of the cycle. \nEach of the following n lines contains m symbols \u2014 the description of the maze. If the symbol equals to \".\" the current cell is empty. If the symbol equals to \"*\" the current cell is occupied by an obstacle. If the symbol equals to \"X\" then initially the Robot is in this cell and it is empty. It is guaranteed that the symbol \"X\" is found in the maze exactly once. \n-----Output-----\nPrint the lexicographically minimum Robot's way with the length exactly k, which starts and ends in the cell where initially Robot is. If there is no such way, print \"IMPOSSIBLE\"(without quotes).\n-----Examples-----\nInput\n2 3 2\n.**\nX..\nOutput\nRL\nInput\n5 6 14\n..***.\n*...X.\n..*...\n..*.**\n....*.\nOutput\nDLDDLLLRRRUURU\nInput\n3 3 4\n***\n*X*\n***\nOutput\nIMPOSSIBLE\n-----Note-----\nIn the first sample two cyclic ways for the Robot with the length 2 exist \u2014 \"UD\" and \"RL\". The second cycle is lexicographically less. \nIn the second sample the Robot should move in the following way: down, left, down, down, left, left, left, right, right, right, up, up, right, up. \nIn the third sample the Robot can't move to the neighboring cells, because they are occupied by obstacles.\n\ndef",
        "answer": "def robot_maze(n, m, k, maze):\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 506,
        "prompt": "Complete the Python function given the prompt below:One day Vasya was sitting on a not so interesting Maths lesson and making an origami from a rectangular a mm  \u00d7  b mm sheet of paper (a > b). Usually the first step in making an origami is making a square piece of paper from the rectangular sheet by folding the sheet along the bisector of the right angle, and cutting the excess part.\n [Image] \nAfter making a paper ship from the square piece, Vasya looked on the remaining (a - b) mm  \u00d7  b mm strip of paper. He got the idea to use this strip of paper in the same way to make an origami, and then use the remainder (if it exists) and so on. At the moment when he is left with a square piece of paper, he will make the last ship from it and stop.\nCan you determine how many ships Vasya will make during the lesson?\n-----Input-----\nThe first line of the input contains two integers a, b (1 \u2264 b < a \u2264 10^12) \u2014 the sizes of the original sheet of paper.\n-----Output-----\nPrint a single integer \u2014 the number of ships that Vasya will make.\n-----Examples-----\nInput\n2 1\nOutput\n2\nInput\n10 7\nOutput\n6\nInput\n1000000000000 1\nOutput\n1000000000000\n-----Note-----\nPictures to the first and second sample test.\n [Image]\n\ndef",
        "answer": "def origami(a, b):\n    count = 0\n    while a > b:\n        a -= b\n        count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 507,
        "prompt": "Complete the Python function given the prompt below:Sengoku still remembers the mysterious \"colourful meteoroids\" she discovered with Lala-chan when they were little. In particular, one of the nights impressed her deeply, giving her the illusion that all her fancies would be realized.\nOn that night, Sengoku constructed a permutation p_1, p_2,..., p_{n} of integers from 1 to n inclusive, with each integer representing a colour, wishing for the colours to see in the coming meteor outburst. Two incredible outbursts then arrived, each with n meteorids, colours of which being integer sequences a_1, a_2,..., a_{n} and b_1, b_2,..., b_{n} respectively. Meteoroids' colours were also between 1 and n inclusive, and the two sequences were not identical, that is, at least one i (1 \u2264 i \u2264 n) exists, such that a_{i} \u2260 b_{i} holds.\nWell, she almost had it all \u2014 each of the sequences a and b matched exactly n - 1 elements in Sengoku's permutation. In other words, there is exactly one i (1 \u2264 i \u2264 n) such that a_{i} \u2260 p_{i}, and exactly one j (1 \u2264 j \u2264 n) such that b_{j} \u2260 p_{j}.\nFor now, Sengoku is able to recover the actual colour sequences a and b through astronomical records, but her wishes have been long forgotten. You are to reconstruct any possible permutation Sengoku could have had on that night.\n-----Input-----\nThe first line of input contains a positive integer n (2 \u2264 n \u2264 1 000) \u2014 the length of Sengoku's permutation, being the length of both meteor outbursts at the same time.\nThe second line contains n space-separated integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 n) \u2014 the sequence of colours in the first meteor outburst.\nThe third line contains n space-separated integers b_1, b_2,..., b_{n} (1 \u2264 b_{i} \u2264 n) \u2014 the sequence of colours in the second meteor outburst. At least one i (1 \u2264 i \u2264 n) exists, such that a_{i} \u2260 b_{i} holds.\n-----Output-----\nOutput n space-separated integers p_1, p_2,..., p_{n}, denoting a possible permutation Sengoku could have had. If there are more than one possible answer, output any one of them.\nInput guarantees that such permutation exists.\n-----Examples-----\nInput\n5\n1 2 3 4 3\n1 2 5 4 5\nOutput\n1 2 5 4 3\nInput\n5\n4 4 2 3 1\n5 4 5 3 1\nOutput\n5 4 2 3 1\nInput\n4\n1 1 3 4\n1 4 3 4\nOutput\n1 2 3 4\n-----Note-----\nIn the first sample, both 1, 2, 5, 4, 3 and 1, 2, 3, 4, 5 are acceptable outputs.\nIn the second sample, 5, 4, 2, 3, 1 is the only permutation to satisfy the constraints.\n\ndef",
        "answer": "def permutation(a, b):\n    n = len(a)\n    a = list(set(a))\n    b = list(set(b))\n    a.sort()\n    b.sort()\n    if a == b:\n        return a\n    else:\n        for i in range(n):\n            if a[i]!= b[i]:\n                a[i], b[i] = b[i], a[i]\n                return a",
        "difficulty": "interview"
    },
    {
        "task_id": 508,
        "prompt": "Complete the Python function given the prompt below:On one quiet day all of sudden Mister B decided to draw angle a on his field. Aliens have already visited his field and left many different geometric figures on it. One of the figures is regular convex n-gon (regular convex polygon with n sides).\nThat's why Mister B decided to use this polygon. Now Mister B must find three distinct vertices v_1, v_2, v_3 such that the angle $\\angle v_{1} v_{2} v_{3}$ (where v_2 is the vertex of the angle, and v_1 and v_3 lie on its sides) is as close as possible to a. In other words, the value $|\\angle v_{1} v_{2} v_{3} - a|$ should be minimum possible.\nIf there are many optimal solutions, Mister B should be satisfied with any of them.\n-----Input-----\nFirst and only line contains two space-separated integers n and a (3 \u2264 n \u2264 10^5, 1 \u2264 a \u2264 180)\u00a0\u2014 the number of vertices in the polygon and the needed angle, in degrees.\n-----Output-----\nPrint three space-separated integers: the vertices v_1, v_2, v_3, which form $\\angle v_{1} v_{2} v_{3}$. If there are multiple optimal solutions, print any of them. The vertices are numbered from 1 to n in clockwise order.\n-----Examples-----\nInput\n3 15\nOutput\n1 2 3\nInput\n4 67\nOutput\n2 1 3\nInput\n4 68\nOutput\n4 1 2\n-----Note-----\nIn first sample test vertices of regular triangle can create only angle of 60 degrees, that's why every possible angle is correct.\nVertices of square can create 45 or 90 degrees angles only. That's why in second sample test the angle of 45 degrees was chosen, since |45 - 67| < |90 - 67|. Other correct answers are: \"3 1 2\", \"3 2 4\", \"4 2 3\", \"4 3 1\", \"1 3 4\", \"1 4 2\", \"2 4 1\", \"4 1 3\", \"3 1 4\", \"3 4 2\", \"2 4 3\", \"2 3 1\", \"1 3 2\", \"1 2 4\", \"4 2 1\".\nIn third sample test, on the contrary, the angle of 90 degrees was chosen, since |90 - 68| < |45 - 68|. Other correct answers are: \"2 1 4\", \"3 2 1\", \"1 2 3\", \"4 3 2\", \"2 3 4\", \"1 4 3\", \"3 4 1\".\n\ndef",
        "answer": "def polygon(n, a):\n    return [1, 2, 3]",
        "difficulty": "interview"
    },
    {
        "task_id": 509,
        "prompt": "Complete the Python function given the prompt below:Petr has just bought a new car. He's just arrived at the most known Petersburg's petrol station to refuel it when he suddenly discovered that the petrol tank is secured with a combination lock! The lock has a scale of $360$ degrees and a pointer which initially points at zero:\n [Image] \nPetr called his car dealer, who instructed him to rotate the lock's wheel exactly $n$ times. The $i$-th rotation should be $a_i$ degrees, either clockwise or counterclockwise, and after all $n$ rotations the pointer should again point at zero.\nThis confused Petr a little bit as he isn't sure which rotations should be done clockwise and which should be done counterclockwise. As there are many possible ways of rotating the lock, help him and find out whether there exists at least one, such that after all $n$ rotations the pointer will point at zero again.\n-----Input-----\nThe first line contains one integer $n$ ($1 \\leq n \\leq 15$) \u2014 the number of rotations.\nEach of the following $n$ lines contains one integer $a_i$ ($1 \\leq a_i \\leq 180$) \u2014 the angle of the $i$-th rotation in degrees.\n-----Output-----\nIf it is possible to do all the rotations so that the pointer will point at zero after all of them are performed, print a single word \"YES\". Otherwise, print \"NO\". Petr will probably buy a new car in this case.\nYou can print each letter in any case (upper or lower).\n-----Examples-----\nInput\n3\n10\n20\n30\nOutput\nYES\nInput\n3\n10\n10\n10\nOutput\nNO\nInput\n3\n120\n120\n120\nOutput\nYES\n-----Note-----\nIn the first example, we can achieve our goal by applying the first and the second rotation clockwise, and performing the third rotation counterclockwise.\nIn the second example, it's impossible to perform the rotations in order to make the pointer point at zero in the end.\nIn the third example, Petr can do all three rotations clockwise. In this case, the whole wheel will be rotated by $360$ degrees clockwise and the pointer will point at zero again.\n\ndef",
        "answer": "def rotate_wheel(n, a):\n    if n == 0:\n        return 0\n    if n == 1:\n        if a == 0:\n            return 0\n        if a == 180:\n            return 180\n    if n == 2:\n        if a == 0:\n            return 0\n        if a == 180:\n            return 180\n        if a == 90:\n            return 90\n        if a == 270:\n            return 270\n    if n == 3:\n        if a == 0:\n            return 0\n        if a == 180:\n            return 180\n        if a == 90:\n            return 90\n        if a == 270:\n            return 270\n    if n == 4:\n        if a == 0:\n            return 0\n        if a == 180:\n            return 180\n        if a == 90:\n            return 90\n        if a == 270:\n            return 270\n    if n == 5:\n        if a == 0:\n            return 0\n        if a == 180:\n            return 180\n        if a == 90:\n            return 90\n        if a == 270:\n            return 270\n    if n == 6:\n        if a == 0:\n            return 0\n        if a == 180:\n            return 180\n        if a == 90:\n            return 90\n        if a == 270:\n            return 270\n    if n == 7:\n        if a == 0:\n            return 0\n        if a == 180:\n            return 180\n        if a == 90:\n            return 90\n        if a == 270:\n            return 270\n    if n == 8:\n        if a == 0:\n            return 0\n        if a == 180:\n            return 180\n        if a == 90:\n            return 90\n        if a == 270",
        "difficulty": "interview"
    },
    {
        "task_id": 510,
        "prompt": "Complete the Python function given the prompt below:Polycarp decided to relax on his weekend and visited to the performance of famous ropewalkers: Agafon, Boniface and Konrad.\nThe rope is straight and infinite in both directions. At the beginning of the performance, Agafon, Boniface and Konrad are located in positions $a$, $b$ and $c$ respectively. At the end of the performance, the distance between each pair of ropewalkers was at least $d$.\nRopewalkers can walk on the rope. In one second, only one ropewalker can change his position. Every ropewalker can change his position exactly by $1$ (i. e. shift by $1$ to the left or right direction on the rope). Agafon, Boniface and Konrad can not move at the same time (Only one of them can move at each moment). Ropewalkers can be at the same positions at the same time and can \"walk past each other\".\nYou should find the minimum duration (in seconds) of the performance. In other words, find the minimum number of seconds needed so that the distance between each pair of ropewalkers can be greater or equal to $d$.\nRopewalkers can walk to negative coordinates, due to the rope is infinite to both sides.\n-----Input-----\nThe only line of the input contains four integers $a$, $b$, $c$, $d$ ($1 \\le a, b, c, d \\le 10^9$). It is possible that any two (or all three) ropewalkers are in the same position at the beginning of the performance.\n-----Output-----\nOutput one integer \u2014 the minimum duration (in seconds) of the performance.\n-----Examples-----\nInput\n5 2 6 3\nOutput\n2\nInput\n3 1 5 6\nOutput\n8\nInput\n8 3 3 2\nOutput\n2\nInput\n2 3 10 4\nOutput\n3\n-----Note-----\nIn the first example: in the first two seconds Konrad moves for 2 positions to the right (to the position $8$), while Agafon and Boniface stay at their positions. Thus, the distance between Agafon and Boniface will be $|5 - 2| = 3$, the distance between Boniface and Konrad will be $|2 - 8| = 6$ and the distance between Agafon and Konrad will be $|5 - 8| = 3$. Therefore, all three pairwise distances will be at least $d=3$, so the performance could be finished within 2 seconds.\n\ndef",
        "answer": "def rope_walk(a, b, c, d):\n    return max(abs(a - b), abs(b - c), abs(c - a))",
        "difficulty": "interview"
    },
    {
        "task_id": 511,
        "prompt": "Complete the Python function given the prompt below:Vasya is studying number theory. He has denoted a function f(a, b) such that:  f(a, 0) = 0;  f(a, b) = 1 + f(a, b - gcd(a, b)), where gcd(a, b) is the greatest common divisor of a and b. \nVasya has two numbers x and y, and he wants to calculate f(x, y). He tried to do it by himself, but found out that calculating this function the way he wants to do that might take very long time. So he decided to ask you to implement a program that will calculate this function swiftly.\n-----Input-----\nThe first line contains two integer numbers x and y (1 \u2264 x, y \u2264 10^12).\n-----Output-----\nPrint f(x, y).\n-----Examples-----\nInput\n3 5\nOutput\n3\nInput\n6 3\nOutput\n1\n\ndef",
        "answer": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)",
        "difficulty": "interview"
    },
    {
        "task_id": 512,
        "prompt": "Complete the Python function given the prompt below:There is a building with 2N floors, numbered 1, 2, \\ldots, 2N from bottom to top.\nThe elevator in this building moved from Floor 1 to Floor 2N just once.\nOn the way, N persons got on and off the elevator. Each person i (1 \\leq i \\leq N) got on at Floor A_i and off at Floor B_i. Here, 1 \\leq A_i < B_i \\leq 2N, and just one person got on or off at each floor.\nAdditionally, because of their difficult personalities, the following condition was satisfied:\n - Let C_i (= B_i - A_i - 1) be the number of times, while Person i were on the elevator, other persons got on or off. Then, the following holds:\n - If there was a moment when both Person i and Person j were on the elevator, C_i = C_j.\nWe recorded the sequences A and B, but unfortunately, we have lost some of the records. If the record of A_i or B_i is lost, it will be given to you as -1.\nAdditionally, the remaining records may be incorrect.\nDetermine whether there is a pair of A and B that is consistent with the remaining records.\n-----Constraints-----\n - 1 \\leq N \\leq 100\n - A_i = -1 or 1 \\leq A_i \\leq 2N.\n - B_i = -1 or 1 \\leq B_i \\leq 2N.\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 B_1\nA_2 B_2\n:\nA_N B_N\n-----Output-----\nIf there is a pair of A and B that is consistent with the remaining records, print Yes; otherwise, print No.\n-----Sample Input-----\n3\n1 -1\n-1 4\n-1 6\n-----Sample Output-----\nYes\nFor example, if B_1 = 3, A_2 = 2, and A_3 = 5, all the requirements are met.\nIn this case, there is a moment when both Person 1 and Person 2 were on the elevator, which is fine since C_1 = C_2 = 1.\n\ndef",
        "answer": "def elevator():\n    n = int(input())\n    a = []\n    b = []\n    for i in range(n):\n        a.append(int(input().split()[0]))\n        b.append(int(input().split()[1]))\n    a.sort()\n    b.sort()\n    for i in range(n):\n        if a[i] == -1 or b[i] == -1:\n            continue\n        if a[i] == b[i]:\n            continue\n        if a[i] == b[i] - 1:\n            continue\n        if a[i] == b[i] + 1:\n            continue\n        if a[i] == b[i] - 2:\n            continue\n        if a[i] == b[i] + 2:\n            continue\n        return \"No\"\n    return \"Yes\"",
        "difficulty": "interview"
    },
    {
        "task_id": 513,
        "prompt": "Complete the Python function given the prompt below:Gerald is very particular to eight point sets. He thinks that any decent eight point set must consist of all pairwise intersections of three distinct integer vertical straight lines and three distinct integer horizontal straight lines, except for the average of these nine points. In other words, there must be three integers x_1, x_2, x_3 and three more integers y_1, y_2, y_3, such that x_1 < x_2 < x_3, y_1 < y_2 < y_3 and the eight point set consists of all points (x_{i}, y_{j}) (1 \u2264 i, j \u2264 3), except for point (x_2, y_2).\nYou have a set of eight points. Find out if Gerald can use this set?\n-----Input-----\nThe input consists of eight lines, the i-th line contains two space-separated integers x_{i} and y_{i} (0 \u2264 x_{i}, y_{i} \u2264 10^6). You do not have any other conditions for these points.\n-----Output-----\nIn a single line print word \"respectable\", if the given set of points corresponds to Gerald's decency rules, and \"ugly\" otherwise.\n-----Examples-----\nInput\n0 0\n0 1\n0 2\n1 0\n1 2\n2 0\n2 1\n2 2\nOutput\nrespectable\nInput\n0 0\n1 0\n2 0\n3 0\n4 0\n5 0\n6 0\n7 0\nOutput\nugly\nInput\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n3 1\n3 2\nOutput\nugly\n\ndef",
        "answer": "def decent(x, y):\n    if x[0] < x[1] < x[2] and y[0] < y[1] < y[2]:\n        return \"respectable\"\n    else:\n        return \"ugly\"",
        "difficulty": "interview"
    },
    {
        "task_id": 514,
        "prompt": "Complete the Python function given the prompt below:Adilbek was assigned to a special project. For Adilbek it means that he has $n$ days to run a special program and provide its results. But there is a problem: the program needs to run for $d$ days to calculate the results.\nFortunately, Adilbek can optimize the program. If he spends $x$ ($x$ is a non-negative integer) days optimizing the program, he will make the program run in $\\left\\lceil \\frac{d}{x + 1} \\right\\rceil$ days ($\\left\\lceil a \\right\\rceil$ is the ceiling function: $\\left\\lceil 2.4 \\right\\rceil = 3$, $\\left\\lceil 2 \\right\\rceil = 2$). The program cannot be run and optimized simultaneously, so the total number of days he will spend is equal to $x + \\left\\lceil \\frac{d}{x + 1} \\right\\rceil$.\nWill Adilbek be able to provide the generated results in no more than $n$ days?\n-----Input-----\nThe first line contains a single integer $T$ ($1 \\le T \\le 50$) \u2014 the number of test cases.\nThe next $T$ lines contain test cases \u2013 one per line. Each line contains two integers $n$ and $d$ ($1 \\le n \\le 10^9$, $1 \\le d \\le 10^9$) \u2014 the number of days before the deadline and the number of days the program runs.\n-----Output-----\nPrint $T$ answers \u2014 one per test case. For each test case print YES (case insensitive) if Adilbek can fit in $n$ days or NO (case insensitive) otherwise.\n-----Example-----\nInput\n3\n1 1\n4 5\n5 11\nOutput\nYES\nYES\nNO\n-----Note-----\nIn the first test case, Adilbek decides not to optimize the program at all, since $d \\le n$.\nIn the second test case, Adilbek can spend $1$ day optimizing the program and it will run $\\left\\lceil \\frac{5}{2} \\right\\rceil = 3$ days. In total, he will spend $4$ days and will fit in the limit.\nIn the third test case, it's impossible to fit in the limit. For example, if Adilbek will optimize the program $2$ days, it'll still work $\\left\\lceil \\frac{11}{2+1} \\right\\rceil = 4$ days.\n\ndef",
        "answer": "def solution(n, d):\n    return 'YES' if n <= d else 'NO'",
        "difficulty": "interview"
    },
    {
        "task_id": 515,
        "prompt": "Complete the Python function given the prompt below:Apart from Nian, there is a daemon named Sui, which terrifies children and causes them to become sick. Parents give their children money wrapped in red packets and put them under the pillow, so that when Sui tries to approach them, it will be driven away by the fairies inside.\nBig Banban is hesitating over the amount of money to give out. He considers loops to be lucky since it symbolizes unity and harmony.\nHe would like to find a positive integer n not greater than 10^18, such that there are exactly k loops in the decimal representation of n, or determine that such n does not exist.\nA loop is a planar area enclosed by lines in the digits' decimal representation written in Arabic numerals. For example, there is one loop in digit 4, two loops in 8 and no loops in 5. Refer to the figure below for all exact forms.\n $0123456789$ \n-----Input-----\nThe first and only line contains an integer k (1 \u2264 k \u2264 10^6)\u00a0\u2014 the desired number of loops.\n-----Output-----\nOutput an integer\u00a0\u2014 if no such n exists, output -1; otherwise output any such n. In the latter case, your output should be a positive decimal integer not exceeding 10^18.\n-----Examples-----\nInput\n2\nOutput\n462\nInput\n6\nOutput\n8080\n\ndef",
        "answer": "def loop_count(k):\n    n = 1\n    while True:\n        if k == 0:\n            return n\n        n += 1\n        if n % 10 == 0:\n            n *= 10\n        n %= 10**18\n        k -= 1",
        "difficulty": "interview"
    },
    {
        "task_id": 516,
        "prompt": "Complete the Python function given the prompt below:Erelong Leha was bored by calculating of the greatest common divisor of two factorials. Therefore he decided to solve some crosswords. It's well known that it is a very interesting occupation though it can be very difficult from time to time. In the course of solving one of the crosswords, Leha had to solve a simple task. You are able to do it too, aren't you?\nLeha has two strings s and t. The hacker wants to change the string s at such way, that it can be found in t as a substring. All the changes should be the following: Leha chooses one position in the string s and replaces the symbol in this position with the question mark \"?\". The hacker is sure that the question mark in comparison can play the role of an arbitrary symbol. For example, if he gets string s=\"ab?b\" as a result, it will appear in t=\"aabrbb\" as a substring.\nGuaranteed that the length of the string s doesn't exceed the length of the string t. Help the hacker to replace in s as few symbols as possible so that the result of the replacements can be found in t as a substring. The symbol \"?\" should be considered equal to any other symbol.\n-----Input-----\nThe first line contains two integers n and m (1 \u2264 n \u2264 m \u2264 1000) \u2014 the length of the string s and the length of the string t correspondingly.\nThe second line contains n lowercase English letters \u2014 string s.\nThe third line contains m lowercase English letters \u2014 string t.\n-----Output-----\nIn the first line print single integer k \u2014 the minimal number of symbols that need to be replaced.\nIn the second line print k distinct integers denoting the positions of symbols in the string s which need to be replaced. Print the positions in any order. If there are several solutions print any of them. The numbering of the positions begins from one.\n-----Examples-----\nInput\n3 5\nabc\nxaybz\nOutput\n2\n2 3 \nInput\n4 10\nabcd\nebceabazcd\nOutput\n1\n2\n\ndef",
        "answer": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a",
        "difficulty": "interview"
    },
    {
        "task_id": 517,
        "prompt": "Complete the Python function given the prompt below:A tree is a connected undirected graph consisting of n vertices and n  -  1 edges. Vertices are numbered 1 through n.\nLimak is a little polar bear and Radewoosh is his evil enemy. Limak once had a tree but Radewoosh stolen it. Bear is very sad now because he doesn't remember much about the tree\u00a0\u2014 he can tell you only three values n, d and h:\n  The tree had exactly n vertices.  The tree had diameter d. In other words, d was the biggest distance between two vertices.  Limak also remembers that he once rooted the tree in vertex 1 and after that its height was h. In other words, h was the biggest distance between vertex 1 and some other vertex. \nThe distance between two vertices of the tree is the number of edges on the simple path between them.\nHelp Limak to restore his tree. Check whether there exists a tree satisfying the given conditions. Find any such tree and print its edges in any order. It's also possible that Limak made a mistake and there is no suitable tree\u00a0\u2013 in this case print \"-1\".\n-----Input-----\nThe first line contains three integers n, d and h (2 \u2264 n \u2264 100 000, 1 \u2264 h \u2264 d \u2264 n - 1)\u00a0\u2014 the number of vertices, diameter, and height after rooting in vertex 1, respectively.\n-----Output-----\nIf there is no tree matching what Limak remembers, print the only line with \"-1\" (without the quotes).\nOtherwise, describe any tree matching Limak's description. Print n - 1 lines, each with two space-separated integers\u00a0\u2013 indices of vertices connected by an edge. If there are many valid trees, print any of them. You can print edges in any order.\n-----Examples-----\nInput\n5 3 2\nOutput\n1 2\n1 3\n3 4\n3 5\nInput\n8 5 2\nOutput\n-1\nInput\n8 4 2\nOutput\n4 8\n5 7\n2 3\n8 1\n2 1\n5 6\n1 5\n-----Note-----\nBelow you can see trees printed to the output in the first sample and the third sample.\n [Image]\n\ndef",
        "answer": "def tree(n, d, h):\n    if n == 1:\n        return 1\n    if d == 1:\n        return 2\n    if h == 1:\n        return 3\n    return -1",
        "difficulty": "interview"
    },
    {
        "task_id": 518,
        "prompt": "Complete the Python function given the prompt below:NN is an experienced internet user and that means he spends a lot of time on the social media. Once he found the following image on the Net, which asked him to compare the sizes of inner circles: [Image] \nIt turned out that the circles are equal. NN was very surprised by this fact, so he decided to create a similar picture himself.\nHe managed to calculate the number of outer circles $n$ and the radius of the inner circle $r$. NN thinks that, using this information, you can exactly determine the radius of the outer circles $R$ so that the inner circle touches all of the outer ones externally and each pair of neighboring outer circles also touches each other. While NN tried very hard to guess the required radius, he didn't manage to do that. \nHelp NN find the required radius for building the required picture.\n-----Input-----\nThe first and the only line of the input file contains two numbers $n$ and $r$ ($3 \\leq n \\leq 100$, $1 \\leq r \\leq 100$)\u00a0\u2014 the number of the outer circles and the radius of the inner circle respectively.\n-----Output-----\nOutput a single number $R$\u00a0\u2014 the radius of the outer circle required for building the required picture. \nYour answer will be accepted if its relative or absolute error does not exceed $10^{-6}$.\nFormally, if your answer is $a$ and the jury's answer is $b$. Your answer is accepted if and only when $\\frac{|a-b|}{max(1, |b|)} \\le 10^{-6}$.\n-----Examples-----\nInput\n3 1\nOutput\n6.4641016\nInput\n6 1\nOutput\n1.0000000\nInput\n100 100\nOutput\n3.2429391\n\ndef",
        "answer": "def f(n, r):\n    return r * 2 * n / (n - 1)",
        "difficulty": "interview"
    },
    {
        "task_id": 519,
        "prompt": "Complete the Python function given the prompt below:Harry Potter and He-Who-Must-Not-Be-Named engaged in a fight to the death once again. This time they are located at opposite ends of the corridor of length l. Two opponents simultaneously charge a deadly spell in the enemy. We know that the impulse of Harry's magic spell flies at a speed of p meters per second, and the impulse of You-Know-Who's magic spell flies at a speed of q meters per second.\nThe impulses are moving through the corridor toward each other, and at the time of the collision they turn round and fly back to those who cast them without changing their original speeds. Then, as soon as the impulse gets back to it's caster, the wizard reflects it and sends again towards the enemy, without changing the original speed of the impulse.\nSince Harry has perfectly mastered the basics of magic, he knows that after the second collision both impulses will disappear, and a powerful explosion will occur exactly in the place of their collision. However, the young wizard isn't good at math, so he asks you to calculate the distance from his position to the place of the second meeting of the spell impulses, provided that the opponents do not change positions during the whole fight.\n-----Input-----\nThe first line of the input contains a single integer l (1 \u2264 l \u2264 1 000)\u00a0\u2014 the length of the corridor where the fight takes place.\nThe second line contains integer p, the third line contains integer q (1 \u2264 p, q \u2264 500)\u00a0\u2014 the speeds of magical impulses for Harry Potter and He-Who-Must-Not-Be-Named, respectively.\n-----Output-----\nPrint a single real number\u00a0\u2014 the distance from the end of the corridor, where Harry is located, to the place of the second meeting of the spell impulses. Your answer will be considered correct if its absolute or relative error will not exceed 10^{ - 4}. \nNamely: let's assume that your answer equals a, and the answer of the jury is b. The checker program will consider your answer correct if $\\frac{|a - b|}{\\operatorname{max}(1, b)} \\leq 10^{-4}$.\n-----Examples-----\nInput\n100\n50\n50\nOutput\n50\nInput\n199\n60\n40\nOutput\n119.4\n-----Note-----\nIn the first sample the speeds of the impulses are equal, so both of their meetings occur exactly in the middle of the corridor.\n\ndef",
        "answer": "def distance(l, p, q):\n    return l / (p + q)",
        "difficulty": "interview"
    },
    {
        "task_id": 520,
        "prompt": "Complete the Python function given the prompt below:There is the faculty of Computer Science in Berland. In the social net \"TheContact!\" for each course of this faculty there is the special group whose name equals the year of university entrance of corresponding course of students at the university. \nEach of students joins the group of his course and joins all groups for which the year of student's university entrance differs by no more than x from the year of university entrance of this student, where x \u2014 some non-negative integer. A value x is not given, but it can be uniquely determined from the available data. Note that students don't join other groups. \nYou are given the list of groups which the student Igor joined. According to this information you need to determine the year of Igor's university entrance.\n-----Input-----\nThe first line contains the positive odd integer n (1 \u2264 n \u2264 5) \u2014 the number of groups which Igor joined. \nThe next line contains n distinct integers a_1, a_2,..., a_{n} (2010 \u2264 a_{i} \u2264 2100) \u2014 years of student's university entrance for each group in which Igor is the member.\nIt is guaranteed that the input data is correct and the answer always exists. Groups are given randomly.\n-----Output-----\nPrint the year of Igor's university entrance. \n-----Examples-----\nInput\n3\n2014 2016 2015\nOutput\n2015\nInput\n1\n2050\nOutput\n2050\n-----Note-----\nIn the first test the value x = 1. Igor entered the university in 2015. So he joined groups members of which are students who entered the university in 2014, 2015 and 2016.\nIn the second test the value x = 0. Igor entered only the group which corresponds to the year of his university entrance.\n\ndef",
        "answer": "def year_of_university_entrance(groups):\n    return min(groups)",
        "difficulty": "interview"
    },
    {
        "task_id": 521,
        "prompt": "Complete the Python function given the prompt below:Overlooking the captivating blend of myriads of vernal hues, Arkady the painter lays out a long, long canvas.\nArkady has a sufficiently large amount of paint of three colours: cyan, magenta, and yellow. On the one-dimensional canvas split into n consecutive segments, each segment needs to be painted in one of the colours.\nArkady has already painted some (possibly none or all) segments and passes the paintbrush to you. You are to determine whether there are at least two ways of colouring all the unpainted segments so that no two adjacent segments are of the same colour. Two ways are considered different if and only if a segment is painted in different colours in them.\n-----Input-----\nThe first line contains a single positive integer n (1 \u2264 n \u2264 100)\u00a0\u2014 the length of the canvas.\nThe second line contains a string s of n characters, the i-th of which is either 'C' (denoting a segment painted in cyan), 'M' (denoting one painted in magenta), 'Y' (one painted in yellow), or '?' (an unpainted one).\n-----Output-----\nIf there are at least two different ways of painting, output \"Yes\"; otherwise output \"No\" (both without quotes).\nYou can print each character in any case (upper or lower).\n-----Examples-----\nInput\n5\nCY??Y\nOutput\nYes\nInput\n5\nC?C?Y\nOutput\nYes\nInput\n5\n?CYC?\nOutput\nYes\nInput\n5\nC??MM\nOutput\nNo\nInput\n3\nMMY\nOutput\nNo\n-----Note-----\nFor the first example, there are exactly two different ways of colouring: CYCMY and CYMCY.\nFor the second example, there are also exactly two different ways of colouring: CMCMY and CYCMY.\nFor the third example, there are four ways of colouring: MCYCM, MCYCY, YCYCM, and YCYCY.\nFor the fourth example, no matter how the unpainted segments are coloured, the existing magenta segments will prevent the painting from satisfying the requirements. The similar is true for the fifth example.\n\ndef",
        "answer": "def paint_colors(s):\n    if '?' in s:\n        return 'Yes'\n    else:\n        return 'No'",
        "difficulty": "interview"
    },
    {
        "task_id": 522,
        "prompt": "Complete the Python function given the prompt below:Let $f_{x} = c^{2x-6} \\cdot f_{x-1} \\cdot f_{x-2} \\cdot f_{x-3}$ for $x \\ge 4$.\nYou have given integers $n$, $f_{1}$, $f_{2}$, $f_{3}$, and $c$. Find $f_{n} \\bmod (10^{9}+7)$.\n-----Input-----\nThe only line contains five integers $n$, $f_{1}$, $f_{2}$, $f_{3}$, and $c$ ($4 \\le n \\le 10^{18}$, $1 \\le f_{1}$, $f_{2}$, $f_{3}$, $c \\le 10^{9}$).\n-----Output-----\nPrint $f_{n} \\bmod (10^{9} + 7)$.\n-----Examples-----\nInput\n5 1 2 5 3\nOutput\n72900\nInput\n17 97 41 37 11\nOutput\n317451037\n-----Note-----\nIn the first example, $f_{4} = 90$, $f_{5} = 72900$.\nIn the second example, $f_{17} \\approx 2.28 \\times 10^{29587}$.\n\ndef",
        "answer": "def f(n, f1, f2, f3, c):\n    if n == 1:\n        return f1\n    elif n == 2:\n        return f2\n    elif n == 3:\n        return f3\n    else:\n        return f(n-1, f1, f2, f3, c) * f(n-2, f1, f2, f3, c) * f(n-3, f1, f2, f3, c) % (10**9 + 7)",
        "difficulty": "interview"
    },
    {
        "task_id": 523,
        "prompt": "Complete the Python function given the prompt below:Returning back to problem solving, Gildong is now studying about palindromes. He learned that a palindrome is a string that is the same as its reverse. For example, strings \"pop\", \"noon\", \"x\", and \"kkkkkk\" are palindromes, while strings \"moon\", \"tv\", and \"abab\" are not. An empty string is also a palindrome.\nGildong loves this concept so much, so he wants to play with it. He has $n$ distinct strings of equal length $m$. He wants to discard some of the strings (possibly none or all) and reorder the remaining strings so that the concatenation becomes a palindrome. He also wants the palindrome to be as long as possible. Please help him find one.\n-----Input-----\nThe first line contains two integers $n$ and $m$ ($1 \\le n \\le 100$, $1 \\le m \\le 50$) \u2014 the number of strings and the length of each string.\nNext $n$ lines contain a string of length $m$ each, consisting of lowercase Latin letters only. All strings are distinct.\n-----Output-----\nIn the first line, print the length of the longest palindrome string you made.\nIn the second line, print that palindrome. If there are multiple answers, print any one of them. If the palindrome is empty, print an empty line or don't print this line at all.\n-----Examples-----\nInput\n3 3\ntab\none\nbat\nOutput\n6\ntabbat\nInput\n4 2\noo\nox\nxo\nxx\nOutput\n6\noxxxxo\nInput\n3 5\nhello\ncodef\norces\nOutput\n0\nInput\n9 4\nabab\nbaba\nabcd\nbcde\ncdef\ndefg\nwxyz\nzyxw\nijji\nOutput\n20\nababwxyzijjizyxwbaba\n-----Note-----\nIn the first example, \"battab\" is also a valid answer.\nIn the second example, there can be 4 different valid answers including the sample output. We are not going to provide any hints for what the others are.\nIn the third example, the empty string is the only valid palindrome string.\n\ndef",
        "answer": "def palindrome(s):\n    if len(s) == 0:\n        return 0\n    if len(s) == 1:\n        return 1\n    if len(s) == 2:\n        if s[0] == s[1]:\n            return 2\n        else:\n            return 1\n    if s[0] == s[-1]:\n        return palindrome(s[1:-1]) + 2\n    else:\n        return max(palindrome(s[1:]), palindrome(s[:-1]))",
        "difficulty": "interview"
    },
    {
        "task_id": 524,
        "prompt": "Complete the Python function given the prompt below:Let's call a list of positive integers $a_0, a_1,..., a_{n-1}$ a power sequence if there is a positive integer $c$, so that for every $0 \\le i \\le n-1$ then $a_i = c^i$.\nGiven a list of $n$ positive integers $a_0, a_1,..., a_{n-1}$, you are allowed to:  Reorder the list (i.e. pick a permutation $p$ of $\\{0,1,...,n - 1\\}$ and change $a_i$ to $a_{p_i}$), then  Do the following operation any number of times: pick an index $i$ and change $a_i$ to $a_i - 1$ or $a_i + 1$ (i.e. increment or decrement $a_i$ by $1$) with a cost of $1$. \nFind the minimum cost to transform $a_0, a_1,..., a_{n-1}$ into a power sequence.\n-----Input-----\nThe first line contains an integer $n$ ($3 \\le n \\le 10^5$).\nThe second line contains $n$ integers $a_0, a_1,..., a_{n-1}$ ($1 \\le a_i \\le 10^9$).\n-----Output-----\nPrint the minimum cost to transform $a_0, a_1,..., a_{n-1}$ into a power sequence.\n-----Examples-----\nInput\n3\n1 3 2\nOutput\n1\nInput\n3\n1000000000 1000000000 1000000000\nOutput\n1999982505\n-----Note-----\nIn the first example, we first reorder $\\{1, 3, 2\\}$ into $\\{1, 2, 3\\}$, then increment $a_2$ to $4$ with cost $1$ to get a power sequence $\\{1, 2, 4\\}$.\n\ndef",
        "answer": "def min_cost(a):\n    n = len(a)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 0\n    for i in range(n - 1):\n        dp[i][i + 1] = abs(a[i] - a[i + 1])\n    for l in range(2, n):\n        for i in range(n - l):\n            j = i + l\n            for k in range(i, j):\n                dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j] + abs(a[i] - a[j]))\n    return dp[0][n - 1]",
        "difficulty": "interview"
    },
    {
        "task_id": 525,
        "prompt": "Complete the Python function given the prompt below:Lord Omkar has permitted you to enter the Holy Church of Omkar! To test your worthiness, Omkar gives you a password which you must interpret!\nA password is an array $a$ of $n$ positive integers. You apply the following operation to the array: pick any two adjacent numbers that are not equal to each other and replace them with their sum. Formally, choose an index $i$ such that $1 \\leq i < n$ and $a_{i} \\neq a_{i+1}$, delete both $a_i$ and $a_{i+1}$ from the array and put $a_{i}+a_{i+1}$ in their place. \nFor example, for array $[7, 4, 3, 7]$ you can choose $i = 2$ and the array will become $[7, 4+3, 7] = [7, 7, 7]$. Note that in this array you can't apply this operation anymore.\nNotice that one operation will decrease the size of the password by $1$. What is the shortest possible length of the password after some number (possibly $0$) of operations?\n-----Input-----\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 100$). Description of the test cases follows.\nThe first line of each test case contains an integer $n$ ($1 \\leq n \\leq 2 \\cdot 10^5$)\u00a0\u2014 the length of the password.\nThe second line of each test case contains $n$ integers $a_{1},a_{2},\\dots,a_{n}$ ($1 \\leq a_{i} \\leq 10^9$)\u00a0\u2014 the initial contents of your password.\nThe sum of $n$ over all test cases will not exceed $2 \\cdot 10^5$.\n-----Output-----\nFor each password, print one integer: the shortest possible length of the password after some number of operations.\n-----Example-----\nInput\n2\n4\n2 1 3 1\n2\n420 420\nOutput\n1\n2\n-----Note-----\nIn the first test case, you can do the following to achieve a length of $1$:\nPick $i=2$ to get $[2, 4, 1]$\nPick $i=1$ to get $[6, 1]$\nPick $i=1$ to get $[7]$\nIn the second test case, you can't perform any operations because there is no valid $i$ that satisfies the requirements mentioned above.\n\ndef",
        "answer": "def password_length(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        ",
        "difficulty": "interview"
    },
    {
        "task_id": 526,
        "prompt": "Complete the Python function given the prompt below:Student Dima from Kremland has a matrix $a$ of size $n \\times m$ filled with non-negative integers.\nHe wants to select exactly one integer from each row of the matrix so that the bitwise exclusive OR of the selected integers is strictly greater than zero. Help him!\nFormally, he wants to choose an integers sequence $c_1, c_2, \\ldots, c_n$ ($1 \\leq c_j \\leq m$) so that the inequality $a_{1, c_1} \\oplus a_{2, c_2} \\oplus \\ldots \\oplus a_{n, c_n} > 0$ holds, where $a_{i, j}$ is the matrix element from the $i$-th row and the $j$-th column.\nHere $x \\oplus y$ denotes the bitwise XOR operation of integers $x$ and $y$.\n-----Input-----\nThe first line contains two integers $n$ and $m$ ($1 \\leq n, m \\leq 500$)\u00a0\u2014 the number of rows and the number of columns in the matrix $a$.\nEach of the next $n$ lines contains $m$ integers: the $j$-th integer in the $i$-th line is the $j$-th element of the $i$-th row of the matrix $a$, i.e. $a_{i, j}$ ($0 \\leq a_{i, j} \\leq 1023$). \n-----Output-----\nIf there is no way to choose one integer from each row so that their bitwise exclusive OR is strictly greater than zero, print \"NIE\".\nOtherwise print \"TAK\" in the first line, in the next line print $n$ integers $c_1, c_2, \\ldots c_n$ ($1 \\leq c_j \\leq m$), so that the inequality $a_{1, c_1} \\oplus a_{2, c_2} \\oplus \\ldots \\oplus a_{n, c_n} > 0$ holds. \nIf there is more than one possible answer, you may output any.\n-----Examples-----\nInput\n3 2\n0 0\n0 0\n0 0\nOutput\nNIE\nInput\n2 3\n7 7 7\n7 7 10\nOutput\nTAK\n1 3 \n-----Note-----\nIn the first example, all the numbers in the matrix are $0$, so it is impossible to select one number in each row of the table so that their bitwise exclusive OR is strictly greater than zero.\nIn the second example, the selected numbers are $7$ (the first number in the first line) and $10$ (the third number in the second line), $7 \\oplus 10 = 13$, $13$ is more than $0$, so the answer is found.\n\ndef",
        "answer": "def exor(a):\n    n, m = len(a), len(a[0])\n    for i in range(n):\n        for j in range(m):\n            for k in range(m):\n                if a[i][j] ^ a[i][k] > 0:\n                    return True\n    return False",
        "difficulty": "interview"
    },
    {
        "task_id": 527,
        "prompt": "Complete the Python function given the prompt below:Given are two strings s and t consisting of lowercase English letters. Determine if there exists an integer i satisfying the following condition, and find the minimum such i if it exists.\n - Let s' be the concatenation of 10^{100} copies of s. t is a subsequence of the string {s'}_1{s'}_2\\ldots{s'}_i (the first i characters in s').\n-----Notes-----\n - A subsequence of a string a is a string obtained by deleting zero or more characters from a and concatenating the remaining characters without changing the relative order. For example, the subsequences of contest include net, c, and contest.\n-----Constraints-----\n - 1 \\leq |s| \\leq 10^5\n - 1 \\leq |t| \\leq 10^5\n - s and t consists of lowercase English letters.\n-----Input-----\nInput is given from Standard Input in the following format:\ns\nt\n-----Output-----\nIf there exists an integer i satisfying the following condition, print the minimum such i; otherwise, print -1.\n-----Sample Input-----\ncontest\nson\n-----Sample Output-----\n10\nt = son is a subsequence of the string contestcon (the first 10 characters in s' = contestcontestcontest...), so i = 10 satisfies the condition.\nOn the other hand, t is not a subsequence of the string contestco (the first 9 characters in s'), so i = 9 does not satisfy the condition.\nSimilarly, any integer less than 9 does not satisfy the condition, either. Thus, the minimum integer i satisfying the condition is 10.\n\ndef",
        "answer": "def isSubsequence(s, t):\n    # Write your code here\n    if len(s) > len(t):\n        return False\n    i = 0\n    j = 0\n    while i < len(s) and j < len(t):\n        if s[i] == t[j]:\n            i += 1\n        j += 1\n    return i == len(s)",
        "difficulty": "interview"
    },
    {
        "task_id": 528,
        "prompt": "Complete the Python function given the prompt below:Bear Limak examines a social network. Its main functionality is that two members can become friends (then they can talk with each other and share funny pictures).\nThere are n members, numbered 1 through n. m pairs of members are friends. Of course, a member can't be a friend with themselves.\nLet A-B denote that members A and B are friends. Limak thinks that a network is reasonable if and only if the following condition is satisfied: For every three distinct members (X, Y, Z), if X-Y and Y-Z then also X-Z.\nFor example: if Alan and Bob are friends, and Bob and Ciri are friends, then Alan and Ciri should be friends as well.\nCan you help Limak and check if the network is reasonable? Print \"YES\" or \"NO\" accordingly, without the quotes.\n-----Input-----\nThe first line of the input contain two integers n and m (3 \u2264 n \u2264 150 000, $0 \\leq m \\leq \\operatorname{min}(150000, \\frac{n \\cdot(n - 1)}{2})$)\u00a0\u2014 the number of members and the number of pairs of members that are friends.\nThe i-th of the next m lines contains two distinct integers a_{i} and b_{i} (1 \u2264 a_{i}, b_{i} \u2264 n, a_{i} \u2260 b_{i}). Members a_{i} and b_{i} are friends with each other. No pair of members will appear more than once in the input.\n-----Output-----\nIf the given network is reasonable, print \"YES\" in a single line (without the quotes). Otherwise, print \"NO\" in a single line (without the quotes).\n-----Examples-----\nInput\n4 3\n1 3\n3 4\n1 4\nOutput\nYES\nInput\n4 4\n3 1\n2 3\n3 4\n1 2\nOutput\nNO\nInput\n10 4\n4 3\n5 10\n8 9\n1 2\nOutput\nYES\nInput\n3 2\n1 2\n2 3\nOutput\nNO\n-----Note-----\nThe drawings below show the situation in the first sample (on the left) and in the second sample (on the right). Each edge represents two members that are friends. The answer is \"NO\" in the second sample because members (2, 3) are friends and members (3, 4) are friends, while members (2, 4) are not.\n [Image]\n\ndef",
        "answer": "def areFriends(n, m, edges):\n    # Write your code here\n    graph = {}\n    for i in range(1, n+1):\n        graph[i] = set()\n    for edge in edges:\n        graph[edge[0]].add(edge[1])\n        graph[edge[1]].add(edge[0])\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if j in graph[i] and i in graph[j]:\n                return \"YES\"\n    return \"NO\"",
        "difficulty": "interview"
    },
    {
        "task_id": 529,
        "prompt": "Complete the Python function given the prompt below:[Image] \n-----Input-----\nThe first line of the input is a string (between 1 and 50 characters long, inclusive). Each character will be a letter of English alphabet, lowercase or uppercase.\nThe second line of the input is an integer between 0 and 26, inclusive.\n-----Output-----\nOutput the required string.\n-----Examples-----\nInput\nAprilFool\n14\nOutput\nAprILFooL\n\ndef",
        "answer": "def print_string(s, n):\n    return s[:n]",
        "difficulty": "interview"
    },
    {
        "task_id": 530,
        "prompt": "Complete the Python function given the prompt below:Yaroslav, Andrey and Roman can play cubes for hours and hours. But the game is for three, so when Roman doesn't show up, Yaroslav and Andrey play another game. \nRoman leaves a word for each of them. Each word consists of 2\u00b7n binary characters \"0\" or \"1\". After that the players start moving in turns. Yaroslav moves first. During a move, a player must choose an integer from 1 to 2\u00b7n, which hasn't been chosen by anybody up to that moment. Then the player takes a piece of paper and writes out the corresponding character from his string. \nLet's represent Yaroslav's word as s = s_1s_2... s_2n. Similarly, let's represent Andrey's word as t = t_1t_2... t_2n. Then, if Yaroslav choose number k during his move, then he is going to write out character s_{k} on the piece of paper. Similarly, if Andrey choose number r during his move, then he is going to write out character t_{r} on the piece of paper.\nThe game finishes when no player can make a move. After the game is over, Yaroslav makes some integer from the characters written on his piece of paper (Yaroslav can arrange these characters as he wants). Andrey does the same. The resulting numbers can contain leading zeroes. The person with the largest number wins. If the numbers are equal, the game ends with a draw.\nYou are given two strings s and t. Determine the outcome of the game provided that Yaroslav and Andrey play optimally well.\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 10^6). The second line contains string s \u2014 Yaroslav's word. The third line contains string t \u2014 Andrey's word.\nIt is guaranteed that both words consist of 2\u00b7n characters \"0\" and \"1\".\n-----Output-----\nPrint \"First\", if both players play optimally well and Yaroslav wins. If Andrey wins, print \"Second\" and if the game ends with a draw, print \"Draw\". Print the words without the quotes.\n-----Examples-----\nInput\n2\n0111\n0001\nOutput\nFirst\nInput\n3\n110110\n001001\nOutput\nFirst\nInput\n3\n111000\n000111\nOutput\nDraw\nInput\n4\n01010110\n00101101\nOutput\nFirst\nInput\n4\n01100000\n10010011\nOutput\nSecond\n\ndef",
        "answer": "def solve(s, t):\n  return \"First\" if s.count(\"1\") > t.count(\"1\") else \"Second\" if s.count(\"1\") < t.count(\"1\") else \"Draw\"",
        "difficulty": "interview"
    },
    {
        "task_id": 531,
        "prompt": "Complete the Python function given the prompt below:Anya and Kirill are doing a physics laboratory work. In one of the tasks they have to measure some value n times, and then compute the average value to lower the error.\nKirill has already made his measurements, and has got the following integer values: x_1, x_2,..., x_{n}. It is important that the values are close to each other, namely, the difference between the maximum value and the minimum value is at most 2.\nAnya does not want to make the measurements, however, she can't just copy the values from Kirill's work, because the error of each measurement is a random value, and this coincidence will be noted by the teacher. Anya wants to write such integer values y_1, y_2,..., y_{n} in her work, that the following conditions are met:  the average value of x_1, x_2,..., x_{n} is equal to the average value of y_1, y_2,..., y_{n}; all Anya's measurements are in the same bounds as all Kirill's measurements, that is, the maximum value among Anya's values is not greater than the maximum value among Kirill's values, and the minimum value among Anya's values is not less than the minimum value among Kirill's values; the number of equal measurements in Anya's work and Kirill's work is as small as possible among options with the previous conditions met. Formally, the teacher goes through all Anya's values one by one, if there is equal value in Kirill's work and it is not strike off yet, he strikes off this Anya's value and one of equal values in Kirill's work. The number of equal measurements is then the total number of strike off values in Anya's work. \nHelp Anya to write such a set of measurements that the conditions above are met.\n-----Input-----\nThe first line contains a single integer n (1 \u2264 n \u2264 100 000) \u2014 the numeber of measurements made by Kirill.\nThe second line contains a sequence of integers x_1, x_2,..., x_{n} ( - 100 000 \u2264 x_{i} \u2264 100 000) \u2014 the measurements made by Kirill. It is guaranteed that the difference between the maximum and minimum values among values x_1, x_2,..., x_{n} does not exceed 2.\n-----Output-----\nIn the first line print the minimum possible number of equal measurements.\nIn the second line print n integers y_1, y_2,..., y_{n} \u2014 the values Anya should write. You can print the integers in arbitrary order. Keep in mind that the minimum value among Anya's values should be not less that the minimum among Kirill's values, and the maximum among Anya's values should be not greater than the maximum among Kirill's values.\nIf there are multiple answers, print any of them. \n-----Examples-----\nInput\n6\n-1 1 1 0 0 -1\nOutput\n2\n0 0 0 0 0 0 \nInput\n3\n100 100 101\nOutput\n3\n101 100 100 \nInput\n7\n-10 -9 -10 -8 -10 -9 -9\nOutput\n5\n-10 -10 -9 -9 -9 -9 -9 \n-----Note-----\nIn the first example Anya can write zeros as here measurements results. The average value is then equal to the average value of Kirill's values, and there are only two equal measurements.\nIn the second example Anya should write two values 100 and one value 101 (in any order), because it is the only possibility to make the average be the equal to the average of Kirill's values. Thus, all three measurements are equal.\nIn the third example the number of equal measurements is 5.\n\ndef",
        "answer": "def Anya(n, x):\n    x.sort()\n    min_diff = 2\n    for i in range(n):\n        if x[i] - x[0] <= min_diff:\n            min_diff = x[i] - x[0]\n    for i in range(n):\n        if x[i] - x[0] == min_diff:\n            print(x[i], end=\" \")",
        "difficulty": "interview"
    },
    {
        "task_id": 532,
        "prompt": "Complete the Python function given the prompt below:Grigoriy, like the hero of one famous comedy film, found a job as a night security guard at the museum. At first night he received embosser and was to take stock of the whole exposition.\nEmbosser is a special devise that allows to \"print\" the text of a plastic tape. Text is printed sequentially, character by character. The device consists of a wheel with a lowercase English letters written in a circle, static pointer to the current letter and a button that print the chosen letter. At one move it's allowed to rotate the alphabetic wheel one step clockwise or counterclockwise. Initially, static pointer points to letter 'a'. Other letters are located as shown on the picture: [Image] \nAfter Grigoriy add new item to the base he has to print its name on the plastic tape and attach it to the corresponding exhibit. It's not required to return the wheel to its initial position with pointer on the letter 'a'.\nOur hero is afraid that some exhibits may become alive and start to attack him, so he wants to print the names as fast as possible. Help him, for the given string find the minimum number of rotations of the wheel required to print it.\n-----Input-----\nThe only line of input contains the name of some exhibit\u00a0\u2014 the non-empty string consisting of no more than 100 characters. It's guaranteed that the string consists of only lowercase English letters.\n-----Output-----\nPrint one integer\u00a0\u2014 the minimum number of rotations of the wheel, required to print the name given in the input.\n-----Examples-----\nInput\nzeus\nOutput\n18\nInput\nmap\nOutput\n35\nInput\nares\nOutput\n34\n-----Note-----\n\u00a0 [Image] \nTo print the string from the first sample it would be optimal to perform the following sequence of rotations:   from 'a' to 'z' (1 rotation counterclockwise),  from 'z' to 'e' (5 clockwise rotations),  from 'e' to 'u' (10 rotations counterclockwise),  from 'u' to's' (2 counterclockwise rotations).  In total, 1 + 5 + 10 + 2 = 18 rotations are required.\n\ndef",
        "answer": "def rotations(s):\n    return min(ord(s[-1]) - ord('a'), ord('z') - ord(s[0]) + 1)",
        "difficulty": "interview"
    },
    {
        "task_id": 533,
        "prompt": "Complete the Python function given the prompt below:The final match of the Berland Football Cup has been held recently. The referee has shown $n$ yellow cards throughout the match. At the beginning of the match there were $a_1$ players in the first team and $a_2$ players in the second team.\nThe rules of sending players off the game are a bit different in Berland football. If a player from the first team receives $k_1$ yellow cards throughout the match, he can no longer participate in the match \u2014 he's sent off. And if a player from the second team receives $k_2$ yellow cards, he's sent off. After a player leaves the match, he can no longer receive any yellow cards. Each of $n$ yellow cards was shown to exactly one player. Even if all players from one team (or even from both teams) leave the match, the game still continues.\nThe referee has lost his records on who has received each yellow card. Help him to determine the minimum and the maximum number of players that could have been thrown out of the game.\n-----Input-----\nThe first line contains one integer $a_1$ $(1 \\le a_1 \\le 1\\,000)$ \u2014 the number of players in the first team.\nThe second line contains one integer $a_2$ $(1 \\le a_2 \\le 1\\,000)$ \u2014 the number of players in the second team.\nThe third line contains one integer $k_1$ $(1 \\le k_1 \\le 1\\,000)$ \u2014 the maximum number of yellow cards a player from the first team can receive (after receiving that many yellow cards, he leaves the game).\nThe fourth line contains one integer $k_2$ $(1 \\le k_2 \\le 1\\,000)$ \u2014 the maximum number of yellow cards a player from the second team can receive (after receiving that many yellow cards, he leaves the game).\nThe fifth line contains one integer $n$ $(1 \\le n \\le a_1 \\cdot k_1 + a_2 \\cdot k_2)$ \u2014 the number of yellow cards that have been shown during the match.\n-----Output-----\nPrint two integers \u2014 the minimum and the maximum number of players that could have been thrown out of the game.\n-----Examples-----\nInput\n2\n3\n5\n1\n8\nOutput\n0 4\nInput\n3\n1\n6\n7\n25\nOutput\n4 4\nInput\n6\n4\n9\n10\n89\nOutput\n5 9\n-----Note-----\nIn the first example it could be possible that no player left the game, so the first number in the output is $0$. The maximum possible number of players that could have been forced to leave the game is $4$ \u2014 one player from the first team, and three players from the second.\nIn the second example the maximum possible number of yellow cards has been shown $(3 \\cdot 6 + 1 \\cdot 7 = 25)$, so in any case all players were sent off.\n\ndef",
        "answer": "def yellow_cards(a1, a2, k1, k2, n):\n    return min(a1 - k1, a2 - k2), max(a1 - k1, a2 - k2)",
        "difficulty": "interview"
    },
    {
        "task_id": 534,
        "prompt": "Complete the Python function given the prompt below:During the break the schoolchildren, boys and girls, formed a queue of n people in the canteen. Initially the children stood in the order they entered the canteen. However, after a while the boys started feeling awkward for standing in front of the girls in the queue and they started letting the girls move forward each second. \nLet's describe the process more precisely. Let's say that the positions in the queue are sequentially numbered by integers from 1 to n, at that the person in the position number 1 is served first. Then, if at time x a boy stands on the i-th position and a girl stands on the (i + 1)-th position, then at time x + 1 the i-th position will have a girl and the (i + 1)-th position will have a boy. The time is given in seconds.\nYou've got the initial position of the children, at the initial moment of time. Determine the way the queue is going to look after t seconds.\n-----Input-----\nThe first line contains two integers n and t (1 \u2264 n, t \u2264 50), which represent the number of children in the queue and the time after which the queue will transform into the arrangement you need to find. \nThe next line contains string s, which represents the schoolchildren's initial arrangement. If the i-th position in the queue contains a boy, then the i-th character of string s equals \"B\", otherwise the i-th character equals \"G\".\n-----Output-----\nPrint string a, which describes the arrangement after t seconds. If the i-th position has a boy after the needed time, then the i-th character a must equal \"B\", otherwise it must equal \"G\".\n-----Examples-----\nInput\n5 1\nBGGBG\nOutput\nGBGGB\nInput\n5 2\nBGGBG\nOutput\nGGBGB\nInput\n4 1\nGGGB\nOutput\nGGGB\n\ndef",
        "answer": "def queue_simulation(n, t, s):\n    queue = list(s)\n    for i in range(t):\n        for j in range(n):\n            if queue[j] == 'B':\n                queue[j] = 'G'\n            else:\n                queue[j] = 'B'\n    return ''.join(queue)",
        "difficulty": "interview"
    },
    {
        "task_id": 535,
        "prompt": "Complete the Python function given the prompt below:Makoto has a big blackboard with a positive integer $n$ written on it. He will perform the following action exactly $k$ times:\nSuppose the number currently written on the blackboard is $v$. He will randomly pick one of the divisors of $v$ (possibly $1$ and $v$) and replace $v$ with this divisor. As Makoto uses his famous random number generator (RNG) and as he always uses $58$ as his generator seed, each divisor is guaranteed to be chosen with equal probability.\nHe now wonders what is the expected value of the number written on the blackboard after $k$ steps.\nIt can be shown that this value can be represented as $\\frac{P}{Q}$ where $P$ and $Q$ are coprime integers and $Q \\not\\equiv 0 \\pmod{10^9+7}$. Print the value of $P \\cdot Q^{-1}$ modulo $10^9+7$.\n-----Input-----\nThe only line of the input contains two integers $n$ and $k$ ($1 \\leq n \\leq 10^{15}$, $1 \\leq k \\leq 10^4$).\n-----Output-----\nPrint a single integer \u2014 the expected value of the number on the blackboard after $k$ steps as $P \\cdot Q^{-1} \\pmod{10^9+7}$ for $P$, $Q$ defined above.\n-----Examples-----\nInput\n6 1\nOutput\n3\nInput\n6 2\nOutput\n875000008\nInput\n60 5\nOutput\n237178099\n-----Note-----\nIn the first example, after one step, the number written on the blackboard is $1$, $2$, $3$ or $6$ \u2014 each occurring with equal probability. Hence, the answer is $\\frac{1+2+3+6}{4}=3$.\nIn the second example, the answer is equal to $1 \\cdot \\frac{9}{16}+2 \\cdot \\frac{3}{16}+3 \\cdot \\frac{3}{16}+6 \\cdot \\frac{1}{16}=\\frac{15}{8}$.\n\ndef",
        "answer": "def coprime(a, b):\n    if a == 1 or b == 1:\n        return True\n    else:\n        while a!= 0 and b!= 0:\n            if a > b:\n                a = a % b\n            else:\n                b = b % a\n        if a + b == 1:\n            return True\n        else:\n            return False",
        "difficulty": "interview"
    },
    {
        "task_id": 536,
        "prompt": "Complete the Python function given the prompt below:Now it's time of Olympiads. Vanya and Egor decided to make his own team to take part in a programming Olympiad. They've been best friends ever since primary school and hopefully, that can somehow help them in teamwork.\nFor each team Olympiad, Vanya takes his play cards with numbers. He takes only the cards containing numbers 1 and 0. The boys are very superstitious. They think that they can do well at the Olympiad if they begin with laying all the cards in a row so that:  there wouldn't be a pair of any side-adjacent cards with zeroes in a row;  there wouldn't be a group of three consecutive cards containing numbers one. \nToday Vanya brought n cards with zeroes and m cards with numbers one. The number of cards was so much that the friends do not know how to put all those cards in the described way. Help them find the required arrangement of the cards or else tell the guys that it is impossible to arrange cards in such a way.\n-----Input-----\nThe first line contains two integers: n (1 \u2264 n \u2264 10^6) \u2014 the number of cards containing number 0; m (1 \u2264 m \u2264 10^6) \u2014 the number of cards containing number 1.\n-----Output-----\nIn a single line print the required sequence of zeroes and ones without any spaces. If such sequence is impossible to obtain, print -1.\n-----Examples-----\nInput\n1 2\nOutput\n101\nInput\n4 8\nOutput\n110110110101\nInput\n4 10\nOutput\n11011011011011\nInput\n1 5\nOutput\n-1\n\ndef",
        "answer": "def check(n,m):\n    if m==0:\n        return True\n    if n==0:\n        return False\n    if m==1:\n        return True\n    if n==1:\n        return True\n    if m==2:\n        return n%2==0\n    if m==3:\n        return n%3==0\n    if m==4:\n        return n%4==0\n    if m==5:\n        return n%5==0\n    if m==6:\n        return n%6==0\n    if m==7:\n        return n%7==0\n    if m==8:\n        return n%8==0\n    if m==9:\n        return n%9==0\n    if m==10:\n        return n%10==0\n    if m==11:\n        return n%11==0\n    if m==12:\n        return n%12==0\n    if m==13:\n        return n%13==0\n    if m==14:\n        return n%14==0\n    if m==15:\n        return n%15==0\n    if m==16:\n        return n%16==0\n    if m==17:\n        return n%17==0\n    if m==18:\n        return n%18==0\n    if m==19:\n        return n%19==0\n    if m==20:\n        return n%20==0\n    if m==21:\n        return n%21==0\n    if m==22:\n        return n%22==0\n    if m==23:\n        return n%23==0\n    if m==24:\n        return n%24==0\n    if m==",
        "difficulty": "interview"
    },
    {
        "task_id": 537,
        "prompt": "Complete the Python function given the prompt below:There are n students who have taken part in an olympiad. Now it's time to award the students.\nSome of them will receive diplomas, some wiil get certificates, and others won't receive anything. Students with diplomas and certificates are called winners. But there are some rules of counting the number of diplomas and certificates. The number of certificates must be exactly k times greater than the number of diplomas. The number of winners must not be greater than half of the number of all students (i.e. not be greater than half of n). It's possible that there are no winners.\nYou have to identify the maximum possible number of winners, according to these rules. Also for this case you have to calculate the number of students with diplomas, the number of students with certificates and the number of students who are not winners.\n-----Input-----\nThe first (and the only) line of input contains two integers n and k (1 \u2264 n, k \u2264 10^12), where n is the number of students and k is the ratio between the number of certificates and the number of diplomas.\n-----Output-----\nOutput three numbers: the number of students with diplomas, the number of students with certificates and the number of students who are not winners in case when the number of winners is maximum possible.\nIt's possible that there are no winners.\n-----Examples-----\nInput\n18 2\nOutput\n3 6 9\nInput\n9 10\nOutput\n0 0 9\nInput\n1000000000000 5\nOutput\n83333333333 416666666665 500000000002\nInput\n1000000000000 499999999999\nOutput\n1 499999999999 500000000000\n\ndef",
        "answer": "def winner(n, k):\n    return n - (n // 2) * k",
        "difficulty": "interview"
    },
    {
        "task_id": 538,
        "prompt": "Complete the Python function given the prompt below:Let quasi-palindromic number be such number that adding some leading zeros (possible none) to it produces a palindromic string. \nString t is called a palindrome, if it reads the same from left to right and from right to left.\nFor example, numbers 131 and 2010200 are quasi-palindromic, they can be transformed to strings \"131\" and \"002010200\", respectively, which are palindromes.\nYou are given some integer number x. Check if it's a quasi-palindromic number.\n-----Input-----\nThe first line contains one integer number x (1 \u2264 x \u2264 10^9). This number is given without any leading zeroes.\n-----Output-----\nPrint \"YES\" if number x is quasi-palindromic. Otherwise, print \"NO\" (without quotes).\n-----Examples-----\nInput\n131\nOutput\nYES\nInput\n320\nOutput\nNO\nInput\n2010200\nOutput\nYES\n\ndef",
        "answer": "def is_quasi_palindromic(x):\n    x = str(x)\n    if x == x[::-1]:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "difficulty": "interview"
    },
    {
        "task_id": 539,
        "prompt": "Complete the Python function given the prompt below:Imp is in a magic forest, where xorangles grow (wut?)\n [Image] \nA xorangle of order n is such a non-degenerate triangle, that lengths of its sides are integers not exceeding n, and the xor-sum of the lengths is equal to zero. Imp has to count the number of distinct xorangles of order n to get out of the forest. \nFormally, for a given integer n you have to find the number of such triples (a, b, c), that:\n  1 \u2264 a \u2264 b \u2264 c \u2264 n;  $a \\oplus b \\oplus c = 0$, where $x \\oplus y$ denotes the bitwise xor of integers x and y.  (a, b, c) form a non-degenerate (with strictly positive area) triangle. \n-----Input-----\nThe only line contains a single integer n (1 \u2264 n \u2264 2500).\n-----Output-----\nPrint the number of xorangles of order n.\n-----Examples-----\nInput\n6\nOutput\n1\nInput\n10\nOutput\n2\n-----Note-----\nThe only xorangle in the first sample is (3, 5, 6).\n\ndef",
        "answer": "def xorangles(n):\n    return n * (n - 1) * (n - 2) // 6",
        "difficulty": "interview"
    },
    {
        "task_id": 540,
        "prompt": "Complete the Python function given the prompt below:You play a computer game. Your character stands on some level of a multilevel ice cave. In order to move on forward, you need to descend one level lower and the only way to do this is to fall through the ice.\nThe level of the cave where you are is a rectangular square grid of n rows and m columns. Each cell consists either from intact or from cracked ice. From each cell you can move to cells that are side-adjacent with yours (due to some limitations of the game engine you cannot make jumps on the same place, i.e. jump from a cell to itself). If you move to the cell with cracked ice, then your character falls down through it and if you move to the cell with intact ice, then the ice on this cell becomes cracked.\nLet's number the rows with integers from 1 to n from top to bottom and the columns with integers from 1 to m from left to right. Let's denote a cell on the intersection of the r-th row and the c-th column as (r, c). \nYou are staying in the cell (r_1, c_1) and this cell is cracked because you've just fallen here from a higher level. You need to fall down through the cell (r_2, c_2) since the exit to the next level is there. Can you do this?\n-----Input-----\nThe first line contains two integers, n and m (1 \u2264 n, m \u2264 500)\u00a0\u2014 the number of rows and columns in the cave description.\nEach of the next n lines describes the initial state of the level of the cave, each line consists of m characters \".\" (that is, intact ice) and \"X\" (cracked ice).\nThe next line contains two integers, r_1 and c_1 (1 \u2264 r_1 \u2264 n, 1 \u2264 c_1 \u2264 m)\u00a0\u2014 your initial coordinates. It is guaranteed that the description of the cave contains character 'X' in cell (r_1, c_1), that is, the ice on the starting cell is initially cracked.\nThe next line contains two integers r_2 and c_2 (1 \u2264 r_2 \u2264 n, 1 \u2264 c_2 \u2264 m)\u00a0\u2014 the coordinates of the cell through which you need to fall. The final cell may coincide with the starting one.\n-----Output-----\nIf you can reach the destination, print 'YES', otherwise print 'NO'.\n-----Examples-----\nInput\n4 6\nX...XX\n...XX.\n.X..X.\n......\n1 6\n2 2\nOutput\nYES\nInput\n5 4\n.X..\n...X\nX.X.\n....\n.XX.\n5 3\n1 1\nOutput\nNO\nInput\n4 7\n..X.XX.\n.XX..X.\nX...X..\nX......\n2 2\n1 6\nOutput\nYES\n-----Note-----\nIn the first sample test one possible path is:\n[Image]\nAfter the first visit of cell (2, 2) the ice on it cracks and when you step there for the second time, your character falls through the ice as intended.\n\ndef",
        "answer": "def ice_cracker(n, m, r_1, c_1, r_2, c_2):\n    # Write your code here\n    if r_1 == r_2 and c_1 == c_2:\n        return 'YES'\n    if r_1 == r_2 and c_1!= c_2:\n        return 'NO'\n    if r_1!= r_2 and c_1 == c_2:\n        return 'NO'\n    if r_1!= r_2 and c_1!= c_2:\n        return 'NO'\n    if r_1 == r_2 and c_1 == c_2:\n        return 'YES'\n    if r_1 == r_2 and c_1!= c_2:\n        return 'YES'\n    if r_1!= r_2 and c_1 == c_2:\n        return 'YES'\n    if r_1!= r_2 and c_1!= c_2:\n        return 'NO'",
        "difficulty": "interview"
    },
    {
        "task_id": 541,
        "prompt": "Complete the Python function given the prompt below:There are N islands lining up from west to east, connected by N-1 bridges.\nThe i-th bridge connects the i-th island from the west and the (i+1)-th island from the west.\nOne day, disputes took place between some islands, and there were M requests from the inhabitants of the islands:\nRequest i: A dispute took place between the a_i-th island from the west and the b_i-th island from the west. Please make traveling between these islands with bridges impossible.\nYou decided to remove some bridges to meet all these M requests.\nFind the minimum number of bridges that must be removed.\n-----Constraints-----\n - All values in input are integers.\n - 2 \\leq N \\leq 10^5\n - 1 \\leq M \\leq 10^5\n - 1 \\leq a_i < b_i \\leq N\n - All pairs (a_i, b_i) are distinct.\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\na_1 b_1\na_2 b_2\n:\na_M b_M\n-----Output-----\nPrint the minimum number of bridges that must be removed.\n-----Sample Input-----\n5 2\n1 4\n2 5\n-----Sample Output-----\n1\nThe requests can be met by removing the bridge connecting the second and third islands from the west.\n\ndef",
        "answer": "def solve(n, m, a):\n    a.sort()\n    ans = 0\n    for i in range(1, n):\n        ans += abs(a[i] - a[i - 1]) - 1\n    return ans",
        "difficulty": "interview"
    },
    {
        "task_id": 542,
        "prompt": "Complete the Python function given the prompt below:Vasya has become interested in wrestling. In wrestling wrestlers use techniques for which they are awarded points by judges. The wrestler who gets the most points wins.\nWhen the numbers of points of both wrestlers are equal, the wrestler whose sequence of points is lexicographically greater, wins.\nIf the sequences of the awarded points coincide, the wrestler who performed the last technique wins. Your task is to determine which wrestler won.\n-----Input-----\nThe first line contains number n \u2014 the number of techniques that the wrestlers have used (1 \u2264 n \u2264 2\u00b710^5). \nThe following n lines contain integer numbers a_{i} (|a_{i}| \u2264 10^9, a_{i} \u2260 0). If a_{i} is positive, that means that the first wrestler performed the technique that was awarded with a_{i} points. And if a_{i} is negative, that means that the second wrestler performed the technique that was awarded with ( - a_{i}) points.\nThe techniques are given in chronological order.\n-----Output-----\nIf the first wrestler wins, print string \"first\", otherwise print \"second\"\n-----Examples-----\nInput\n5\n1\n2\n-3\n-4\n3\nOutput\nsecond\nInput\n3\n-1\n-2\n3\nOutput\nfirst\nInput\n2\n4\n-4\nOutput\nsecond\n-----Note-----\nSequence x  =  x_1x_2... x_{|}x| is lexicographically larger than sequence y  =  y_1y_2... y_{|}y|, if either |x|  >  |y| and x_1  =  y_1,  x_2  =  y_2,...,  x_{|}y|  =  y_{|}y|, or there is such number r (r  <  |x|, r  <  |y|), that x_1  =  y_1,  x_2  =  y_2, ...,  x_{r}  =  y_{r} and x_{r}  +  1  >  y_{r}  +  1.\nWe use notation |a| to denote length of sequence a.\n\ndef",
        "answer": "def solution(n, a):\n    # write your code in Python 3.6\n    a.sort()\n    if a[0] > 0:\n        return \"first\"\n    else:\n        return \"second\"\n",
        "difficulty": "interview"
    },
    {
        "task_id": 543,
        "prompt": "Complete the Python function given the prompt below:The programming competition season has already started and it's time to train for ICPC. Sereja coaches his teams for a number of year and he knows that to get ready for the training session it's not enough to prepare only problems and editorial. As the training sessions lasts for several hours, teams become hungry. Thus, Sereja orders a number of pizzas so they can eat right after the end of the competition.\nTeams plan to train for n times during n consecutive days. During the training session Sereja orders exactly one pizza for each team that is present this day. He already knows that there will be a_{i} teams on the i-th day.\nThere are two types of discounts in Sereja's favourite pizzeria. The first discount works if one buys two pizzas at one day, while the second is a coupon that allows to buy one pizza during two consecutive days (two pizzas in total).\nAs Sereja orders really a lot of pizza at this place, he is the golden client and can use the unlimited number of discounts and coupons of any type at any days.\nSereja wants to order exactly a_{i} pizzas on the i-th day while using only discounts and coupons. Note, that he will never buy more pizzas than he need for this particular day. Help him determine, whether he can buy the proper amount of pizzas each day if he is allowed to use only coupons and discounts. Note, that it's also prohibited to have any active coupons after the end of the day n.\n-----Input-----\nThe first line of input contains a single integer n (1 \u2264 n \u2264 200 000)\u00a0\u2014 the number of training sessions.\nThe second line contains n integers a_1, a_2,..., a_{n} (0 \u2264 a_{i} \u2264 10 000)\u00a0\u2014 the number of teams that will be present on each of the days.\n-----Output-----\nIf there is a way to order pizzas using only coupons and discounts and do not buy any extra pizzas on any of the days, then print \"YES\" (without quotes) in the only line of output. Otherwise, print \"NO\" (without quotes).\n-----Examples-----\nInput\n4\n1 2 1 2\nOutput\nYES\nInput\n3\n1 0 1\nOutput\nNO\n-----Note-----\nIn the first sample, Sereja can use one coupon to buy one pizza on the first and the second days, one coupon to buy pizza on the second and the third days and one discount to buy pizzas on the fourth days. This is the only way to order pizzas for this sample.\nIn the second sample, Sereja can't use neither the coupon nor the discount without ordering an extra pizza. Note, that it's possible that there will be no teams attending the training sessions on some days.\n\ndef",
        "answer": "def solve(n, a):\n    if n == 1:\n        return \"YES\" if a[0] == 1 else \"NO\"\n    if n == 2:\n        return \"YES\" if a[0] == 1 and a[1] == 1 else \"NO\"\n    if n == 3:\n        return \"YES\" if a[0] == 1 and a[1] == 1 and a[2] == 1 else \"NO\"\n    if n == 4:\n        return \"YES\" if a[0] == 1 and a[1] == 1 and a[2] == 1 and a[3] == 1 else \"NO\"\n    if n == 5:\n        return \"YES\" if a[0] == 1 and a[1] == 1 and a[2] == 1 and a[3] == 1 and a[4] == 1 else \"NO\"\n    if n == 6:\n        return \"YES\" if a[0] == 1 and a[1] == 1 and a[2] == 1 and a[3] == 1 and a[4] == 1 and a[5] == 1 else \"NO\"\n    if n == 7:\n        return \"YES\" if a[0] == 1 and a[1] == 1 and a[2] == 1 and a[3] == 1 and a[4] == 1 and a[5] == 1 and a[6] == 1 else \"NO\"\n    if n == 8:\n        return \"YES\" if a[0] == 1 and a[1] == 1 and a[2] == 1 and a[3] == 1 and a[4] == 1 and a[5] == 1 and a[6] == 1 and a[7] == 1 else \"NO\"\n    if n == 9",
        "difficulty": "interview"
    },
    {
        "task_id": 544,
        "prompt": "Complete the Python function given the prompt below:You are given a string $s$ consisting of $n$ lowercase Latin letters. $n$ is even.\nFor each position $i$ ($1 \\le i \\le n$) in string $s$ you are required to change the letter on this position either to the previous letter in alphabetic order or to the next one (letters 'a' and 'z' have only one of these options). Letter in every position must be changed exactly once.\nFor example, letter 'p' should be changed either to 'o' or to 'q', letter 'a' should be changed to 'b' and letter 'z' should be changed to 'y'.\nThat way string \"codeforces\", for example, can be changed to \"dpedepqbft\" ('c' $\\rightarrow$ 'd', 'o' $\\rightarrow$ 'p', 'd' $\\rightarrow$ 'e', 'e' $\\rightarrow$ 'd', 'f' $\\rightarrow$ 'e', 'o' $\\rightarrow$ 'p', 'r' $\\rightarrow$ 'q', 'c' $\\rightarrow$ 'b', 'e' $\\rightarrow$ 'f','s' $\\rightarrow$ 't').\nString $s$ is called a palindrome if it reads the same from left to right and from right to left. For example, strings \"abba\" and \"zz\" are palindromes and strings \"abca\" and \"zy\" are not.\nYour goal is to check if it's possible to make string $s$ a palindrome by applying the aforementioned changes to every position. Print \"YES\" if string $s$ can be transformed to a palindrome and \"NO\" otherwise.\nEach testcase contains several strings, for each of them you are required to solve the problem separately.\n-----Input-----\nThe first line contains a single integer $T$ ($1 \\le T \\le 50$) \u2014 the number of strings in a testcase.\nThen $2T$ lines follow \u2014 lines $(2i - 1)$ and $2i$ of them describe the $i$-th string. The first line of the pair contains a single integer $n$ ($2 \\le n \\le 100$, $n$ is even) \u2014 the length of the corresponding string. The second line of the pair contains a string $s$, consisting of $n$ lowercase Latin letters.\n-----Output-----\nPrint $T$ lines. The $i$-th line should contain the answer to the $i$-th string of the input. Print \"YES\" if it's possible to make the $i$-th string a palindrome by applying the aforementioned changes to every position. Print \"NO\" otherwise.\n-----Example-----\nInput\n5\n6\nabccba\n2\ncf\n4\nadfa\n8\nabaazaba\n2\nml\nOutput\nYES\nNO\nYES\nNO\nNO\n-----Note-----\nThe first string of the example can be changed to \"bcbbcb\", two leftmost letters and two rightmost letters got changed to the next letters, two middle letters got changed to the previous letters.\nThe second string can be changed to \"be\", \"bg\", \"de\", \"dg\", but none of these resulting strings are palindromes.\nThe third string can be changed to \"beeb\" which is a palindrome.\nThe fifth string can be changed to \"lk\", \"lm\", \"nk\", \"nm\", but none of these resulting strings are palindromes. Also note that no letter can remain the same, so you can't obtain strings \"ll\" or \"mm\".\n\ndef",
        "answer": "def palindrome(s):\n    for i in range(len(s)):\n        if s[i]!= s[len(s)-1-i]:\n            return False\n    return True",
        "difficulty": "interview"
    },
    {
        "task_id": 545,
        "prompt": "Complete the Python function given the prompt below:Marina loves strings of the same length and Vasya loves when there is a third string, different from them in exactly t characters. Help Vasya find at least one such string.\nMore formally, you are given two strings s_1, s_2 of length n and number t. Let's denote as f(a, b) the number of characters in which strings a and b are different. Then your task will be to find any string s_3 of length n, such that f(s_1, s_3) = f(s_2, s_3) = t. If there is no such string, print  - 1.\n-----Input-----\nThe first line contains two integers n and t (1 \u2264 n \u2264 10^5, 0 \u2264 t \u2264 n).\nThe second line contains string s_1 of length n, consisting of lowercase English letters.\nThe third line contain string s_2 of length n, consisting of lowercase English letters.\n-----Output-----\nPrint a string of length n, differing from string s_1 and from s_2 in exactly t characters. Your string should consist only from lowercase English letters. If such string doesn't exist, print -1.\n-----Examples-----\nInput\n3 2\nabc\nxyc\nOutput\nayd\nInput\n1 0\nc\nb\nOutput\n-1\n\ndef",
        "answer": "def f(a, b):\n    return sum(a[i]!= b[i] for i in range(len(a)))",
        "difficulty": "interview"
    },
    {
        "task_id": 546,
        "prompt": "Complete the Python function given the prompt below:It's hard times now. Today Petya needs to score 100 points on Informatics exam. The tasks seem easy to Petya, but he thinks he lacks time to finish them all, so he asks you to help with one..\nThere is a glob pattern in the statements (a string consisting of lowercase English letters, characters \"?\" and \"*\"). It is known that character \"*\" occurs no more than once in the pattern.\nAlso, n query strings are given, it is required to determine for each of them if the pattern matches it or not.\nEverything seemed easy to Petya, but then he discovered that the special pattern characters differ from their usual meaning.\nA pattern matches a string if it is possible to replace each character \"?\" with one good lowercase English letter, and the character \"*\" (if there is one) with any, including empty, string of bad lowercase English letters, so that the resulting string is the same as the given string.\nThe good letters are given to Petya. All the others are bad.\n-----Input-----\nThe first line contains a string with length from 1 to 26 consisting of distinct lowercase English letters. These letters are good letters, all the others are bad.\nThe second line contains the pattern\u00a0\u2014 a string s of lowercase English letters, characters \"?\" and \"*\" (1 \u2264 |s| \u2264 10^5). It is guaranteed that character \"*\" occurs in s no more than once.\nThe third line contains integer n (1 \u2264 n \u2264 10^5)\u00a0\u2014 the number of query strings.\nn lines follow, each of them contains single non-empty string consisting of lowercase English letters\u00a0\u2014 a query string.\nIt is guaranteed that the total length of all query strings is not greater than 10^5.\n-----Output-----\nPrint n lines: in the i-th of them print \"YES\" if the pattern matches the i-th query string, and \"NO\" otherwise.\nYou can choose the case (lower or upper) for each letter arbitrary.\n-----Examples-----\nInput\nab\na?a\n2\naaa\naab\nOutput\nYES\nNO\nInput\nabc\na?a?a*\n4\nabacaba\nabaca\napapa\naaaaax\nOutput\nNO\nYES\nNO\nYES\n-----Note-----\nIn the first example we can replace \"?\" with good letters \"a\" and \"b\", so we can see that the answer for the first query is \"YES\", and the answer for the second query is \"NO\", because we can't match the third letter.\nExplanation of the second example.   The first query: \"NO\", because character \"*\" can be replaced with a string of bad letters only, but the only way to match the query string is to replace it with the string \"ba\", in which both letters are good.  The second query: \"YES\", because characters \"?\" can be replaced with corresponding good letters, and character \"*\" can be replaced with empty string, and the strings will coincide.  The third query: \"NO\", because characters \"?\" can't be replaced with bad letters.  The fourth query: \"YES\", because characters \"?\" can be replaced with good letters \"a\", and character \"*\" can be replaced with a string of bad letters \"x\".\n\ndef",
        "answer": "def solve(s, p):\n    for i in range(len(p)):\n        if p[i] == '*':\n            continue\n        elif p[i]!= s[i]:\n            return 'NO'\n    return 'YES'",
        "difficulty": "interview"
    },
    {
        "task_id": 547,
        "prompt": "Complete the Python function given the prompt below:Vanya is managed to enter his favourite site Codehorses. Vanya uses n distinct passwords for sites at all, however he can't remember which one exactly he specified during Codehorses registration.\nVanya will enter passwords in order of non-decreasing their lengths, and he will enter passwords of same length in arbitrary order. Just when Vanya will have entered the correct password, he is immediately authorized on the site. Vanya will not enter any password twice.\nEntering any passwords takes one second for Vanya. But if Vanya will enter wrong password k times, then he is able to make the next try only 5 seconds after that. Vanya makes each try immediately, that is, at each moment when Vanya is able to enter password, he is doing that.\nDetermine how many seconds will Vanya need to enter Codehorses in the best case for him (if he spends minimum possible number of second) and in the worst case (if he spends maximum possible amount of seconds).\n-----Input-----\nThe first line of the input contains two integers n and k (1 \u2264 n, k \u2264 100)\u00a0\u2014 the number of Vanya's passwords and the number of failed tries, after which the access to the site is blocked for 5 seconds.\nThe next n lines contains passwords, one per line\u00a0\u2014 pairwise distinct non-empty strings consisting of latin letters and digits. Each password length does not exceed 100 characters.\nThe last line of the input contains the Vanya's Codehorses password. It is guaranteed that the Vanya's Codehorses password is equal to some of his n passwords.\n-----Output-----\nPrint two integers\u00a0\u2014 time (in seconds), Vanya needs to be authorized to Codehorses in the best case for him and in the worst case respectively.\n-----Examples-----\nInput\n5 2\ncba\nabc\nbb1\nabC\nABC\nabc\nOutput\n1 15\nInput\n4 100\n11\n22\n1\n2\n22\nOutput\n3 4\n-----Note-----\nConsider the first sample case. As soon as all passwords have the same length, Vanya can enter the right password at the first try as well as at the last try. If he enters it at the first try, he spends exactly 1 second. Thus in the best case the answer is 1. If, at the other hand, he enters it at the last try, he enters another 4 passwords before. He spends 2 seconds to enter first 2 passwords, then he waits 5 seconds as soon as he made 2 wrong tries. Then he spends 2 more seconds to enter 2 wrong passwords, again waits 5 seconds and, finally, enters the correct password spending 1 more second. In summary in the worst case he is able to be authorized in 15 seconds.\nConsider the second sample case. There is no way of entering passwords and get the access to the site blocked. As soon as the required password has length of 2, Vanya enters all passwords of length 1 anyway, spending 2 seconds for that. Then, in the best case, he immediately enters the correct password and the answer for the best case is 3, but in the worst case he enters wrong password of length 2 and only then the right one, spending 4 seconds at all.\n\ndef",
        "answer": "def main():\n    n, k = map(int, input().split())\n    passwords = []\n    for i in range(n):\n        passwords.append(input())\n    password = input()\n    time = 0\n    for i in range(n):\n        if len(passwords[i]) == len(password):\n            time += 1\n        elif len(passwords[i]) > len(password):\n            time += len(passwords[i]) - len(password)\n        else:\n            time += len(password) - len(passwords[i])\n    print(time, time + k * 5)",
        "difficulty": "interview"
    },
    {
        "task_id": 548,
        "prompt": "Complete the Python function given the prompt below:Leha somehow found an array consisting of n integers. Looking at it, he came up with a task. Two players play the game on the array. Players move one by one. The first player can choose for his move a subsegment of non-zero length with an odd sum of numbers and remove it from the array, after that the remaining parts are glued together into one array and the game continues. The second player can choose a subsegment of non-zero length with an even sum and remove it. Loses the one who can not make a move. Who will win if both play optimally?\n-----Input-----\nFirst line of input data contains single integer n (1 \u2264 n \u2264 10^6) \u2014 length of the array.\nNext line contains n integers a_1, a_2,..., a_{n} (0 \u2264 a_{i} \u2264 10^9).\n-----Output-----\nOutput answer in single line. \"First\", if first player wins, and \"Second\" otherwise (without quotes).\n-----Examples-----\nInput\n4\n1 3 2 3\nOutput\nFirst\nInput\n2\n2 2\nOutput\nSecond\n-----Note-----\nIn first sample first player remove whole array in one move and win.\nIn second sample first player can't make a move and lose.\n\ndef",
        "answer": "def who_wins(arr):\n    if sum(arr) % 2 == 0:\n        return \"Second\"\n    else:\n        return \"First\"",
        "difficulty": "interview"
    },
    {
        "task_id": 549,
        "prompt": "Complete the Python function given the prompt below:A big company decided to launch a new series of rectangular displays, and decided that the display must have exactly n pixels. \nYour task is to determine the size of the rectangular display \u2014 the number of lines (rows) of pixels a and the number of columns of pixels b, so that:\n  there are exactly n pixels on the display;  the number of rows does not exceed the number of columns, it means a \u2264 b;  the difference b - a is as small as possible. \n-----Input-----\nThe first line contains the positive integer n (1 \u2264 n \u2264 10^6)\u00a0\u2014 the number of pixels display should have.\n-----Output-----\nPrint two integers\u00a0\u2014 the number of rows and columns on the display. \n-----Examples-----\nInput\n8\nOutput\n2 4\nInput\n64\nOutput\n8 8\nInput\n5\nOutput\n1 5\nInput\n999999\nOutput\n999 1001\n-----Note-----\nIn the first example the minimum possible difference equals 2, so on the display should be 2 rows of 4 pixels.\nIn the second example the minimum possible difference equals 0, so on the display should be 8 rows of 8 pixels.\nIn the third example the minimum possible difference equals 4, so on the display should be 1 row of 5 pixels.\n\ndef",
        "answer": "def display_size(n):\n    a = 1\n    b = n\n    while a < b:\n        if n % a == 0:\n            b = n // a\n            break\n        a += 1\n    return a, b",
        "difficulty": "interview"
    },
    {
        "task_id": 550,
        "prompt": "Complete the Python function given the prompt below:When registering in a social network, users are allowed to create their own convenient login to make it easier to share contacts, print it on business cards, etc.\nLogin is an arbitrary sequence of lower and uppercase latin letters, digits and underline symbols (\u00ab_\u00bb). However, in order to decrease the number of frauds and user-inattention related issues, it is prohibited to register a login if it is similar with an already existing login. More precisely, two logins s and t are considered similar if we can transform s to t via a sequence of operations of the following types:   transform lowercase letters to uppercase and vice versa;  change letter \u00abO\u00bb (uppercase latin letter) to digit \u00ab0\u00bb and vice versa;  change digit \u00ab1\u00bb (one) to any letter among \u00abl\u00bb (lowercase latin \u00abL\u00bb), \u00abI\u00bb (uppercase latin \u00abi\u00bb) and vice versa, or change one of these letters to other. \nFor example, logins \u00abCodeforces\u00bb and \u00abcodef0rces\u00bb as well as \u00abOO0OOO00O0OOO0O00OOO0OO_lol\u00bb and \u00abOO0OOO0O00OOO0O00OO0OOO_1oI\u00bb are considered similar whereas \u00abCodeforces\u00bb and \u00abCode_forces\u00bb are not.\nYou're given a list of existing logins with no two similar amonst and a newly created user login. Check whether this new login is similar with any of the existing ones.\n-----Input-----\nThe first line contains a non-empty string s consisting of lower and uppercase latin letters, digits and underline symbols (\u00ab_\u00bb) with length not exceeding 50 \u00a0\u2014 the login itself.\nThe second line contains a single integer n (1 \u2264 n \u2264 1 000)\u00a0\u2014 the number of existing logins.\nThe next n lines describe the existing logins, following the same constraints as the user login (refer to the first line of the input). It's guaranteed that no two existing logins are similar.\n-----Output-----\nPrint \u00abYes\u00bb (without quotes), if user can register via this login, i.e. none of the existing logins is similar with it.\nOtherwise print \u00abNo\u00bb (without quotes).\n-----Examples-----\nInput\n1_wat\n2\n2_wat\nwat_1\nOutput\nYes\nInput\n000\n3\n00\nooA\noOo\nOutput\nNo\nInput\n_i_\n3\n__i_\n_1_\nI\nOutput\nNo\nInput\nLa0\n3\n2a0\nLa1\n1a0\nOutput\nNo\nInput\nabc\n1\naBc\nOutput\nNo\nInput\n0Lil\n2\nLIL0\n0Ril\nOutput\nYes\n-----Note-----\nIn the second sample case the user wants to create a login consisting of three zeros. It's impossible due to collision with the third among the existing.\nIn the third sample case the new login is similar with the second one.\n\ndef",
        "answer": "def check_login(s):\n    for i in range(len(s)):\n        if s[i] == '_':\n            s = s[:i] + s[i+1:]\n        elif s[i].isupper():\n            s = s[:i] + s[i].lower() + s[i+1:]\n        elif s[i].islower():\n            s = s[:i] + s[i].upper() + s[i+1:]\n        elif s[i] == '0':\n            s = s[:i] + 'O' + s[i+1:]\n        elif s[i] == 'O':\n            s = s[:i] + '0' + s[i+1:]\n        elif s[i] == '1':\n            s = s[:i] + 'l' + s[i+1:]\n        elif s[i] == 'l':\n            s = s[:i] + '1' + s[i+1:]\n        elif s[i] == 'I':\n            s = s[:i] + 'i' + s[i+1:]\n        elif s[i] == 'i':\n            s = s[:i] + 'I' + s[i+1:]\n    return s",
        "difficulty": "interview"
    },
    {
        "task_id": 551,
        "prompt": "Complete the Python function given the prompt below:Connect the countless points with lines, till we reach the faraway yonder.\nThere are n points on a coordinate plane, the i-th of which being (i, y_{i}).\nDetermine whether it's possible to draw two parallel and non-overlapping lines, such that every point in the set lies on exactly one of them, and each of them passes through at least one point in the set.\n-----Input-----\nThe first line of input contains a positive integer n (3 \u2264 n \u2264 1 000) \u2014 the number of points.\nThe second line contains n space-separated integers y_1, y_2,..., y_{n} ( - 10^9 \u2264 y_{i} \u2264 10^9) \u2014 the vertical coordinates of each point.\n-----Output-----\nOutput \"Yes\" (without quotes) if it's possible to fulfill the requirements, and \"No\" otherwise.\nYou can print each letter in any case (upper or lower).\n-----Examples-----\nInput\n5\n7 5 8 6 9\nOutput\nYes\nInput\n5\n-1 -2 0 0 -5\nOutput\nNo\nInput\n5\n5 4 3 2 1\nOutput\nNo\nInput\n5\n1000000000 0 0 0 0\nOutput\nYes\n-----Note-----\nIn the first example, there are five points: (1, 7), (2, 5), (3, 8), (4, 6) and (5, 9). It's possible to draw a line that passes through points 1, 3, 5, and another one that passes through points 2, 4 and is parallel to the first one.\nIn the second example, while it's possible to draw two lines that cover all points, they cannot be made parallel.\nIn the third example, it's impossible to satisfy both requirements at the same time.\n\ndef",
        "answer": "def check(n, y):\n    if n == 1:\n        return True\n    if n == 2:\n        return abs(y[0] - y[1]) == 1\n    if n == 3:\n        return abs(y[0] - y[1]) == 1 and abs(y[1] - y[2]) == 1\n    if n == 4:\n        return abs(y[0] - y[1]) == 1 and abs(y[1] - y[2]) == 1 and abs(y[2] - y[3]) == 1\n    if n == 5:\n        return abs(y[0] - y[1]) == 1 and abs(y[1] - y[2]) == 1 and abs(y[2] - y[3]) == 1 and abs(y[3] - y[4]) == 1\n    if n == 6:\n        return abs(y[0] - y[1]) == 1 and abs(y[1] - y[2]) == 1 and abs(y[2] - y[3]) == 1 and abs(y[3] - y[4]) == 1 and abs(y[4] - y[5]) == 1\n    if n == 7:\n        return abs(y[0] - y[1]) == 1 and abs(y[1] - y[2]) == 1 and abs(y[2] - y[3]) == 1 and abs(y[3] - y[4]) == 1 and abs(y[4] - y[5]) == 1 and abs(y[5] - y[6]) == 1\n    if n == 8:\n        return abs(y[0] - y[1]) == 1 and abs(y[1] - y[2])",
        "difficulty": "interview"
    },
    {
        "task_id": 552,
        "prompt": "Complete the Python function given the prompt below:Vasya had three strings $a$, $b$ and $s$, which consist of lowercase English letters. The lengths of strings $a$ and $b$ are equal to $n$, the length of the string $s$ is equal to $m$. \nVasya decided to choose a substring of the string $a$, then choose a substring of the string $b$ and concatenate them. Formally, he chooses a segment $[l_1, r_1]$ ($1 \\leq l_1 \\leq r_1 \\leq n$) and a segment $[l_2, r_2]$ ($1 \\leq l_2 \\leq r_2 \\leq n$), and after concatenation he obtains a string $a[l_1, r_1] + b[l_2, r_2] = a_{l_1} a_{l_1 + 1} \\ldots a_{r_1} b_{l_2} b_{l_2 + 1} \\ldots b_{r_2}$.\nNow, Vasya is interested in counting number of ways to choose those segments adhering to the following conditions:\n  segments $[l_1, r_1]$ and $[l_2, r_2]$ have non-empty intersection, i.e. there exists at least one integer $x$, such that $l_1 \\leq x \\leq r_1$ and $l_2 \\leq x \\leq r_2$;  the string $a[l_1, r_1] + b[l_2, r_2]$ is equal to the string $s$. \n-----Input-----\nThe first line contains integers $n$ and $m$ ($1 \\leq n \\leq 500\\,000, 2 \\leq m \\leq 2 \\cdot n$)\u00a0\u2014 the length of strings $a$ and $b$ and the length of the string $s$.\nThe next three lines contain strings $a$, $b$ and $s$, respectively. The length of the strings $a$ and $b$ is $n$, while the length of the string $s$ is $m$.\nAll strings consist of lowercase English letters.\n-----Output-----\nPrint one integer\u00a0\u2014 the number of ways to choose a pair of segments, which satisfy Vasya's conditions.\n-----Examples-----\nInput\n6 5\naabbaa\nbaaaab\naaaaa\nOutput\n4\nInput\n5 4\nazaza\nzazaz\nazaz\nOutput\n11\nInput\n9 12\nabcabcabc\nxyzxyzxyz\nabcabcayzxyz\nOutput\n2\n-----Note-----\nLet's list all the pairs of segments that Vasya could choose in the first example:\n  $[2, 2]$ and $[2, 5]$;  $[1, 2]$ and $[2, 4]$;  $[5, 5]$ and $[2, 5]$;  $[5, 6]$ and $[3, 5]$;\n\ndef",
        "answer": "def count_pairs(a, b, s):\n    n = len(a)\n    m = len(b)\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if i + j <= n and a[i:i+j] in b and a[i:i+j] in s:\n                count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 553,
        "prompt": "Complete the Python function given the prompt below:During a New Year special offer the \"Sudislavl Bars\" offered n promo codes. Each promo code consists of exactly six digits and gives right to one free cocktail at the bar \"Mosquito Shelter\". Of course, all the promocodes differ.\nAs the \"Mosquito Shelter\" opens only at 9, and partying in Sudislavl usually begins at as early as 6, many problems may arise as to how to type a promotional code without errors. It is necessary to calculate such maximum k, that the promotional code could be uniquely identified if it was typed with no more than k errors. At that, k = 0 means that the promotional codes must be entered exactly.\nA mistake in this problem should be considered as entering the wrong numbers. For example, value \"123465\" contains two errors relative to promocode \"123456\". Regardless of the number of errors the entered value consists of exactly six digits.\n-----Input-----\nThe first line of the output contains number n (1 \u2264 n \u2264 1000)\u00a0\u2014 the number of promocodes.\nEach of the next n lines contains a single promocode, consisting of exactly 6 digits. It is guaranteed that all the promocodes are distinct. Promocodes can start from digit \"0\".\n-----Output-----\nPrint the maximum k (naturally, not exceeding the length of the promocode), such that any promocode can be uniquely identified if it is typed with at most k mistakes.\n-----Examples-----\nInput\n2\n000000\n999999\nOutput\n2\nInput\n6\n211111\n212111\n222111\n111111\n112111\n121111\nOutput\n0\n-----Note-----\nIn the first sample k < 3, so if a bar customer types in value \"090909\", then it will be impossible to define which promocode exactly corresponds to it.\n\ndef",
        "answer": "def check_promo(promo_code):\n    promo_code = str(promo_code)\n    if len(promo_code)!= 6:\n        return False\n    if promo_code[0] == '0':\n        return False\n    if promo_code[0] == promo_code[1] or promo_code[0] == promo_code[2] or promo_code[0] == promo_code[3] or promo_code[0] == promo_code[4] or promo_code[0] == promo_code[5]:\n        return False\n    if promo_code[1] == promo_code[2] or promo_code[1] == promo_code[3] or promo_code[1] == promo_code[4] or promo_code[1] == promo_code[5]:\n        return False\n    if promo_code[2] == promo_code[3] or promo_code[2] == promo_code[4] or promo_code[2] == promo_code[5]:\n        return False\n    if promo_code[3] == promo_code[4] or promo_code[3] == promo_code[5]:\n        return False\n    if promo_code[4] == promo_code[5]:\n        return False\n    return True",
        "difficulty": "interview"
    },
    {
        "task_id": 554,
        "prompt": "Complete the Python function given the prompt below:Little Alyona is celebrating Happy Birthday! Her mother has an array of n flowers. Each flower has some mood, the mood of i-th flower is a_{i}. The mood can be positive, zero or negative.\nLet's define a subarray as a segment of consecutive flowers. The mother suggested some set of subarrays. Alyona wants to choose several of the subarrays suggested by her mother. After that, each of the flowers will add to the girl's happiness its mood multiplied by the number of chosen subarrays the flower is in.\nFor example, consider the case when the mother has 5 flowers, and their moods are equal to 1,  - 2, 1, 3,  - 4. Suppose the mother suggested subarrays (1,  - 2), (3,  - 4), (1, 3), (1,  - 2, 1, 3). Then if the girl chooses the third and the fourth subarrays then:   the first flower adds 1\u00b71 = 1 to the girl's happiness, because he is in one of chosen subarrays,  the second flower adds ( - 2)\u00b71 =  - 2, because he is in one of chosen subarrays,  the third flower adds 1\u00b72 = 2, because he is in two of chosen subarrays,  the fourth flower adds 3\u00b72 = 6, because he is in two of chosen subarrays,  the fifth flower adds ( - 4)\u00b70 = 0, because he is in no chosen subarrays. \nThus, in total 1 + ( - 2) + 2 + 6 + 0 = 7 is added to the girl's happiness. Alyona wants to choose such subarrays from those suggested by the mother that the value added to her happiness would be as large as possible. Help her do this!\nAlyona can choose any number of the subarrays, even 0 or all suggested by her mother.\n-----Input-----\nThe first line contains two integers n and m (1 \u2264 n, m \u2264 100)\u00a0\u2014 the number of flowers and the number of subarrays suggested by the mother.\nThe second line contains the flowers moods\u00a0\u2014 n integers a_1, a_2,..., a_{n} ( - 100 \u2264 a_{i} \u2264 100).\nThe next m lines contain the description of the subarrays suggested by the mother. The i-th of these lines contain two integers l_{i} and r_{i} (1 \u2264 l_{i} \u2264 r_{i} \u2264 n) denoting the subarray a[l_{i}], a[l_{i} + 1],..., a[r_{i}].\nEach subarray can encounter more than once.\n-----Output-----\nPrint single integer\u00a0\u2014 the maximum possible value added to the Alyona's happiness.\n-----Examples-----\nInput\n5 4\n1 -2 1 3 -4\n1 2\n4 5\n3 4\n1 4\nOutput\n7\nInput\n4 3\n1 2 3 4\n1 3\n2 4\n1 1\nOutput\n16\nInput\n2 2\n-1 -2\n1 1\n1 2\nOutput\n0\n-----Note-----\nThe first example is the situation described in the statements.\nIn the second example Alyona should choose all subarrays.\nThe third example has answer 0 because Alyona can choose none of the subarrays.\n\ndef",
        "answer": "def max_happiness(n, m, arr):\n    arr.sort()\n    happiness = 0\n    for i in range(m):\n        l, r = arr[i]\n        happiness += sum(arr[i]) * (r - l + 1)\n    return happiness",
        "difficulty": "interview"
    },
    {
        "task_id": 555,
        "prompt": "Complete the Python function given the prompt below:Luke Skywalker gave Chewbacca an integer number x. Chewbacca isn't good at numbers but he loves inverting digits in them. Inverting digit t means replacing it with digit 9 - t. \nHelp Chewbacca to transform the initial number x to the minimum possible positive number by inverting some (possibly, zero) digits. The decimal representation of the final number shouldn't start with a zero.\n-----Input-----\nThe first line contains a single integer x (1 \u2264 x \u2264 10^18) \u2014 the number that Luke Skywalker gave to Chewbacca.\n-----Output-----\nPrint the minimum possible positive number that Chewbacca can obtain after inverting some digits. The number shouldn't contain leading zeroes.\n-----Examples-----\nInput\n27\nOutput\n22\nInput\n4545\nOutput\n4444\n\ndef",
        "answer": "def invert(x):\n    return int(str(x)[::-1])",
        "difficulty": "interview"
    },
    {
        "task_id": 556,
        "prompt": "Complete the Python function given the prompt below:Programmer Rostislav got seriously interested in the Link/Cut Tree data structure, which is based on Splay trees. Specifically, he is now studying the expose procedure.\nUnfortunately, Rostislav is unable to understand the definition of this procedure, so he decided to ask programmer Serezha to help him. Serezha agreed to help if Rostislav solves a simple task (and if he doesn't, then why would he need Splay trees anyway?)\nGiven integers l, r and k, you need to print all powers of number k within range from l to r inclusive. However, Rostislav doesn't want to spent time doing this, as he got interested in playing a network game called Agar with Gleb. Help him!\n-----Input-----\nThe first line of the input contains three space-separated integers l, r and k (1 \u2264 l \u2264 r \u2264 10^18, 2 \u2264 k \u2264 10^9).\n-----Output-----\nPrint all powers of number k, that lie within range from l to r in the increasing order. If there are no such numbers, print \"-1\" (without the quotes).\n-----Examples-----\nInput\n1 10 2\nOutput\n1 2 4 8 \nInput\n2 4 5\nOutput\n-1\n-----Note-----\nNote to the first sample: numbers 2^0 = 1, 2^1 = 2, 2^2 = 4, 2^3 = 8 lie within the specified range. The number 2^4 = 16 is greater then 10, thus it shouldn't be printed.\n\ndef",
        "answer": "def expose(l, r, k):\n    if l > r:\n        return -1\n    if l == r:\n        return l\n    if k == 1:\n        return l\n    if k == 2:\n        return r\n    if k == 3:\n        return r\n    if k == 4:\n        return r\n    if k == 5:\n        return r\n    if k == 6:\n        return r\n    if k == 7:\n        return r\n    if k == 8:\n        return r\n    if k == 9:\n        return r\n    if k == 10:\n        return r\n    if k == 11:\n        return r\n    if k == 12:\n        return r\n    if k == 13:\n        return r\n    if k == 14:\n        return r\n    if k == 15:\n        return r\n    if k == 16:\n        return r\n    if k == 17:\n        return r\n    if k == 18:\n        return r\n    if k == 19:\n        return r\n    if k == 20:\n        return r\n    if k == 21:\n        return r\n    if k == 22:\n        return r\n    if k == 23:\n        return r\n    if k == 24:\n        return r\n    if k == 25:\n        return r\n    if k == 26:\n        return r\n    if k == 27:\n        return r\n    if k == 28:\n        return r\n    if k == 29:\n        return r\n    if k == 30:\n        return r\n    if k == 31:\n        return r\n    if k == 32:\n        return r\n    if k == 33:\n        return r\n    if k == 34",
        "difficulty": "interview"
    },
    {
        "task_id": 557,
        "prompt": "Complete the Python function given the prompt below:Pig is visiting a friend.\nPig's house is located at point 0, and his friend's house is located at point m on an axis.\nPig can use teleports to move along the axis.\nTo use a teleport, Pig should come to a certain point (where the teleport is located) and choose where to move: for each teleport there is the rightmost point it can move Pig to, this point is known as the limit of the teleport.\nFormally, a teleport located at point x with limit y can move Pig from point x to any point within the segment [x; y], including the bounds. [Image] \nDetermine if Pig can visit the friend using teleports only, or he should use his car.\n-----Input-----\nThe first line contains two integers n and m (1 \u2264 n \u2264 100, 1 \u2264 m \u2264 100)\u00a0\u2014 the number of teleports and the location of the friend's house.\nThe next n lines contain information about teleports.\nThe i-th of these lines contains two integers a_{i} and b_{i} (0 \u2264 a_{i} \u2264 b_{i} \u2264 m), where a_{i} is the location of the i-th teleport, and b_{i} is its limit.\nIt is guaranteed that a_{i} \u2265 a_{i} - 1 for every i (2 \u2264 i \u2264 n).\n-----Output-----\nPrint \"YES\" if there is a path from Pig's house to his friend's house that uses only teleports, and \"NO\" otherwise.\nYou can print each letter in arbitrary case (upper or lower).\n-----Examples-----\nInput\n3 5\n0 2\n2 4\n3 5\nOutput\nYES\nInput\n3 7\n0 4\n2 5\n6 7\nOutput\nNO\n-----Note-----\nThe first example is shown on the picture below: [Image] \nPig can use the first teleport from his house (point 0) to reach point 2, then using the second teleport go from point 2 to point 3, then using the third teleport go from point 3 to point 5, where his friend lives.\nThe second example is shown on the picture below: [Image] \nYou can see that there is no path from Pig's house to his friend's house that uses only teleports.\n\ndef",
        "answer": "def is_possible(n, m, teleports):\n    teleports.sort()\n    teleports.append(m)\n    teleports.insert(0, 0)\n    for i in range(1, len(teleports)):\n        if teleports[i] - teleports[i - 1] > 1:\n            return False\n    return True",
        "difficulty": "interview"
    },
    {
        "task_id": 558,
        "prompt": "Complete the Python function given the prompt below:There are N blocks arranged in a row. Let us paint these blocks.\nWe will consider two ways to paint the blocks different if and only if there is a block painted in different colors in those two ways.\nFind the number of ways to paint the blocks under the following conditions:\n - For each block, use one of the M colors, Color 1 through Color M, to paint it. It is not mandatory to use all the colors.\n - There may be at most K pairs of adjacent blocks that are painted in the same color.\nSince the count may be enormous, print it modulo 998244353.\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N, M \\leq 2 \\times 10^5\n - 0 \\leq K \\leq N - 1\n-----Input-----\nInput is given from Standard Input in the following format:\nN M K\n-----Output-----\nPrint the answer.\n-----Sample Input-----\n3 2 1\n-----Sample Output-----\n6\nThe following ways to paint the blocks satisfy the conditions: 112, 121, 122, 211, 212, and 221. Here, digits represent the colors of the blocks.\n\ndef",
        "answer": "def paint(n, m, k):\n    dp = [[0 for _ in range(m)] for _ in range(n)]\n    dp[0][0] = 1\n    for i in range(n):\n        for j in range(m):\n            if i == 0 and j == 0:\n                continue\n            if i == 0:\n                dp[i][j] = dp[i][j - 1]\n            elif j == 0:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = (dp[i - 1][j] + dp[i][j - 1]) % 998244353\n    return dp[n - 1][m - 1]",
        "difficulty": "interview"
    },
    {
        "task_id": 559,
        "prompt": "Complete the Python function given the prompt below:Given are a prime number p and a sequence of p integers a_0, \\ldots, a_{p-1} consisting of zeros and ones.\nFind a polynomial of degree at most p-1, f(x) = b_{p-1} x^{p-1} + b_{p-2} x^{p-2} + \\ldots + b_0, satisfying the following conditions:\n - For each i (0 \\leq i \\leq p-1), b_i is an integer such that 0 \\leq b_i \\leq p-1.\n - For each i (0 \\leq i \\leq p-1), f(i) \\equiv a_i \\pmod p.\n-----Constraints-----\n - 2 \\leq p \\leq 2999\n - p is a prime number.\n - 0 \\leq a_i \\leq 1\n-----Input-----\nInput is given from Standard Input in the following format:\np\na_0 a_1 \\ldots a_{p-1}\n-----Output-----\nPrint b_0, b_1, \\ldots, b_{p-1} of a polynomial f(x) satisfying the conditions, in this order, with spaces in between.\nIt can be proved that a solution always exists. If multiple solutions exist, any of them will be accepted.\n-----Sample Input-----\n2\n1 0\n-----Sample Output-----\n1 1\nf(x) = x + 1 satisfies the conditions, as follows:\n - f(0) = 0 + 1 = 1 \\equiv 1 \\pmod 2\n - f(1) = 1 + 1 = 2 \\equiv 0 \\pmod 2\n\ndef",
        "answer": "def f(x):\n    return x + 1",
        "difficulty": "interview"
    },
    {
        "task_id": 560,
        "prompt": "Complete the Python function given the prompt below:You are given a rectangular cake, represented as an r \u00d7 c grid. Each cell either has an evil strawberry, or is empty. For example, a 3 \u00d7 4 cake may look as follows: [Image] \nThe cakeminator is going to eat the cake! Each time he eats, he chooses a row or a column that does not contain any evil strawberries and contains at least one cake cell that has not been eaten before, and eats all the cake cells there. He may decide to eat any number of times.\nPlease output the maximum number of cake cells that the cakeminator can eat.\n-----Input-----\nThe first line contains two integers r and c (2 \u2264 r, c \u2264 10), denoting the number of rows and the number of columns of the cake. The next r lines each contains c characters \u2014 the j-th character of the i-th line denotes the content of the cell at row i and column j, and is either one of these:   '.' character denotes a cake cell with no evil strawberry;  'S' character denotes a cake cell with an evil strawberry. \n-----Output-----\nOutput the maximum number of cake cells that the cakeminator can eat.\n-----Examples-----\nInput\n3 4\nS...\n....\n..S.\nOutput\n8\n-----Note-----\nFor the first example, one possible way to eat the maximum number of cake cells is as follows (perform 3 eats). [Image]  [Image]  [Image]\n\ndef",
        "answer": "def max_cake_cells(cake):\n    r, c = len(cake), len(cake[0])\n    max_eaten = 0\n    for i in range(r):\n        for j in range(c):\n            if cake[i][j] == 'S':\n                eaten = 0\n                for k in range(i, r):\n                    if cake[k][j] == '.':\n                        eaten += 1\n                    else:\n                        break\n                for k in range(j, c):\n                    if cake[i][k] == '.':\n                        eaten += 1\n                    else:\n                        break\n                max_eaten = max(max_eaten, eaten)\n    return max_eaten",
        "difficulty": "interview"
    },
    {
        "task_id": 561,
        "prompt": "Complete the Python function given the prompt below:Everybody knows what an arithmetic progression is. Let us remind you just in case that an arithmetic progression is such sequence of numbers a_1, a_2,..., a_{n} of length n, that the following condition fulfills: a_2 - a_1 = a_3 - a_2 = a_4 - a_3 =... = a_{i} + 1 - a_{i} =... = a_{n} - a_{n} - 1.\nFor example, sequences [1, 5], [10], [5, 4, 3] are arithmetic progressions and sequences [1, 3, 2], [1, 2, 4] are not.\nAlexander has n cards containing integers. Arthur wants to give Alexander exactly one more card with a number so that he could use the resulting n + 1 cards to make an arithmetic progression (Alexander has to use all of his cards).\nArthur has already bought a card but he hasn't written a number on it. Help him, print all integers that you can write on a card so that the described condition fulfilled.\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 10^5) \u2014 the number of cards. The next line contains the sequence of integers \u2014 the numbers on Alexander's cards. The numbers are positive integers, each of them doesn't exceed 10^8.\n-----Output-----\nIf Arthur can write infinitely many distinct integers on the card, print on a single line -1.\nOtherwise, print on the first line the number of integers that suit you. In the second line, print the numbers in the increasing order. Note that the numbers in the answer can exceed 10^8 or even be negative (see test samples).\n-----Examples-----\nInput\n3\n4 1 7\nOutput\n2\n-2 10\nInput\n1\n10\nOutput\n-1\nInput\n4\n1 3 5 9\nOutput\n1\n7\nInput\n4\n4 3 4 5\nOutput\n0\nInput\n2\n2 4\nOutput\n3\n0 3 6\n\ndef",
        "answer": "def arithmetic_progression(n, a):\n    if n == 1:\n        return -1\n    else:\n        for i in range(n):\n            if a[i] - a[i - 1] == a[i + 1] - a[i]:\n                continue\n            else:\n                return -1\n        return n",
        "difficulty": "interview"
    },
    {
        "task_id": 562,
        "prompt": "Complete the Python function given the prompt below:Polycarp is a great fan of television.\nHe wrote down all the TV programs he is interested in for today. His list contains n shows, i-th of them starts at moment l_{i} and ends at moment r_{i}.\nPolycarp owns two TVs. He can watch two different shows simultaneously with two TVs but he can only watch one show at any given moment on a single TV. If one show ends at the same moment some other show starts then you can't watch them on a single TV.\nPolycarp wants to check out all n shows. Are two TVs enough to do so?\n-----Input-----\nThe first line contains one integer n (1 \u2264 n \u2264 2\u00b710^5) \u2014 the number of shows.\nEach of the next n lines contains two integers l_{i} and r_{i} (0 \u2264 l_{i} < r_{i} \u2264 10^9) \u2014 starting and ending time of i-th show.\n-----Output-----\nIf Polycarp is able to check out all the shows using only two TVs then print \"YES\" (without quotes). Otherwise, print \"NO\" (without quotes).\n-----Examples-----\nInput\n3\n1 2\n2 3\n4 5\nOutput\nYES\nInput\n4\n1 2\n2 3\n2 3\n1 2\nOutput\nNO\n\ndef",
        "answer": "def TV_shows(n, l):\n    l.sort()\n    for i in range(n):\n        if l[i][0] >= l[i][1]:\n            return \"NO\"\n    return \"YES\"",
        "difficulty": "interview"
    },
    {
        "task_id": 563,
        "prompt": "Complete the Python function given the prompt below:Your friend has recently learned about coprime numbers. A pair of numbers {a, b} is called coprime if the maximum number that divides both a and b is equal to one. \nYour friend often comes up with different statements. He has recently supposed that if the pair (a, b) is coprime and the pair (b, c) is coprime, then the pair (a, c) is coprime. \nYou want to find a counterexample for your friend's statement. Therefore, your task is to find three distinct numbers (a, b, c), for which the statement is false, and the numbers meet the condition l \u2264 a < b < c \u2264 r. \nMore specifically, you need to find three numbers (a, b, c), such that l \u2264 a < b < c \u2264 r, pairs (a, b) and (b, c) are coprime, and pair (a, c) is not coprime.\n-----Input-----\nThe single line contains two positive space-separated integers l, r (1 \u2264 l \u2264 r \u2264 10^18; r - l \u2264 50).\n-----Output-----\nPrint three positive space-separated integers a, b, c\u00a0\u2014 three distinct numbers (a, b, c) that form the counterexample. If there are several solutions, you are allowed to print any of them. The numbers must be printed in ascending order. \nIf the counterexample does not exist, print the single number -1.\n-----Examples-----\nInput\n2 4\nOutput\n2 3 4\nInput\n10 11\nOutput\n-1\nInput\n900000000000000009 900000000000000029\nOutput\n900000000000000009 900000000000000010 900000000000000021\n-----Note-----\nIn the first sample pair (2, 4) is not coprime and pairs (2, 3) and (3, 4) are. \nIn the second sample you cannot form a group of three distinct integers, so the answer is -1. \nIn the third sample it is easy to see that numbers 900000000000000009 and 900000000000000021 are divisible by three.\n\ndef",
        "answer": "def coprime(a, b):\n    return max(a, b) % min(a, b) == 0",
        "difficulty": "interview"
    },
    {
        "task_id": 564,
        "prompt": "Complete the Python function given the prompt below:Sereja showed an interesting game to his friends. The game goes like that. Initially, there is a table with an empty cup and n water mugs on it. Then all players take turns to move. During a move, a player takes a non-empty mug of water and pours all water from it into the cup. If the cup overfills, then we assume that this player lost.\nAs soon as Sereja's friends heard of the game, they wanted to play it. Sereja, on the other hand, wanted to find out whether his friends can play the game in such a way that there are no losers. You are given the volumes of all mugs and the cup. Also, you know that Sereja has (n - 1) friends. Determine if Sereja's friends can play the game so that nobody loses.\n-----Input-----\nThe first line contains integers n and s (2 \u2264 n \u2264 100;\u00a01 \u2264 s \u2264 1000) \u2014 the number of mugs and the volume of the cup. The next line contains n integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10). Number a_{i} means the volume of the i-th mug.\n-----Output-----\nIn a single line, print \"YES\" (without the quotes) if his friends can play in the described manner, and \"NO\" (without the quotes) otherwise.\n-----Examples-----\nInput\n3 4\n1 1 1\nOutput\nYES\nInput\n3 4\n3 1 3\nOutput\nYES\nInput\n3 4\n4 4 4\nOutput\nNO\n\ndef",
        "answer": "def can_win(mugs, cup):\n    if mugs[0] < cup:\n        return True\n    for i in range(1, len(mugs)):\n        if mugs[i] + mugs[i - 1] > cup:\n            return True\n    return False",
        "difficulty": "interview"
    },
    {
        "task_id": 565,
        "prompt": "Complete the Python function given the prompt below:Alice and Bob are decorating a Christmas Tree. \nAlice wants only $3$ types of ornaments to be used on the Christmas Tree: yellow, blue and red. They have $y$ yellow ornaments, $b$ blue ornaments and $r$ red ornaments.\nIn Bob's opinion, a Christmas Tree will be beautiful if:  the number of blue ornaments used is greater by exactly $1$ than the number of yellow ornaments, and  the number of red ornaments used is greater by exactly $1$ than the number of blue ornaments. \nThat is, if they have $8$ yellow ornaments, $13$ blue ornaments and $9$ red ornaments, we can choose $4$ yellow, $5$ blue and $6$ red ornaments ($5=4+1$ and $6=5+1$).\nAlice wants to choose as many ornaments as possible, but she also wants the Christmas Tree to be beautiful according to Bob's opinion.\nIn the example two paragraphs above, we would choose $7$ yellow, $8$ blue and $9$ red ornaments. If we do it, we will use $7+8+9=24$ ornaments. That is the maximum number.\nSince Alice and Bob are busy with preparing food to the New Year's Eve, they are asking you to find out the maximum number of ornaments that can be used in their beautiful Christmas Tree! \nIt is guaranteed that it is possible to choose at least $6$ ($1+2+3=6$) ornaments.\n-----Input-----\nThe only line contains three integers $y$, $b$, $r$ ($1 \\leq y \\leq 100$, $2 \\leq b \\leq 100$, $3 \\leq r \\leq 100$)\u00a0\u2014 the number of yellow, blue and red ornaments. \nIt is guaranteed that it is possible to choose at least $6$ ($1+2+3=6$) ornaments.\n-----Output-----\nPrint one number\u00a0\u2014 the maximum number of ornaments that can be used. \n-----Examples-----\nInput\n8 13 9\nOutput\n24\nInput\n13 3 6\nOutput\n9\n-----Note-----\nIn the first example, the answer is $7+8+9=24$.\nIn the second example, the answer is $2+3+4=9$.\n\ndef",
        "answer": "def ornaments(y,b,r):\n    return min(y,b,r)",
        "difficulty": "interview"
    },
    {
        "task_id": 566,
        "prompt": "Complete the Python function given the prompt below:You have r red, g green and b blue balloons. To decorate a single table for the banquet you need exactly three balloons. Three balloons attached to some table shouldn't have the same color. What maximum number t of tables can be decorated if we know number of balloons of each color?\nYour task is to write a program that for given values r, g and b will find the maximum number t of tables, that can be decorated in the required manner.\n-----Input-----\nThe single line contains three integers r, g and b (0 \u2264 r, g, b \u2264 2\u00b710^9) \u2014 the number of red, green and blue baloons respectively. The numbers are separated by exactly one space.\n-----Output-----\nPrint a single integer t \u2014 the maximum number of tables that can be decorated in the required manner.\n-----Examples-----\nInput\n5 4 3\nOutput\n4\nInput\n1 1 1\nOutput\n1\nInput\n2 3 3\nOutput\n2\n-----Note-----\nIn the first sample you can decorate the tables with the following balloon sets: \"rgg\", \"gbb\", \"brr\", \"rrg\", where \"r\", \"g\" and \"b\" represent the red, green and blue balls, respectively.\n\ndef",
        "answer": "def max_tables(r, g, b):\n    return min(r, g, b)",
        "difficulty": "interview"
    },
    {
        "task_id": 567,
        "prompt": "Complete the Python function given the prompt below:You and your friend are participating in a TV show \"Run For Your Prize\".\nAt the start of the show n prizes are located on a straight line. i-th prize is located at position a_{i}. Positions of all prizes are distinct. You start at position 1, your friend \u2014 at position 10^6 (and there is no prize in any of these two positions). You have to work as a team and collect all prizes in minimum possible time, in any order.\nYou know that it takes exactly 1 second to move from position x to position x + 1 or x - 1, both for you and your friend. You also have trained enough to instantly pick up any prize, if its position is equal to your current position (and the same is true for your friend). Carrying prizes does not affect your speed (or your friend's speed) at all.\nNow you may discuss your strategy with your friend and decide who will pick up each prize. Remember that every prize must be picked up, either by you or by your friend.\nWhat is the minimum number of seconds it will take to pick up all the prizes?\n-----Input-----\nThe first line contains one integer n (1 \u2264 n \u2264 10^5) \u2014 the number of prizes.\nThe second line contains n integers a_1, a_2,..., a_{n} (2 \u2264 a_{i} \u2264 10^6 - 1) \u2014 the positions of the prizes. No two prizes are located at the same position. Positions are given in ascending order.\n-----Output-----\nPrint one integer \u2014 the minimum number of seconds it will take to collect all prizes.\n-----Examples-----\nInput\n3\n2 3 9\nOutput\n8\nInput\n2\n2 999995\nOutput\n5\n-----Note-----\nIn the first example you take all the prizes: take the first at 1, the second at 2 and the third at 8.\nIn the second example you take the first prize in 1 second and your friend takes the other in 5 seconds, you do this simultaneously, so the total time is 5.\n\ndef",
        "answer": "def solve(n, a):\n    a.sort()\n    ans = 0\n    for i in range(n):\n        ans += abs(a[i] - i)\n    return ans",
        "difficulty": "interview"
    },
    {
        "task_id": 568,
        "prompt": "Complete the Python function given the prompt below:Kolya loves putting gnomes at the circle table and giving them coins, and Tanya loves studying triplets of gnomes, sitting in the vertexes of an equilateral triangle.\nMore formally, there are 3n gnomes sitting in a circle. Each gnome can have from 1 to 3 coins. Let's number the places in the order they occur in the circle by numbers from 0 to 3n - 1, let the gnome sitting on the i-th place have a_{i} coins. If there is an integer i (0 \u2264 i < n) such that a_{i} + a_{i} + n + a_{i} + 2n \u2260 6, then Tanya is satisfied. \nCount the number of ways to choose a_{i} so that Tanya is satisfied. As there can be many ways of distributing coins, print the remainder of this number modulo 10^9 + 7. Two ways, a and b, are considered distinct if there is index i (0 \u2264 i < 3n), such that a_{i} \u2260 b_{i} (that is, some gnome got different number of coins in these two ways).\n-----Input-----\nA single line contains number n (1 \u2264 n \u2264 10^5) \u2014 the number of the gnomes divided by three.\n-----Output-----\nPrint a single number \u2014 the remainder of the number of variants of distributing coins that satisfy Tanya modulo 10^9 + 7.\n-----Examples-----\nInput\n1\nOutput\n20\nInput\n2\nOutput\n680\n-----Note-----\n20 ways for n = 1 (gnome with index 0 sits on the top of the triangle, gnome 1 on the right vertex, gnome 2 on the left vertex): [Image]\n\ndef",
        "answer": "def kolya_tanya(n):\n    return (n * (n + 1) * (n + 2)) % (10 ** 9 + 7)",
        "difficulty": "interview"
    },
    {
        "task_id": 569,
        "prompt": "Complete the Python function given the prompt below:A wise man told Kerem \"Different is good\" once, so Kerem wants all things in his life to be different. \nKerem recently got a string s consisting of lowercase English letters. Since Kerem likes it when things are different, he wants all substrings of his string s to be distinct. Substring is a string formed by some number of consecutive characters of the string. For example, string \"aba\" has substrings \"\" (empty substring), \"a\", \"b\", \"a\", \"ab\", \"ba\", \"aba\".\nIf string s has at least two equal substrings then Kerem will change characters at some positions to some other lowercase English letters. Changing characters is a very tiring job, so Kerem want to perform as few changes as possible.\nYour task is to find the minimum number of changes needed to make all the substrings of the given string distinct, or determine that it is impossible.\n-----Input-----\nThe first line of the input contains an integer n (1 \u2264 n \u2264 100 000)\u00a0\u2014 the length of the string s.\nThe second line contains the string s of length n consisting of only lowercase English letters.\n-----Output-----\nIf it's impossible to change the string s such that all its substring are distinct print -1. Otherwise print the minimum required number of changes.\n-----Examples-----\nInput\n2\naa\nOutput\n1\nInput\n4\nkoko\nOutput\n2\nInput\n5\nmurat\nOutput\n0\n-----Note-----\nIn the first sample one of the possible solutions is to change the first character to 'b'.\nIn the second sample, one may change the first character to 'a' and second character to 'b', so the string becomes \"abko\".\n\ndef",
        "answer": "def substring_distinct(s):\n    n = len(s)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n - 1):\n        if s[i] == s[i + 1]:\n            dp[i][i + 1] = 1\n    for l in range(3, n + 1):\n        for i in range(n - l + 1):\n            j = i + l - 1\n            if s[i] == s[j] and dp[i + 1][j - 1] == 1:\n                dp[i][j] = 1\n    return dp",
        "difficulty": "interview"
    },
    {
        "task_id": 570,
        "prompt": "Complete the Python function given the prompt below:At regular competition Vladik and Valera won a and b candies respectively. Vladik offered 1 his candy to Valera. After that Valera gave Vladik 2 his candies, so that no one thought that he was less generous. Vladik for same reason gave 3 candies to Valera in next turn.\nMore formally, the guys take turns giving each other one candy more than they received in the previous turn.\nThis continued until the moment when one of them couldn\u2019t give the right amount of candy. Candies, which guys got from each other, they don\u2019t consider as their own. You need to know, who is the first who can\u2019t give the right amount of candy.\n-----Input-----\nSingle line of input data contains two space-separated integers a, b (1 \u2264 a, b \u2264 10^9) \u2014 number of Vladik and Valera candies respectively.\n-----Output-----\nPring a single line \"Vladik\u2019\u2019 in case, if Vladik first who can\u2019t give right amount of candy, or \"Valera\u2019\u2019 otherwise.\n-----Examples-----\nInput\n1 1\nOutput\nValera\nInput\n7 6\nOutput\nVladik\n-----Note-----\nIllustration for first test case:\n[Image]\nIllustration for second test case:\n[Image]\n\ndef",
        "answer": "def candies(a, b):\n    if a % 2 == 0:\n        return b\n    else:\n        return a",
        "difficulty": "interview"
    },
    {
        "task_id": 571,
        "prompt": "Complete the Python function given the prompt below:Serval soon said goodbye to Japari kindergarten, and began his life in Japari Primary School.\nIn his favorite math class, the teacher taught him the following interesting definitions.\nA parenthesis sequence is a string, containing only characters \"(\" and \")\".\nA correct parenthesis sequence is a parenthesis sequence that can be transformed into a correct arithmetic expression by inserting characters \"1\" and \"+\" between the original characters of the sequence. For example, parenthesis sequences \"()()\", \"(())\" are correct (the resulting expressions are: \"(1+1)+(1+1)\", \"((1+1)+1)\"), while \")(\" and \")\" are not. Note that the empty string is a correct parenthesis sequence by definition.\nWe define that $|s|$ as the length of string $s$. A strict prefix $s[1\\dots l]$ $(1\\leq l< |s|)$ of a string $s = s_1s_2\\dots s_{|s|}$ is string $s_1s_2\\dots s_l$. Note that the empty string and the whole string are not strict prefixes of any string by the definition.\nHaving learned these definitions, he comes up with a new problem. He writes down a string $s$ containing only characters \"(\", \")\" and \"?\". And what he is going to do, is to replace each of the \"?\" in $s$ independently by one of \"(\" and \")\" to make all strict prefixes of the new sequence not a correct parenthesis sequence, while the new sequence should be a correct parenthesis sequence.\nAfter all, he is just a primary school student so this problem is too hard for him to solve. As his best friend, can you help him to replace the question marks? If there are many solutions, any of them is acceptable.\n-----Input-----\nThe first line contains a single integer $|s|$ ($1\\leq |s|\\leq 3 \\cdot 10^5$), the length of the string.\nThe second line contains a string $s$, containing only \"(\", \")\" and \"?\".\n-----Output-----\nA single line contains a string representing the answer.\nIf there are many solutions, any of them is acceptable.\nIf there is no answer, print a single line containing \":(\" (without the quotes).\n-----Examples-----\nInput\n6\n(?????\nOutput\n(()())\nInput\n10\n(???(???(?\nOutput\n:(\n-----Note-----\nIt can be proved that there is no solution for the second sample, so print \":(\".\n\ndef",
        "answer": "def parenthesis(s):\n    if len(s) == 0:\n        return \":(\"\n    if len(s) == 1:\n        if s[0] == \"?\":\n            return \":(\"\n        else:\n            return s[0]\n    if s[0] == \"?\":\n        return parenthesis(s[1:])\n    else:\n        return s[0] + parenthesis(s[1:])",
        "difficulty": "interview"
    },
    {
        "task_id": 572,
        "prompt": "Complete the Python function given the prompt below:Limak is a little polar bear. He doesn't have many toys and thus he often plays with polynomials.\nHe considers a polynomial valid if its degree is n and its coefficients are integers not exceeding k by the absolute value. More formally:\nLet a_0, a_1,..., a_{n} denote the coefficients, so $P(x) = \\sum_{i = 0}^{n} a_{i} \\cdot x^{i}$. Then, a polynomial P(x) is valid if all the following conditions are satisfied:  a_{i} is integer for every i;  |a_{i}| \u2264 k for every i;  a_{n} \u2260 0. \nLimak has recently got a valid polynomial P with coefficients a_0, a_1, a_2,..., a_{n}. He noticed that P(2) \u2260 0 and he wants to change it. He is going to change one coefficient to get a valid polynomial Q of degree n that Q(2) = 0. Count the number of ways to do so. You should count two ways as a distinct if coefficients of target polynoms differ.\n-----Input-----\nThe first line contains two integers n and k (1 \u2264 n \u2264 200 000, 1 \u2264 k \u2264 10^9)\u00a0\u2014 the degree of the polynomial and the limit for absolute values of coefficients.\nThe second line contains n + 1 integers a_0, a_1,..., a_{n} (|a_{i}| \u2264 k, a_{n} \u2260 0)\u00a0\u2014 describing a valid polynomial $P(x) = \\sum_{i = 0}^{n} a_{i} \\cdot x^{i}$. It's guaranteed that P(2) \u2260 0.\n-----Output-----\nPrint the number of ways to change one coefficient to get a valid polynomial Q that Q(2) = 0.\n-----Examples-----\nInput\n3 1000000000\n10 -9 -3 5\nOutput\n3\nInput\n3 12\n10 -9 -3 5\nOutput\n2\nInput\n2 20\n14 -7 19\nOutput\n0\n-----Note-----\nIn the first sample, we are given a polynomial P(x) = 10 - 9x - 3x^2 + 5x^3.\nLimak can change one coefficient in three ways:  He can set a_0 =  - 10. Then he would get Q(x) =  - 10 - 9x - 3x^2 + 5x^3 and indeed Q(2) =  - 10 - 18 - 12 + 40 = 0.  Or he can set a_2 =  - 8. Then Q(x) = 10 - 9x - 8x^2 + 5x^3 and indeed Q(2) = 10 - 18 - 32 + 40 = 0.  Or he can set a_1 =  - 19. Then Q(x) = 10 - 19x - 3x^2 + 5x^3 and indeed Q(2) = 10 - 38 - 12 + 40 = 0. \nIn the second sample, we are given the same polynomial. This time though, k is equal to 12 instead of 10^9. Two first of ways listed above are still valid but in the third way we would get |a_1| > k what is not allowed. Thus, the answer is 2 this time.\n\ndef",
        "answer": "def polynomials(n, k):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2 if k >= abs(a[0]) else 0\n    return polynomials(n - 1, k) + polynomials(n - 1, k - abs(a[n - 1]))",
        "difficulty": "interview"
    },
    {
        "task_id": 573,
        "prompt": "Complete the Python function given the prompt below:There were n groups of students which came to write a training contest. A group is either one person who can write the contest with anyone else, or two people who want to write the contest in the same team.\nThe coach decided to form teams of exactly three people for this training. Determine the maximum number of teams of three people he can form. It is possible that he can't use all groups to form teams. For groups of two, either both students should write the contest, or both should not. If two students from a group of two will write the contest, they should be in the same team.\n-----Input-----\nThe first line contains single integer n (2 \u2264 n \u2264 2\u00b710^5) \u2014 the number of groups.\nThe second line contains a sequence of integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 2), where a_{i} is the number of people in group i.\n-----Output-----\nPrint the maximum number of teams of three people the coach can form.\n-----Examples-----\nInput\n4\n1 1 2 1\nOutput\n1\nInput\n2\n2 2\nOutput\n0\nInput\n7\n2 2 2 1 1 1 1\nOutput\n3\nInput\n3\n1 1 1\nOutput\n1\n-----Note-----\nIn the first example the coach can form one team. For example, he can take students from the first, second and fourth groups.\nIn the second example he can't make a single team.\nIn the third example the coach can form three teams. For example, he can do this in the following way:  The first group (of two people) and the seventh group (of one person),  The second group (of two people) and the sixth group (of one person),  The third group (of two people) and the fourth group (of one person).\n\ndef",
        "answer": "def solve(n, a):\n    a.sort()\n    count = 0\n    for i in range(n):\n        if a[i] % 3 == 0:\n            count += a[i] // 3\n        elif a[i] % 3 == 1:\n            count += a[i] // 3 - 1\n        else:\n            count += a[i] // 3 - 2\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 574,
        "prompt": "Complete the Python function given the prompt below:Developing tools for creation of locations maps for turn-based fights in a new game, Petya faced the following problem.\nA field map consists of hexagonal cells. Since locations sizes are going to be big, a game designer wants to have a tool for quick filling of a field part with identical enemy units. This action will look like following: a game designer will select a rectangular area on the map, and each cell whose center belongs to the selected rectangle will be filled with the enemy unit.\nMore formally, if a game designer selected cells having coordinates (x_1, y_1) and (x_2, y_2), where x_1 \u2264 x_2 and y_1 \u2264 y_2, then all cells having center coordinates (x, y) such that x_1 \u2264 x \u2264 x_2 and y_1 \u2264 y \u2264 y_2 will be filled. Orthogonal coordinates system is set up so that one of cell sides is parallel to OX axis, all hexagon centers have integer coordinates and for each integer x there are cells having center with such x coordinate and for each integer y there are cells having center with such y coordinate. It is guaranteed that difference x_2 - x_1 is divisible by 2.\nWorking on the problem Petya decided that before painting selected units he wants to output number of units that will be painted on the map.\nHelp him implement counting of these units before painting.\n [Image] \n-----Input-----\nThe only line of input contains four integers x_1, y_1, x_2, y_2 ( - 10^9 \u2264 x_1 \u2264 x_2 \u2264 10^9,  - 10^9 \u2264 y_1 \u2264 y_2 \u2264 10^9) \u2014 the coordinates of the centers of two cells.\n-----Output-----\nOutput one integer \u2014 the number of cells to be filled.\n-----Examples-----\nInput\n1 1 5 5\nOutput\n13\n\ndef",
        "answer": "def count_units(x1, y1, x2, y2):\n    return (x2 - x1) * (y2 - y1)",
        "difficulty": "interview"
    },
    {
        "task_id": 575,
        "prompt": "Complete the Python function given the prompt below:Alice and Bob are playing chess on a huge chessboard with dimensions $n \\times n$. Alice has a single piece left\u00a0\u2014 a queen, located at $(a_x, a_y)$, while Bob has only the king standing at $(b_x, b_y)$. Alice thinks that as her queen is dominating the chessboard, victory is hers. \nBut Bob has made a devious plan to seize the victory for himself\u00a0\u2014 he needs to march his king to $(c_x, c_y)$ in order to claim the victory for himself. As Alice is distracted by her sense of superiority, she no longer moves any pieces around, and it is only Bob who makes any turns.\nBob will win if he can move his king from $(b_x, b_y)$ to $(c_x, c_y)$ without ever getting in check. Remember that a king can move to any of the $8$ adjacent squares. A king is in check if it is on the same rank (i.e. row), file (i.e. column), or diagonal as the enemy queen. \nFind whether Bob can win or not.\n-----Input-----\nThe first line contains a single integer $n$ ($3 \\leq n \\leq 1000$)\u00a0\u2014 the dimensions of the chessboard.\nThe second line contains two integers $a_x$ and $a_y$ ($1 \\leq a_x, a_y \\leq n$)\u00a0\u2014 the coordinates of Alice's queen.\nThe third line contains two integers $b_x$ and $b_y$ ($1 \\leq b_x, b_y \\leq n$)\u00a0\u2014 the coordinates of Bob's king.\nThe fourth line contains two integers $c_x$ and $c_y$ ($1 \\leq c_x, c_y \\leq n$)\u00a0\u2014 the coordinates of the location that Bob wants to get to.\nIt is guaranteed that Bob's king is currently not in check and the target location is not in check either.\nFurthermore, the king is not located on the same square as the queen (i.e. $a_x \\neq b_x$ or $a_y \\neq b_y$), and the target does coincide neither with the queen's position (i.e. $c_x \\neq a_x$ or $c_y \\neq a_y$) nor with the king's position (i.e. $c_x \\neq b_x$ or $c_y \\neq b_y$).\n-----Output-----\nPrint \"YES\" (without quotes) if Bob can get from $(b_x, b_y)$ to $(c_x, c_y)$ without ever getting in check, otherwise print \"NO\".\nYou can print each letter in any case (upper or lower).\n-----Examples-----\nInput\n8\n4 4\n1 3\n3 1\nOutput\nYES\nInput\n8\n4 4\n2 3\n1 6\nOutput\nNO\nInput\n8\n3 5\n1 2\n6 1\nOutput\nNO\n-----Note-----\nIn the diagrams below, the squares controlled by the black queen are marked red, and the target square is marked blue.\nIn the first case, the king can move, for instance, via the squares $(2, 3)$ and $(3, 2)$. Note that the direct route through $(2, 2)$ goes through check.\n [Image] \nIn the second case, the queen watches the fourth rank, and the king has no means of crossing it.\n [Image] \nIn the third case, the queen watches the third file.\n [Image]\n\ndef",
        "answer": "def is_safe(x, y, n, qx, qy, kx, ky):\n    if x == qx or y == qy:\n        return False\n    if x == kx or y == ky:\n        return False\n    if abs(x - qx) == abs(y - qy):\n        return False\n    if abs(x - kx) == abs(y - ky):\n        return False\n    return True",
        "difficulty": "interview"
    },
    {
        "task_id": 576,
        "prompt": "Complete the Python function given the prompt below:Given an array $a$, consisting of $n$ integers, find:\n$$\\max\\limits_{1 \\le i < j \\le n} LCM(a_i,a_j),$$\nwhere $LCM(x, y)$ is the smallest positive integer that is divisible by both $x$ and $y$. For example, $LCM(6, 8) = 24$, $LCM(4, 12) = 12$, $LCM(2, 3) = 6$.\n-----Input-----\nThe first line contains an integer $n$ ($2 \\le n \\le 10^5$)\u00a0\u2014 the number of elements in the array $a$.\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^5$)\u00a0\u2014 the elements of the array $a$.\n-----Output-----\nPrint one integer, the maximum value of the least common multiple of two elements in the array $a$.\n-----Examples-----\nInput\n3\n13 35 77\nOutput\n1001\nInput\n6\n1 2 4 8 16 32\nOutput\n32\n\ndef",
        "answer": "def lcm(a, b):\n    return a * b // gcd(a, b)",
        "difficulty": "interview"
    },
    {
        "task_id": 577,
        "prompt": "Complete the Python function given the prompt below:Phoenix is picking berries in his backyard. There are $n$ shrubs, and each shrub has $a_i$ red berries and $b_i$ blue berries.\nEach basket can contain $k$ berries. But, Phoenix has decided that each basket may only contain berries from the same shrub or berries of the same color (red or blue). In other words, all berries in a basket must be from the same shrub or/and have the same color.\nFor example, if there are two shrubs with $5$ red and $2$ blue berries in the first shrub and $2$ red and $1$ blue berries in the second shrub then Phoenix can fill $2$ baskets of capacity $4$ completely:   the first basket will contain $3$ red and $1$ blue berries from the first shrub;  the second basket will contain the $2$ remaining red berries from the first shrub and $2$ red berries from the second shrub. \nHelp Phoenix determine the maximum number of baskets he can fill completely!\n-----Input-----\nThe first line contains two integers $n$ and $k$ ($ 1\\le n, k \\le 500$)\u00a0\u2014 the number of shrubs and the basket capacity, respectively.\nThe $i$-th of the next $n$ lines contain two integers $a_i$ and $b_i$ ($0 \\le a_i, b_i \\le 10^9$)\u00a0\u2014 the number of red and blue berries in the $i$-th shrub, respectively.\n-----Output-----\nOutput one integer\u00a0\u2014 the maximum number of baskets that Phoenix can fill completely.\n-----Examples-----\nInput\n2 4\n5 2\n2 1\nOutput\n2\nInput\n1 5\n2 3\nOutput\n1\nInput\n2 5\n2 1\n1 3\nOutput\n0\nInput\n1 2\n1000000000 1\nOutput\n500000000\n-----Note-----\nThe first example is described above.\nIn the second example, Phoenix can fill one basket fully using all the berries from the first (and only) shrub.\nIn the third example, Phoenix cannot fill any basket completely because there are less than $5$ berries in each shrub, less than $5$ total red berries, and less than $5$ total blue berries.\nIn the fourth example, Phoenix can put all the red berries into baskets, leaving an extra blue berry behind.\n\ndef",
        "answer": "def max_baskets(n, k, a):\n    a.sort()\n    b = [0] * n\n    b[0] = a[0]\n    for i in range(1, n):\n        b[i] = b[i - 1] + a[i]\n    b.sort()\n    ans = 0\n    for i in range(n):\n        if b[i] <= k:\n            ans += 1\n            k -= b[i]\n        else:\n            break\n    return ans",
        "difficulty": "interview"
    },
    {
        "task_id": 578,
        "prompt": "Complete the Python function given the prompt below:Barney is standing in a bar and starring at a pretty girl. He wants to shoot her with his heart arrow but he needs to know the distance between him and the girl to make his shot accurate. [Image] \nBarney asked the bar tender Carl about this distance value, but Carl was so busy talking to the customers so he wrote the distance value (it's a real number) on a napkin. The problem is that he wrote it in scientific notation. The scientific notation of some real number x is the notation of form AeB, where A is a real number and B is an integer and x = A \u00d7 10^{B} is true. In our case A is between 0 and 9 and B is non-negative.\nBarney doesn't know anything about scientific notation (as well as anything scientific at all). So he asked you to tell him the distance value in usual decimal representation with minimal number of digits after the decimal point (and no decimal point if it is an integer). See the output format for better understanding.\n-----Input-----\nThe first and only line of input contains a single string of form a.deb where a, d and b are integers and e is usual character 'e' (0 \u2264 a \u2264 9, 0 \u2264 d < 10^100, 0 \u2264 b \u2264 100)\u00a0\u2014 the scientific notation of the desired distance value.\na and b contain no leading zeros and d contains no trailing zeros (but may be equal to 0). Also, b can not be non-zero if a is zero.\n-----Output-----\nPrint the only real number x (the desired distance value) in the only line in its decimal notation. \nThus if x is an integer, print it's integer value without decimal part and decimal point and without leading zeroes. \nOtherwise print x in a form of p.q such that p is an integer that have no leading zeroes (but may be equal to zero), and q is an integer that have no trailing zeroes (and may not be equal to zero).\n-----Examples-----\nInput\n8.549e2\nOutput\n854.9\nInput\n8.549e3\nOutput\n8549\nInput\n0.33e0\nOutput\n0.33\n\ndef",
        "answer": "def scientific_notation(num):\n    num = str(num)\n    if 'e' in num:\n        num = num.split('e')\n        num = int(num[0]) * 10 ** int(num[1])\n    return num",
        "difficulty": "interview"
    },
    {
        "task_id": 579,
        "prompt": "Complete the Python function given the prompt below:Takahashi will play a game using a piece on an array of squares numbered 1, 2, \\cdots, N. Square i has an integer C_i written on it. Also, he is given a permutation of 1, 2, \\cdots, N: P_1, P_2, \\cdots, P_N.\nNow, he will choose one square and place the piece on that square. Then, he will make the following move some number of times between 1 and K (inclusive):\n - In one move, if the piece is now on Square i (1 \\leq i \\leq N), move it to Square P_i. Here, his score increases by C_{P_i}.\nHelp him by finding the maximum possible score at the end of the game. (The score is 0 at the beginning of the game.)\n-----Constraints-----\n - 2 \\leq N \\leq 5000\n - 1 \\leq K \\leq 10^9\n - 1 \\leq P_i \\leq N\n - P_i \\neq i\n - P_1, P_2, \\cdots, P_N are all different.\n - -10^9 \\leq C_i \\leq 10^9\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\nP_1 P_2 \\cdots P_N\nC_1 C_2 \\cdots C_N\n-----Output-----\nPrint the maximum possible score at the end of the game.\n-----Sample Input-----\n5 2\n2 4 5 1 3\n3 4 -10 -8 8\n-----Sample Output-----\n8\nWhen we start at some square of our choice and make at most two moves, we have the following options:\n - If we start at Square 1, making one move sends the piece to Square 2, after which the score is 4. Making another move sends the piece to Square 4, after which the score is 4 + (-8) = -4.\n - If we start at Square 2, making one move sends the piece to Square 4, after which the score is -8. Making another move sends the piece to Square 1, after which the score is -8 + 3 = -5.\n - If we start at Square 3, making one move sends the piece to Square 5, after which the score is 8. Making another move sends the piece to Square 3, after which the score is 8 + (-10) = -2.\n - If we start at Square 4, making one move sends the piece to Square 1, after which the score is 3. Making another move sends the piece to Square 2, after which the score is 3 + 4 = 7.\n - If we start at Square 5, making one move sends the piece to Square 3, after which the score is -10. Making another move sends the piece to Square 5, after which the score is -10 + 8 = -2.\nThe maximum score achieved is 8.\n\ndef",
        "answer": "def takahashi(n, k, p, c):\n    dp = [[0 for _ in range(n)] for _ in range(k+1)]\n    for i in range(n):\n        dp[1][i] = c[i]\n    for i in range(1, k+1):\n        for j in range(n):\n            dp[i][j] = max(dp[i][j], dp[i-1][p[j]] + c[j])\n    return dp[k][0]",
        "difficulty": "interview"
    },
    {
        "task_id": 580,
        "prompt": "Complete the Python function given the prompt below:Berland has n cities, the capital is located in city s, and the historic home town of the President is in city t (s \u2260 t). The cities are connected by one-way roads, the travel time for each of the road is a positive integer.\nOnce a year the President visited his historic home town t, for which his motorcade passes along some path from s to t (he always returns on a personal plane). Since the president is a very busy man, he always chooses the path from s to t, along which he will travel the fastest.\nThe ministry of Roads and Railways wants to learn for each of the road: whether the President will definitely pass through it during his travels, and if not, whether it is possible to repair it so that it would definitely be included in the shortest path from the capital to the historic home town of the President. Obviously, the road can not be repaired so that the travel time on it was less than one. The ministry of Berland, like any other, is interested in maintaining the budget, so it wants to know the minimum cost of repairing the road. Also, it is very fond of accuracy, so it repairs the roads so that the travel time on them is always a positive integer.\n-----Input-----\nThe first lines contain four integers n, m, s and t (2 \u2264 n \u2264 10^5;\u00a01 \u2264 m \u2264 10^5;\u00a01 \u2264 s, t \u2264 n) \u2014 the number of cities and roads in Berland, the numbers of the capital and of the Presidents' home town (s \u2260 t).\nNext m lines contain the roads. Each road is given as a group of three integers a_{i}, b_{i}, l_{i} (1 \u2264 a_{i}, b_{i} \u2264 n;\u00a0a_{i} \u2260 b_{i};\u00a01 \u2264 l_{i} \u2264 10^6) \u2014 the cities that are connected by the i-th road and the time needed to ride along it. The road is directed from city a_{i} to city b_{i}.\nThe cities are numbered from 1 to n. Each pair of cities can have multiple roads between them. It is guaranteed that there is a path from s to t along the roads.\n-----Output-----\nPrint m lines. The i-th line should contain information about the i-th road (the roads are numbered in the order of appearance in the input).\nIf the president will definitely ride along it during his travels, the line must contain a single word \"YES\" (without the quotes).\nOtherwise, if the i-th road can be repaired so that the travel time on it remains positive and then president will definitely ride along it, print space-separated word \"CAN\" (without the quotes), and the minimum cost of repairing.\nIf we can't make the road be such that president will definitely ride along it, print \"NO\" (without the quotes).\n-----Examples-----\nInput\n6 7 1 6\n1 2 2\n1 3 10\n2 3 7\n2 4 8\n3 5 3\n4 5 2\n5 6 1\nOutput\nYES\nCAN 2\nCAN 1\nCAN 1\nCAN 1\nCAN 1\nYES\nInput\n3 3 1 3\n1 2 10\n2 3 10\n1 3 100\nOutput\nYES\nYES\nCAN 81\nInput\n2 2 1 2\n1 2 1\n1 2 2\nOutput\nYES\nNO\n-----Note-----\nThe cost of repairing the road is the difference between the time needed to ride along it before and after the repairing.\nIn the first sample president initially may choose one of the two following ways for a ride: 1 \u2192 2 \u2192 4 \u2192 5 \u2192 6 or 1 \u2192 2 \u2192 3 \u2192 5 \u2192 6.\n\ndef",
        "answer": "def roadsAndLibraries(n, c_lib, c_road, cities):\n    if c_lib < c_road:\n        return c_lib * n\n    roads = [[] for _ in range(n)]\n    for i, j, k in cities:\n        roads[i - 1].append((j - 1, k))\n        roads[j - 1].append((i - 1, k))\n    visited = [False] * n\n    cost = 0\n    for i in range(n):\n        if not visited[i]:\n            cost += c_lib\n            visited[i] = True\n            q = [(i, 0)]\n            while q:\n                node, d = q.pop(0)\n                for nei, k in roads[node]:\n                    if not visited[nei]:\n                        cost += d + k\n                        visited[nei] = True\n                        q.append((nei, d + k))\n    return cost",
        "difficulty": "interview"
    },
    {
        "task_id": 581,
        "prompt": "Complete the Python function given the prompt below:You are given an unweighted tree with n vertices. Then n - 1 following operations are applied to the tree. A single operation consists of the following steps:   choose two leaves;  add the length of the simple path between them to the answer;  remove one of the chosen leaves from the tree. \nInitial answer (before applying operations) is 0. Obviously after n - 1 such operations the tree will consist of a single vertex. \nCalculate the maximal possible answer you can achieve, and construct a sequence of operations that allows you to achieve this answer!\n-----Input-----\nThe first line contains one integer number n (2 \u2264 n \u2264 2\u00b710^5) \u2014 the number of vertices in the tree. \nNext n - 1 lines describe the edges of the tree in form a_{i}, b_{i} (1 \u2264 a_{i}, b_{i} \u2264 n, a_{i} \u2260 b_{i}). It is guaranteed that given graph is a tree.\n-----Output-----\nIn the first line print one integer number \u2014 maximal possible answer. \nIn the next n - 1 lines print the operations in order of their applying in format a_{i}, b_{i}, c_{i}, where a_{i}, b_{i} \u2014 pair of the leaves that are chosen in the current operation (1 \u2264 a_{i}, b_{i} \u2264 n), c_{i} (1 \u2264 c_{i} \u2264 n, c_{i} = a_{i} or c_{i} = b_{i}) \u2014 choosen leaf that is removed from the tree in the current operation. \nSee the examples for better understanding.\n-----Examples-----\nInput\n3\n1 2\n1 3\nOutput\n3\n2 3 3\n2 1 1\nInput\n5\n1 2\n1 3\n2 4\n2 5\nOutput\n9\n3 5 5\n4 3 3\n4 1 1\n4 2 2\n\ndef",
        "answer": "def dfs(graph, start, visited=None):\n    if visited is None:\n        visited = set()\n    visited.add(start)\n    for next in graph[start] - visited:\n        dfs(graph, next, visited)\n    return visited",
        "difficulty": "interview"
    },
    {
        "task_id": 582,
        "prompt": "Complete the Python function given the prompt below:VK news recommendation system daily selects interesting publications of one of $n$ disjoint categories for each user. Each publication belongs to exactly one category. For each category $i$ batch algorithm selects $a_i$ publications.\nThe latest A/B test suggests that users are reading recommended publications more actively if each category has a different number of publications within daily recommendations. The targeted algorithm can find a single interesting publication of $i$-th category within $t_i$ seconds. \nWhat is the minimum total time necessary to add publications to the result of batch algorithm execution, so all categories have a different number of publications? You can't remove publications recommended by the batch algorithm.\n-----Input-----\nThe first line of input consists of single integer $n$\u00a0\u2014 the number of news categories ($1 \\le n \\le 200\\,000$).\nThe second line of input consists of $n$ integers $a_i$\u00a0\u2014 the number of publications of $i$-th category selected by the batch algorithm ($1 \\le a_i \\le 10^9$).\nThe third line of input consists of $n$ integers $t_i$\u00a0\u2014 time it takes for targeted algorithm to find one new publication of category $i$ ($1 \\le t_i \\le 10^5)$.\n-----Output-----\nPrint one integer\u00a0\u2014 the minimal required time for the targeted algorithm to get rid of categories with the same size.\n-----Examples-----\nInput\n5\n3 7 9 7 8\n5 2 5 7 5\nOutput\n6\nInput\n5\n1 2 3 4 5\n1 1 1 1 1\nOutput\n0\n-----Note-----\nIn the first example, it is possible to find three publications of the second type, which will take 6 seconds.\nIn the second example, all news categories contain a different number of publications.\n\ndef",
        "answer": "def solve(n, a, t):\n    return max(t) * n",
        "difficulty": "interview"
    },
    {
        "task_id": 583,
        "prompt": "Complete the Python function given the prompt below:This is an easier version of the problem. In this version, $n \\le 500$.\nVasya is an experienced developer of programming competitions' problems. As all great minds at some time, Vasya faced a creative crisis. To improve the situation, Petya gifted him a string consisting of opening and closing brackets only. Petya believes, that the beauty of the bracket string is a number of its cyclical shifts, which form a correct bracket sequence.\nTo digress from his problems, Vasya decided to select two positions of the string (not necessarily distinct) and swap characters located at this positions with each other. Vasya will apply this operation exactly once. He is curious what is the maximum possible beauty he can achieve this way. Please help him.\nWe remind that bracket sequence $s$ is called correct if:   $s$ is empty;  $s$ is equal to \"($t$)\", where $t$ is correct bracket sequence;  $s$ is equal to $t_1 t_2$, i.e. concatenation of $t_1$ and $t_2$, where $t_1$ and $t_2$ are correct bracket sequences. \nFor example, \"(()())\", \"()\" are correct, while \")(\" and \"())\" are not.\nThe cyclical shift of the string $s$ of length $n$ by $k$ ($0 \\leq k < n$) is a string formed by a concatenation of the last $k$ symbols of the string $s$ with the first $n - k$ symbols of string $s$. For example, the cyclical shift of string \"(())()\" by $2$ equals \"()(())\".\nCyclical shifts $i$ and $j$ are considered different, if $i \\ne j$.\n-----Input-----\nThe first line contains an integer $n$ ($1 \\le n \\le 500$), the length of the string.\nThe second line contains a string, consisting of exactly $n$ characters, where each of the characters is either \"(\" or \")\".\n-----Output-----\nThe first line should contain a single integer\u00a0\u2014 the largest beauty of the string, which can be achieved by swapping some two characters.\nThe second line should contain integers $l$ and $r$ ($1 \\leq l, r \\leq n$)\u00a0\u2014 the indices of two characters, which should be swapped in order to maximize the string's beauty.\nIn case there are several possible swaps, print any of them.\n-----Examples-----\nInput\n10\n()()())(()\nOutput\n5\n8 7\nInput\n12\n)(()(()())()\nOutput\n4\n5 10\nInput\n6\n)))(()\nOutput\n0\n1 1\n-----Note-----\nIn the first example, we can swap $7$-th and $8$-th character, obtaining a string \"()()()()()\". The cyclical shifts by $0, 2, 4, 6, 8$ of this string form a correct bracket sequence.\nIn the second example, after swapping $5$-th and $10$-th character, we obtain a string \")(())()()(()\". The cyclical shifts by $11, 7, 5, 3$ of this string form a correct bracket sequence.\nIn the third example, swap of any two brackets results in $0$ cyclical shifts being correct bracket sequences.\n\ndef",
        "answer": "def swap(s, i, j):\n    return s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:]",
        "difficulty": "interview"
    },
    {
        "task_id": 584,
        "prompt": "Complete the Python function given the prompt below:Modern text editors usually show some information regarding the document being edited. For example, the number of words, the number of pages, or the number of characters.\nIn this problem you should implement the similar functionality.\nYou are given a string which only consists of:  uppercase and lowercase English letters,  underscore symbols (they are used as separators),  parentheses (both opening and closing). \nIt is guaranteed that each opening parenthesis has a succeeding closing parenthesis. Similarly, each closing parentheses has a preceding opening parentheses matching it. For each pair of matching parentheses there are no other parenthesis between them. In other words, each parenthesis in the string belongs to a matching \"opening-closing\" pair, and such pairs can't be nested.\nFor example, the following string is valid: \"_Hello_Vasya(and_Petya)__bye_(and_OK)\".\nWord is a maximal sequence of consecutive letters, i.e. such sequence that the first character to the left and the first character to the right of it is an underscore, a parenthesis, or it just does not exist. For example, the string above consists of seven words: \"Hello\", \"Vasya\", \"and\", \"Petya\", \"bye\", \"and\" and \"OK\". Write a program that finds:  the length of the longest word outside the parentheses (print 0, if there is no word outside the parentheses),  the number of words inside the parentheses (print 0, if there is no word inside the parentheses). \n-----Input-----\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 255)\u00a0\u2014 the length of the given string. The second line contains the string consisting of only lowercase and uppercase English letters, parentheses and underscore symbols. \n-----Output-----\nPrint two space-separated integers:  the length of the longest word outside the parentheses (print 0, if there is no word outside the parentheses),  the number of words inside the parentheses (print 0, if there is no word inside the parentheses). \n-----Examples-----\nInput\n37\n_Hello_Vasya(and_Petya)__bye_(and_OK)\nOutput\n5 4\nInput\n37\n_a_(_b___c)__de_f(g_)__h__i(j_k_l)m__\nOutput\n2 6\nInput\n27\n(LoooonG)__shOrt__(LoooonG)\nOutput\n5 2\nInput\n5\n(___)\nOutput\n0 0\n-----Note-----\nIn the first sample, the words \"Hello\", \"Vasya\" and \"bye\" are outside any of the parentheses, and the words \"and\", \"Petya\", \"and\" and \"OK\" are inside. Note, that the word \"and\" is given twice and you should count it twice in the answer.\n\ndef",
        "answer": "def count_words(s):\n    words = s.split()\n    max_len = 0\n    for word in words:\n        if word.count('(') == word.count(')'):\n            max_len = max(max_len, len(word))\n    return max_len, len(words)",
        "difficulty": "interview"
    },
    {
        "task_id": 585,
        "prompt": "Complete the Python function given the prompt below:You are given two arrays $a_1, a_2, \\dots, a_n$ and $b_1, b_2, \\dots, b_m$. Array $b$ is sorted in ascending order ($b_i < b_{i + 1}$ for each $i$ from $1$ to $m - 1$).\nYou have to divide the array $a$ into $m$ consecutive subarrays so that, for each $i$ from $1$ to $m$, the minimum on the $i$-th subarray is equal to $b_i$. Note that each element belongs to exactly one subarray, and they are formed in such a way: the first several elements of $a$ compose the first subarray, the next several elements of $a$ compose the second subarray, and so on.\nFor example, if $a = [12, 10, 20, 20, 25, 30]$ and $b = [10, 20, 30]$ then there are two good partitions of array $a$:   $[12, 10, 20], [20, 25], [30]$;  $[12, 10], [20, 20, 25], [30]$. \nYou have to calculate the number of ways to divide the array $a$. Since the number can be pretty large print it modulo 998244353.\n-----Input-----\nThe first line contains two integers $n$ and $m$ ($1 \\le n, m \\le 2 \\cdot 10^5$)\u00a0\u2014 the length of arrays $a$ and $b$ respectively.\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$)\u00a0\u2014 the array $a$.\nThe third line contains $m$ integers $b_1, b_2, \\dots, b_m$ ($1 \\le b_i \\le 10^9; b_i < b_{i+1}$)\u00a0\u2014 the array $b$.\n-----Output-----\nIn only line print one integer \u2014 the number of ways to divide the array $a$ modulo 998244353.\n-----Examples-----\nInput\n6 3\n12 10 20 20 25 30\n10 20 30\nOutput\n2\nInput\n4 2\n1 3 3 7\n3 7\nOutput\n0\nInput\n8 2\n1 2 2 2 2 2 2 2\n1 2\nOutput\n7\n\ndef",
        "answer": "def partition(a, b):\n    n = len(a)\n    m = len(b)\n    dp = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if a[i - 1] <= b[j - 1]:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][m] % 998244353",
        "difficulty": "interview"
    },
    {
        "task_id": 586,
        "prompt": "Complete the Python function given the prompt below:You are given a square board, consisting of $n$ rows and $n$ columns. Each tile in it should be colored either white or black.\nLet's call some coloring beautiful if each pair of adjacent rows are either the same or different in every position. The same condition should be held for the columns as well.\nLet's call some coloring suitable if it is beautiful and there is no rectangle of the single color, consisting of at least $k$ tiles.\nYour task is to count the number of suitable colorings of the board of the given size.\nSince the answer can be very large, print it modulo $998244353$.\n-----Input-----\nA single line contains two integers $n$ and $k$ ($1 \\le n \\le 500$, $1 \\le k \\le n^2$) \u2014 the number of rows and columns of the board and the maximum number of tiles inside the rectangle of the single color, respectively.\n-----Output-----\nPrint a single integer \u2014 the number of suitable colorings of the board of the given size modulo $998244353$.\n-----Examples-----\nInput\n1 1\nOutput\n0\nInput\n2 3\nOutput\n6\nInput\n49 1808\nOutput\n359087121\n-----Note-----\nBoard of size $1 \\times 1$ is either a single black tile or a single white tile. Both of them include a rectangle of a single color, consisting of $1$ tile.\nHere are the beautiful colorings of a board of size $2 \\times 2$ that don't include rectangles of a single color, consisting of at least $3$ tiles: [Image] \nThe rest of beautiful colorings of a board of size $2 \\times 2$ are the following: [Image]\n\ndef",
        "answer": "def count_colorings(n, k):\n    if n == 1:\n        return 1\n    if n == 2:\n        return k\n    return count_colorings(n - 1, k) + count_colorings(n - 1, k - 1)",
        "difficulty": "interview"
    },
    {
        "task_id": 587,
        "prompt": "Complete the Python function given the prompt below:There are N pieces of sushi. Each piece has two parameters: \"kind of topping\" t_i and \"deliciousness\" d_i.\nYou are choosing K among these N pieces to eat.\nYour \"satisfaction\" here will be calculated as follows:\n - The satisfaction is the sum of the \"base total deliciousness\" and the \"variety bonus\".\n - The base total deliciousness is the sum of the deliciousness of the pieces you eat.\n - The variety bonus is x*x, where x is the number of different kinds of toppings of the pieces you eat.\nYou want to have as much satisfaction as possible.\nFind this maximum satisfaction.\n-----Constraints-----\n - 1 \\leq K \\leq N  \\leq 10^5\n - 1 \\leq t_i \\leq N\n - 1 \\leq d_i \\leq 10^9\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\nt_1 d_1\nt_2 d_2\n.\n.\n.\nt_N d_N\n-----Output-----\nPrint the maximum satisfaction that you can obtain.\n-----Sample Input-----\n5 3\n1 9\n1 7\n2 6\n2 5\n3 1\n-----Sample Output-----\n26\nIf you eat Sushi 1,2 and 3:\n - The base total deliciousness is 9+7+6=22.\n - The variety bonus is 2*2=4.\nThus, your satisfaction will be 26, which is optimal.\n\ndef",
        "answer": "def max_satisfaction(t, d, k):\n    t.sort(reverse=True)\n    d.sort(reverse=True)\n    s = 0\n    for i in range(k):\n        s += t[i] + d[i] * d[i]\n    return s",
        "difficulty": "interview"
    },
    {
        "task_id": 588,
        "prompt": "Complete the Python function given the prompt below:E869120 is initially standing at the origin (0, 0) in a two-dimensional plane.\nHe has N engines, which can be used as follows:\n - When E869120 uses the i-th engine, his X- and Y-coordinate change by x_i and y_i, respectively. In other words, if E869120 uses the i-th engine from coordinates (X, Y), he will move to the coordinates (X + x_i, Y + y_i).\n - E869120 can use these engines in any order, but each engine can be used at most once. He may also choose not to use some of the engines.\nHe wants to go as far as possible from the origin.\nLet (X, Y) be his final coordinates. Find the maximum possible value of \\sqrt{X^2 + Y^2}, the distance from the origin.\n-----Constraints-----\n - 1 \\leq N \\leq 100\n - -1 \\ 000 \\ 000 \\leq x_i \\leq 1 \\ 000 \\ 000\n - -1 \\ 000 \\ 000 \\leq y_i \\leq 1 \\ 000 \\ 000\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nx_1 y_1\nx_2 y_2\n : :\nx_N y_N\n-----Output-----\nPrint the maximum possible final distance from the origin, as a real value.\nYour output is considered correct when the relative or absolute error from the true answer is at most 10^{-10}.\n-----Sample Input-----\n3\n0 10\n5 -5\n-5 -5\n-----Sample Output-----\n10.000000000000000000000000000000000000000000000000\nThe final distance from the origin can be 10 if we use the engines in one of the following three ways:\n - Use Engine 1 to move to (0, 10).\n - Use Engine 2 to move to (5, -5), and then use Engine 3 to move to (0, -10).\n - Use Engine 3 to move to (-5, -5), and then use Engine 2 to move to (0, -10).\nThe distance cannot be greater than 10, so the maximum possible distance is 10.\n\ndef",
        "answer": "def distance(x, y):\n    return (x**2 + y**2)**0.5",
        "difficulty": "interview"
    },
    {
        "task_id": 589,
        "prompt": "Complete the Python function given the prompt below:Special Agent Smart Beaver works in a secret research department of ABBYY. He's been working there for a long time and is satisfied with his job, as it allows him to eat out in the best restaurants and order the most expensive and exotic wood types there. \nThe content special agent has got an important task: to get the latest research by British scientists on the English Language. These developments are encoded and stored in a large safe. The Beaver's teeth are strong enough, so the authorities assured that upon arriving at the place the beaver won't have any problems with opening the safe.\nAnd he finishes his aspen sprig and leaves for this important task. Of course, the Beaver arrived at the location without any problems, but alas. He can't open the safe with his strong and big teeth. At this point, the Smart Beaver get a call from the headquarters and learns that opening the safe with the teeth is not necessary, as a reliable source has sent the following information: the safe code consists of digits and has no leading zeroes. There also is a special hint, which can be used to open the safe. The hint is string s with the following structure:\n  if s_{i} = \"?\", then the digit that goes i-th in the safe code can be anything (between 0 to 9, inclusively);  if s_{i} is a digit (between 0 to 9, inclusively), then it means that there is digit s_{i} on position i in code;  if the string contains letters from \"A\" to \"J\", then all positions with the same letters must contain the same digits and the positions with distinct letters must contain distinct digits.  The length of the safe code coincides with the length of the hint. \nFor example, hint \"?JGJ9\" has such matching safe code variants: \"51919\", \"55959\", \"12329\", \"93539\" and so on, and has wrong variants such as: \"56669\", \"00111\", \"03539\" and \"13666\".\nAfter receiving such information, the authorities change the plan and ask the special agents to work quietly and gently and not to try to open the safe by mechanical means, and try to find the password using the given hint.\nAt a special agent school the Smart Beaver was the fastest in his platoon finding codes for such safes, but now he is not in that shape: the years take their toll... Help him to determine the number of possible variants of the code to the safe, matching the given hint. After receiving this information, and knowing his own speed of entering codes, the Smart Beaver will be able to determine whether he will have time for tonight's show \"Beavers are on the trail\" on his favorite TV channel, or he should work for a sleepless night...\n-----Input-----\nThe first line contains string s \u2014 the hint to the safe code. String s consists of the following characters:?, 0-9, A-J. It is guaranteed that the first character of string s doesn't equal to character 0.\nThe input limits for scoring 30 points are (subproblem A1):   1 \u2264 |s| \u2264 5. \nThe input limits for scoring 100 points are (subproblems A1+A2):   1 \u2264 |s| \u2264 10^5. \nHere |s| means the length of string s.\n-----Output-----\nPrint the number of codes that match the given hint.\n-----Examples-----\nInput\nAJ\nOutput\n81\nInput\n1?AA\nOutput\n100\n\ndef",
        "answer": "def count_variants(s):\n    variants = []\n    for i in range(len(s)):\n        if s[i] == '?':\n            for j in range(10):\n                variants.append(s[:i] + str(j) + s[i+1:])\n        else:\n            variants.append(s[:i] + s[i] + s[i+1:])\n    return len(variants)",
        "difficulty": "interview"
    },
    {
        "task_id": 590,
        "prompt": "Complete the Python function given the prompt below:Ivan has an array consisting of n elements. Each of the elements is an integer from 1 to n.\nRecently Ivan learned about permutations and their lexicographical order. Now he wants to change (replace) minimum number of elements in his array in such a way that his array becomes a permutation (i.e. each of the integers from 1 to n was encountered in his array exactly once). If there are multiple ways to do it he wants to find the lexicographically minimal permutation among them.\nThus minimizing the number of changes has the first priority, lexicographical minimizing has the second priority.\nIn order to determine which of the two permutations is lexicographically smaller, we compare their first elements. If they are equal \u2014 compare the second, and so on. If we have two permutations x and y, then x is lexicographically smaller if x_{i} < y_{i}, where i is the first index in which the permutations x and y differ.\nDetermine the array Ivan will obtain after performing all the changes.\n-----Input-----\nThe first line contains an single integer n (2 \u2264 n \u2264 200 000) \u2014 the number of elements in Ivan's array.\nThe second line contains a sequence of integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 n) \u2014 the description of Ivan's array.\n-----Output-----\nIn the first line print q \u2014 the minimum number of elements that need to be changed in Ivan's array in order to make his array a permutation. In the second line, print the lexicographically minimal permutation which can be obtained from array with q changes.\n-----Examples-----\nInput\n4\n3 2 2 3\nOutput\n2\n1 2 4 3 \nInput\n6\n4 5 6 3 2 1\nOutput\n0\n4 5 6 3 2 1 \nInput\n10\n6 8 4 6 7 1 6 3 4 5\nOutput\n3\n2 8 4 6 7 1 9 3 10 5 \n-----Note-----\nIn the first example Ivan needs to replace number three in position 1 with number one, and number two in position 3 with number four. Then he will get a permutation [1, 2, 4, 3] with only two changed numbers \u2014 this permutation is lexicographically minimal among all suitable. \nIn the second example Ivan does not need to change anything because his array already is a permutation.\n\ndef",
        "answer": "def permutation(n, arr):\n    count = 0\n    for i in range(n):\n        if arr[i]!= i+1:\n            count += 1\n            for j in range(i, n):\n                if arr[j] == i+1:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    break\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 591,
        "prompt": "Complete the Python function given the prompt below:Vasya is going to the Olympics in the city Ntown by train. The boy wants to read the textbook to prepare for the Olympics. He counted that he needed k hours for this. He also found that the light in the train changes every hour. The light is measured on a scale from 0 to 100, where 0 is very dark, and 100 is very light.\nVasya has a train lighting schedule for all n hours of the trip \u2014 n numbers from 0 to 100 each (the light level in the first hour, the second hour and so on). During each of those hours he will either read the whole time, or not read at all. He wants to choose k hours to read a book, not necessarily consecutive, so that the minimum level of light among the selected hours were maximum. Vasya is very excited before the upcoming contest, help him choose reading hours.\n-----Input-----\nThe first input line contains two integers n and k (1 \u2264 n \u2264 1000, 1 \u2264 k \u2264 n) \u2014 the number of hours on the train and the number of hours to read, correspondingly. The second line contains n space-separated integers a_{i} (0 \u2264 a_{i} \u2264 100), a_{i} is the light level at the i-th hour.\n-----Output-----\nIn the first output line print the minimum light level Vasya will read at. In the second line print k distinct space-separated integers b_1, b_2,..., b_{k}, \u2014 the indexes of hours Vasya will read at (1 \u2264 b_{i} \u2264 n). The hours are indexed starting from 1. If there are multiple optimal solutions, print any of them. Print the numbers b_{i} in an arbitrary order.\n-----Examples-----\nInput\n5 3\n20 10 30 40 10\nOutput\n20\n1 3 4 \nInput\n6 5\n90 20 35 40 60 100\nOutput\n35\n1 3 4 5 6 \n-----Note-----\nIn the first sample Vasya should read at the first hour (light 20), third hour (light 30) and at the fourth hour (light 40). The minimum light Vasya will have to read at is 20.\n\ndef",
        "answer": "def light(l, k):\n    l.sort()\n    l = l[:k]\n    return max(l)",
        "difficulty": "interview"
    },
    {
        "task_id": 592,
        "prompt": "Complete the Python function given the prompt below:You are given a positive integer $n$ greater or equal to $2$. For every pair of integers $a$ and $b$ ($2 \\le |a|, |b| \\le n$), you can transform $a$ into $b$ if and only if there exists an integer $x$ such that $1 < |x|$ and ($a \\cdot x = b$ or $b \\cdot x = a$), where $|x|$ denotes the absolute value of $x$.\nAfter such a transformation, your score increases by $|x|$ points and you are not allowed to transform $a$ into $b$ nor $b$ into $a$ anymore.\nInitially, you have a score of $0$. You can start at any integer and transform it as many times as you like. What is the maximum score you can achieve?\n-----Input-----\nA single line contains a single integer $n$ ($2 \\le n \\le 100\\,000$)\u00a0\u2014 the given integer described above.\n-----Output-----\nPrint an only integer\u00a0\u2014 the maximum score that can be achieved with the transformations. If it is not possible to perform even a single transformation for all possible starting integers, print $0$.\n-----Examples-----\nInput\n4\nOutput\n8\nInput\n6\nOutput\n28\nInput\n2\nOutput\n0\n-----Note-----\nIn the first example, the transformations are $2 \\rightarrow 4 \\rightarrow (-2) \\rightarrow (-4) \\rightarrow 2$.\nIn the third example, it is impossible to perform even a single transformation.\n\ndef",
        "answer": "def max_score(n):\n    if n == 2:\n        return 0\n    if n == 3:\n        return 1\n    if n == 4:\n        return 2\n    if n == 5:\n        return 3\n    if n == 6:\n        return 4\n    if n == 7:\n        return 5\n    if n == 8:\n        return 6\n    if n == 9:\n        return 7\n    if n == 10:\n        return 8\n    if n == 11:\n        return 9\n    if n == 12:\n        return 10\n    if n == 13:\n        return 11\n    if n == 14:\n        return 12\n    if n == 15:\n        return 13\n    if n == 16:\n        return 14\n    if n == 17:\n        return 15\n    if n == 18:\n        return 16\n    if n == 19:\n        return 17\n    if n == 20:\n        return 18\n    if n == 21:\n        return 19\n    if n == 22:\n        return 20\n    if n == 23:\n        return 21\n    if n == 24:\n        return 22\n    if n == 25:\n        return 23\n    if n == 26:\n        return 24\n    if n == 27:\n        return 25\n    if n == 28:\n        return 26\n    if n == 29:\n        return 27\n    if n == 30:\n        return 28\n    if n == 31:\n        return 29\n    if n == 32:\n        return 30\n    if n == 33:\n        return 31\n    if n == 34:\n        return 32\n    if n == 35:\n        return 33\n    if n == 36:\n        return 34\n    if n == 37:\n        return 35\n    if n == 38:\n        return 36\n    if n == 39:\n        return 37\n    if n == 40:\n        return 38\n    if n == 41:\n        return 39\n    if n == 42:\n        return 40\n    if n == 43:\n        return 41\n    if n == 44:\n        return 42\n    if n == 45:\n        return 43\n    if n == 46:\n        return",
        "difficulty": "interview"
    },
    {
        "task_id": 593,
        "prompt": "Complete the Python function given the prompt below:The country of Byalechinsk is running elections involving n candidates. The country consists of m cities. We know how many people in each city voted for each candidate.\nThe electoral system in the country is pretty unusual. At the first stage of elections the votes are counted for each city: it is assumed that in each city won the candidate who got the highest number of votes in this city, and if several candidates got the maximum number of votes, then the winner is the one with a smaller index.\nAt the second stage of elections the winner is determined by the same principle over the cities: the winner of the elections is the candidate who won in the maximum number of cities, and among those who got the maximum number of cities the winner is the one with a smaller index.\nDetermine who will win the elections.\n-----Input-----\nThe first line of the input contains two integers n, m (1 \u2264 n, m \u2264 100) \u2014 the number of candidates and of cities, respectively.\nEach of the next m lines contains n non-negative integers, the j-th number in the i-th line a_{ij} (1 \u2264 j \u2264 n, 1 \u2264 i \u2264 m, 0 \u2264 a_{ij} \u2264 10^9) denotes the number of votes for candidate j in city i.\nIt is guaranteed that the total number of people in all the cities does not exceed 10^9.\n-----Output-----\nPrint a single number \u2014 the index of the candidate who won the elections. The candidates are indexed starting from one.\n-----Examples-----\nInput\n3 3\n1 2 3\n2 3 1\n1 2 1\nOutput\n2\nInput\n3 4\n10 10 3\n5 1 6\n2 2 2\n1 5 7\nOutput\n1\n-----Note-----\nNote to the first sample test. At the first stage city 1 chosen candidate 3, city 2 chosen candidate 2, city 3 chosen candidate 2. The winner is candidate 2, he gained 2 votes.\nNote to the second sample test. At the first stage in city 1 candidates 1 and 2 got the same maximum number of votes, but candidate 1 has a smaller index, so the city chose candidate 1. City 2 chosen candidate 3. City 3 chosen candidate 1, due to the fact that everyone has the same number of votes, and 1 has the smallest index. City 4 chosen the candidate 3. On the second stage the same number of cities chose candidates 1 and 3. The winner is candidate 1, the one with the smaller index.\n\ndef",
        "answer": "def elections(n, m, a):\n    a.sort(reverse=True)\n    c = [0] * n\n    for i in range(m):\n        for j in range(n):\n            if a[i] == a[j]:\n                c[j] += 1\n    for i in range(n):\n        if c[i] == max(c):\n            return i + 1",
        "difficulty": "interview"
    },
    {
        "task_id": 594,
        "prompt": "Complete the Python function given the prompt below:Valera wanted to prepare a Codesecrof round. He's already got one problem and he wants to set a time limit (TL) on it.\nValera has written n correct solutions. For each correct solution, he knows its running time (in seconds). Valera has also wrote m wrong solutions and for each wrong solution he knows its running time (in seconds).\nLet's suppose that Valera will set v seconds TL in the problem. Then we can say that a solution passes the system testing if its running time is at most v seconds. We can also say that a solution passes the system testing with some \"extra\" time if for its running time, a seconds, an inequality 2a \u2264 v holds.\nAs a result, Valera decided to set v seconds TL, that the following conditions are met:  v is a positive integer;  all correct solutions pass the system testing;  at least one correct solution passes the system testing with some \"extra\" time;  all wrong solutions do not pass the system testing;  value v is minimum among all TLs, for which points 1, 2, 3, 4 hold. \nHelp Valera and find the most suitable TL or else state that such TL doesn't exist.\n-----Input-----\nThe first line contains two integers n, m (1 \u2264 n, m \u2264 100). The second line contains n space-separated positive integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 100) \u2014 the running time of each of the n correct solutions in seconds. The third line contains m space-separated positive integers b_1, b_2,..., b_{m} (1 \u2264 b_{i} \u2264 100) \u2014 the running time of each of m wrong solutions in seconds. \n-----Output-----\nIf there is a valid TL value, print it. Otherwise, print -1.\n-----Examples-----\nInput\n3 6\n4 5 2\n8 9 6 10 7 11\nOutput\n5\nInput\n3 1\n3 4 5\n6\nOutput\n-1\n\ndef",
        "answer": "def find_tl(n, m, a, b):\n    a.sort()\n    b.sort()\n    tl = 0\n    for i in range(n):\n        if a[i] <= tl:\n            tl = a[i]\n        else:\n            break\n    for i in range(m):\n        if b[i] <= tl:\n            tl = b[i]\n        else:\n            break\n    if tl == 0:\n        return -1\n    return tl",
        "difficulty": "interview"
    },
    {
        "task_id": 595,
        "prompt": "Complete the Python function given the prompt below:The girl Taylor has a beautiful calendar for the year y. In the calendar all days are given with their days of week: Monday, Tuesday, Wednesday, Thursday, Friday, Saturday and Sunday.\nThe calendar is so beautiful that she wants to know what is the next year after y when the calendar will be exactly the same. Help Taylor to find that year.\nNote that leap years has 366 days. The year is leap if it is divisible by 400 or it is divisible by 4, but not by 100 (https://en.wikipedia.org/wiki/Leap_year).\n-----Input-----\nThe only line contains integer y (1000 \u2264 y < 100'000) \u2014 the year of the calendar.\n-----Output-----\nPrint the only integer y' \u2014 the next year after y when the calendar will be the same. Note that you should find the first year after y with the same calendar.\n-----Examples-----\nInput\n2016\nOutput\n2044\nInput\n2000\nOutput\n2028\nInput\n50501\nOutput\n50507\n-----Note-----\nToday is Monday, the 13th of June, 2016.\n\ndef",
        "answer": "def next_year(y):\n    if y % 400 == 0 or y % 4 == 0 and y % 100!= 0:\n        return y + 1\n    else:\n        return y",
        "difficulty": "interview"
    },
    {
        "task_id": 596,
        "prompt": "Complete the Python function given the prompt below:Calendars in widespread use today include the Gregorian calendar, which is the de facto international standard, and is used almost everywhere in the world for civil purposes. The Gregorian reform modified the Julian calendar's scheme of leap years as follows:\n Every year that is exactly divisible by four is a leap year, except for years that are exactly divisible by 100; the centurial years that are exactly divisible by 400 are still leap years. For example, the year 1900 is not a leap year; the year 2000 is a leap year.  [Image] \nIn this problem, you have been given two dates and your task is to calculate how many days are between them. Note, that leap years have unusual number of days in February.\nLook at the sample to understand what borders are included in the aswer.\n-----Input-----\nThe first two lines contain two dates, each date is in the format yyyy:mm:dd (1900 \u2264 yyyy \u2264 2038 and yyyy:mm:dd is a legal date).\n-----Output-----\nPrint a single integer \u2014 the answer to the problem.\n-----Examples-----\nInput\n1900:01:01\n2038:12:31\nOutput\n50768\nInput\n1996:03:09\n1991:11:12\nOutput\n1579\n\ndef",
        "answer": "def is_leap(year):\n    leap = False\n    if year % 4 == 0:\n        leap = True\n        if year % 100 == 0:\n            leap = False\n            if year % 400 == 0:\n                leap = True\n    return leap",
        "difficulty": "interview"
    },
    {
        "task_id": 597,
        "prompt": "Complete the Python function given the prompt below:Ari the monster is not an ordinary monster. She is the hidden identity of Super M, the Byteforces\u2019 superhero. Byteforces is a country that consists of n cities, connected by n - 1 bidirectional roads. Every road connects exactly two distinct cities, and the whole road system is designed in a way that one is able to go from any city to any other city using only the given roads. There are m cities being attacked by humans. So Ari... we meant Super M have to immediately go to each of the cities being attacked to scare those bad humans. Super M can pass from one city to another only using the given roads. Moreover, passing through one road takes her exactly one kron - the time unit used in Byteforces.  [Image] \nHowever, Super M is not on Byteforces now - she is attending a training camp located in a nearby country Codeforces. Fortunately, there is a special device in Codeforces that allows her to instantly teleport from Codeforces to any city of Byteforces. The way back is too long, so for the purpose of this problem teleportation is used exactly once.\nYou are to help Super M, by calculating the city in which she should teleport at the beginning in order to end her job in the minimum time (measured in krons). Also, provide her with this time so she can plan her way back to Codeforces.\n-----Input-----\nThe first line of the input contains two integers n and m (1 \u2264 m \u2264 n \u2264 123456) - the number of cities in Byteforces, and the number of cities being attacked respectively.\nThen follow n - 1 lines, describing the road system. Each line contains two city numbers u_{i} and v_{i} (1 \u2264 u_{i}, v_{i} \u2264 n) - the ends of the road i.\nThe last line contains m distinct integers - numbers of cities being attacked. These numbers are given in no particular order.\n-----Output-----\nFirst print the number of the city Super M should teleport to. If there are many possible optimal answers, print the one with the lowest city number.\nThen print the minimum possible time needed to scare all humans in cities being attacked, measured in Krons.\nNote that the correct answer is always unique.\n-----Examples-----\nInput\n7 2\n1 2\n1 3\n1 4\n3 5\n3 6\n3 7\n2 7\nOutput\n2\n3\nInput\n6 4\n1 2\n2 3\n2 4\n4 5\n4 6\n2 4 5 6\nOutput\n2\n4\n-----Note-----\nIn the first sample, there are two possibilities to finish the Super M's job in 3 krons. They are:\n$2 \\rightarrow 1 \\rightarrow 3 \\rightarrow 7$ and $7 \\rightarrow 3 \\rightarrow 1 \\rightarrow 2$.\nHowever, you should choose the first one as it starts in the city with the lower number.\n\ndef",
        "answer": "def find_city(graph, start, end):\n    queue = [[start]]\n    visited = set()\n    while queue:\n        path = queue.pop(0)\n        node = path[-1]\n        if node == end:\n            return path\n        elif node not in visited:\n            for neighbor in graph[node]:\n                new_path = list(path)\n                new_path.append(neighbor)\n                queue.append(new_path)\n            visited.add(node)",
        "difficulty": "interview"
    },
    {
        "task_id": 598,
        "prompt": "Complete the Python function given the prompt below:It's well known that the best way to distract from something is to do one's favourite thing. Job is such a thing for Leha.\nSo the hacker began to work hard in order to get rid of boredom. It means that Leha began to hack computers all over the world. For such zeal boss gave the hacker a vacation of exactly x days. You know the majority of people prefer to go somewhere for a vacation, so Leha immediately went to the travel agency. There he found out that n vouchers left. i-th voucher is characterized by three integers l_{i}, r_{i}, cost_{i} \u2014 day of departure from Vi\u010dkopolis, day of arriving back in Vi\u010dkopolis and cost of the voucher correspondingly. The duration of the i-th voucher is a value r_{i} - l_{i} + 1.\nAt the same time Leha wants to split his own vocation into two parts. Besides he wants to spend as little money as possible. Formally Leha wants to choose exactly two vouchers i and j (i \u2260 j) so that they don't intersect, sum of their durations is exactly x and their total cost is as minimal as possible. Two vouchers i and j don't intersect if only at least one of the following conditions is fulfilled: r_{i} < l_{j} or r_{j} < l_{i}.\nHelp Leha to choose the necessary vouchers!\n-----Input-----\nThe first line contains two integers n and x (2 \u2264 n, x \u2264 2\u00b710^5) \u2014 the number of vouchers in the travel agency and the duration of Leha's vacation correspondingly.\nEach of the next n lines contains three integers l_{i}, r_{i} and cost_{i} (1 \u2264 l_{i} \u2264 r_{i} \u2264 2\u00b710^5, 1 \u2264 cost_{i} \u2264 10^9) \u2014 description of the voucher.\n-----Output-----\nPrint a single integer \u2014 a minimal amount of money that Leha will spend, or print  - 1 if it's impossible to choose two disjoint vouchers with the total duration exactly x.\n-----Examples-----\nInput\n4 5\n1 3 4\n1 2 5\n5 6 1\n1 2 4\nOutput\n5\nInput\n3 2\n4 6 3\n2 4 1\n3 5 4\nOutput\n-1\n-----Note-----\nIn the first sample Leha should choose first and third vouchers. Hereupon the total duration will be equal to (3 - 1 + 1) + (6 - 5 + 1) = 5 and the total cost will be 4 + 1 = 5.\nIn the second sample the duration of each voucher is 3 therefore it's impossible to choose two vouchers with the total duration equal to 2.\n\ndef",
        "answer": "def best_vacation(n, x):\n    vacations = []\n    for i in range(n):\n        vacations.append(list(map(int, input().split())))\n    vacations.sort(key=lambda x: x[2])\n    vacations.sort(key=lambda x: x[0])\n    vacations.sort(key=lambda x: x[1])\n    vacations.sort(key=lambda x: x[0])\n    vacations.sort(key=lambda x: x[1])\n    vacations.sort(key=lambda x: x[0])\n    vacations.sort(key=lambda x: x[1])\n    vacations.sort(key=lambda x: x[0])\n    vacations.sort(key=lambda x: x[1])\n    vacations.sort(key=lambda x: x[0])\n    vacations.sort(key=lambda x: x[1])\n    vacations.sort(key=lambda x: x[0])\n    vacations.sort(key=lambda x: x[1])\n    vacations.sort(key=lambda x: x[0])\n    vacations.sort(key=lambda x: x[1])\n    vacations.sort(key=lambda x: x[0])\n    vacations.sort(key=lambda x: x[1])\n    vacations.sort(key=lambda x: x[0])\n    vacations.sort(key=lambda x: x[1])\n    vacations.sort(key=lambda x: x[0])\n    vacations.sort(key=lambda x: x[1])\n    vacations.sort(key=lambda x: x[0])\n    vacations.sort(key=lambda x: x[1])\n    vacations.sort(key=lambda x: x[0])\n    vacations.sort(key=lambda x: x[1])\n    vacations.sort(key=lambda x: x[0])\n    vacations.sort(key=lambda x:",
        "difficulty": "interview"
    },
    {
        "task_id": 599,
        "prompt": "Complete the Python function given the prompt below:Mr. Kitayuta has kindly given you a string s consisting of lowercase English letters. You are asked to insert exactly one lowercase English letter into s to make it a palindrome. A palindrome is a string that reads the same forward and backward. For example, \"noon\", \"testset\" and \"a\" are all palindromes, while \"test\" and \"kitayuta\" are not.\nYou can choose any lowercase English letter, and insert it to any position of s, possibly to the beginning or the end of s. You have to insert a letter even if the given string is already a palindrome.\nIf it is possible to insert one lowercase English letter into s so that the resulting string will be a palindrome, print the string after the insertion. Otherwise, print \"NA\" (without quotes, case-sensitive). In case there is more than one palindrome that can be obtained, you are allowed to print any of them.\n-----Input-----\nThe only line of the input contains a string s (1 \u2264 |s| \u2264 10). Each character in s is a lowercase English letter.\n-----Output-----\nIf it is possible to turn s into a palindrome by inserting one lowercase English letter, print the resulting string in a single line. Otherwise, print \"NA\" (without quotes, case-sensitive). In case there is more than one solution, any of them will be accepted. \n-----Examples-----\nInput\nrevive\nOutput\nreviver\nInput\nee\nOutput\neye\nInput\nkitayuta\nOutput\nNA\n-----Note-----\nFor the first sample, insert 'r' to the end of \"revive\" to obtain a palindrome \"reviver\".\nFor the second sample, there is more than one solution. For example, \"eve\" will also be accepted.\nFor the third sample, it is not possible to turn \"kitayuta\" into a palindrome by just inserting one letter.\n\ndef",
        "answer": "def is_palindrome(s):\n    return s == s[::-1]",
        "difficulty": "interview"
    }
]